{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"OctoPrint <p>OctoPrint provides a snappy web interface for controlling consumer 3D printers. It is Free Software and released under the GNU Affero General Public License V3.</p> <p>Its website can be found at octoprint.org.</p> <p>The community forum is available at community.octoprint.org. It also serves as central knowledge base.</p> <p>An invite to the Discord server can be found at discord.octoprint.org.</p> <p>The FAQ can be accessed by following faq.octoprint.org.</p> <p>The documentation is located at docs.octoprint.org.</p> <p>The official plugin repository can be reached at plugins.octoprint.org.</p> <p>OctoPrint's development wouldn't be possible without the financial support by its community. If you enjoy OctoPrint, please consider becoming a regular supporter!</p> <p></p> <p>Note</p> <p>This documentation currently focuses primarily on developers and less on end users. If you are interested in helping to change this, please get in touch on the forum!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions of all kinds are welcome, not only in the form of code but also with regards to the official documentation, debugging help in the bug tracker, support of other users on the community forum at community.octoprint.org or the official discord at discord.octoprint.org and also financially.</p> <p>If you think something is bad about OctoPrint or its documentation the way it is, please help in any way to make it better instead of just complaining about it -- this is an Open Source Project after all :)</p> <p>For information about how to go about submitting bug reports or pull requests, please see the project's Contribution Guidelines.</p>"},{"location":"#installation","title":"Installation","text":"<p>Installation instructions for installing from source for different operating systems can be found on the forum.</p> <p>If you want to run OctoPrint on a Raspberry Pi, you really should take a look at OctoPi which is a custom SD card image that includes OctoPrint plus dependencies.</p> <p>The generic steps that should basically be done regardless of operating system and runtime environment are the following (as regular user, please keep your hands off of the <code>sudo</code> command here!) - this assumes you already have Python 3.7+, pip and virtualenv and their dependencies set up on your system:</p> <ol> <li>Create a user-owned virtual environment therein: <code>virtualenv venv</code>. If you want to specify a specific python    to use instead of whatever version your system defaults to, you can also explicitly require that via the <code>--python</code>    parameter, e.g. <code>virtualenv --python=python3 venv</code>.</li> <li>Install OctoPrint into that virtual environment: <code>./venv/bin/pip install OctoPrint</code></li> </ol> <p>You may then start the OctoPrint server via <code>/path/to/OctoPrint/venv/bin/octoprint</code>, see Usage for details.</p> <p>After installation, please make sure you follow the first-run wizard and set up access control as necessary.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>OctoPrint depends on a few python modules to do its job. Those are automatically installed when installing OctoPrint via <code>pip</code>.</p> <p>OctoPrint currently supports Python 3.7, 3.8, 3.9 and 3.10.</p>"},{"location":"#usage","title":"Usage","text":"<p>Running the pip install via</p> <pre><code>pip install OctoPrint\n</code></pre> <p>installs the <code>octoprint</code> script in your Python installation's scripts folder (which, depending on whether you installed OctoPrint globally or into a virtual env, will be in your <code>PATH</code> or not). The following usage examples assume that the <code>octoprint</code> script is on your <code>PATH</code>.</p> <p>You can start the server via</p> <pre><code>octoprint serve\n</code></pre> <p>By default it binds to all interfaces on port 5000 (so pointing your browser to <code>http://127.0.0.1:5000</code> will do the trick). If you want to change that, use the additional command line parameters <code>host</code> and <code>port</code>, which accept the host ip to bind to and the numeric port number respectively. If for example you want the server to only listen on the local interface on port 8080, the command line would be</p> <pre><code>octoprint serve --host=127.0.0.1 --port=8080\n</code></pre> <p>Alternatively, the host and port on which to bind can be defined via the config file.</p> <p>If you want to run OctoPrint as a daemon (only supported on Linux), use</p> <pre><code>octoprint daemon {start|stop|restart} [--pid PIDFILE]\n</code></pre> <p>If you do not supply a custom pidfile location via <code>--pid PIDFILE</code>, it will be created at <code>/tmp/octoprint.pid</code>.</p> <p>You can also specify the config file or the base directory (for basing off the <code>uploads</code>, <code>timelapse</code> and <code>logs</code> folders), e.g.:</p> <pre><code>octoprint serve --config /path/to/another/config.yaml --basedir /path/to/my/basedir\n</code></pre> <p>To start OctoPrint in safe mode - which disables all third party plugins that do not come bundled with OctoPrint - use the <code>--safe</code> flag:</p> <pre><code>octoprint serve --safe\n</code></pre> <p>See <code>octoprint --help</code> for more information on the available command line parameters.</p> <p>OctoPrint also ships with a <code>run</code> script in its source directory. You can invoke it to start the server. It takes the same command line arguments as the <code>octoprint</code> script.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>If not specified via the command line, the config file <code>config.yaml</code> for OctoPrint is expected in the settings folder, which is located at <code>~/.octoprint</code> on Linux, at <code>%APPDATA%/OctoPrint</code> on Windows and at <code>~/Library/Application Support/OctoPrint</code> on MacOS.</p> <p>A comprehensive overview of all available configuration settings can be found in the docs. Please note that the most commonly used configuration settings can also easily be edited from OctoPrint's settings dialog.</p>"},{"location":"#special-thanks","title":"Special Thanks","text":"<p>Cross-browser testing services are kindly provided by BrowserStack.</p> <p>Profiling is done with the help of PyVmMonitor.</p> <p>Error tracking is powered and sponsored by Sentry.</p>"},{"location":"dev-guide/","title":"Core Development Guide","text":""},{"location":"plugin-guide/","title":"Plugin Development Guide","text":"<p>Todo</p> <p>Write an introduction to the plugin development guide</p>"},{"location":"plugin-guide/tutorial/","title":"Tutorial","text":"<p>Todo</p> <p>Migrate me</p>"},{"location":"plugin-guide/concepts/","title":"Plugin concepts","text":"<p>OctoPrint's plugins are Python Packages which in their top-level module define a bunch of control properties defining metadata (like name, version etc of the plugin) as well as information on how to initialize the plugin and into what parts of the system the plugin will actually plug in to perform its job.</p> <p>There are three types of ways a plugin might attach itself to the system, through so called mixin implementations, by attaching itself to specified hooks, by offering helper functionality to be used by other plugins or by providing settings overlays.</p> <p>Plugin mixin implementations will get a bunch of properties injected by OctoPrint's plugin subsystem to help them work.</p> <p>The plugin subsystem will also manage plugin's general lifecycle and register declared hook handlers and helpers.</p>"},{"location":"plugin-guide/concepts/control-properties/","title":"Control properties","text":"<p>As already mentioned in the introduction, plugins are Python packages which provide certain pieces of metadata to tell OctoPrint's plugin subsystem about themselves. These are simple package attributes defined in the top most package file, e.g.:</p> <pre><code>import octoprint.plugin\n# ...\n__plugin_name__ = \"My Plugin\"\n__plugin_pythoncompat__ = \"&gt;=3.7,&lt;4\"\ndef __plugin_load__():\n# whatever you need to do to load your plugin, if anything at all\npass\n</code></pre> <p>The following properties are recognized:</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-name","title":"<code>__plugin_name__</code>","text":"<p>Name of your plugin, optional, overrides the name specified in <code>setup.py</code> if provided. If neither this property nor a name from <code>setup.py</code> is available to the plugin subsystem, the plugin's identifier (= package name) will be used instead.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-version","title":"<code>__plugin_version__</code>","text":"<p>Version of your plugin, optional, overrides the version specified in <code>setup.py</code> if provided.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-description","title":"<code>__plugin_description__</code>","text":"<p>Description of your plugin, optional, overrides the description specified in <code>setup.py</code> if provided.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-author","title":"<code>__plugin_author__</code>","text":"<p>Author of your plugin, optional, overrides the author specified in <code>setup.py</code> if provided.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-url","title":"<code>__plugin_url__</code>","text":"<p>URL of the webpage of your plugin, e.g. the Github repository, optional, overrides the URL specified in <code>setup.py</code> if provided.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-license","title":"<code>__plugin_license__</code>","text":"<p>License of your plugin, optional, overrides the license specified in <code>setup.py</code> if provided.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-pythoncompat","title":"<code>__plugin_pythoncompat__</code>","text":"<p>Python compatibility string of your plugin, optional, defaults to <code>&gt;=2.7,&lt;3</code> if not set and thus Python 2 but no Python 3 compatibility. This is used as a precaution against issues with some of the Python 2 only plugins that are still out there, as OctoPrint will not even attempt to load plugins whose Python compatibility information doesn't match its current environment.</p> <p>If your plugin is compatible to Python 3 only, you should set this to <code>&gt;=3.7,&lt;4</code>.</p> <p>If your plugin is compatible to Python 2 and Python 3, you should set this to <code>&gt;=2.7,&lt;4</code>.</p> <pre><code>    __plugin_pythoncompat__ = \"&gt;=3.7,&lt;4\"\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-implementation","title":"<code>__plugin_implementation__</code>","text":"<p>Instance of an implementation of one or more plugin mixins. E.g.</p> <pre><code>    __plugin_implementation__ = MyPlugin()\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-hooks","title":"<code>__plugin_hooks__</code>","text":"<p>Handlers for one or more of the various plugin hooks. E.g.</p> <pre><code>def handle_gcode_sent(comm_instance, phase, cmd, cmd_type, gcode, *args, **kwargs):\nif gcode in (\"M106\", \"M107\"):\nimport logging\nlogging.getLogger(__name__).info(\"We just sent a fan command to the printer!\")\n__plugin_hooks__ = {\n\"octoprint.comm.protocol.gcode.sent\": handle_gcode_sent\n}\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-helpers","title":"<code>__plugin_helpers</code>","text":"<p>Helpers registered by this plugin and made available to other plugins. E.g.</p> <pre><code>def my_helper(*args, **kwargs):\nprint(\"Hello world!\")\nreturn 42\n__plugin_helpers__ = {\n\"my_helper\": my_helper\n}\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-check","title":"<code>__plugin_check__</code>","text":"<p>Method called upon discovery of the plugin by the plugin subsystem, should return <code>True</code> if the plugin can be instantiated later on, <code>False</code> if there are reasons why not, e.g. if dependencies are missing. An example:</p> <pre><code>def __plugin_check__():\n# Make sure we only run our plugin if some_dependency is available\ntry:\nimport some_dependency\nexcept ImportError:\nreturn False\nreturn True\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-load","title":"<code>__plugin_load__</code>","text":"<p>Method called upon loading of the plugin by the plugin subsystem, can be used to instantiate plugin implementations, connecting them to hooks etc. An example:</p> <pre><code>def __plugin_load__():\nglobal __plugin_implementation__\n__plugin_implementation__ = MyPlugin()\nglobal __plugin_hooks__\n__plugin_hooks__ = {\n\"octoprint.plugin.softwareupdate.check_config\": __plugin_implementation__.get_update_information\n}\n</code></pre>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-unload","title":"<code>__plugin_unload__</code>","text":"<p>Method called upon unloading of the plugin by the plugin subsystem, can be used to do any final clean ups.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-enable","title":"<code>__plugin_enable__</code>","text":"<p>Method called upon enabling of the plugin by the plugin subsystem. Also see <code>octoprint.plugin.core.Plugin.on_plugin_enabled</code>.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-disable","title":"<code>__plugin_disable__</code>","text":"<p>Method called upon disabling of the plugin by the plugin subsystem. Also see <code>octoprint.plugin.core.Plugin.on_plugin_disabled</code>.</p>"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-settings-overlay","title":"<code>__plugin_settings_overlay__</code>","text":"<p>An optional <code>dict</code> providing an overlay over the application's default settings. Plugins can use that to modify the default settings of OctoPrint and its plugins that apply when there's no different configuration present in <code>config.yaml</code>. Note that <code>config.yaml</code> has the final say - it is not possible to override what is in there through an overlay. Plugin authors should use this sparingly - it's supposed to be utilized when creating specific customization of the core application that necessitate changes in things like e.g. standard naming, UI ordering or API endpoints. Example:</p> <pre><code>__plugin_settings_overlay__ = dict(\napi=dict(\nenabled=False\n), \nserver=dict(\nhost=\"127.0.0.1\",\nport=5001\n)\n)\n</code></pre>"},{"location":"plugin-guide/concepts/helpers/","title":"Helpers","text":"<p>Helpers are methods that plugins can expose to other plugins in order to make common functionality available on the system. They are registered with the OctoPrint plugin system through the use of the control property <code>__plugin_helpers__</code>.</p> <p>An example for providing some helper functions to the system can be found in the bundled Discovery Plugin which provides its SSDP browsing  and Zeroconf browsing and publishing functions as helper methods.</p> src/octoprint/plugins/discovery/__init__.py<pre><code>def __plugin_load__():\nplugin = DiscoveryPlugin()\nglobal __plugin_implementation__\n__plugin_implementation__ = plugin\nglobal __plugin_helpers__\n__plugin_helpers__ = {\n\"ssdp_browse\": plugin.ssdp_browse,\n\"zeroconf_browse\": plugin.zeroconf_browse,\n\"zeroconf_register\": plugin.zeroconf_register,\n\"zeroconf_unregister\": plugin.zeroconf_unregister,\n}\n</code></pre> <p>An example of how to use helpers can be found in the (unmaintained) Growl Plugin. Using <code>octoprint.plugin.core.PluginManager.get_helpers</code> plugins can retrieve exported helper methods and call them as (hopefully) documented.</p> <pre><code>def on_after_startup(self):\nhost = self._settings.get([\"hostname\"])\nport = self._settings.getInt([\"port\"])\npassword = self._settings.get([\"password\"])\nhelpers = self._plugin_manager.get_helpers(\"discovery\", \"zeroconf_browse\")\nif helpers and \"zeroconf_browse\" in helpers:\nself.zeroconf_browse = helpers[\"zeroconf_browse\"]\nself.growl, _ = self._register_growl(host, port, password=password)\n# [...]\ndef on_api_get(self, request):\nif not self.zeroconf_browse:\nreturn flask.jsonify(dict(\nbrowsing_enabled=False\n))\nbrowse_results = self.zeroconf_browse(\"_gntp._tcp\", block=True)\ngrowl_instances = [dict(name=v[\"name\"], host=v[\"host\"], port=v[\"port\"]) for v in browse_results]\nreturn flask.jsonify(dict(\nbrowsing_enabled=True,\ngrowl_instances=growl_instances\n))\n</code></pre>"},{"location":"plugin-guide/concepts/hooks/","title":"Hooks","text":"<p>Todo</p> <p>Migrate me</p>"},{"location":"plugin-guide/concepts/lifecycle/","title":"Lifecycle","text":"<p>There are three sources of installed plugins that OctoPrint will check during start up:</p> <ul> <li>its own <code>octoprint/plugins</code> folder (this is where the bundled plugins reside),</li> <li>the <code>plugins</code> folder in its configuration directory (e.g. <code>~/.octoprint/plugins</code> on Linux),</li> <li>any Python packages registered for the entry point <code>octoprint.plugin</code>.</li> </ul> <p>Each plugin that OctoPrint finds it will first load, then enable. On enabling a plugin, OctoPrint will register its declared hook handlers and helpers, apply any settings overlays, inject the required properties into its declared mixin implementation and register those as well.</p> <p>On disabling a plugin, its hook handlers, helpers, mixin implementations and settings  overlays will be de-registered again.</p> <p>When a plugin gets enabled, OctoPrint will also call the  <code>on_plugin_enabled</code> callback on its  implementation (if it exists). Likewise, when a plugin gets disabled OctoPrint will call  the  <code>on_plugin_disabled</code> callback on its implementation (again, if it exists).</p> <p>Some plugin types require a reload of the frontend or a restart of OctoPrint for  enabling/disabling them. You can recognize such plugins by their implementations  implementing octoprint.plugin.types.ReloadNeedingPlugin or octoprint.plugin.types.RestartNeedingPlugin, or providing handlers for one of the  hooks marked correspondingly. For these plugins, disabling them will not trigger the  respective callback at runtime as they will not actually be disabled right away but only  marked as such so that they won't even load during the required restart.</p> <p>Note that uninstalling a plugin through the bundled Plugin Manager will make a plugin first get disabled and then unloaded, but only if it doesn't require a restart. Plugins wishing to react to an uninstall through the Plugin Manager may implement <code>on_plugin_pending_uninstall</code> (added in OctoPrint 1.8.0) which will always be called by the Plugin Manager, regardless of whether the plugin requires a restart of OctoPrint to be fully uninstalled or not. Please be aware that the Plugin Manager is not the only way to uninstall a plugin from the system, a user may also uninstall it manually through the command line, circumventing Plugin Manager completely.</p> <p></p>"},{"location":"plugin-guide/concepts/mixins/","title":"Mixins","text":"<p>Plugin mixins are the heart of OctoPrint's plugin system. They are special base classes which are to be subclassed and extended to add functionality to OctoPrint. Plugins declare their instances that implement one or multiple mixins using the <code>__plugin_implementation__</code> control property. OctoPrint's plugin core collects those from the plugins and offers methods to access them based on the mixin type, which get used at multiple locations within OctoPrint.</p> <p>Using mixins always follows the pattern of retrieving the matching implementations from the plugin subsystem, then calling the specific mixin's methods as defined and necessary.</p> <p>The following snippet taken from OctoPrint's code for example shows how all <code>AssetPlugin</code> implementations are collected and then all assets they return via their <code>get_assets</code> methods are retrieved and merged into one big asset map (differing between javascripts and stylesheets of various types) for use during rendition of the UI.</p> <pre><code>asset_plugins = pluginManager.get_implementations(octoprint.plugin.AssetPlugin)\nfor name, implementation in asset_plugins.items():\nall_assets = implementation.get_assets()\nif \"js\" in all_assets:\nfor asset in all_assets[\"js\"]:\nassets[\"js\"].append(url_for('plugin_assets', name=name, filename=asset))\nif preferred_stylesheet in all_assets:\nfor asset in all_assets[preferred_stylesheet]:\nassets[\"stylesheets\"].append((preferred_stylesheet, url_for('plugin_assets', name=name, filename=asset)))\nelse:\nfor stylesheet in supported_stylesheets:\nif not stylesheet in all_assets:\ncontinue\nfor asset in all_assets[stylesheet]:\nassets[\"stylesheets\"].append((stylesheet, url_for('plugin_assets', name=name, filename=asset)))\nbreak\n</code></pre> <p>See also</p> The Plugin Tutorial Tutorial on how to write a simple OctoPrint module utilizing mixins for various types of extension."},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.execution-order","title":"Execution Order","text":"<p>Some mixin types, such as StartupPlugin,  ShutdownPlugin and UiPlugin,  support influencing the execution order for various execution contexts by also  implementing the SortablePlugin mixin.</p> <p>If a method is to be called on a plugin implementation for which a sorting context is defined (see the mixin documentation for information on this), OctoPrint's plugin subsystem will ensure that the order in which the implementation calls are done is as follows:</p> <ul> <li>Plugins with a return value that is not <code>None</code> for <code>get_sorting_key</code>     for the provided sorting context will be ordered among each other first. If the returned order number is equal for     two or more implementations, they will be sorted first by whether they come bundled with OctoPrint or not, then by     their identifier.</li> <li>After that follow plugins which returned <code>None</code> (the default). They are first sorted by whether they come bundled     with OctoPrint or not, then by their identifier.</li> </ul> <p>Example</p> <p>Consider four plugin implementations implementing the <code>StartupPlugin</code> mixin, called <code>plugin_a</code>, <code>plugin_b</code>, <code>plugin_c</code> and <code>plugin_d</code>, the latter coming bundled with OctoPrint. <code>plugin_a</code> and <code>plugin_d</code> don't override <code>get_sorting_key</code>. <code>plugin_b</code> and <code>plugin_c</code> both  return <code>1</code> for the sorting context <code>StartupPlugin.on_startup</code>, <code>None</code> otherwise:</p> plugin_a.py<pre><code>import octoprint.plugin\nclass PluginA(octoprint.plugin.StartupPlugin):\ndef on_startup(self, *args, **kwargs):\nself._logger.info(\"PluginA starting up\")\ndef on_after_startup(self, *args, **kwargs):\nself._logger.info(\"PluginA started up\")\n__plugin_implementation__ = PluginA()\n</code></pre> plugin_b.py<pre><code>import octoprint.plugin\nclass PluginB(octoprint.plugin.StartupPlugin):\ndef get_sorting_key(self, context):\nif context == \"StartupPlugin.on_startup\":\nreturn 1\nreturn None\ndef on_startup(self, *args, **kwargs):\nself._logger.info(\"PluginB starting up\")\ndef on_after_startup(self, *args, **kwargs):\nself._logger.info(\"PluginB started up\")\n__plugin_implementation__ = PluginB()\n</code></pre> plugin_c.py<pre><code>import octoprint.plugin\nclass PluginC(octoprint.plugin.StartupPlugin):\ndef get_sorting_key(self, context):\nif context == \"StartupPlugin.on_startup\":\nreturn 1\nreturn None\ndef on_startup(self, *args, **kwargs):\nself._logger.info(\"PluginC starting up\")\ndef on_after_startup(self, *args, **kwargs):\nself._logger.info(\"PluginC started up\")\n__plugin_implementation__ = PluginC()\n</code></pre> plugin_d.py<pre><code># in this example this is bundled with OctoPrint\nimport octoprint.plugin\nclass PluginD(octoprint.plugin.StartupPlugin):\ndef on_startup(self, *args, **kwargs):\nself._logger.info(\"PluginD starting up\")\ndef on_after_startup(self, *args, **kwargs):\nself._logger.info(\"PluginD started up\")\n__plugin_implementation__ = PluginD()\n</code></pre> <p>OctoPrint will detect that <code>plugin_b</code> and <code>plugin_c</code> define a order number, and since it's identical for both, namely <code>1</code>, will order both plugins based first on their bundling status and then on their plugin identifier.</p> <p><code>plugin_a</code> and <code>plugin_d</code> don't define a sort key and hence will be put after the other two, with <code>plugin_d</code> coming before <code>plugin_a</code> since it comes bundled with OctoPrint. The execution order of the <code>on_startup</code> method will hence be <code>plugin_b</code>, <code>plugin_c</code>, <code>plugin_d</code>, <code>plugin_a</code>.</p> <p>Now, the execution order of the <code>on_after_startup</code> method will be determined based on another sorting context, <code>StartupPlugin.on_after_startup</code> for which all of the plugins return <code>None</code>. Hence, the execution order of the <code>on_after_startup</code> method will be ordered first by bundle status, then by plugin identifier: <code>plugin_d</code>, <code>plugin_a</code>, <code>plugin_b</code>, <code>plugin_c</code>.</p> <p>This will result in the following messages to be generated:</p> <pre><code>Plugin B starting up\nPlugin C starting up\nPlugin D starting up\nPlugin A starting up\nPlugin D started up\nPlugin A started up\nPlugin B started up\nPlugin C started up\n</code></pre>"},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.injected-properties","title":"Injected Properties","text":"<p>OctoPrint's plugin subsystem will inject a bunch of properties into each mixin implementation. An overview of these properties follows.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.identifier","title":"<code>self._identifier</code>","text":"<p>The plugin's identifier.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-name","title":"<code>self._plugin_name</code>","text":"<p>The plugin's name, as taken from either the <code>__plugin_name__</code> control property or the package info.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-version","title":"<code>self._plugin_version</code>","text":"<p>The plugin's version, as taken from either the <code>__plugin_version__</code> control property or the package info.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-info","title":"<code>self._plugin_info</code>","text":"<p>The <code>octoprint.plugin.core.PluginInfo</code> object associated with the plugin.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.basefolder","title":"<code>self._basefolder</code>","text":"<p>The plugin's base folder where it's installed. Can be used to refer to files relative to the plugin's installation location, e.g. included scripts, templates or assets.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.datafolder","title":"<code>self._datafolder</code>","text":"<p>The plugin's additional data folder path. Can be used to store additional files needed for the plugin's operation (cache, data files etc). Plugins should not access this property directly but instead utilize <code>self.get_plugin_data_folder</code> which will make sure the path actually does exist and if not create it before returning it.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.logger","title":"<code>self._logger</code>","text":"<p>A <code>logging.Logger</code> instance logging to the log target <code>octoprint.plugin.&lt;plugin identifier&gt;</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.settings","title":"<code>self._settings</code>","text":"<p>The plugin's personalized settings manager, injected only into plugins that include the <code>octoprint.plugin.types.SettingsPlugin</code> mixin. An instance of <code>octoprint.plugin.PluginSettings</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-manager","title":"<code>self._plugin_manager</code>","text":"<p>OctoPrint's plugin manager object, an instance of <code>octoprint.plugin.core.PluginManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.printer-profile-manager","title":"<code>self._printer_profile_manager</code>","text":"<p>OctoPrint's printer profile manager, an instance of <code>octoprint.printer.profile.PrinterProfileManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.event-bus","title":"<code>self._event_bus</code>","text":"<p>OctoPrint's event bus, an instance of <code>octoprint.events.EventManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.analysis-queue","title":"<code>self._analysis_queue</code>","text":"<p>OctoPrint's analysis queue for analyzing GCODEs or other files, an instance of <code>octoprint.filemanager.analysis.AnalysisQueue</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.slicing-manager","title":"<code>self._slicing_manager</code>","text":"<p>OctoPrint's slicing manager, an instance of <code>octoprint.slicing.SlicingManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.file-manager","title":"<code>self._file_manager</code>","text":"<p>OctoPrint's file manager, an instance of <code>octoprint.filemanager.FileManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.printer","title":"<code>self._printer</code>","text":"<p>OctoPrint's printer management object, an instance of <code>octoprint.printer.PrinterInterface</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.user-manager","title":"<code>self._user_manager</code>","text":"<p>OctoPrint's user manager, an instance of <code>octoprint.access.users.UserManager</code>.</p>"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.connectivity-checker","title":"<code>self._connectivity_checker</code>","text":"<p>OctoPrint's connectivity checker, an instance of <code>octoprint.util.ConnectivityChecker</code>.</p> <p>See also</p> <code>octoprint.plugin.core.Plugin</code> and <code>octoprint.plugin.types.OctoPrintPlugin</code> Class documentation also containing the properties shared among all mixin implementations."},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.available-plugin-mixins","title":"Available plugin mixins","text":"<p>Please note that all plugin mixins inherit from  <code>Plugin</code> and  <code>OctoPrintPlugin</code>,  which also provide attributes of interest to plugin developers.</p> <code>AssetPlugin</code> The AssetPlugin mixin allows plugins to define additional static assets such as  JavaScript or CSS files to be automatically embedded into the pages delivered by the  server to be used within the client sided part of the plugin. <code>BlueprintPlugin</code> The <code>BlueprintPlugin</code> mixin allows plugins to define their own full fledged endpoints  for whatever purpose, be it a more sophisticated API than what is possible via the  <code>SimpleApiPlugin</code> or a custom web frontend. <code>EnvironmentDetectionPlugin</code> The <code>EnvironmentDetectionPlugin</code> mixin allows enrichting OctoPrint's environmental information collections with additional data, and to react to successfully collected environmental information. <code>EventHandlerPlugin</code> The <code>EventHandlerPlugin</code> mixin allows OctoPrint plugins to react to any of OctoPrint's events. OctoPrint will call the <code>on_event</code> method for any event fired on its internal event bus, supplying the event type and the associated payload. <code>ProgressPlugin</code> Via the <code>ProgressPlugin</code> mixin plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps. <code>SettingsPlugin</code> Including the <code>SettingsPlugin</code> mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. <code>ShutdownPlugin</code> The <code>ShutdownPlugin</code> allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the <code>StartupPlugin</code> mixin, to cleanly shut down additional services again that where started by the <code>StartupPlugin</code> part of the plugin. <code>SimpleApiPlugin</code> Utilizing the <code>SimpleApiPlugin</code> mixin plugins may implement a simple API based around  one GET resource and one resource accepting JSON commands POSTed to it. <code>SlicerPlugin</code> Via the <code>SlicerPlugin</code> mixin plugins can add support for slicing engines to be used by  OctoPrint. <code>StartupPlugin</code> The <code>StartupPlugin</code> allows hooking into the startup of OctoPrint. It can be used to  start up additional services on or just after the startup of the server. <code>TemplatePlugin</code> Using the <code>TemplatePlugin</code> mixin plugins may inject their own components into the OctoPrint web interface. <code>UiPlugin</code> The <code>UiPlugin</code> mixin allows plugins to completely replace the UI served by OctoPrint. <code>WizardPlugin</code> The <code>WizardPlugin</code> mixin allows plugins to report to OctoPrint whether the <code>wizard</code> templates they define via the  <code>TemplatePlugin</code> should be displayed to the  user, what details to provide to their respective wizard frontend components and  what to do when the wizard is finished by the user. <p>For more detailed information on each of the available plugin mixins, please click on their respective links.</p>"},{"location":"reference/","title":"Code Reference","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>octoprint<ul> <li>_version</li> <li>access<ul> <li>groups</li> <li>permissions</li> <li>users</li> </ul> </li> <li>cli<ul> <li>analysis</li> <li>client</li> <li>common</li> <li>config</li> <li>dev</li> <li>plugins</li> <li>server</li> <li>systeminfo</li> <li>timelapse</li> <li>user</li> </ul> </li> <li>daemon</li> <li>environment</li> <li>events</li> <li>filemanager<ul> <li>analysis</li> <li>destinations</li> <li>storage</li> <li>util</li> </ul> </li> <li>logging<ul> <li>filters</li> <li>handlers</li> </ul> </li> <li>plugin<ul> <li>core</li> <li>types</li> </ul> </li> <li>plugins<ul> <li>action_command_notification</li> <li>action_command_prompt</li> <li>announcements</li> <li>appkeys</li> <li>backup</li> <li>classicwebcam</li> <li>corewizard<ul> <li>subwizards</li> </ul> </li> <li>discovery</li> <li>errortracking</li> <li>eventmanager</li> <li>gcodeviewer</li> <li>logging</li> <li>pluginmanager<ul> <li>exceptions</li> </ul> </li> <li>softwareupdate<ul> <li>cli</li> <li>exceptions</li> <li>scripts<ul> <li>update-octoprint</li> </ul> </li> <li>updaters<ul> <li>pip</li> <li>python_updater</li> <li>single_file_plugin</li> <li>sleep_a_bit</li> <li>update_script</li> </ul> </li> <li>util</li> <li>version_checks<ul> <li>always_current</li> <li>bitbucket_commit</li> <li>commandline</li> <li>git_commit</li> <li>github_commit</li> <li>github_release</li> <li>httpheader</li> <li>jsondata</li> <li>never_current</li> <li>pypi_release</li> <li>python_checker</li> </ul> </li> </ul> </li> <li>tracking</li> <li>virtual_printer<ul> <li>virtual</li> </ul> </li> </ul> </li> <li>printer<ul> <li>estimation</li> <li>profile</li> <li>standard</li> </ul> </li> <li>schema<ul> <li>config<ul> <li>access_control</li> <li>api</li> <li>appearance</li> <li>controls</li> <li>devel</li> <li>estimation</li> <li>events</li> <li>feature</li> <li>folder</li> <li>gcode_analysis</li> <li>plugins</li> <li>printer_parameters</li> <li>printer_profiles</li> <li>scripts</li> <li>serial</li> <li>server</li> <li>slicing</li> <li>system</li> <li>temperature</li> <li>terminalfilters</li> <li>webcam</li> </ul> </li> <li>webcam</li> </ul> </li> <li>server<ul> <li>api<ul> <li>access</li> <li>connection</li> <li>files</li> <li>job</li> <li>languages</li> <li>printer</li> <li>printer_profiles</li> <li>settings</li> <li>slicing</li> <li>system</li> <li>timelapse</li> <li>users</li> </ul> </li> <li>util<ul> <li>csrf</li> <li>flask</li> <li>sockjs</li> <li>tornado</li> <li>watchdog</li> <li>webassets</li> </ul> </li> <li>views</li> </ul> </li> <li>settings</li> <li>slicing<ul> <li>exceptions</li> </ul> </li> <li>systemcommands</li> <li>timelapse</li> <li>users</li> <li>util<ul> <li>comm</li> <li>commandline</li> <li>connectivity</li> <li>dev</li> <li>files</li> <li>fixes</li> <li>gcodeInterpreter</li> <li>jinja</li> <li>json<ul> <li>encoding</li> <li>serializing</li> </ul> </li> <li>net</li> <li>paths</li> <li>pip</li> <li>piptestballoon<ul> <li>setup</li> </ul> </li> <li>platform</li> <li>text</li> <li>tz</li> <li>version</li> <li>yaml</li> </ul> </li> <li>vendor<ul> <li>awesome_slugify<ul> <li>alt_translates</li> <li>main</li> </ul> </li> <li>flask_principal</li> <li>imp</li> <li>sockjs<ul> <li>tornado<ul> <li>basehandler</li> <li>conn</li> <li>migrate</li> <li>periodic</li> <li>proto</li> <li>router</li> <li>session</li> <li>sessioncontainer</li> <li>static</li> <li>stats</li> <li>transports<ul> <li>base</li> <li>eventsource</li> <li>htmlfile</li> <li>jsonp</li> <li>pollingbase</li> <li>rawwebsocket</li> <li>streamingbase</li> <li>websocket</li> <li>xhr</li> <li>xhrstreaming</li> </ul> </li> <li>util</li> <li>websocket</li> </ul> </li> </ul> </li> <li>with_attrs_docs</li> </ul> </li> <li>webcams</li> </ul> </li> <li>octoprint_client</li> <li>octoprint_setuptools</li> </ul>"},{"location":"reference/octoprint/","title":"octoprint","text":""},{"location":"reference/octoprint/#octoprint.urllib3_ssl","title":"<code>urllib3_ssl = True</code>  <code>module-attribute</code>","text":"<p>Whether requests/urllib3 and urllib3 (if installed) should be able to establish a sound SSL environment or not.</p>"},{"location":"reference/octoprint/#octoprint.init_logging","title":"<code>init_logging(settings, use_logging_file = True, logging_file = None, default_config = None, debug = False, verbosity = 0, uncaught_logger = None, uncaught_handler = None, disable_color = True)</code>","text":"<p>Sets up logging.</p>"},{"location":"reference/octoprint/#octoprint.init_pluginsystem","title":"<code>init_pluginsystem(settings, safe_mode = False, ignore_blacklist = True, connectivity_checker = None)</code>","text":"<p>Initializes the plugin manager based on the settings.</p>"},{"location":"reference/octoprint/#octoprint.init_settings","title":"<code>init_settings(basedir, configfile, overlays = None)</code>","text":"<p>Inits the settings instance based on basedir and configfile to use.</p>"},{"location":"reference/octoprint/daemon/","title":"octoprint.daemon","text":"<p>Generic linux daemon base class</p> <p>Originally from http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/#c35</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon","title":"<code>Daemon(pidfile)</code>","text":"<p>A generic daemon class.</p> <p>Usage: subclass the daemon class and override the run() method.</p> <p>If you want to log the output to someplace different that stdout and stderr, also override the echo() and error() methods.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.get_pid","title":"<code>get_pid()</code>","text":"<p>Get the pid from the pidfile.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.is_running","title":"<code>is_running()</code>","text":"<p>Check if a process is running under the specified pid.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.remove_pidfile","title":"<code>remove_pidfile()</code>","text":"<p>Removes the pidfile.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.restart","title":"<code>restart()</code>","text":"<p>Restart the daemon.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.run","title":"<code>run()</code>","text":"<p>You should override this method when you subclass Daemon.</p> <p>It will be called after the process has been daemonized by start() or restart().</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.set_pid","title":"<code>set_pid(pid)</code>","text":"<p>Write the pid to the pidfile.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.start","title":"<code>start()</code>","text":"<p>Start the daemon.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.status","title":"<code>status()</code>","text":"<p>Prints the daemon status.</p>"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.stop","title":"<code>stop(check_running = True)</code>","text":"<p>Stop the daemon.</p>"},{"location":"reference/octoprint/environment/","title":"octoprint.environment","text":""},{"location":"reference/octoprint/events/","title":"octoprint.events","text":""},{"location":"reference/octoprint/events/#octoprint.events.CommandTrigger","title":"<code>CommandTrigger(printer)</code>","text":"<p>         Bases: <code>GenericEventListener</code></p>"},{"location":"reference/octoprint/events/#octoprint.events.CommandTrigger.eventCallback","title":"<code>eventCallback(event, payload)</code>","text":"<p>Event callback, iterates over all subscribed commands for the given event, processes the command string and then executes the command via the abstract executeCommand method.</p>"},{"location":"reference/octoprint/events/#octoprint.events.EventManager","title":"<code>EventManager()</code>","text":"<p>Handles receiving events and dispatching them to subscribers</p>"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.fire","title":"<code>fire(event, payload = None)</code>","text":"<p>Fire an event to anyone subscribed to it</p> <p>Any object can generate an event and any object can subscribe to the event's name as a string (arbitrary, but case sensitive) and any extra payload data that may pertain to the event.</p> <p>Callbacks must implement the signature \"callback(event, payload)\", with \"event\" being the event's name and payload being a payload object specific to the event.</p>"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.subscribe","title":"<code>subscribe(event, callback)</code>","text":"<p>Subscribe a listener to an event -- pass in the event name (as a string) and the callback object</p>"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.unsubscribe","title":"<code>unsubscribe(event, callback)</code>","text":"<p>Unsubscribe a listener from an event -- pass in the event name (as string) and the callback object</p>"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener","title":"<code>GenericEventListener()</code>","text":"<p>The GenericEventListener can be subclassed to easily create custom event listeners.</p>"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.eventCallback","title":"<code>eventCallback(event, payload)</code>","text":"<p>Actual event callback called with name of event and optional payload. Not implemented here, override in child classes.</p>"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.subscribe","title":"<code>subscribe(events)</code>","text":"<p>Subscribes the eventCallback method for all events in the given list.</p>"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.unsubscribe","title":"<code>unsubscribe(events)</code>","text":"<p>Unsubscribes the eventCallback method for all events in the given list</p>"},{"location":"reference/octoprint/timelapse/","title":"octoprint.timelapse","text":""},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse","title":"<code>Timelapse(post_roll = 0, fps = 25)</code>","text":""},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.config_data","title":"<code>config_data()</code>","text":"<p>Override this method to return the current timelapse configuration data. The data should have the following</p> form"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.event_subscriptions","title":"<code>event_subscriptions()</code>","text":"<p>Override this method to subscribe to additional events by returning an array of (event, callback) tuples.</p> Events that are already subscribed <ul> <li>PrintStarted - self.onPrintStarted</li> <li>PrintResumed - self.onPrintResumed</li> <li>PrintFailed - self.onPrintDone</li> <li>PrintDone - self.onPrintDone</li> </ul>"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_done","title":"<code>on_print_done(event, payload)</code>","text":"<p>Override this to perform additional actions upon the stop of a print job.</p>"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_resumed","title":"<code>on_print_resumed(event, payload)</code>","text":"<p>Override this to perform additional actions upon the pausing of a print job.</p>"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_started","title":"<code>on_print_started(event, payload)</code>","text":"<p>Override this to perform additional actions upon start of a print job.</p>"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.TimelapseRenderJob","title":"<code>TimelapseRenderJob(capture_dir, output_dir, prefix, postfix = None, capture_glob = _capture_glob, capture_format = _capture_format, output_format = _output_format, flipH = False, flipV = False, rotate = False, watermark = False, fps = 25, threads = 1, videocodec = 'mpeg2video', on_start = None, on_success = None, on_fail = None, on_always = None)</code>","text":""},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.TimelapseRenderJob.process","title":"<code>process()</code>","text":"<p>Processes the job.</p>"},{"location":"reference/octoprint/users/","title":"octoprint.users","text":""},{"location":"reference/octoprint/webcams/","title":"octoprint.webcams","text":""},{"location":"reference/octoprint/webcams/#octoprint.webcams.ProvidedWebcam","title":"<code>ProvidedWebcam(config, providerIdentifier)</code>","text":""},{"location":"reference/octoprint/webcams/#octoprint.webcams.ProvidedWebcam.config","title":"<code>config: Webcam = config</code>  <code>instance-attribute</code>","text":"<p>the <code>WebcamConfiguration</code> configuration</p>"},{"location":"reference/octoprint/webcams/#octoprint.webcams.ProvidedWebcam.providerIdentifier","title":"<code>providerIdentifier: str = providerIdentifier</code>  <code>instance-attribute</code>","text":"<p>identifier of the plugin providing this Webcam</p>"},{"location":"reference/octoprint/webcams/#octoprint.webcams.ProvidedWebcam.providerPlugin","title":"<code>providerPlugin: str = providerPluginInfo.implementation</code>  <code>instance-attribute</code>","text":"<p>plugin instance of the plugin providing this Webcam</p>"},{"location":"reference/octoprint/webcams/#octoprint.webcams.WebcamNotAbleToTakeSnapshotException","title":"<code>WebcamNotAbleToTakeSnapshotException(webcam_name)</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Raised a webcam that is not able to take a snapshot is used to take a snapshot</p>"},{"location":"reference/octoprint/access/","title":"octoprint.access","text":""},{"location":"reference/octoprint/access/groups/","title":"octoprint.access.groups","text":""},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.FilebasedGroupManager","title":"<code>FilebasedGroupManager(path = None)</code>","text":"<p>         Bases: <code>GroupManager</code></p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.FilebasedGroupManager.remove_group","title":"<code>remove_group(key, save = True, notify = True)</code>","text":"<p>Removes a Group by key</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group","title":"<code>Group(key, name, description = '', permissions = None, subgroups = None, default = False, removable = True, changeable = True, toggleable = True)</code>","text":""},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.add_permissions_to_group","title":"<code>add_permissions_to_group(permissions)</code>","text":"<p>Adds a list of permissions to a group</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.add_subgroups_to_group","title":"<code>add_subgroups_to_group(subgroups)</code>","text":"<p>Adds a list of subgroups to a group</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.change_default","title":"<code>change_default(default)</code>","text":"<p>Changes the default flag of a Group</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.change_description","title":"<code>change_description(description)</code>","text":"<p>Changes the description of a group</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.remove_permissions_from_group","title":"<code>remove_permissions_from_group(permissions)</code>","text":"<p>Removes a list of permissions from a group</p>"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.remove_subgroups_from_group","title":"<code>remove_subgroups_from_group(subgroups)</code>","text":"<p>Removes a list of subgroups from a group</p>"},{"location":"reference/octoprint/access/permissions/","title":"octoprint.access.permissions","text":""},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission","title":"<code>OctoPrintPermission(name, description, *needs, **kwargs)</code>","text":"<p>         Bases: <code>Permission</code></p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.allows","title":"<code>allows(identity)</code>","text":"<p>Whether the identity can access this permission. Overridden from Permission.allows to make sure the Identity provides ALL required needs instead of ANY required need.</p> <p>Parameters:</p> <ul> <li> identity             (<code>octoprint.vendor.flask_principal.Identity</code>)         \u2013          <p>The identity to check</p> </li> </ul>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.difference","title":"<code>difference(other)</code>","text":"<p>Create a new OctoPrintPermission consisting of requirements in this permission and not in the other.</p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.union","title":"<code>union(other)</code>","text":"<p>Create a new OctoPrintPermission with the requirements of the union of this and other.</p> <p>Parameters:</p> <ul> <li> other             (<code>OctoPrintPermission</code>)         \u2013          <p>The other permission</p> </li> </ul>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext","title":"<code>PluginIdentityContext(key, http_exception = None)</code>","text":"<p>Identity context for not initialized Permissions</p> <p>Needed to support <code>@Permissions.PLUGIN_X_Y.require()</code></p> <p>Will search the permission when needed</p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.http_exception","title":"<code>http_exception = http_exception</code>  <code>instance-attribute</code>","text":"<p>The permission of this principal</p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.identity","title":"<code>identity</code>  <code>property</code>","text":"<p>The identity of this principal</p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.can","title":"<code>can()</code>","text":"<p>Whether the identity has access to the permission</p>"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginPermissionDecorator","title":"<code>PluginPermissionDecorator(key)</code>","text":"<p>         Bases: <code>Permission</code></p> <p>Decorator Class for not initialized Permissions</p> <p>Needed to support <code>@Permissions.PLUGIN_X_Y.require()</code></p>"},{"location":"reference/octoprint/access/users/","title":"octoprint.access.users","text":""},{"location":"reference/octoprint/access/users/#octoprint.access.users.User","title":"<code>User(username, passwordHash, active, permissions = None, groups = None, apikey = None, settings = None)</code>","text":"<p>         Bases: <code>UserMixin</code></p>"},{"location":"reference/octoprint/cli/","title":"octoprint.cli","text":""},{"location":"reference/octoprint/cli/#octoprint.cli.legacy_options","title":"<code>legacy_options = bulk_options([hidden_option('--host', type=click.STRING, callback=set_ctx_obj_option), hidden_option('--port', type=click.INT, callback=set_ctx_obj_option), hidden_option('--logging', type=click.Path(), callback=set_ctx_obj_option), hidden_option('--debug', '-d', is_flag=True, callback=set_ctx_obj_option), hidden_option('--daemon', type=click.Choice(['start', 'stop', 'restart']), callback=set_ctx_obj_option), hidden_option('--pid', type=click.Path(), default='/tmp/octoprint.pid', callback=set_ctx_obj_option), hidden_option('--iknowwhatimdoing', 'allow_root', is_flag=True, callback=set_ctx_obj_option), hidden_option('--ignore-blacklist', 'ignore_blacklist', is_flag=True, callback=set_ctx_obj_option)])</code>  <code>module-attribute</code>","text":"<p>Legacy options available directly on the \"octoprint\" command in earlier versions. Kept available for reasons of backwards compatibility, but hidden from the generated help pages.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.pass_octoprint_ctx","title":"<code>pass_octoprint_ctx = click.make_pass_decorator(OctoPrintContext, ensure=True)</code>  <code>module-attribute</code>","text":"<p>Decorator to pass in the :class:<code>OctoPrintContext</code> instance.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.HiddenOption","title":"<code>HiddenOption</code>","text":"<p>         Bases: <code>click.Option</code></p> <p>Custom option sub class with empty help.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.OctoPrintContext","title":"<code>OctoPrintContext(configfile = None, basedir = None, verbosity = 0, safe_mode = False)</code>","text":"<p>Custom context wrapping the standard options.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.bulk_options","title":"<code>bulk_options(options)</code>","text":"<p>Utility decorator to decorate a function with a list of click decorators.</p> <p>The provided list of <code>options</code> will be reversed to ensure correct processing order (inverse from what would be intuitive).</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.hidden_option","title":"<code>hidden_option(*param_decls, **attrs)</code>","text":"<p>Attaches a hidden option to the command.  All positional arguments are passed as parameter declarations to Option; all keyword arguments are forwarded unchanged.  This is equivalent to creating an Option instance manually and attaching it to the Command.params list.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.init_platform_for_cli","title":"<code>init_platform_for_cli(ctx)</code>","text":"<p>Performs a basic platform initialization for the CLI.</p> <p>Plugin implementations will be initialized, but only with a subset of the usual property injections:</p> <ul> <li><code>_identifier</code> and everything else parsed from metadata</li> <li><code>_logger</code></li> <li><code>_connectivity_checker</code></li> <li><code>_environment_detector</code></li> <li><code>_event_bus</code></li> <li><code>_plugin_manager</code></li> <li><code>_settings</code></li> </ul>"},{"location":"reference/octoprint/cli/#octoprint.cli.set_ctx_obj_option","title":"<code>set_ctx_obj_option(ctx, param, value)</code>","text":"<p>Helper for setting eager options on the context.</p>"},{"location":"reference/octoprint/cli/#octoprint.cli.standard_options","title":"<code>standard_options(hidden = False)</code>","text":"<p>Decorator to add the standard options shared among all \"octoprint\" commands.</p> <p>If <code>hidden</code> is set to <code>True</code>, the options will be available on the command but not listed in its help page.</p>"},{"location":"reference/octoprint/cli/analysis/","title":"octoprint.cli.analysis","text":""},{"location":"reference/octoprint/cli/analysis/#octoprint.cli.analysis.cli","title":"<code>cli()</code>","text":"<p>Analysis tools.</p>"},{"location":"reference/octoprint/cli/analysis/#octoprint.cli.analysis.gcode_command","title":"<code>gcode_command(path, speedx, speedy, speedz, offset, maxt, throttle, throttle_lines, g90_extruder, bedz, progress, layers)</code>","text":"<p>Runs a GCODE file analysis.</p>"},{"location":"reference/octoprint/cli/client/","title":"octoprint.cli.client","text":""},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.client_options","title":"<code>client_options = bulk_options([click.option('--apikey', '-a', type=click.STRING), click.option('--host', '-h', type=click.STRING), click.option('--port', '-p', type=click.INT), click.option('--httpuser', type=click.STRING), click.option('--httppass', type=click.STRING), click.option('--https', is_flag=True), click.option('--prefix', type=click.STRING)])</code>  <code>module-attribute</code>","text":"<p>Common options to configure an API client.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.cli","title":"<code>cli(ctx, apikey, host, port, httpuser, httppass, https, prefix)</code>","text":"<p>Basic API client.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.command","title":"<code>command(ctx, path, command, str_params, int_params, float_params, bool_params, timeout)</code>","text":"<p>Sends a JSON command to the specified server path.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.delete","title":"<code>delete(ctx, path, timeout)</code>","text":"<p>Sends a DELETE request to the specified server path.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.get","title":"<code>get(ctx, path, timeout)</code>","text":"<p>Performs a GET request against the specified server path.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.patch_json","title":"<code>patch_json(ctx, path, data, timeout)</code>","text":"<p>PATCHes JSON data to the specified server path.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.post_from_file","title":"<code>post_from_file(ctx, path, file_path, json_flag, yaml_flag, timeout)</code>","text":"<p>POSTs JSON data to the specified server path, taking the data from the specified file.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.post_json","title":"<code>post_json(ctx, path, data, timeout)</code>","text":"<p>POSTs JSON data to the specified server path.</p>"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.upload","title":"<code>upload(ctx, path, file_path, params, file_name, content_type, timeout)</code>","text":"<p>Uploads the specified file to the specified server path.</p>"},{"location":"reference/octoprint/cli/common/","title":"octoprint.cli.common","text":""},{"location":"reference/octoprint/cli/common/#octoprint.cli.common.LazyGroup","title":"<code>LazyGroup(import_name, **kwargs)</code>","text":"<p>         Bases: <code>click.Group</code></p> <p>A click Group that imports the actual implementation only when needed.  This allows for more resilient CLIs where the top-level command does not fail when a subcommand is broken enough to fail at import time.</p>"},{"location":"reference/octoprint/cli/config/","title":"octoprint.cli.config","text":""},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.append_value_command","title":"<code>append_value_command(ctx, path, value, as_json = False)</code>","text":"<p>Appends value to list behind config path.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.cli","title":"<code>cli(ctx)</code>","text":"<p>Basic config manipulation.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.effective_command","title":"<code>effective_command(ctx, as_json = False, as_yaml = False, as_raw = False)</code>","text":"<p>Retrieves the full effective config.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.get_command","title":"<code>get_command(ctx, path, as_json = False, as_yaml = False, as_raw = False)</code>","text":"<p>Retrieves value from config path.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.insert_value_command","title":"<code>insert_value_command(ctx, path, index, value, as_json = False)</code>","text":"<p>Inserts value at index of list behind config key.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.remove_command","title":"<code>remove_command(ctx, path)</code>","text":"<p>Removes a config path.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.remove_value_command","title":"<code>remove_value_command(ctx, path, value, as_json = False)</code>","text":"<p>Removes value from list at config path.</p>"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.set_command","title":"<code>set_command(ctx, path, value, as_bool, as_float, as_int, as_json)</code>","text":"<p>Sets a config path to the provided value.</p>"},{"location":"reference/octoprint/cli/dev/","title":"octoprint.cli.dev","text":""},{"location":"reference/octoprint/cli/dev/#octoprint.cli.dev.OctoPrintDevelCommands","title":"<code>OctoPrintDevelCommands(*args, **kwargs)</code>","text":"<p>         Bases: <code>click.MultiCommand</code></p> <p>Custom click.MultiCommand implementation that provides commands relevant for (plugin) development based on availability of development dependencies.</p>"},{"location":"reference/octoprint/cli/dev/#octoprint.cli.dev.cli","title":"<code>cli()</code>","text":"<p>Additional commands for development tasks.</p>"},{"location":"reference/octoprint/cli/plugins/","title":"octoprint.cli.plugins","text":""},{"location":"reference/octoprint/cli/plugins/#octoprint.cli.plugins.OctoPrintPluginCommands","title":"<code>OctoPrintPluginCommands(*args, **kwargs)</code>","text":"<p>         Bases: <code>click.MultiCommand</code></p> <p>Custom click.MultiCommand implementation that collects commands from the plugin hook octoprint.cli.commands.</p> <p>Attributes:</p> <ul> <li> settings             (<code>octoprint.settings.Settings</code>)         \u2013          <p>The global Settings instance.</p> </li> <li> plugin_manager             (<code>octoprint.plugin.core.PluginManager</code>)         \u2013          <p>The global PluginManager instance.</p> </li> </ul>"},{"location":"reference/octoprint/cli/plugins/#octoprint.cli.plugins.cli","title":"<code>cli(obj)</code>","text":"<p>Additional commands provided by plugins.</p>"},{"location":"reference/octoprint/cli/server/","title":"octoprint.cli.server","text":""},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.daemon_options","title":"<code>daemon_options = bulk_options([click.option('--pid', type=click.Path(), default='/tmp/octoprint.pid', callback=set_ctx_obj_option, help='Pidfile to use for daemonizing.')])</code>  <code>module-attribute</code>","text":"<p>Decorator to add the options for the daemon subcommand: <code>--pid</code>.</p>"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.server_options","title":"<code>server_options = bulk_options([click.option('--host', type=click.STRING, callback=set_ctx_obj_option, help='Specify the host address on which to bind the server.'), click.option('--port', type=click.INT, callback=set_ctx_obj_option, help='Specify the port on which to bind the server.'), click.option('-4', '--ipv4', 'v4', is_flag=True, callback=set_ctx_obj_option, help=\"Bind to IPv4 addresses only. Implies '--host 0.0.0.0'. Silently ignored if -6 is present.\"), click.option('-6', '--ipv6', 'v6', is_flag=True, callback=set_ctx_obj_option, help='Bind to IPv6 addresses only. Disables dual stack when binding to any v6 addresses. Silently ignored if -4 is present.'), click.option('--logging', type=click.Path(), callback=set_ctx_obj_option, help='Specify the config file to use for configuring logging.'), click.option('--iknowwhatimdoing', 'allow_root', is_flag=True, callback=set_ctx_obj_option, help='Allow OctoPrint to run as user root.'), click.option('--debug', is_flag=True, callback=set_ctx_obj_option, help='Enable debug mode.'), click.option('--ignore-blacklist', 'ignore_blacklist', is_flag=True, callback=set_ctx_obj_option, help='Disable processing of the plugin blacklist.')])</code>  <code>module-attribute</code>","text":"<p>Decorator to add the options shared among the server commands: <code>--host</code>, <code>--port</code>, <code>-4</code>, <code>-6</code> <code>--logging</code>, <code>--iknowwhatimdoing</code> and <code>--debug</code>.</p>"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.daemon_command","title":"<code>daemon_command(ctx, command, **kwargs)</code>","text":"<p>Starts, stops or restarts in daemon mode.</p> <p>Please note that daemon mode is not supported under Windows and MacOSX right now.</p>"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.enable_safemode","title":"<code>enable_safemode(ctx, **kwargs)</code>","text":"<p>Sets the safe mode flag for the next start.</p>"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.run_server","title":"<code>run_server(basedir, configfile, host, port, v6_only, debug, allow_root, logging_config, verbosity, safe_mode, ignore_blacklist, octoprint_daemon = None, overlays = None, disable_color = False)</code>","text":"<p>Initializes the environment and starts up the server.</p>"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.serve_command","title":"<code>serve_command(ctx, **kwargs)</code>","text":"<p>Starts the OctoPrint server.</p>"},{"location":"reference/octoprint/cli/systeminfo/","title":"octoprint.cli.systeminfo","text":""},{"location":"reference/octoprint/cli/systeminfo/#octoprint.cli.systeminfo.systeminfo_command","title":"<code>systeminfo_command(ctx, path, **kwargs)</code>","text":"<p>Retrieves and prints the system info.</p>"},{"location":"reference/octoprint/cli/timelapse/","title":"octoprint.cli.timelapse","text":""},{"location":"reference/octoprint/cli/timelapse/#octoprint.cli.timelapse.cli","title":"<code>cli(ctx)</code>","text":"<p>Basic config manipulation.</p>"},{"location":"reference/octoprint/cli/timelapse/#octoprint.cli.timelapse.extract_thumbnails","title":"<code>extract_thumbnails(ctx, missing, processes, paths)</code>","text":"<p>Extract missing thumbnails from timelapses.</p>"},{"location":"reference/octoprint/cli/user/","title":"octoprint.cli.user","text":""},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.activate_command","title":"<code>activate_command(ctx, username)</code>","text":"<p>Activate a user account.</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.add_user_command","title":"<code>add_user_command(ctx, username, password, groups, permissions, is_admin)</code>","text":"<p>Add a new user.</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.change_password_command","title":"<code>change_password_command(ctx, username, password)</code>","text":"<p>Change an existing user's password.</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.cli","title":"<code>cli(ctx)</code>","text":"<p>User management.</p> <p>Note that this currently only supports managing user accounts stored in the configured user manager, not any user managers added through plugins and the \"octoprint.users.factory\" hook.</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.deactivate_command","title":"<code>deactivate_command(ctx, username)</code>","text":"<p>Activate a user account.</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.list_users_command","title":"<code>list_users_command(ctx)</code>","text":"<p>Lists user information</p>"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.remove_user_command","title":"<code>remove_user_command(ctx, username)</code>","text":"<p>Remove an existing user.</p>"},{"location":"reference/octoprint/filemanager/","title":"octoprint.filemanager","text":""},{"location":"reference/octoprint/filemanager/#octoprint.filemanager.FileManager","title":"<code>FileManager(analysis_queue, slicing_manager, printer_profile_manager, initial_storage_managers = None)</code>","text":""},{"location":"reference/octoprint/filemanager/analysis/","title":"octoprint.filemanager.analysis","text":""},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue","title":"<code>AbstractAnalysisQueue(finished_callback)</code>","text":"<p>The <code>AbstractAnalysisQueue</code> is the parent class of all specific analysis queues such as the GcodeAnalysisQueue. It offers methods to enqueue new entries to analyze and pausing and resuming analysis processing.</p> <p>Initializes the queue.</p> <p>Parameters:</p> <ul> <li> finished_callback             (<code>callable</code>)         \u2013          <p>Callback that will be called upon finishing analysis of an entry in the queue. The callback will be called with the analyzed entry as the first argument and the analysis result as returned from the queue implementation as the second parameter.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue._do_abort","title":"<code>_do_abort(reenqueue = True)</code>","text":"<p>Aborts analysis of the current entry. Needs to be overridden by sub classes.</p>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue._do_analysis","title":"<code>_do_analysis(high_priority = False)</code>","text":"<p>Performs the actual analysis of the current entry which can be accessed via <code>self._current</code>. Needs to be overridden by sub classes.</p> <p>Parameters:</p> <ul> <li> high_priority             (<code>bool</code>)         \u2013          <p>Whether the current entry has high priority or not.</p> </li> </ul> <p>Returns:</p> <ul> <li> object        \u2013          <p>The result of the analysis which will be forwarded to the <code>finished_callback</code> provided during construction.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.enqueue","title":"<code>enqueue(entry, high_priority = False)</code>","text":"<p>Enqueues an <code>entry</code> for analysis by the queue.</p> <p>If <code>high_priority</code> is <code>True</code> (defaults to <code>False</code>), the entry will be prioritized and hence processed before other entries in the queue with normal priority.</p> <p>Parameters:</p> <ul> <li> entry             (<code>QueueEntry</code>)         \u2013          <p>The entry to analyze.</p> </li> <li> high_priority             (<code>bool</code>)         \u2013          <p>Whether to process the provided entry with high priority (<code>True</code>) or not (<code>False</code>, default)</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.pause","title":"<code>pause()</code>","text":"<p>Pauses processing of the queue, e.g. when a print is active.</p>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.resume","title":"<code>resume()</code>","text":"<p>Resumes processing of the queue, e.g. when a print has finished.</p>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AnalysisQueue","title":"<code>AnalysisQueue(queue_factories)</code>","text":"<p>OctoPrint's <code>AnalysisQueue</code> can manage various AbstractAnalysisQueue implementations, mapped by their machine code type.</p> <p>By invoking register_finish_callback it is possible to register oneself as a callback to be invoked each time the analysis of a queue entry finishes. The call parameters will be the finished queue entry as the first and the analysis result as the second parameter. It is also possible to remove the registration again by invoking unregister_finish_callback.</p> <p>enqueue allows enqueuing QueueEntry instances to analyze. If the QueueEntry.type is unknown (no specific child class of AbstractAnalysisQueue is registered for it), nothing will happen. Otherwise the entry will be enqueued with the type specific analysis queue.</p>"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.GcodeAnalysisQueue","title":"<code>GcodeAnalysisQueue(finished_callback)</code>","text":"<p>         Bases: <code>AbstractAnalysisQueue</code></p> <p>A queue to analyze GCODE files. Analysis results are dict instances structured as follows:</p> Name Type Description <code>estimatedPrintTime</code> <code>int</code> Estimated time the file take to print, in seconds <code>filament.*</code> <code>dict</code> Substructure describing estimated filament usage. Keys are <code>tool0</code> for the first extruder, <code>tool1</code> for the second and so on. For each tool extruded length and volume (based on diameter) are provided. <code>filament.toolX.length</code> <code>float</code> The extruded length in mm <code>filament.toolX.volume</code> <code>float</code> The extruded volume in cm\u00b3 <code>printingArea.*</code> <code>dict</code> Bounding box of the printed object in the print volume (minimum and maximum coordinates) <code>printingArea.minX</code> <code>float</code> Minimum X coordinate of the printed object <code>printingArea.maxX</code> <code>float</code> Maximum X coordinate of the printed object <code>printingArea.minY</code> <code>float</code> Minimum Y coordinate of the printed object <code>printingArea.maxY</code> <code>float</code> Maximum Y coordinate of the printed object <code>printingArea.minZ</code> <code>float</code> Minimum Z coordinate of the printed object <code>printingArea.maxZ</code> <code>float</code> Maximum Z coordinate of the printed object <code>dimensions.*</code> <code>dict</code> Dimensions of the printed object in X, Y, Z <code>dimensions.width</code> <code>float</code> Width of the printed model along the X axis, in mm <code>dimensions.depth</code> <code>float</code> Depth of the printed model along the Y axis, in mm <code>dimensions.height</code> <code>float</code> Height of the printed model along the Z axis, in mm <code>travelArea.*</code> <code>dict</code> Bounding box of all machine movements (minimum and maximum coordinates) <code>travelArea.minX</code> <code>float</code> Minimum X coordinate of the machine movements <code>travelArea.maxX</code> <code>float</code> Maximum X coordinate of the machine movements <code>travelArea.minY</code> <code>float</code> Minimum Y coordinate of the machine movements <code>travelArea.maxY</code> <code>float</code> Maximum Y coordinate of the machine movements <code>travelArea.minZ</code> <code>float</code> Minimum Z coordinate of the machine movements <code>travelArea.maxZ</code> <code>float</code> Maximum Z coordinate of the machine movements <code>travelDimensions.*</code> <code>dict</code> Dimensions of the travel area in X, Y, Z <code>travelDimensions.width</code> <code>float</code> Width of the travel area along the X axis, in mm <code>travelDimensions.depth</code> <code>float</code> Depth of the travel area along the X axis, in mm <code>travelDimensions.height</code> <code>float</code> Height of the travel area along the X axis, in mm"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.QueueEntry","title":"<code>QueueEntry</code>","text":"<p>         Bases: <code>collections.namedtuple('QueueEntry', 'name, path, type, location, absolute_path, printer_profile, analysis')</code></p> <p>A <code>QueueEntry</code> for processing through the AnalysisQueue. Wraps the entry's properties necessary for processing.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Name of the file to analyze.</p> </li> <li> path             (<code>str</code>)         \u2013          <p>Storage location specific path to the file to analyze.</p> </li> <li> type             (<code>str</code>)         \u2013          <p>Type of file to analyze, necessary to map to the correct AbstractAnalysisQueue sub class. At the moment, only <code>gcode</code> is supported here.</p> </li> <li> location             (<code>str</code>)         \u2013          <p>Location the file is located on.</p> </li> <li> absolute_path             (<code>str</code>)         \u2013          <p>Absolute path on disk through which to access the file.</p> </li> <li> printer_profile             (<code>octoprint.printer.profile.PrinterProfile</code>)         \u2013          <p>PrinterProfile which to use for analysis.</p> </li> <li> analysis             (<code>dict</code>)         \u2013          <p>GcodeAnalysisQueue results from prior analysis, or <code>None</code> if there is none.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/destinations/","title":"octoprint.filemanager.destinations","text":""},{"location":"reference/octoprint/filemanager/destinations/#octoprint.filemanager.destinations.FileDestinations","title":"<code>FileDestinations</code>","text":"<p>File destinations supported by the file manager.</p>"},{"location":"reference/octoprint/filemanager/storage/","title":"octoprint.filemanager.storage","text":""},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage","title":"<code>LocalFileStorage(basefolder, create = False, really_universal = False)</code>","text":"<p>         Bases: <code>StorageInterface</code></p> <p>The <code>LocalFileStorage</code> is a storage implementation which holds all files, folders and metadata on disk.</p> <p>Metadata is managed inside <code>.metadata.json</code> files in the respective folders, indexed by the sanitized filenames stored within the folder. Metadata access is managed through an LRU cache to minimize access overhead.</p> <p>This storage type implements <code>path_on_disk</code>.</p> <p>Initializes a <code>LocalFileStorage</code> instance under the given <code>basefolder</code>, creating the necessary folder if necessary and <code>create</code> is set to <code>True</code>.</p> <p>Parameters:</p> <ul> <li> basefolder             (<code>str</code>)         \u2013          <p>the path to the folder under which to create the storage</p> </li> <li> create             (<code>bool</code>)         \u2013          <p><code>True</code> if the folder should be created if it doesn't exist yet, <code>False</code> otherwise</p> </li> <li> really_universal             (<code>bool</code>)         \u2013          <p><code>True</code> if the file names should be forced to be really universal, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize","title":"<code>sanitize(path)</code>","text":"<p>Returns a <code>(path, name)</code> tuple derived from the provided <code>path</code>.</p> <p><code>path</code> may be: - a storage path - an absolute file system path - a tuple or list containing all individual path elements - a string representation of the path - with or without a file name</p> <p>Note</p> <p>For a <code>path</code> without a trailing slash the last part will be considered a file name and hence be returned at second position. If you only need to convert a folder path, be sure to include a trailing slash for a string <code>path</code> or an empty last element for a list <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str | list | tuple</code>)         \u2013          <p>The path to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>The sanitized path and name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize_name","title":"<code>sanitize_name(name)</code>","text":"<p>Sanitizes the given <code>name</code> using <code>sanitize_filename</code>.</p> <p>Strips any leading <code>.</code>.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The sanitized name</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the name contains <code>/</code> or <code>\\</code></p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize_path","title":"<code>sanitize_path(path)</code>","text":"<p>Sanitizes the given <code>path</code>.</p> <p>Ensures that the on disk representation of <code>path</code> is located under the configured <code>basefolder</code>. Resolves all relative path elements (e.g. <code>..</code>) and sanitizes folder names using <code>sanitize_name</code>. The final path is the absolute path, including the leading <code>basefolder</code> path.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The path to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The sanitized path</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface","title":"<code>StorageInterface</code>","text":"<p>Interface of storage adapters for OctoPrint.</p>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.analysis_backlog","title":"<code>analysis_backlog</code>  <code>property</code>","text":"<p>Get an iterator over all items stored in the storage that need to be analysed by the AnalysisQueue.</p> <p>The yielded elements are expected as storage specific absolute paths to the respective files. Don't forget to recurse into folders if your storage adapter supports those.</p> <p>Returns:</p> <ul> <li> <code>iterator</code>         \u2013          <p>an iterator yielding all un-analysed files in the storage</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_file","title":"<code>add_file(path, file_object, printer_profile = None, links = None, allow_overwrite = False, display = None)</code>","text":"<p>Adds the file <code>file_object</code> as <code>path</code></p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path of the new file, will be sanitized</p> </li> <li> file_object             (<code>object</code>)         \u2013          <p>a file object that provides a <code>save</code> method which will be called with the destination path where the object should then store its contents</p> </li> <li> printer_profile             (<code>object</code>)         \u2013          <p>the printer profile associated with this file (if any)</p> </li> <li> links             (<code>list</code>)         \u2013          <p>any links to add with the file</p> </li> <li> allow_overwrite             (<code>bool</code>)         \u2013          <p>if set to <code>True</code> no error will be raised if the file already exists and the existing file and its metadata will just be silently overwritten</p> </li> <li> display             (<code>str</code>)         \u2013          <p>display name of the file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the sanitized name of the file to be used for future references to it</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_folder","title":"<code>add_folder(path, ignore_existing = True, display = None)</code>","text":"<p>Adds a folder as <code>path</code></p> <p>The <code>path</code> will be sanitized.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path of the new folder</p> </li> <li> ignore_existing             (<code>bool</code>)         \u2013          <p>if set to <code>True</code>, no error will be raised if the folder to be added already exists</p> </li> <li> display             (<code>str</code>)         \u2013          <p>display name of the folder</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the sanitized name of the new folder to be used for future references to the folder</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_link","title":"<code>add_link(path, rel, data)</code>","text":"<p>Adds a link of relation <code>rel</code> to file <code>path</code> with the given <code>data</code>.</p> <p>The following relation types are currently supported:</p> <ul> <li><code>model</code>: adds a link to a model from which the file was created/sliced, expected additional data is the <code>name</code>   and optionally the <code>hash</code> of the file to link to. If the link can be resolved against another file on the   current <code>path</code>, not only will it be added to the links of <code>name</code> but a reverse link of type <code>machinecode</code>   referring to <code>name</code> and its hash will also be added to the linked <code>model</code> file</li> <li><code>machinecode</code>: adds a link to a file containing machine code created from the current file (model), expected   additional data is the <code>name</code> and optionally the <code>hash</code> of the file to link to. If the link can be resolved   against another file on the current <code>path</code>, not only will it be added to the links of <code>name</code> but a reverse   link of type <code>model</code> referring to <code>name</code> and its hash will also be added to the linked <code>model</code> file.</li> <li><code>web</code>: adds a location on the web associated with this file (e.g. a website where to download a model),   expected additional data is a <code>href</code> attribute holding the website's URL and optionally a <code>retrieved</code>   attribute describing when the content was retrieved</li> </ul> <p>Note that adding <code>model</code> links to files identifying as models or <code>machinecode</code> links to files identifying as machine code will be refused.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path of the file for which to add a link</p> </li> <li> rel             (<code>str</code>)         \u2013          <p>type of relation of the link to add (currently <code>model</code>, <code>machinecode</code> and <code>web</code> are supported)</p> </li> <li> data             (<code>dict</code>)         \u2013          <p>additional data of the link to add</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.canonicalize","title":"<code>canonicalize(path)</code>","text":"<p>Canonicalizes the given <code>path</code>.</p> <p>The <code>path</code> may consist of both folder and file name, the underlying implementation must separate those if necessary.</p> <p>By default, this calls StorageInterface.sanitize, which also takes care of stripping any invalid characters.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to canonicalize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>a 2-tuple containing the canonicalized path and file name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.copy_file","title":"<code>copy_file(source, destination)</code>","text":"<p>Copies the file <code>source</code> to <code>destination</code></p> <p>Parameters:</p> <ul> <li> source             (<code>str</code>)         \u2013          <p>path to the source file</p> </li> <li> destination             (<code>str</code>)         \u2013          <p>path to destination</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the new path in the storage to the copy of the file</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.copy_folder","title":"<code>copy_folder(source, destination)</code>","text":"<p>Copies the folder <code>source</code> to <code>destination</code></p> <p>Parameters:</p> <ul> <li> source             (<code>str</code>)         \u2013          <p>path to the source folder</p> </li> <li> destination             (<code>str</code>)         \u2013          <p>path to destination</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the new path in the storage to the copy of the folder</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.file_exists","title":"<code>file_exists(path)</code>","text":"<p>Returns whether the file indicated by <code>path</code> exists or not.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to check for existence</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the file exists, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.file_in_path","title":"<code>file_in_path(path, filepath)</code>","text":"<p>Returns whether the file indicated by <code>file</code> is inside <code>path</code> or not.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to check</p> </li> <li> filepath             (<code>str</code>)         \u2013          <p>path to the file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the file is inside the path, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.folder_exists","title":"<code>folder_exists(path)</code>","text":"<p>Returns whether the folder indicated by <code>path</code> exists or not.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to check for existence</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p><code>True</code> if the folder exists, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.get_additional_metadata","title":"<code>get_additional_metadata(path, key)</code>","text":"<p>Fetches additional metadata at <code>key</code> from the metadata of <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>virtual path to the file for which to fetch additional metadata</p> </li> <li> key             (<code>str</code>)         \u2013          <p>key of metadata to fetch</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.get_metadata","title":"<code>get_metadata(path)</code>","text":"<p>Retrieves the metadata for the file <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>virtual path to the file for which to retrieve the metadata</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>the metadata associated with the file</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.has_analysis","title":"<code>has_analysis(path)</code>","text":"<p>Returns whether the file at path has been analysed yet</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path to the file to check</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.join_path","title":"<code>join_path(*path)</code>","text":"<p>Join path elements together</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path elements to join</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>joined representation of the path to be usable as fully qualified path for further operations</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.last_modified","title":"<code>last_modified(path = None, recursive = False)</code>","text":"<p>Get the last modification date of the specified <code>path</code> or <code>path</code>'s subtree.</p> <p>Parameters:</p> <ul> <li> path             (<code>str | None</code>)         \u2013          <p>Path for which to determine the subtree's last modification date. If left out or set to None, defaults to storage root.</p> </li> <li> recursive             (<code>bool</code>)         \u2013          <p>Whether to determine only the date of the specified <code>path</code> (<code>False</code>, default) or the whole <code>path</code>'s subtree (True).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>         \u2013          <p>The last modification date of the indicated subtree</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.list_files","title":"<code>list_files(path = None, filter = None, recursive = True, level = 0, force_refresh = False)</code>","text":"<p>List all files in storage starting at <code>path</code>. If <code>recursive</code> is set to <code>True</code> (the default), also dives into subfolders.</p> <p>An optional filter function can be supplied which will be called with a file name and file data and which has to return True if the file is to be included in the result or False if not.</p> <p>The data structure of the returned result will be a dictionary mapping from file names to entry data. File nodes will contain their metadata here, folder nodes will contain their contained files and folders.</p> Example <pre><code>{\n\"some_folder\": {\n\"name\": \"some_folder\",\n\"path\": \"some_folder\",\n\"type\": \"folder\",\n\"children\": {\n\"some_sub_folder\": {\n\"name\": \"some_sub_folder\",\n\"path\": \"some_folder/some_sub_folder\",\n\"type\": \"folder\",\n\"typePath\": [\"folder\"],\n\"children\": { ... }\n},\n\"some_file.gcode\": {\n\"name\": \"some_file.gcode\",\n\"path\": \"some_folder/some_file.gcode\",\n\"type\": \"machinecode\",\n\"typePath\": [\"machinecode\", \"gcode\"],\n\"hash\": \"&lt;sha1 hash&gt;\",\n\"links\": [ ... ],\n...\n},\n...\n}\n\"test.gcode\": {\n\"name\": \"test.gcode\",\n\"path\": \"test.gcode\",\n\"type\": \"machinecode\",\n\"typePath\": [\"machinecode\", \"gcode\"],\n\"hash\": \"&lt;sha1 hash&gt;\",\n\"links\": [...],\n...\n},\n\"test.stl\": {\n\"name\": \"test.stl\",\n\"path\": \"test.stl\",\n\"type\": \"model\",\n\"typePath\": [\"model\", \"stl\"],\n\"hash\": \"&lt;sha1 hash&gt;\",\n\"links\": [...],\n...\n},\n...\n}\n</code></pre> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>base path from which to recursively list all files, optional, if not supplied listing will start from root of base folder</p> </li> <li> filter             (<code>function</code>)         \u2013          <p>a filter that matches the files that are to be returned, may be left out in which case no filtering will take place</p> </li> <li> recursive             (<code>bool</code>)         \u2013          <p>will also step into sub folders for building the complete list if set to <code>True</code>, otherwise will only do one step down into sub folders to be able to populate the <code>children</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>a nested dictionary mapping entry names to entry data that represents the whole file list</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.move_file","title":"<code>move_file(source, destination)</code>","text":"<p>Moves the file <code>source</code> to <code>destination</code></p> <p>Parameters:</p> <ul> <li> source             (<code>str</code>)         \u2013          <p>path to the source file</p> </li> <li> destination             (<code>str</code>)         \u2013          <p>path to destination</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the new path in the storage to the file</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.move_folder","title":"<code>move_folder(source, destination)</code>","text":"<p>Moves the folder <code>source</code> to <code>destination</code></p> <p>Parameters:</p> <ul> <li> source             (<code>str</code>)         \u2013          <p>path to the source folder</p> </li> <li> destination             (<code>str</code>)         \u2013          <p>path to destination</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the new path in the storage to the folder</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.path_in_storage","title":"<code>path_in_storage(path)</code>","text":"<p>Retrieves the equivalent in the storage adapter for <code>path</code>.</p> <p>Opposite of <code>path_on_disk</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path on disk for which to retrieve the storage path</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the path in storage to <code>path</code></p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.path_on_disk","title":"<code>path_on_disk(path)</code>","text":"<p>Retrieves the path on disk for <code>path</code>.</p> <p>Note</p> <p>If the storage is not on disk and there exists no path on disk to refer to it, this method should raise an io.UnsupportedOperation</p> <p>Opposite of <code>path_in_storage</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the virtual path for which to retrieve the path on disk</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the path on disk to <code>path</code></p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_additional_metadata","title":"<code>remove_additional_metadata(path, key)</code>","text":"<p>Removes additional metadata under <code>key</code> for <code>name</code> on <code>path</code></p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>virtual path to the file for which to remove additional metadata</p> </li> <li> key             (<code>str</code>)         \u2013          <p>key of metadata to remove</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_file","title":"<code>remove_file(path)</code>","text":"<p>Removes the file at <code>path</code></p> <p>Will also take care of deleting the corresponding entries in the metadata and deleting all links pointing to the file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path of the file to remove</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_folder","title":"<code>remove_folder(path, recursive = True)</code>","text":"<p>Removes the folder at <code>path</code></p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path of the folder to remove</p> </li> <li> recursive             (<code>bool</code>)         \u2013          <p>if set to <code>True</code>, contained folders and files will also be removed, otherwise an error will be raised if the folder is not empty (apart from any metadata files) when it's to be removed</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_link","title":"<code>remove_link(path, rel, data)</code>","text":"<p>Removes the link consisting of <code>rel</code> and <code>data</code> from file <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path of the file from which to remove the link</p> </li> <li> rel             (<code>str</code>)         \u2013          <p>type of relation of the link to remove (currently <code>model</code>, <code>machinecode</code> and <code>web</code> are supported)</p> </li> <li> data             (<code>dict</code>)         \u2013          <p>additional data of the link to remove, must match existing link</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize","title":"<code>sanitize(path)</code>","text":"<p>Sanitizes the given <code>path</code>, stripping it of all invalid characters.</p> <p>The <code>path</code> may consist of both folder and file name, the underlying implementation must separate those if necessary and sanitize individually.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>a 2-tuple containing the sanitized path and file name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize_name","title":"<code>sanitize_name(name)</code>","text":"<p>Sanitizes the given file <code>name</code>, stripping it of all invalid characters.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>the file name to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the sanitized file name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize_path","title":"<code>sanitize_path(path)</code>","text":"<p>Sanitizes the given folder-only <code>path</code>, stripping it of all invalid characters.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to sanitize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>the sanitized path</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.set_additional_metadata","title":"<code>set_additional_metadata(path, key, data, overwrite = False, merge = False)</code>","text":"<p>Adds additional metadata to the metadata of <code>path</code>. Metadata in <code>data</code> will be saved under <code>key</code>.</p> <p>If <code>overwrite</code> is set and <code>key</code> already exists in <code>path</code>'s metadata, the current value will be overwritten.</p> <p>If <code>merge</code> is set and <code>key</code> already exists and both <code>data</code> and the existing data under <code>key</code> are dictionaries, the two dictionaries will be merged recursively.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>virtual path to the file for which to add additional metadata</p> </li> <li> key             (<code>str</code>)         \u2013          <p>key of metadata to add</p> </li> <li> data             (<code>dict</code>)         \u2013          <p>metadata to add</p> </li> <li> overwrite             (<code>bool</code>)         \u2013          <p>if set to <code>True</code> and <code>key</code> already exists, it will be overwritten</p> </li> <li> merge             (<code>bool</code>)         \u2013          <p>if set to <code>True</code> and <code>key</code> already exists and both <code>data</code> and the existing data are dictionaries, they will be merged</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.split_path","title":"<code>split_path(path)</code>","text":"<p>Split <code>path</code> into base directory and file name.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>the path to split</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>a 2-tuple containing the base directory and file name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/","title":"octoprint.filemanager.util","text":""},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper","title":"<code>AbstractFileWrapper(filename)</code>","text":"<p>Wrapper for file representations to save to storages.</p> <p>Parameters:</p> <ul> <li> filename             (<code>str</code>)         \u2013          <p>The file's name</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper.save","title":"<code>save(path, permissions = None)</code>","text":"<p>Saves the file's content to the given absolute path.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The absolute path to where to save the file</p> </li> <li> permissions             (<code>int</code>)         \u2013          <p>The permissions to set on the file</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper.stream","title":"<code>stream()</code>","text":"<p>Returns a Python stream object (subclass of io.IOBase) representing the file's contents.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>io.IOBase: The file's contents as a stream.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.DiskFileWrapper","title":"<code>DiskFileWrapper(filename, path, move = True)</code>","text":"<p>         Bases: <code>AbstractFileWrapper</code></p> <p>An implementation of :class:<code>.AbstractFileWrapper</code> that wraps an actual file on disk. The <code>save</code> implementations will either copy the file to the new path (preserving file attributes) or -- if <code>move</code> is <code>True</code> (the default) -- move the file.</p> <p>Parameters:</p> <ul> <li> filename             (<code>str</code>)         \u2013          <p>The file's name</p> </li> <li> path             (<code>str</code>)         \u2013          <p>The file's absolute path</p> </li> <li> move             (<code>boolean</code>)         \u2013          <p>Whether to move the file upon saving (True, default) or copying.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.LineProcessorStream","title":"<code>LineProcessorStream(input_stream)</code>","text":"<p>         Bases: <code>io.RawIOBase</code></p> <p>While reading from this stream the provided <code>input_stream</code> is read line by line, calling the (overridable) method :meth:<code>.process_line</code> for each read line.</p> <p>Sub classes can thus modify the contents of the <code>input_stream</code> in line, while it is being read. Keep in mind that <code>process_line</code> will receive the line as a byte stream - if underlying code needs to operate on unicode you'll need to do the decoding yourself.</p> <p>Parameters:</p> <ul> <li> input_stream             (<code>io.RawIOBase</code>)         \u2013          <p>The stream to process on the fly.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.LineProcessorStream.process_line","title":"<code>process_line(line)</code>","text":"<p>Called from the <code>read</code> Method of this stream with each line read from <code>self.input_stream</code>.</p> <p>By returning <code>None</code> the line will not be returned from the read stream, effectively being stripped from the wrapper <code>input_stream</code>.</p> <p>Parameters:</p> <ul> <li> line             (<code>bytes</code>)         \u2013          <p>The line as read from <code>self.input_stream</code> in byte representation</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>bytes or None: The processed version of the line (might also be multiple lines), or None if the line is to be stripped from the processed stream.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.MultiStream","title":"<code>MultiStream(*streams)</code>","text":"<p>         Bases: <code>io.RawIOBase</code></p> <p>A stream implementation which when read reads from multiple streams, one after the other, basically concatenating their contents in the order they are provided to the constructor.</p> <p>Parameters:</p> <ul> <li> *streams         \u2013          <p>One or more class:<code>io.IOBase</code> streams to concatenate.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper","title":"<code>StreamWrapper(filename, *streams)</code>","text":"<p>         Bases: <code>AbstractFileWrapper</code></p> <p>A wrapper allowing processing of one or more consecutive streams.</p> <p>Parameters:</p> <ul> <li> *streams         \u2013          <p>One or more class:<code>io.IOBase</code> streams to process one after another to save to storage.</p> </li> </ul>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper.save","title":"<code>save(path, permissions = None)</code>","text":"<p>Will dump the contents of all streams provided during construction into the target file, in the order they were provided.</p>"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper.stream","title":"<code>stream()</code>","text":"<p>If more than one stream was provided to the constructor, will return a :class:<code>.MultiStream</code> wrapping all provided streams in the order they were provided, else the first and only stream is returned directly.</p>"},{"location":"reference/octoprint/logging/","title":"octoprint.logging","text":""},{"location":"reference/octoprint/logging/#octoprint.logging.get_divider_line","title":"<code>get_divider_line(c, message = None, length = 78, indent = 3)</code>","text":"<p>Generate a divider line for logging, optionally with included message.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_divider_line(\"-\")\n'------------------------------------------------------------------------------'\n&gt;&gt;&gt; get_divider_line(\"=\", length=10)\n'=========='\n&gt;&gt;&gt; get_divider_line(\"-\", message=\"Hi\", length=10)\n'--- Hi ---'\n&gt;&gt;&gt; get_divider_line(\"-\", message=\"A slightly longer text\")\n'--- A slightly longer text ---------------------------------------------------'\n&gt;&gt;&gt; get_divider_line(\"-\", message=\"A slightly longer text\", indent=5)\n'----- A slightly longer text -------------------------------------------------'\n&gt;&gt;&gt; get_divider_line(\"-\", message=\"Hello World!\", length=10)\n'--- Hello World!'\n&gt;&gt;&gt; get_divider_line(None)\nTraceback (most recent call last):\n...\nAssertionError: c is not text\n&gt;&gt;&gt; get_divider_line(\"\u00b4`\")\nTraceback (most recent call last):\n...\nAssertionError: c is not a single character\n&gt;&gt;&gt; get_divider_line(\"-\", message=3)\nTraceback (most recent call last):\n...\nAssertionError: message is not text\n&gt;&gt;&gt; get_divider_line(\"-\", length=\"hello\")\nTraceback (most recent call last):\n...\nAssertionError: length is not an int\n&gt;&gt;&gt; get_divider_line(\"-\", indent=\"hi\")\nTraceback (most recent call last):\n...\nAssertionError: indent is not an int\n</code></pre> <p>Parameters:</p> <ul> <li> c             (<code>str</code>)         \u2013          <p>character to use for the line</p> </li> <li> message             (<code>str</code>)         \u2013          <p>message to print in the line</p> </li> <li> length             (<code>int</code>)         \u2013          <p>length of the line</p> </li> <li> indent             (<code>int</code>)         \u2013          <p>indentation of message in line</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>formatted divider line</p> </li> </ul>"},{"location":"reference/octoprint/logging/#octoprint.logging.get_handler","title":"<code>get_handler(name, logger = None)</code>","text":"<p>Retrieves the handler named <code>name</code>.</p> <p>If optional <code>logger</code> is provided, search will be limited to that logger, otherwise the root logger will be searched.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>the name of the handler to look for</p> </li> <li> logger             (<code>logging.loggers.Logger</code>)         \u2013          <p>(optional) the logger to search in, root logger if not provided</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>logging.handlers.Handler | None</code>         \u2013          <p>the handler if it could be found, <code>None</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/logging/#octoprint.logging.log_to_handler","title":"<code>log_to_handler(logger, handler, level, msg, exc_info = None, extra = None, *args)</code>","text":"<p>Logs to the provided handler only.</p> <p>Parameters:</p> <ul> <li> logger             (<code>logging.Logger</code>)         \u2013          <p>logger to log to</p> </li> <li> handler             (<code>logging.Handler</code>)         \u2013          <p>handler to restrict logging to</p> </li> <li> level             (<code>int</code>)         \u2013          <p>level to log at</p> </li> <li> msg             (<code>str</code>)         \u2013          <p>message to log</p> </li> <li> exc_info         \u2013          <p>optional exception info</p> </li> <li> extra         \u2013          <p>optional extra data</p> </li> <li> *args         \u2013          <p>log args</p> </li> </ul>"},{"location":"reference/octoprint/logging/#octoprint.logging.prefix_multilines","title":"<code>prefix_multilines(text: str, prefix: str = ': ') -&gt; str</code>","text":"<p>Prefixes all lines of the given text with the given prefix.</p> <p>Parameters:</p> <ul> <li> text             (<code>str</code>)         \u2013          <p>text to prefix</p> </li> <li> prefix             (<code>str</code>)         \u2013          <p>prefix to use</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>prefixed text</p> </li> </ul>"},{"location":"reference/octoprint/logging/filters/","title":"octoprint.logging.filters","text":""},{"location":"reference/octoprint/logging/handlers/","title":"octoprint.logging.handlers","text":""},{"location":"reference/octoprint/logging/handlers/#octoprint.logging.handlers.TriggeredRolloverLogHandler","title":"<code>TriggeredRolloverLogHandler(*args, **kwargs)</code>","text":"<p>         Bases: <code>AsyncLogHandlerMixin</code>, <code>logging.handlers.RotatingFileHandler</code></p>"},{"location":"reference/octoprint/logging/handlers/#octoprint.logging.handlers.TriggeredRolloverLogHandler.getFilesToDelete","title":"<code>getFilesToDelete()</code>","text":"<p>Determine the files to delete when rolling over.</p>"},{"location":"reference/octoprint/plugin/","title":"octoprint.plugin","text":"<p>This module represents OctoPrint's plugin subsystem. This includes management and helper methods as well as the registered plugin types.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings","title":"<code>PluginSettings(settings, plugin_key, defaults = None, get_preprocessors = None, set_preprocessors = None)</code>","text":"<p>The <code>PluginSettings</code> class is the interface for plugins to their own or globally defined settings.</p> <p>It provides some convenience methods for directly accessing plugin settings via the regular Settings interfaces as well as means to access plugin specific folder locations.</p> <p>All getter and setter methods will ensure that plugin settings are stored in their correct location within the settings structure by modifying the supplied paths accordingly.</p> <p>Parameters:</p> <ul> <li> settings             (<code>octoprint.settings.Settings</code>)         \u2013          <p>The <code>Settings</code> instance on which to operate.</p> </li> <li> plugin_key             (<code>str</code>)         \u2013          <p>The plugin identifier of the plugin for which to create this instance.</p> </li> <li> defaults             (<code>dict</code>)         \u2013          <p>The plugin's defaults settings.</p> </li> <li> get_preprocessors             (<code>dict</code>)         \u2013          <p>The plugin's get preprocessors. A dict of settings paths to callables that will be called with the value of the setting and should return the processed value.</p> </li> <li> set_preprocessors             (<code>dict</code>)         \u2013          <p>The plugin's set preprocessors. A dict of settings paths to callables that will be called with the value of the setting and should return the processed value.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.defaults","title":"<code>defaults = None</code>  <code>instance-attribute</code>","text":"<p>The plugin's defaults settings, prefixed with the plugin's settings path.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_preprocessors","title":"<code>get_preprocessors = {'plugins': {}}</code>  <code>instance-attribute</code>","text":"<p>The plugin's get preprocessors, prefixed with the plugin's settings path.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.plugin_key","title":"<code>plugin_key = plugin_key</code>  <code>instance-attribute</code>","text":"<p>The plugin identifier of the plugin for which this instance was created.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.set_preprocessors","title":"<code>set_preprocessors = {'plugins': {}}</code>  <code>instance-attribute</code>","text":"<p>The plugin's set preprocessors, prefixed with the plugin's settings path.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":"<p>The <code>Settings</code> instance on which to operate.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.add_overlay","title":"<code>add_overlay(overlay, **kwargs)</code>","text":"<p>Adds an overlay for th plugin to the settings.</p> <p>Parameters:</p> <ul> <li> overlay             (<code>dict</code>)         \u2013          <p>The overlay to add.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The key under which the overlay was added.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.clean_all_data","title":"<code>clean_all_data()</code>","text":"<p>Removes all data stored for this plugin.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get","title":"<code>get(path, **kwargs)</code>","text":"<p>Retrieves a raw value from the settings for <code>path</code>, optionally merging the raw value with the default settings if <code>merged</code> is set to True.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to retrieve the value.</p> </li> <li> merged             (<code>bool</code>)         \u2013          <p>Whether to merge the returned result with the default settings (True) or not (False, default).</p> </li> <li> asdict             (<code>bool</code>)         \u2013          <p>Whether to return the result as a dictionary (True) or not (False, default).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>object</code>         \u2013          <p>The retrieved settings value.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_all_data","title":"<code>get_all_data(**kwargs)</code>","text":"<p>Returns all data stored for this plugin.</p> <p>Parameters:</p> <ul> <li> merged             (<code>bool</code>)         \u2013          <p>Whether to merge the data with the defaults. Defaults to <code>True</code>.</p> </li> <li> asdict             (<code>bool</code>)         \u2013          <p>Whether to return the data as a dict. Defaults to <code>True</code>.</p> </li> <li> defaults             (<code>bool</code>)         \u2013          <p>Which defaults to use. Defaults to the plugin defaults.</p> </li> <li> preprocessors             (<code>list</code>)         \u2013          <p>List of preprocessors to apply to the data. Defaults to the plugin preprocessors.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_boolean","title":"<code>get_boolean(path, **kwargs)</code>","text":"<p>Like <code>get</code> but tries to convert the retrieved value to bool.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to retrieve the value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool | None</code>         \u2013          <p>The retrieved settings value, converted to a boolean, if possible, <code>None</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_float","title":"<code>get_float(path, **kwargs)</code>","text":"<p>Like <code>get</code> but tries to convert the retrieved value to float. If <code>min</code> is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for <code>max</code> - it will be returned if the value is greater than it.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to retrieve the value.</p> </li> <li> min             (<code>float</code>)         \u2013          <p>The minimum value to return.</p> </li> <li> max             (<code>float</code>)         \u2013          <p>The maximum value to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | None</code>         \u2013          <p>The retrieved settings value, converted to a float, if possible, <code>None</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_int","title":"<code>get_int(path, **kwargs)</code>","text":"<p>Like <code>get</code> but tries to convert the retrieved value to int. If <code>min</code> is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for <code>max</code> - it will be returned if the value is greater than it.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to retrieve the value.</p> </li> <li> min             (<code>int</code>)         \u2013          <p>The minimum value to return.</p> </li> <li> max             (<code>int</code>)         \u2013          <p>The maximum value to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p>The retrieved settings value, converted to an integer, if possible, <code>None</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_plugin_logfile_path","title":"<code>get_plugin_logfile_path(postfix = None)</code>","text":"<p>Retrieves the path to a logfile specifically for the plugin.</p> <p>If <code>postfix</code> is not supplied, the logfile will be named <code>plugin_&lt;plugin identifier&gt;.log</code> and located within the configured <code>logs</code> folder. If a postfix is supplied, the name will be <code>plugin_&lt;plugin identifier&gt;_&lt;postfix&gt;.log</code> at the same location.</p> <p>Plugins may use this for specific logging tasks. For example, a octoprint.plugin.types.SlicerPlugin might want to create a log file for logging the output of the slicing engine itself if some debug flag is set.</p> <p>Parameters:</p> <ul> <li> postfix             (<code>str</code>)         \u2013          <p>Postfix of the logfile for which to create the path. If set, the file name of the log file will be <code>plugin_&lt;plugin identifier&gt;_&lt;postfix&gt;.log</code>, if not it will be <code>plugin_&lt;plugin identifier&gt;.log</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Absolute path to the log file, directly usable by the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get","title":"<code>global_get(path, **kwargs)</code>","text":"<p>Gets a value from the global settings structure.</p> <p>Directly forwards to octoprint.settings.Settings.get. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_basefolder","title":"<code>global_get_basefolder(folder_type, **kwargs)</code>","text":"<p>Retrieves a globally defined basefolder of the given <code>folder_type</code>.</p> <p>Directly forwards to octoprint.settings.Settings.getBaseFolder.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_boolean","title":"<code>global_get_boolean(path, **kwargs)</code>","text":"<p>Gets a value from the global settings structure and tries to convert it to bool.</p> <p>Directly forwards to octoprint.settings.Settings.getBoolean. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_float","title":"<code>global_get_float(path, **kwargs)</code>","text":"<p>Gets a value from the global settings structure and tries to convert it to float.</p> <p>Directly forwards to octoprint.settings.Settings.getFloat. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_int","title":"<code>global_get_int(path, **kwargs)</code>","text":"<p>Gets a value from the global settings structure and tries to convert it to int.</p> <p>Directly forwards to octoprint.settings.Settings.getInt. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_has","title":"<code>global_has(path, **kwargs)</code>","text":"<p>Checks whether the global settings structure has a value for <code>path</code>.</p> <p>Directly forwards to octoprint.settings.Settings.has.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_remove","title":"<code>global_remove(path, **kwargs)</code>","text":"<p>Removes the value for <code>path</code> from the global settings structure.</p> <p>Directly forwards to octoprint.settings.Settings.remove.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set","title":"<code>global_set(path, value, **kwargs)</code>","text":"<p>Sets a value in the global settings structure.</p> <p>Directly forwards to octoprint.settings.Settings.set. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_boolean","title":"<code>global_set_boolean(path, value, **kwargs)</code>","text":"<p>Sets a value in the global settings structure and tries to convert it to bool.</p> <p>Directly forwards to octoprint.settings.Settings.setBoolean. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_float","title":"<code>global_set_float(path, value, **kwargs)</code>","text":"<p>Sets a value in the global settings structure and tries to convert it to float.</p> <p>Directly forwards to octoprint.settings.Settings.setFloat. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_int","title":"<code>global_set_int(path, value, **kwargs)</code>","text":"<p>Sets a value in the global settings structure and tries to convert it to int.</p> <p>Directly forwards to octoprint.settings.Settings.setInt. See its documentation for possible parameters.</p>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.has","title":"<code>has(path, **kwargs)</code>","text":"<p>Checks whether a value for <code>path</code> is present in the settings.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to check the value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether a value for <code>path</code> is present in the settings.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.remove","title":"<code>remove(path, **kwargs)</code>","text":"<p>Removes the value for <code>path</code> from the settings.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to remove the value.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.remove_overlay","title":"<code>remove_overlay(key)</code>","text":"<p>Removes an overlay from the settings by <code>key</code>.</p> <p>Parameters:</p> <ul> <li> key             (<code>str</code>)         \u2013          <p>The key of the overlay to remove.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.set","title":"<code>set(path, value, **kwargs)</code>","text":"<p>Sets the raw value on the settings for <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to set the value.</p> </li> <li> value             (<code>object</code>)         \u2013          <p>The value to set.</p> </li> <li> force             (<code>bool</code>)         \u2013          <p>If set to True, the modified configuration will be written back to disk even if the value didn't change.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.set_boolean","title":"<code>set_boolean(path, value, **kwargs)</code>","text":"<p>Like <code>set</code> but ensures the value is an bool through attempted conversion before setting it.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to set the value.</p> </li> <li> value             (<code>object</code>)         \u2013          <p>The value to set.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.set_float","title":"<code>set_float(path, value, **kwargs)</code>","text":"<p>Like <code>set</code> but ensures the value is an float through attempted conversion before setting it.</p> <p>If <code>min</code> and/or <code>max</code> are provided, it will also be ensured that the value is greater than or equal to <code>min</code> and less than or equal to <code>max</code>. If that is not the case, the limit value (<code>min</code> if less than that, <code>max</code> if greater than that) will be set instead.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to set the value.</p> </li> <li> value             (<code>object</code>)         \u2013          <p>The value to set.</p> </li> <li> min             (<code>float</code>)         \u2013          <p>The minimum value to set.</p> </li> <li> max             (<code>float</code>)         \u2013          <p>The maximum value to set.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.set_int","title":"<code>set_int(path, value, **kwargs)</code>","text":"<p>Like <code>set</code> but ensures the value is an int through attempted conversion before setting it.</p> <p>If <code>min</code> and/or <code>max</code> are provided, it will also be ensured that the value is greater than or equal to <code>min</code> and less than or equal to <code>max</code>. If that is not the case, the limit value (<code>min</code> if less than that, <code>max</code> if greater than that) will be set instead.</p> <p>Parameters:</p> <ul> <li> path             (<code>list, tuple</code>)         \u2013          <p>The path for which to set the value.</p> </li> <li> value             (<code>object</code>)         \u2013          <p>The value to set.</p> </li> <li> min             (<code>int</code>)         \u2013          <p>The minimum value to set.</p> </li> <li> max             (<code>int</code>)         \u2013          <p>The maximum value to set.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.call_plugin","title":"<code>call_plugin(types, method, args = None, kwargs = None, callback = None, error_callback = None, sorting_context = None, initialized = True, manager = None)</code>","text":"<p>Helper method to invoke the indicated <code>method</code> on all registered plugin implementations implementing the indicated <code>types</code>. Allows providing method arguments and registering callbacks to call in case of success and/or failure of each call which can be used to return individual results to the calling code.</p> <p>Example:</p> <pre><code>def my_success_callback(name, plugin, result):\nprint(\"{name} was called successfully and returned {result!r}\".format(**locals()))\ndef my_error_callback(name, plugin, exc):\nprint(\"{name} raised an exception: {exc!s}\".format(**locals()))\noctoprint.plugin.call_plugin(\n[octoprint.plugin.StartupPlugin],\n\"on_startup\",\nargs=(my_host, my_port),\ncallback=my_success_callback,\nerror_callback=my_error_callback\n)\n</code></pre> <p>Parameters:</p> <ul> <li> types             (<code>list</code>)         \u2013          <p>A list of plugin implementation types to match against.</p> </li> <li> method             (<code>str</code>)         \u2013          <p>Name of the method to call on all matching implementations.</p> </li> <li> args             (<code>tuple</code>)         \u2013          <p>A tuple containing the arguments to supply to the called <code>method</code>. Optional.</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>A dictionary containing the keyword arguments to supply to the called <code>method</code>. Optional.</p> </li> <li> callback             (<code>callable</code>)         \u2013          <p>A callback to invoke after an implementation has been called successfully. Will be called with the three arguments <code>name</code>, <code>plugin</code> and <code>result</code>. <code>name</code> will be the plugin identifier, <code>plugin</code> the plugin implementation instance itself and <code>result</code> the result returned from the <code>method</code> invocation.</p> </li> <li> error_callback             (<code>callable</code>)         \u2013          <p>A callback to invoke after the call of an implementation resulted in an exception. Will be called with the three arguments <code>name</code>, <code>plugin</code> and <code>exc</code>. <code>name</code> will be the plugin identifier, <code>plugin</code> the plugin implementation instance itself and <code>exc</code> the caught exception.</p> </li> <li> initialized             (<code>bool</code>)         \u2013          <p>Ignored.</p> </li> <li> manager             (<code>octoprint.plugin.core.PluginManager | None</code>)         \u2013          <p>The plugin manager to use. If not provided, the global plugin manager</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_manager","title":"<code>plugin_manager(init = False, plugin_folders = None, plugin_bases = None, plugin_entry_points = None, plugin_disabled_list = None, plugin_sorting_order = None, plugin_blacklist = None, plugin_restart_needing_hooks = None, plugin_obsolete_hooks = None, plugin_considered_bundled = None, plugin_validators = None, compatibility_ignored_list = None)</code>","text":"<p>Factory method for initially constructing and consecutively retrieving the PluginManager singleton.</p> <p>Will set the logging prefix to <code>octoprint.plugins.</code>.</p> <p>Parameters:</p> <ul> <li> init             (<code>bool</code>)         \u2013          <p>A flag indicating whether this is the initial call to construct the singleton (<code>True</code>) or not (<code>False</code>, default). If this is set to <code>True</code> and the plugin manager has already been initialized, a ValueError will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False.</p> </li> <li> plugin_folders             (<code>list</code>)         \u2013          <p>A list of folders (as strings containing the absolute path to them) in which to look for potential plugin modules. If not provided this defaults to the configured <code>plugins</code> base folder and <code>src/plugins</code> within OctoPrint's code base.</p> </li> <li> plugin_bases             (<code>list</code>)         \u2013          <p>A list of recognized plugin base classes for which to look for provided implementations. If not provided this defaults to <code>octoprint.plugin.types.OctoPrintPlugin</code>.</p> </li> <li> plugin_entry_points             (<code>list</code>)         \u2013          <p>A list of entry points pointing to modules which to load as plugins. If not provided this defaults to the entry point <code>octoprint.plugin</code>.</p> </li> <li> plugin_disabled_list             (<code>list</code>)         \u2013          <p>A list of plugin identifiers that are currently disabled. If not provided this defaults to all plugins for which <code>enabled</code> is set to <code>False</code> in the settings.</p> </li> <li> plugin_sorting_order             (<code>dict</code>)         \u2013          <p>A dict containing a custom sorting orders for plugins. The keys are plugin identifiers, mapped to dictionaries containing the sorting contexts as key and the custom sorting value as value.</p> </li> <li> plugin_blacklist             (<code>list</code>)         \u2013          <p>A list of plugin identifiers/identifier-requirement tuples that are currently blacklisted.</p> </li> <li> plugin_restart_needing_hooks             (<code>list</code>)         \u2013          <p>A list of hook namespaces which cause a plugin to need a restart in order be enabled/disabled. Does not have to contain full hook identifiers, will be matched with glob patterns. If not provided this defaults to <code>octoprint.server.http.*</code>, <code>octoprint.printer.factory</code>, <code>octoprint.access.permissions</code> and <code>octoprint.timelapse.extensions</code>.</p> </li> <li> plugin_obsolete_hooks             (<code>list</code>)         \u2013          <p>A list of hooks that have been declared obsolete. Plugins implementing them will not be enabled since they might depend on functionality that is no longer available. If not provided this defaults to <code>octoprint.comm.protocol.gcode</code>.</p> </li> <li> plugin_considered_bundled             (<code>list</code>)         \u2013          <p>A list of plugin identifiers that are considered bundled plugins even if installed separately. If not provided this defaults to <code>firmware_check</code>, <code>file_check</code> and <code>pi_support</code>.</p> </li> <li> plugin_validators             (<code>list</code>)         \u2013          <p>A list of additional plugin validators through which to process each plugin.</p> </li> <li> compatibility_ignored_list             (<code>list</code>)         \u2013          <p>A list of plugin keys for which it will be ignored if they are flagged as incompatible. This is for development purposes only and should not be used in production.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>octoprint.plugin.core.PluginManager</code>         \u2013          <p>A fully initialized <code>PluginManager</code> instance to be used for plugin management tasks.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p><code>init</code> was <code>True</code> although the plugin manager was already initialized, or it was <code>False</code> although the plugin manager was not yet initialized.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_settings","title":"<code>plugin_settings(plugin_key, defaults = None, get_preprocessors = None, set_preprocessors = None, settings = None)</code>","text":"<p>Factory method for creating a <code>PluginSettings</code> instance.</p> <p>Parameters:</p> <ul> <li> plugin_key             (<code>str</code>)         \u2013          <p>The plugin identifier for which to create the settings instance.</p> </li> <li> defaults             (<code>dict</code>)         \u2013          <p>The default settings for the plugin, if different from get_settings_defaults.</p> </li> <li> get_preprocessors             (<code>dict</code>)         \u2013          <p>The getter preprocessors for the plugin.</p> </li> <li> set_preprocessors             (<code>dict</code>)         \u2013          <p>The setter preprocessors for the plugin.</p> </li> <li> settings             (<code>octoprint.settings.Settings</code>)         \u2013          <p>The settings instance to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>octoprint.plugin.PluginSettings</code>         \u2013          <p>A fully initialized <code>PluginSettings</code> instance to be used to access the plugin's settings</p> </li> </ul>"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_settings_for_settings_plugin","title":"<code>plugin_settings_for_settings_plugin(plugin_key, instance, settings = None)</code>","text":"<p>Factory method for creating a <code>PluginSettings</code> instance for a given <code>SettingsPlugin</code> instance.</p> <p>Will return <code>None</code> if the provided <code>instance</code> is not a SettingsPlugin instance.</p> <p>Parameters:</p> <ul> <li> plugin_key             (<code>string</code>)         \u2013          <p>The plugin identifier for which to create the settings instance.</p> </li> <li> instance             (<code>octoprint.plugin.types.SettingsPlugin</code>)         \u2013          <p>The <code>SettingsPlugin</code> instance.</p> </li> <li> settings             (<code>octoprint.settings.Settings</code>)         \u2013          <p>The settings instance to use. Defaults to the global OctoPrint settings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>octoprint.plugin.PluginSettings | None</code>         \u2013          <p>A fully initialized <code>PluginSettings</code> instance to be used to access the plugin's settings, or <code>None</code> if the provided <code>instance</code> was not a <code>SettingsPlugin</code></p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/","title":"octoprint.plugin.core","text":"<p>In this module resides the core data structures and logic of the plugin system.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties","title":"<code>ControlProperties</code>","text":""},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_author","title":"<code>attr_author = '__plugin_author__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's author.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_check","title":"<code>attr_check = '__plugin_check__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute which to call to determine if the plugin can be loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_description","title":"<code>attr_description = '__plugin_description__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's description.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_disable","title":"<code>attr_disable = '__plugin_disable__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute which to call when disabling the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_disabling_DISCOURAGED","title":"<code>attr_disabling_DISCOURAGED = '__plugin_disabling_discouraged__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the reason why disabling the plugin is discouraged. Only effective if <code>self.bundled</code> is True.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_enable","title":"<code>attr_enable = '__plugin_enable__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute which to call when enabling the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_helpers","title":"<code>attr_helpers = '__plugin_helpers__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's provided helpers.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_hidden","title":"<code>attr_hidden = '__plugin_hidden__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to determine if the plugin's hidden or not.</p> <p>Only evaluated for bundled plugins, in order to hide them from the Plugin Manager and similar places.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_hooks","title":"<code>attr_hooks = '__plugin_hooks__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's provided hooks.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_implementation","title":"<code>attr_implementation = '__plugin_implementation__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's provided mixin implementation.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_license","title":"<code>attr_license = '__plugin_license__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's license.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_load","title":"<code>attr_load = '__plugin_load__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute which to call when loading the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_name","title":"<code>attr_name = '__plugin_name__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's human readable name.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_privacypolicy","title":"<code>attr_privacypolicy = '__plugin_privacypolicy__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's privacy policy URL, if any.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_pythoncompat","title":"<code>attr_pythoncompat = '__plugin_pythoncompat__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's python compatibility string.</p> <p>If unset a default of <code>&gt;=2.7,&lt;3</code> will be assumed, meaning that the plugin will be considered compatible to Python 2 but not Python 3.</p> <p>To mark a plugin as Python 3 compatible, a string of <code>&gt;=2.7,&lt;4</code> is recommended.</p> <p>Bundled plugins will automatically be assumed to be compatible.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_unload","title":"<code>attr_unload = '__plugin_unload__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute which to call when unloading the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_url","title":"<code>attr_url = '__plugin_url__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's website URL.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_version","title":"<code>attr_version = '__plugin_version__'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's version.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.default_pythoncompat","title":"<code>default_pythoncompat = '&gt;=2.7,&lt;3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Module attribute from which to retrieve the plugin's python compatibility string.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.all","title":"<code>all()</code>  <code>classmethod</code>","text":"<p>Returns a list of all recognized control properties, as defined in this class.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointMetadata","title":"<code>EntryPointMetadata(entry_point)</code>","text":"<p>         Bases: <code>pkginfo.Distribution</code></p> <p>A wrapper around <code>pkginfo.Distribution</code> that extracts metadata from an <code>EntryPoint</code> object.</p> <p>Parameters:</p> <ul> <li> entry_point             (<code>pkg_resources.EntryPoint</code>)         \u2013          <p>The entry point to extract metadata from.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin","title":"<code>EntryPointOrigin(type, entry_point, module_name, package_name, package_version)</code>","text":"<p>Origin of a plugin registered via an entry point.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin.entry_point","title":"<code>entry_point = entry_point</code>  <code>instance-attribute</code>","text":"<p>Name of the entry point, usually <code>octoprint.plugin</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin.module_name","title":"<code>module_name = module_name</code>  <code>instance-attribute</code>","text":"<p>Module registered to the entry point.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin.package_name","title":"<code>package_name = package_name</code>  <code>instance-attribute</code>","text":"<p>Python package containing the entry point.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin.package_version","title":"<code>package_version = package_version</code>  <code>instance-attribute</code>","text":"<p>Version of the python package containing the entry point.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":"<p>Always <code>entry_point</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.FolderOrigin","title":"<code>FolderOrigin(type, folder)</code>","text":"<p>Origin of a (single file) plugin loaded from a plugin folder.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.FolderOrigin.folder","title":"<code>folder = folder</code>  <code>instance-attribute</code>","text":"<p>Folder path from which the plugin was loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.FolderOrigin.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":"<p>Always <code>folder</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ModuleOrigin","title":"<code>ModuleOrigin(type, module_name, folder)</code>","text":"<p>Origin of a (single file) plugin loaded from a plugin folder.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ModuleOrigin.folder","title":"<code>folder = folder</code>  <code>instance-attribute</code>","text":"<p>Folder path from which the plugin was loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ModuleOrigin.module_name","title":"<code>module_name = module_name</code>  <code>instance-attribute</code>","text":"<p>Name of the module from which the plugin was loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ModuleOrigin.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":"<p>Always <code>module</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin","title":"<code>Plugin()</code>","text":"<p>The parent class of all plugin implementations.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin._basefolder","title":"<code>_basefolder = None</code>  <code>instance-attribute</code>","text":"<p>The base folder of the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin._identifier","title":"<code>_identifier = None</code>  <code>instance-attribute</code>","text":"<p>The identifier of the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin._logger","title":"<code>_logger = None</code>  <code>instance-attribute</code>","text":"<p>The logger instance to use, with the logging name set to octoprint.plugin.core.PluginManager.logging_prefix concatenated with the contents of <code>_identifier</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin._plugin_name","title":"<code>_plugin_name = None</code>  <code>instance-attribute</code>","text":"<p>The name of the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin._plugin_version","title":"<code>_plugin_version = None</code>  <code>instance-attribute</code>","text":"<p>The version of the plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.initialize","title":"<code>initialize()</code>","text":"<p>Called by the plugin core after performing all injections. Override this to initialize your implementation.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.on_plugin_disabled","title":"<code>on_plugin_disabled()</code>","text":"<p>Called by the plugin core when the plugin was disabled. Override this to react to the event.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.on_plugin_enabled","title":"<code>on_plugin_enabled()</code>","text":"<p>Called by the plugin core when the plugin was enabled. Override this to react to the event.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginCantDisable","title":"<code>PluginCantDisable(name, reason)</code>","text":"<p>         Bases: <code>PluginLifecycleException</code></p> <p>Thrown by plugins that cannot be disabled.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginCantEnable","title":"<code>PluginCantEnable(name, reason)</code>","text":"<p>         Bases: <code>PluginLifecycleException</code></p> <p>Thrown by plugins that cannot be enabled.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginCantInitialize","title":"<code>PluginCantInitialize(name, reason)</code>","text":"<p>         Bases: <code>PluginLifecycleException</code></p> <p>Thrown by plugins that cannot be initialized.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo","title":"<code>PluginInfo(key, location, instance, name = None, version = None, description = None, author = None, url = None, license = None, parsed_metadata = None)</code>","text":"<p>The <code>PluginInfo</code> class wraps all available information about a registered plugin.</p> <p>This includes its metadata (like name, description, version, etc) as well as the actual plugin extensions like implementation, hooks and helpers.</p> <p>It works on Python module objects and extracts the relevant data from those via accessing the control properties.</p> <p>Parameters:</p> <ul> <li> key             (<code>str</code>)         \u2013          <p>Identifier of the plugin</p> </li> <li> location             (<code>str</code>)         \u2013          <p>Installation folder of the plugin</p> </li> <li> instance             (<code>module</code>)         \u2013          <p>Plugin module instance - this may be <code>None</code> if the plugin has been blacklisted!</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Human readable name of the plugin</p> </li> <li> version             (<code>str</code>)         \u2013          <p>Version of the plugin</p> </li> <li> description             (<code>str</code>)         \u2013          <p>Description of the plugin</p> </li> <li> author             (<code>str</code>)         \u2013          <p>Author of the plugin</p> </li> <li> url             (<code>str</code>)         \u2013          <p>URL of the website of the plugin</p> </li> <li> license             (<code>str</code>)         \u2013          <p>License of the plugin</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.author","title":"<code>author</code>  <code>property</code>","text":"<p>Author of the plugin.</p> <p>Will be taken from the author attribute of the plugin module if available, otherwise from the <code>author</code> supplied during construction. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>Author of the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.blacklisted","title":"<code>blacklisted = False</code>  <code>instance-attribute</code>","text":"<p>Whether the plugin is blacklisted.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.bundled","title":"<code>bundled = False</code>  <code>instance-attribute</code>","text":"<p>Whether this plugin is bundled with OctoPrint.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.check","title":"<code>check</code>  <code>property</code>","text":"<p>Method for pre-load check of plugin. Will be taken from the check attribute of the plugin module if available, otherwise a lambda always returning True is returned.</p> <p>Returns:</p> <ul> <li> <code>callable</code>         \u2013          <p>Check method for the plugin module which should return True if the plugin can be loaded, False otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.control_properties","title":"<code>control_properties</code>  <code>property</code>","text":"<p>The control properties recognized in the plugin's AST.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.description","title":"<code>description</code>  <code>property</code>","text":"<p>Description of the plugin.</p> <p>Will be taken from the description attribute of the plugin module if available, otherwise from the <code>description</code> supplied during construction. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>Description of the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.disable","title":"<code>disable</code>  <code>property</code>","text":"<p>Method for disabling the plugin module. Will be taken from the disable attribute of the plugin module if available, otherwise a no-operation lambda will be returned.</p> <p>Returns:</p> <ul> <li> <code>callable</code>         \u2013          <p>Disable method for the plugin module.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.disabling_discouraged","title":"<code>disabling_discouraged</code>  <code>property</code>","text":"<p>Reason why disabling this plugin is discouraged.</p> <p>Only evaluated for bundled plugins!</p> <p>Will be taken from the <code>disabling_discouraged</code> attribute of the plugin module if available. <code>False</code> if unset or plugin not bundled.</p> <p>Returns:</p> <ul> <li> <code>str | bool</code>         \u2013          <p>Reason why disabling this plugin is discouraged (only for bundled plugins)</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.enable","title":"<code>enable</code>  <code>property</code>","text":"<p>Method for enabling the plugin module. Will be taken from the enable attribute of the plugin module if available, otherwise a no-operation lambda will be returned.</p> <p>Returns:</p> <ul> <li> <code>callable</code>         \u2013          <p>Enable method for the plugin module.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.enabled","title":"<code>enabled = True</code>  <code>instance-attribute</code>","text":"<p>Whether the plugin is enabled.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.forced_disabled","title":"<code>forced_disabled = False</code>  <code>instance-attribute</code>","text":"<p>Whether the plugin has been force disabled by the system, e.g. due to safe mode blacklisting.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.helpers","title":"<code>helpers</code>  <code>property</code>","text":"<p>Helpers provided by the plugin.</p> <p>Will be taken from the helpers attribute of the plugin module if available, otherwise an empty dictionary is returned.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>Helpers provided by the plugin, mapping from helper name to helper callable.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.hidden","title":"<code>hidden</code>  <code>property</code>","text":"<p>Hidden flag.</p> <p>Will be taken from the hidden attribute of the plugin module if available, otherwise defaults to <code>False</code>.</p> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the plugin should be flagged as hidden or not</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.hooks","title":"<code>hooks</code>  <code>property</code>","text":"<p>Hooks provided by the plugin.</p> <p>Will be taken from the hooks attribute of the plugin module if available, otherwise an empty dictionary is returned.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>Hooks provided by the plugin, mapping from hook name to handler callable.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.implementation","title":"<code>implementation</code>  <code>property</code>","text":"<p>Implementation provided by the plugin.</p> <p>Will be taken from the implementation attribute of the plugin module if available, otherwise <code>None</code> is returned.</p> <p>Returns:</p> <ul> <li> <code>object | None</code>         \u2013          <p>Implementation provided by the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.incompatible","title":"<code>incompatible = False</code>  <code>instance-attribute</code>","text":"<p>Whether this plugin has been detected as incompatible.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.invalid_syntax","title":"<code>invalid_syntax = False</code>  <code>instance-attribute</code>","text":"<p>Whether invalid syntax was encountered while trying to load this plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.license","title":"<code>license</code>  <code>property</code>","text":"<p>License of the plugin.</p> <p>Will be taken from the license attribute of the plugin module if available, otherwise from the <code>license</code> supplied during construction. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>License of the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.load","title":"<code>load</code>  <code>property</code>","text":"<p>Method for loading the plugin module. Will be taken from the load attribute of the plugin module if available, otherwise a no-operation lambda will be returned.</p> <p>Returns:</p> <ul> <li> <code>callable</code>         \u2013          <p>Load method for the plugin module.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.loaded","title":"<code>loaded = False</code>  <code>instance-attribute</code>","text":"<p>Whether this plugin has been loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.looks_like_plugin","title":"<code>looks_like_plugin</code>  <code>property</code>","text":"<p>Returns whether the plugin actually looks like a plugin (has control properties) or not.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.managable","title":"<code>managable = True</code>  <code>instance-attribute</code>","text":"<p>Whether this plugin can be managed by OctoPrint.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.name","title":"<code>name</code>  <code>property</code>","text":"<p>Human readable name of the plugin.</p> <p>Will be taken from the name attribute of the plugin module if available, otherwise from the <code>name</code> supplied during construction with a fallback to <code>key</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Name of the plugin, fallback is the plugin's identifier.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.needs_restart","title":"<code>needs_restart = False</code>  <code>instance-attribute</code>","text":"<p>Whether this plugin needs a restart of OctoPrint after enabling/disabling.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.origin","title":"<code>origin = None</code>  <code>instance-attribute</code>","text":"<p>The origin from which this plugin was loaded, either a octoprint.plugin.core.EntryPointOrigin, octoprint.plugin.core.FolderOrigin or [octoprint.plugin.core.ModuleOrigin] instance. Set during loading, initially <code>None</code>.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.parsed_metadata","title":"<code>parsed_metadata</code>  <code>property</code>","text":"<p>The plugin metadata parsed from the plugin's AST.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.privacypolicy","title":"<code>privacypolicy</code>  <code>property</code>","text":"<p>Privacy Policy URL of the plugin.</p> <p>Will be taken from the privacy policy attribute of the plugin module if available. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>Privacy Policy URL of the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.pythoncompat","title":"<code>pythoncompat</code>  <code>property</code>","text":"<p>Python compatibility string of the plugin module if available, otherwise defaults to <code>&gt;=2.7,&lt;3</code>.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Python compatibility string of the plugin</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.unload","title":"<code>unload</code>  <code>property</code>","text":"<p>Method for unloading the plugin module. Will be taken from the unload attribute of the plugin module if available, otherwise a no-operation lambda will be returned.</p> <p>Returns:</p> <ul> <li> <code>callable</code>         \u2013          <p>Unload method for the plugin module.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.url","title":"<code>url</code>  <code>property</code>","text":"<p>Website URL for the plugin.</p> <p>Will be taken from the url attribute of the plugin module if available, otherwise from the <code>url</code> supplied during construction. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>Website URL for the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.version","title":"<code>version</code>  <code>property</code>","text":"<p>Version of the plugin.</p> <p>Will be taken from the version attribute of the plugin module if available, otherwise from the <code>version</code> supplied during construction. May be <code>None</code>.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>Version of the plugin.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.get_hook","title":"<code>get_hook(hook)</code>","text":"<p>Parameters:</p> <ul> <li> hook             (<code>str</code>)         \u2013          <p>Hook to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>callable | None</code>         \u2013          <p>Handler for the requested <code>hook</code>, or <code>None</code> if no handler is registered.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.get_implementation","title":"<code>get_implementation(*types)</code>","text":"<p>Returns the plugin's implementation if it matches all of the requested <code>types</code>, <code>None</code> otherwise.</p> <p>Parameters:</p> <ul> <li> types             (<code>list</code>)         \u2013          <p>List of octoprint.plugin.core.Plugin sub classes the implementation needs to implement.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>object | None</code>         \u2013          <p>The plugin's implementation if it matches all of the requested <code>types</code>, <code>None</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.long_str","title":"<code>long_str(show_bundled = False, bundled_strs = (' [B]', ''), show_location = False, location_str = ' - {location}', show_enabled = False, enabled_strs = ('* ', '  ', 'X ', 'C '))</code>","text":"<p>Long string representation of the plugin's information. Will return a string of the format <code>&lt;enabled&gt;&lt;str(self)&gt;&lt;bundled&gt;&lt;location&gt;</code>.</p> <p><code>enabled</code>, <code>bundled</code> and <code>location</code> will only be displayed if the corresponding flags are set to <code>True</code>. They will be filled from <code>enabled_str</code>, <code>bundled_str</code> and <code>location_str</code> as follows:</p> <code>enabled_str</code> a 4-tuple, the first entry being the string to insert when the plugin is enabled, the second entry the string to insert when it is not, the third entry the string when it is blacklisted and the fourth when it is incompatible. Example: <code>(\"* \", \"  \", \"X \", \"C \")</code> <code>bundled_str</code> a 2-tuple, the first entry being the string to insert when the plugin is bundled, the second entry the string to insert when it is not. Example: <code>(\" [B]\", \"\")</code> <code>location_str</code> a format string (to be parsed with <code>str.format</code>), the <code>{location}</code> placeholder will be replaced with the plugin's installation folder on disk. Example: <code>\" - {location}\"</code> <p>Parameters:</p> <ul> <li> show_enabled             (<code>boolean</code>)         \u2013          <p>whether to show the <code>enabled</code> part</p> </li> <li> enabled_strs             (<code>tuple</code>)         \u2013          <p>the 2-tuple containing the two possible strings to use for displaying the enabled state</p> </li> <li> show_bundled             (<code>boolean</code>)         \u2013          <p>whether to show the <code>bundled</code> part</p> </li> <li> bundled_strs(tuple)         \u2013          <p>the 2-tuple containing the two possible strings to use for displaying the bundled state</p> </li> <li> show_location             (<code>boolean</code>)         \u2013          <p>whether to show the <code>location</code> part</p> </li> <li> location_str             (<code>str</code>)         \u2013          <p>the format string to use for displaying the plugin's installation location</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The long string representation of the plugin as described above</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.validate","title":"<code>validate(phase, additional_validators = None)</code>","text":"<p>Validates the plugin for various validation phases.</p> <p><code>phase</code> can be one of <code>before_import</code>, <code>before_load</code>, <code>after_load</code>.</p> <p>Used by octoprint.plugin.core.PluginManager, should not be used elsewhere.</p> <p>Parameters:</p> <ul> <li> phase             (<code>str</code>)         \u2013          <p>Phase to validate for, one of <code>before_import</code>, <code>before_load</code>, <code>after_load</code></p> </li> <li> additional_validators             (<code>list</code>)         \u2013          <p>List of additional validator functions to call, each of which should accept two arguments, <code>phase</code> and <code>plugin_info</code>, and return a boolean indicating whether the plugin should be considered valid for the given phase.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the plugin is valid for the given phase.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginLifecycleException","title":"<code>PluginLifecycleException(name, reason, message)</code>","text":"<p>         Bases: <code>Exception</code></p> <p>General plugin lifecycle exception.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager","title":"<code>PluginManager(plugin_folders, plugin_bases, plugin_entry_points, logging_prefix = None, plugin_disabled_list = None, plugin_sorting_order = None, plugin_blacklist = None, plugin_restart_needing_hooks = None, plugin_obsolete_hooks = None, plugin_considered_bundled = None, plugin_validators = None, compatibility_ignored_list = None)</code>","text":"<p>The <code>PluginManager</code> is the central component for finding, loading and accessing plugins provided to the system.</p> <p>It is able to discover plugins both through possible file system locations as well as customizable entry points.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.compatibility_ignored_list","title":"<code>compatibility_ignored_list = compatibility_ignored_list</code>  <code>instance-attribute</code>","text":"<p>A list of plugin keys that should be ignored when checking for compatibility.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.disabled_plugins","title":"<code>disabled_plugins = {}</code>  <code>instance-attribute</code>","text":"<p>A dictionary of disabled plugins, identifier mapped to plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.enabled_plugins","title":"<code>enabled_plugins = {}</code>  <code>instance-attribute</code>","text":"<p>A dictionary of enabled plugins, identifier mapped to plugin.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.logging_prefix","title":"<code>logging_prefix = logging_prefix</code>  <code>instance-attribute</code>","text":"<p>The logging prefix to use for all plugins.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_bases","title":"<code>plugin_bases = plugin_bases</code>  <code>instance-attribute</code>","text":"<p>A list of base classes that plugins must inherit from.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_blacklist","title":"<code>plugin_blacklist = processed_blacklist</code>  <code>instance-attribute</code>","text":"<p>A list of plugin keys that should not be loaded.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_considered_bundled","title":"<code>plugin_considered_bundled = plugin_considered_bundled</code>  <code>instance-attribute</code>","text":"<p>A list of plugin keys that are considered bundled.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_disabled_list","title":"<code>plugin_disabled_list = plugin_disabled_list</code>  <code>instance-attribute</code>","text":"<p>A list of plugin keys that should not be enabled when loading.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_entry_points","title":"<code>plugin_entry_points = plugin_entry_points</code>  <code>instance-attribute</code>","text":"<p>A list of entry points to search for plugins in.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_folders","title":"<code>plugin_folders = plugin_folders</code>  <code>instance-attribute</code>","text":"<p>A list of folders to search for plugins in.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_hooks","title":"<code>plugin_hooks</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(dict) dictionary of registered hooks and their handlers</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_obsolete_hooks","title":"<code>plugin_obsolete_hooks = plugin_obsolete_hooks</code>  <code>instance-attribute</code>","text":"<p>A list of plugin hooks that are obsolete.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_restart_needing_hooks","title":"<code>plugin_restart_needing_hooks = plugin_restart_needing_hooks</code>  <code>instance-attribute</code>","text":"<p>A list of plugin hooks that need a restart to take effect.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_sorting_order","title":"<code>plugin_sorting_order = plugin_sorting_order</code>  <code>instance-attribute</code>","text":"<p>A dictionary of plugin keys and their sorting order definitions.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_validators","title":"<code>plugin_validators = plugin_validators</code>  <code>instance-attribute</code>","text":"<p>A list of validator functions that will be called for each plugin to determine whether it is valid or not.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugins","title":"<code>plugins</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(list) list of enabled and disabled registered plugins</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.disable_plugin","title":"<code>disable_plugin(name, plugin = None)</code>","text":"<p>Disables a plugin.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>plugin identifier</p> </li> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>octoprint.plugin.core.PluginNeedsRestart</code>           \u2013          <p>if the plugin needs a server restart to get disabled</p> </li> <li> <code>octoprint.plugin.core.PluginLifecycleException</code>           \u2013          <p>if anything fails during deactivation</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.enable_plugin","title":"<code>enable_plugin(name, plugin = None, initialize_implementation = True, startup = False)</code>","text":"<p>Enables a plugin.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>plugin identifier</p> </li> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> <li> initialize_implementation             (<code>bool</code>)         \u2013          <p>whether plugin implementations should be initialized</p> </li> <li> startup             (<code>bool</code>)         \u2013          <p>whether this is called during startup of the platform</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin was enabled, <code>False</code> otherwise</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>octoprint.plugin.core.PluginNeedsRestart</code>           \u2013          <p>if the plugin needs a server restart to get enabled</p> </li> <li> <code>octoprint.plugin.core.PluginCantEnable</code>           \u2013          <p>if the plugin cannot be enabled due to obsolete hooks</p> </li> <li> <code>octoprint.plugin.core.PluginLifecycleException</code>           \u2013          <p>if anything fails during validation or activation of the plugin</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.find_plugins","title":"<code>find_plugins(existing = None, ignore_uninstalled = True, incl_all_found = False)</code>","text":"<p>Run the plugin discovery process and return the added plugins.</p> <p>Parameters:</p> <ul> <li> existing             (<code>dict</code>)         \u2013          <p>Existing plugins to check against</p> </li> <li> ignore_uninstalled             (<code>bool</code>)         \u2013          <p>Ignore plugins marked as uninstalled</p> </li> <li> incl_all_found             (<code>bool</code>)         \u2013          <p>Return all found plugins, not just the added ones</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict | tuple</code>         \u2013          <p>Dictionary of added plugins or tuple of added (<code>dict</code>) and all found (<code>list</code>) plugins</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_filtered_implementations","title":"<code>get_filtered_implementations(f, *types, **kwargs)</code>","text":"<p>Get all mixin implementations that implement all of the provided <code>types</code> and match the provided filter <code>f</code>.</p> <p>Parameters:</p> <ul> <li> f             (<code>callable</code>)         \u2013          <p>A filter function returning <code>True</code> for implementations to return and <code>False</code> for those to exclude. Gets passed each implementation as its only argument.</p> </li> <li> types             (<code>type</code>)         \u2013          <p>The types a mixin implementation needs to implement in order to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>         \u2013          <p>A list of all found and matching implementations.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_helpers","title":"<code>get_helpers(name, *helpers)</code>","text":"<p>Retrieves the named <code>helpers</code> for the plugin with identifier <code>name</code>.</p> <p>If the plugin is not available, returns None. Otherwise returns a :class:<code>dict</code> with the requested plugin helper names mapped to the method - if a helper could not be resolved, it will be missing from the dict.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Identifier of the plugin for which to look up the <code>helpers</code>.</p> </li> <li> helpers             (<code>str</code>)         \u2013          <p>Identifiers of the helpers of plugin <code>name</code> to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dictionary of all resolved helper callables, mapped by their identifiers, or <code>None</code> if the plugin was not registered with the system.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_hooks","title":"<code>get_hooks(hook)</code>","text":"<p>Retrieves all registered handlers for the specified hook.</p> <p>Parameters:</p> <ul> <li> hook             (<code>str</code>)         \u2013          <p>The hook for which to retrieve the handlers.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dict containing all registered handlers mapped by their plugin's identifier.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_implementations","title":"<code>get_implementations(*types, **kwargs)</code>","text":"<p>Get all mixin implementations that implement all of the provided <code>types</code>.</p> <p>Parameters:</p> <ul> <li> types             (<code>type</code>)         \u2013          <p>The types a mixin implementation needs to implement in order to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>         \u2013          <p>A list of all found implementations</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_plugin","title":"<code>get_plugin(identifier, require_enabled = True)</code>","text":"<p>Retrieves the module of the plugin identified by <code>identifier</code>. If the plugin is not registered or disabled and <code>required_enabled</code> is <code>True</code> (the default) <code>None</code> will be returned.</p> <p>Parameters:</p> <ul> <li> identifier             (<code>str</code>)         \u2013          <p>The identifier of the plugin to retrieve.</p> </li> <li> require_enabled             (<code>bool</code>)         \u2013          <p>Whether to only return the plugin if is enabled (<code>True</code>, default) or also if it's disabled.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>module</code>         \u2013          <p>The requested plugin module or None</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_plugin_info","title":"<code>get_plugin_info(identifier, require_enabled = True)</code>","text":"<p>Retrieves the octoprint.plugin.core.PluginInfo instance identified by <code>identifier</code>.</p> <p>If the plugin is not registered or disabled and <code>required_enabled</code> is <code>True</code> (the default) <code>None</code> will be returned.</p> <p>Parameters:</p> <ul> <li> identifier             (<code>str</code>)         \u2013          <p>The identifier of the plugin to retrieve.</p> </li> <li> require_enabled             (<code>bool</code>)         \u2013          <p>Whether to only return the plugin if is enabled (<code>True</code>, default) or also if it's <code>disabled</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>octoprint.plugin.core.PluginInfo</code>         \u2013          <p>The requested <code>PluginInfo</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_any_of_hooks","title":"<code>has_any_of_hooks(plugin, *hooks)</code>  <code>staticmethod</code>","text":"<p>Tests if the plugin contains any of the provided hooks.</p> <p>Uses octoprint.plugin.core.PluginManager.hook_matches_hooks.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin to test hooks for</p> </li> <li> hooks             (<code>str</code>)         \u2013          <p>hooks to test against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if any of the plugin's hooks match the provided hooks,     <code>False</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_any_of_mixins","title":"<code>has_any_of_mixins(plugin, *mixins)</code>  <code>staticmethod</code>","text":"<p>Tests if the <code>plugin</code> has an implementation implementing any of the provided <code>mixins</code>.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin for which to check the implementation</p> </li> <li> mixins             (<code>type</code>)         \u2013          <p>mixins to test against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin's implementation implements any of the provided mixins, <code>False</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_obsolete_hooks","title":"<code>has_obsolete_hooks(plugin)</code>","text":"<p>Checks whether the plugin uses any of the defined obsolete hooks.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin uses any of the defined obsolete hooks, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_restart_needing_hooks","title":"<code>has_restart_needing_hooks(plugin)</code>","text":"<p>Checks whether the plugin has any hooks that need a restart on changes.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin has any hooks that need a server restart on changes, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_restart_needing_implementation","title":"<code>has_restart_needing_implementation(plugin)</code>","text":"<p>Checks whether the plugin's implementation needs a restart on changes.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin's implementation needs a server restart on changes, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.hook_matches_hooks","title":"<code>hook_matches_hooks(hook, *hooks)</code>  <code>staticmethod</code>","text":"<p>Tests if <code>hook</code> matches any of the provided <code>hooks</code> to test for.</p> <p><code>hook</code> is expected to be an exact hook name.</p> <p><code>hooks</code> is expected to be a list containing one or more hook names or patterns. That can be either an exact hook name or an [fnmatch.fnmatch] pattern.</p> <p>Parameters:</p> <ul> <li> hook             (<code>str</code>)         \u2013          <p>the hook to test</p> </li> <li> hooks             (<code>str</code>)         \u2013          <p>the hook name patterns to test against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the <code>hook</code> matches any of the <code>hooks</code>, <code>False</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.initialize_implementation","title":"<code>initialize_implementation(name, plugin, implementation, additional_injects = None, additional_inject_factories = None, additional_pre_inits = None, additional_post_inits = None)</code>","text":"<p>Initializes the given implementation.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>name of the plugin</p> </li> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin to initialize the implementation for</p> </li> <li> implementation             (<code>tuple</code>)         \u2013          <p>implementation to initialize</p> </li> <li> additional_injects             (<code>dict</code>)         \u2013          <p>additional injects to inject into the implementation, a dict mapping inject names to inject objects</p> </li> <li> additional_inject_factories             (<code>list</code>)         \u2013          <p>additional inject factories to use to generate injections into the implementation, each included callable will be called with the plugin's identifier and the implementation as parameters and is expected to return a dict of injections mapping inject names to inject objects</p> </li> <li> additional_pre_inits             (<code>list</code>)         \u2013          <p>additional pre-initialization hooks to call, each included callable will be called with the plugin's identifier and the implementation as parameters</p> </li> <li> additional_post_inits             (<code>list</code>)         \u2013          <p>additional post-initialization hooks to call, each included callable will be called with the plugin's identifier and the implementation as parameters</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.initialize_implementation_of_plugin","title":"<code>initialize_implementation_of_plugin(name, plugin, additional_injects = None, additional_inject_factories = None, additional_pre_inits = None, additional_post_inits = None)</code>","text":"<p>Initializes the implementation of the given plugin.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>name of the plugin</p> </li> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin to initialize the implementation for</p> </li> <li> additional_injects             (<code>dict</code>)         \u2013          <p>additional injects to inject into the implementation, a dict mapping inject names to inject objects</p> </li> <li> additional_inject_factories             (<code>list</code>)         \u2013          <p>additional inject factories to use to generate injections into the implementation, each included callable will be called with the plugin's identifier and the implementation as parameters and is expected to return a dict of injections mapping inject names to inject objects</p> </li> <li> additional_pre_inits             (<code>list</code>)         \u2013          <p>additional pre-initialization hooks to call, each included callable will be called with the plugin's identifier and implementation as arguments</p> </li> <li> additional_post_inits             (<code>list</code>)         \u2013          <p>additional post-initialization hooks to call, each included callable will be called with the plugin's identifier and implementation as arguments</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin's implementation was initialized, <code>False</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.initialize_implementations","title":"<code>initialize_implementations(additional_injects = None, additional_inject_factories = None, additional_pre_inits = None, additional_post_inits = None)</code>","text":"<p>Initializes all plugin implementations.</p> <p>Parameters:</p> <ul> <li> additional_injects             (<code>dict</code>)         \u2013          <p>additional injects to inject into the implementation, a dict mapping inject names to inject objects</p> </li> <li> additional_inject_factories             (<code>list</code>)         \u2013          <p>additional inject factories to use to generate injections into implementations, each included callable will be called with the plugin's identifier and implementation as arguments and is expected to return a dict of injections mapping inject names to inject objects</p> </li> <li> additional_pre_inits             (<code>list</code>)         \u2013          <p>additional pre-initialization hooks to call, will be called with the plugin's identifier and implementation as arguments</p> </li> <li> additional_post_inits             (<code>list</code>)         \u2013          <p>additional post-initialization hooks to call, will be called with the plugin's identifier and implementation as arguments</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_obsolete_hook","title":"<code>is_obsolete_hook(hook)</code>","text":"<p>Checks whether a hook is defined obsolete.</p> <p>Parameters:</p> <ul> <li> hook             (<code>str</code>)         \u2013          <p>hook to check</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the hook is defined obsolete, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_plugin_marked","title":"<code>is_plugin_marked(name, flag)</code>","text":"<p>Checks whether a plugin has been marked with a certain flag.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>the plugin's identifier</p> </li> <li> flag             (<code>str</code>)         \u2013          <p>the flag to check</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin has been flagged, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_restart_needing_hook","title":"<code>is_restart_needing_hook(hook)</code>","text":"<p>Checks whether a hook needs a restart on changes.</p> <p>Parameters:</p> <ul> <li> hook             (<code>str</code>)         \u2013          <p>hook to check</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the hook needs a server restart on changes, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_restart_needing_plugin","title":"<code>is_restart_needing_plugin(plugin)</code>","text":"<p>Checks whether the plugin needs a restart on changes.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p><code>True</code> if the plugin needs a server restart on changes, <code>False</code> otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.load_plugin","title":"<code>load_plugin(name, plugin = None, startup = False, initialize_implementation = True)</code>","text":"<p>Loads plugin <code>name</code>, triggering all lifecycle events as needed.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>plugin identifier</p> </li> <li> plugin             (<code>octoprint.plugin.core.Plugin</code>)         \u2013          <p>plugin instance</p> </li> <li> startup             (<code>bool</code>)         \u2013          <p>whether this is called during startup of the platform</p> </li> <li> initialize_implementation             (<code>bool</code>)         \u2013          <p>whether plugin implementations should be initialized</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>octoprint.plugin.core.PluginLifecycleException</code>           \u2013          <p>if any of the lifecycle events fail</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.log_all_plugins","title":"<code>log_all_plugins(show_bundled = True, bundled_str = (' (bundled)', ''), show_location = True, location_str = ' = {location}', show_enabled = True, enabled_str = (' ', '!', '#', '*'), only_to_handler = None)</code>","text":"<p>Logs all plugins to the logger.</p> <p>Parameters:</p> <ul> <li> show_bundled             (<code>bool</code>)         \u2013          <p>whether to show if plugins are bundled</p> </li> <li> bundled_str             (<code>tuple</code>)         \u2013          <p>strings to use for bundled plugins, first string is used if the plugin is bundled, second string if it is not</p> </li> <li> show_location             (<code>bool</code>)         \u2013          <p>whether to show the location of the plugin</p> </li> <li> location_str             (<code>str</code>)         \u2013          <p>string to use for the location of the plugin, will be formatted with the location</p> </li> <li> show_enabled             (<code>bool</code>)         \u2013          <p>whether to show if plugins are enabled</p> </li> <li> enabled_str             (<code>tuple</code>)         \u2013          <p>strings to use for enabled plugins, first string is used if the plugin is enabled, second string if it is not</p> </li> <li> only_to_handler             (<code>logging.handler.Handler</code>)         \u2013          <p>if given, only log to the given handler, otherwise log to the logger</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.mark_plugin","title":"<code>mark_plugin(name, **flags)</code>","text":"<p>Mark plugin <code>name</code> with an arbitrary number of flags.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>plugin identifier</p> </li> <li> flags             (<code>dict</code>)         \u2013          <p>dictionary of flag names and values</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.mixins_matching_bases","title":"<code>mixins_matching_bases(klass, *bases)</code>  <code>staticmethod</code>","text":"<p>Returns a set of all mixins of the given <code>klass</code> that match any of the provided <code>bases</code>.</p> <p>Parameters:</p> <ul> <li> klass             (<code>type</code>)         \u2013          <p>the class to check for mixins</p> </li> <li> bases             (<code>type</code>)         \u2013          <p>the base classes to check against</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>set</code>         \u2013          <p>a set of all mixins of the given <code>klass</code> that match any of the provided <code>bases</code>.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.register_message_receiver","title":"<code>register_message_receiver(client)</code>","text":"<p>Registers a <code>client</code> for receiving plugin messages.</p> <p>The <code>client</code> needs to be a callable accepting two input arguments, <code>plugin</code> (the sending plugin's identifier) and <code>data</code> (the message itself), and one optional keyword argument, <code>permissions</code> (an optional list of permissions to test against).</p> <p>Parameters:</p> <ul> <li> client             (<code>callable</code>)         \u2013          <p>The client to register for receiving plugin messages.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.reload_plugins","title":"<code>reload_plugins(startup = False, initialize_implementations = True, force_reload = None)</code>","text":"<p>Reloads plugins, detecting newly added ones in the process.</p> <p>Logs the currently detected plugins and their status.</p> <p>Parameters:</p> <ul> <li> startup             (<code>boolean</code>)         \u2013          <p>whether this is called during startup of the platform</p> </li> <li> initialize_implementations             (<code>boolean</code>)         \u2013          <p>whether plugin implementations should be initialized</p> </li> <li> force_reload             (<code>list</code>)         \u2013          <p>list of plugin identifiers which should be force reloaded</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.send_plugin_message","title":"<code>send_plugin_message(plugin, data, permissions = None)</code>","text":"<p>Sends <code>data</code> in the name of <code>plugin</code> to all currently registered message receivers by invoking them with the three arguments.</p> <p>Parameters:</p> <ul> <li> plugin             (<code>str</code>)         \u2013          <p>The sending plugin's identifier.</p> </li> <li> data             (<code>dict</code>)         \u2013          <p>The message.</p> </li> <li> permissions             (<code>list</code>)         \u2013          <p>A list of permissions to test against in the client.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.unload_plugin","title":"<code>unload_plugin(name)</code>","text":"<p>Unloads plugin <code>name</code>, triggering all lifecycle events as needed.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>plugin identifier</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>octoprint.plugin.core.PluginLifecycleException</code>           \u2013          <p>if any of the lifecycle events fail, in which case the plugin will be ensured to be marked as disabled</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.unregister_message_receiver","title":"<code>unregister_message_receiver(client)</code>","text":"<p>Unregisters a <code>client</code> for receiving plugin messages.</p> <p>Parameters:</p> <ul> <li> client             (<code>callable</code>)         \u2013          <p>The client to unregister for receiving plugin messages.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginNeedsRestart","title":"<code>PluginNeedsRestart(name)</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Thrown by plugins that need a restart after enabling/disabling them.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.RestartNeedingPlugin","title":"<code>RestartNeedingPlugin</code>","text":"<p>         Bases: <code>Plugin</code></p> <p>Mixin for plugin types that need a restart after enabling/disabling them.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.SortablePlugin","title":"<code>SortablePlugin</code>","text":"<p>         Bases: <code>Plugin</code></p> <p>Mixin for plugin types that are sortable.</p>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.SortablePlugin.get_sorting_key","title":"<code>get_sorting_key(context = None)</code>","text":"<p>Returns the sorting key to use for the implementation in the specified <code>context</code>.</p> <p>May return <code>None</code> if order is irrelevant.</p> <p>Implementations returning <code>None</code> will be ordered by plugin identifier after all implementations which did return a sorting key value that was not <code>None</code> sorted by that.</p> <p>Parameters:</p> <ul> <li> context             (<code>str</code>)         \u2013          <p>The sorting context for which to provide the sorting key value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int | None</code>         \u2013          <p>An integer signifying the sorting key value of the plugin (sorting will be done ascending), or <code>None</code> if the implementation doesn't care about calling order.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.is_editable_install","title":"<code>is_editable_install(install_dir, package, module, location)</code>","text":"<p>Tests if a package is installed in editable mode.</p> <p>Checks if a file <code>&lt;install_dir&gt;/&lt;package&gt;.egg-link</code> exists and if it contains a line that points to <code>&lt;location&gt;/&lt;module&gt;</code>.</p> <p>Parameters:</p> <ul> <li> install_dir             (<code>str</code>)         \u2013          <p>The directory in which the package is installed.</p> </li> <li> package             (<code>str</code>)         \u2013          <p>The name of the package.</p> </li> <li> module             (<code>str</code>)         \u2013          <p>The name of the module.</p> </li> <li> location             (<code>str</code>)         \u2013          <p>The location of the module.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.is_sub_path_of","title":"<code>is_sub_path_of(path, parent)</code>","text":"<p>Tests if <code>path</code> is a sub path (or identical) to <code>path</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_sub_path_of(\"/a/b/c\", \"/a/b\")\nTrue\n&gt;&gt;&gt; is_sub_path_of(\"/a/b/c\", \"/a/b2\")\nFalse\n&gt;&gt;&gt; is_sub_path_of(\"/a/b/c\", \"/b/c\")\nFalse\n&gt;&gt;&gt; is_sub_path_of(\"/foo/bar/../../a/b/c\", \"/a/b\")\nTrue\n&gt;&gt;&gt; is_sub_path_of(\"/a/b\", \"/a/b\")\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The path to test.</p> </li> <li> parent             (<code>str</code>)         \u2013          <p>The parent path to test against.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.parse_plugin_metadata","title":"<code>parse_plugin_metadata(path)</code>","text":"<p>Parses the plugin metadata from the plugin at the given path.</p> <p>If the provided path is a dictionary, it is assumed to be the path to a Python module with a contained <code>__init__.py</code>.</p> <p>The metadata is parsed from the AST of the plugin's Python source. If the plugin could not be parsed due to a syntax error in its Python source, a <code>SyntaxError</code> is raised.</p> <p>Only the following control properties are attempted to be parsed from the AST:</p> <ul> <li><code>__plugin_name__</code></li> <li><code>__plugin_version__</code></li> <li><code>__plugin_author__</code></li> <li><code>__plugin_description__</code></li> <li><code>__plugin_url__</code></li> <li><code>__plugin_license__</code></li> <li><code>__plugin_pythoncompatibility__</code></li> </ul> <p>This is also the list of plugin metadata available even for disabled/unloaded plugins. For all other control properties to be available, the plugin must be loaded by OctoPrint.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The path to the plugin to parse the metadata from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>The parsed metadata. If no metadata could be parsed, an empty dictionary is returned.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>SyntaxError</code>           \u2013          <p>If the plugin could not be parsed due to a syntax error in its Python source.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/","title":"octoprint.plugin.types","text":"<p>This module bundles all of OctoPrint's supported plugin implementation types as well as their common parent class, <code>OctoPrintPlugin</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin","title":"<code>AssetPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>RestartNeedingPlugin</code></p> <p>The <code>AssetPlugin</code> mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin.</p> <p>A typical usage of the <code>AssetPlugin</code> functionality is to embed a custom view model to be used by templates injected through a TemplatePlugin.</p> <p><code>AssetPlugin</code> is a RestartNeedingPlugin.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin.get_asset_folder","title":"<code>get_asset_folder()</code>","text":"<p>Defines the folder where the plugin stores its static assets as defined in <code>get_assets</code>.</p> <p>Override this if your plugin stores its assets at some other place than the <code>static</code> sub folder in the plugin base directory.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The absolute path to the folder where the plugin stores its static assets.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin.get_assets","title":"<code>get_assets()</code>","text":"<p>Defines the static assets the plugin offers.</p> <p>The following asset types are recognized and automatically imported at the appropriate places to be available:</p> <ul> <li><code>js</code>: JavaScript files, such as additional view models</li> <li><code>jsclient</code>: JavaScript files containing additional parts for the JS Client Library (Added in version 1.3.10)</li> <li><code>css</code>: CSS files with additional styles, will be embedded into delivered pages when not running in LESS mode.</li> <li><code>less</code>: LESS files with additional styles, will be embedded into delivered pages when running in LESS mode.</li> </ul> <p>The expected format to be returned is a dictionary mapping one or more of these keys to a list of files of that type, the files being represented as relative paths from the asset folder as defined via <code>get_asset_folder</code>.</p> <p>Example:</p> <pre><code>def get_assets(self):\nreturn dict(\njs=['js/my_file.js', 'js/my_other_file.js'],\nclientjs=['clientjs/my_file.js'],\ncss=['css/my_styles.css'],\nless=['less/my_styles.less']\n)\n</code></pre> <p>The assets will be made available by OctoPrint under the URL <code>/plugin/&lt;plugin identifier&gt;/static/&lt;path&gt;</code>, with <code>plugin identifier</code> being the plugin's identifier and <code>path</code> being the path as defined in the asset dictionary.</p> <p>Assets of the types <code>js</code>, <code>css</code> and <code>less</code> will be automatically bundled by OctoPrint using Flask-Assets.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dictionary mapping asset types to lists of files of that type.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin","title":"<code>BlueprintPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>RestartNeedingPlugin</code></p> <p>The <code>BlueprintPlugin</code> mixin allows plugins to define their own full fledged endpoints for whatever purpose, be it a more sophisticated API than what is possible via the :class:<code>SimpleApiPlugin</code> or a custom web frontend.</p> <p>The mechanism at work here is <code>Flask's &lt;https://flask.palletsprojects.com/&gt;</code> own <code>Blueprint mechanism &lt;https://flask.palletsprojects.com/blueprints/&gt;</code>.</p> <p>The mixin automatically creates a blueprint for you that will be registered under <code>/plugin/&lt;plugin identifier&gt;/</code>. All you need to do is decorate all of your view functions with the :func:<code>route</code> decorator, which behaves exactly the same like Flask's regular <code>route</code> decorators. Example:</p> <p>.. code-block:: python</p> <p>import octoprint.plugin    import flask</p> <p>class MyBlueprintPlugin(octoprint.plugin.BlueprintPlugin):        @octoprint.plugin.BlueprintPlugin.route(\"/echo\", methods=[\"GET\"])        def myEcho(self):            if not \"text\" in flask.request.values:                abort(400, description=\"Expected a text to echo back.\")            return flask.request.values[\"text\"]</p> <p>plugin_implementation = MyBlueprintPlugin()</p> <p>Your blueprint will be published by OctoPrint under the base URL <code>/plugin/&lt;plugin identifier&gt;/</code>, so the above example of a plugin with the identifier \"myblueprintplugin\" would be reachable under <code>/plugin/myblueprintplugin/echo</code>.</p> <p>Just like with regular blueprints you'll be able to create URLs via <code>url_for</code>, just use the prefix <code>plugin.&lt;plugin identifier&gt;.&lt;method_name&gt;</code>, e.g.:</p> <p>.. code-block:: python</p> <p>flask.url_for(\"plugin.myblueprintplugin.myEcho\") # will return \"/plugin/myblueprintplugin/echo\"</p> <p>.. warning::</p> <p>As of OctoPrint 1.8.3, endpoints provided through a <code>BlueprintPlugin</code> do not automatically fall under    OctoPrint's :ref:<code>CSRF protection &lt;sec-api-general-csrf&gt;</code>, for reasons of backwards compatibility. There will be a short grace period before this changes. You    can and should however already opt into CSRF protection for your endpoints by implementing <code>is_blueprint_csrf_protected</code>    and returning <code>True</code> from it. You can exempt certain endpoints from CSRF protection by decorating them with    <code>@octoprint.plugin.BlueprintPlugin.csrf_exempt</code>.</p> <p>.. code-block:: python</p> <pre><code>  class MyPlugin(octoprint.plugin.BlueprintPlugin):\n      @octoprint.plugin.BlueprintPlugin.route(\"/hello_world\", methods=[\"GET\"])\n      def hello_world(self):\n          # This is a GET request and thus not subject to CSRF protection\n          return \"Hello world!\"\n\n      @octoprint.plugin.BlueprintPlugin.route(\"/hello_you\", methods=[\"POST\"])\n      def hello_you(self):\n          # This is a POST request and thus subject to CSRF protection. It is not exempt.\n          return \"Hello you!\"\n\n      @octoprint.plugin.BlueprintPlugin.route(\"/hello_me\", methods=[\"POST\"])\n      @octoprint.plugin.BlueprintPlugin.csrf_exempt()\n      def hello_me(self):\n          # This is a POST request and thus subject to CSRF protection, but this one is exempt.\n          return \"Hello me!\"\n\n      def is_blueprint_csrf_protected(self):\n          return True\n</code></pre> <p><code>BlueprintPlugin</code> implements :class:<code>~octoprint.plugins.core.RestartNeedingPlugin</code>.</p> <p>.. versionchanged:: 1.8.3</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.csrf_exempt","title":"<code>csrf_exempt()</code>  <code>staticmethod</code>","text":"<p>A decorator to mark a view method in your BlueprintPlugin as exempt from :ref:<code>CSRF protection &lt;sec-api-general-csrf&gt;</code>. This makes sense if you offer an authenticated API for a certain workflow (see e.g. the bundled appkeys plugin) but in most cases should not be needed.</p> <p>.. versionadded:: 1.8.3</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.errorhandler","title":"<code>errorhandler(code_or_exception)</code>  <code>staticmethod</code>","text":"<p>A decorator to mark errorhandlings methods in your BlueprintPlugin subclass. Works just the same as Flask's own <code>errorhandler</code> decorator available on blueprints.</p> <p>See <code>the documentation for flask.Blueprint.errorhandler &lt;https://flask.palletsprojects.com/api/#flask.Blueprint.errorhandler&gt;</code> and <code>the documentation for flask.Flask.errorhandler &lt;https://flask.palletsprojects.com/api/#flask.Flask.errorhandler&gt;</code> for more information.</p> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint","title":"<code>get_blueprint()</code>","text":"<p>Creates and returns the blueprint for your plugin. Override this if you want to define and handle your blueprint yourself.</p> <p>This method will only be called once during server initialization.</p> <p>:return: the blueprint ready to be registered with Flask</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint_api_prefixes","title":"<code>get_blueprint_api_prefixes()</code>","text":"<p>Return all prefixes of your endpoint that are an API that should be containing JSON only.</p> <p>Anything that matches this will generate JSON error messages in case of flask.abort calls, instead of the default HTML ones.</p> <p>Defaults to all endpoints under the blueprint. Limit this further as needed. E.g., if you only want your endpoints /foo, /foo/1 and /bar to be declared as API, return <code>[\"/foo\", \"/bar\"]</code>. A match will be determined via startswith.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint_kwargs","title":"<code>get_blueprint_kwargs()</code>","text":"<p>Override this if you want your blueprint constructed with additional options such as <code>static_folder</code>, <code>template_folder</code>, etc.</p> <p>Defaults to the blueprint's <code>static_folder</code> and <code>template_folder</code> to be set to the plugin's basefolder plus <code>/static</code> or respectively <code>/templates</code>, or -- if the plugin also implements :class:<code>AssetPlugin</code> and/or :class:<code>TemplatePlugin</code> -- the paths provided by <code>get_asset_folder</code> and <code>get_template_folder</code> respectively.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.is_blueprint_csrf_protected","title":"<code>is_blueprint_csrf_protected()</code>","text":"<p>Whether a blueprint's endpoints are :ref:<code>CSRF protected &lt;sec-api-general-csrf&gt;</code>. For now, this defaults to <code>False</code> to leave it up to plugins to decide which endpoints should be protected. Long term, this will default to <code>True</code> and hence enforce protection unless a plugin opts out by returning False here.</p> <p>If you do not override this method in your mixin implementation, a warning will be logged to the console to alert you of the requirement to make a decision here and to not rely on the default implementation, due to the forthcoming change in implemented default behaviour.</p> <p>.. versionadded:: 1.8.3</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.is_blueprint_protected","title":"<code>is_blueprint_protected()</code>","text":"<p>Whether a login session by a registered user is needed to access the blueprint's endpoints. Requiring a session is the default. Note that this only restricts access to the blueprint's dynamic methods, static files are always accessible.</p> <p>If you want your blueprint's endpoints to have specific permissions, return <code>False</code> for this and do your permissions checks explicitly.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.route","title":"<code>route(rule, **options)</code>  <code>staticmethod</code>","text":"<p>A decorator to mark view methods in your BlueprintPlugin subclass. Works just the same as Flask's own <code>route</code> decorator available on blueprints.</p> <p>See <code>the documentation for flask.Blueprint.route &lt;https://flask.palletsprojects.com/api/#flask.Blueprint.route&gt;</code> and <code>the documentation for flask.Flask.route &lt;https://flask.palletsprojects.com/api/#flask.Flask.route&gt;</code> for more information.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EnvironmentDetectionPlugin","title":"<code>EnvironmentDetectionPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>RestartNeedingPlugin</code></p> <p>Added in version 1.3.6</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EnvironmentDetectionPlugin.get_additional_environment","title":"<code>get_additional_environment()</code>","text":"<p>Allows the plugin to provide additional environment information.</p> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dictionary of additional environment information.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EnvironmentDetectionPlugin.on_environment_detected","title":"<code>on_environment_detected(environment, *args, **kwargs)</code>","text":"<p>Called when the environment information has been gathered.</p> <p>Parameters:</p> <ul> <li> environment             (<code>dict</code>)         \u2013          <p>The environment information.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EventHandlerPlugin","title":"<code>EventHandlerPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>The <code>EventHandlerPlugin</code> mixin allows OctoPrint plugins to react to any of :ref:<code>OctoPrint's events &lt;sec-events&gt;</code>. OctoPrint will call the :func:<code>on_event</code> method for any event fired on its internal event bus, supplying the event type and the associated payload. Please note that until your plugin returns from that method, further event processing within OctoPrint will block - the event queue itself is run asynchronously from the rest of OctoPrint, but the processing of the events within the queue itself happens consecutively.</p> <p>This mixin is especially interesting for plugins which want to react on things like print jobs finishing, timelapse videos rendering etc.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EventHandlerPlugin.on_event","title":"<code>on_event(event, payload)</code>","text":"<p>Called by OctoPrint upon processing of a fired event on the platform.</p> <p>.. warning::</p> <p>Do not perform long-running or even blocking operations in your implementation or you will block and break the server.</p> <p>Parameters:</p> <ul> <li> event             (<code>str</code>)         \u2013          <p>The type of event that got fired, see :ref:<code>the list of events &lt;sec-events-available_events&gt;</code> for possible values</p> </li> <li> payload             (<code>dict</code>)         \u2013          <p>The payload as provided with the event</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin","title":"<code>OctoPrintPlugin()</code>","text":"<p>         Bases: <code>Plugin</code></p> <p>The parent class of all OctoPrint plugin mixins and thus implementations.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._analysis_queue","title":"<code>_analysis_queue = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.filemanager.analysis.AnalysisQueue instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._app_session_manager","title":"<code>_app_session_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.access.users.SessionManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._connectivity_checker","title":"<code>_connectivity_checker = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.util.ConnectivityChecker instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._data_folder","title":"<code>_data_folder = None</code>  <code>instance-attribute</code>","text":"<p>Path to the data folder for the plugin to use for any data it might have to persist. Should always be accessed through get_plugin_data_folder since that function will also ensure that the data folder actually exists.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._event_bus","title":"<code>_event_bus = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.events.EventManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._file_manager","title":"<code>_file_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.filemanager.FileManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._plugin_lifecycle_manager","title":"<code>_plugin_lifecycle_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.server.LifecycleManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._plugin_manager","title":"<code>_plugin_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.plugin.core.PluginManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._printer","title":"<code>_printer = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.printer.PrinterInterface instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._printer_profile_manager","title":"<code>_printer_profile_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.printer.profile.PrinterProfileManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._slicing_manager","title":"<code>_slicing_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.slicing.SlicingManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin._user_manager","title":"<code>_user_manager = None</code>  <code>instance-attribute</code>","text":"<p>The octoprint.access.users.UserManager instance. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin.get_plugin_data_folder","title":"<code>get_plugin_data_folder()</code>","text":"<p>Retrieves the path to a data folder specifically for the plugin, ensuring it exists and if not creating it before returning it.</p> <p>Plugins may use this folder for storing additional data they need for their operation.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The path to the plugin's data folder, ensured to be existing.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin.on_plugin_pending_uninstall","title":"<code>on_plugin_pending_uninstall()</code>","text":"<p>Called by the plugin manager when the plugin is pending uninstall. Override this to react to the event.</p> <p>NOT called during plugin uninstalls triggered outside of OctoPrint!</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin","title":"<code>ProgressPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>Via the <code>ProgressPlugin</code> mixing plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin.on_print_progress","title":"<code>on_print_progress(storage, path, progress)</code>","text":"<p>Called by OctoPrint on minimally 1% increments during a running print job.</p> <p>:param string storage:  Location of the file :param string path:     Path of the file :param int progress:    Current progress as a value between 0 and 100</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin.on_slicing_progress","title":"<code>on_slicing_progress(slicer, source_location, source_path, destination_location, destination_path, progress)</code>","text":"<p>Called by OctoPrint on minimally 1% increments during a running slicing job.</p> <p>:param string slicer:               Key of the slicer reporting the progress :param string source_location:      Location of the source file :param string source_path:          Path of the source file :param string destination_location: Location the destination file :param string destination_path:     Path of the destination file :param int progress:                Current progress as a value between 0 and 100</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ReloadNeedingPlugin","title":"<code>ReloadNeedingPlugin</code>","text":"<p>         Bases: <code>Plugin</code></p> <p>Mixin for plugin types that need a reload of the UI after enabling/disabling them.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin","title":"<code>SettingsPlugin()</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>Including the <code>SettingsPlugin</code> mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration.</p> <p>Plugins including the mixing will get injected an additional property <code>self._settings</code> which is an instance of :class:<code>PluginSettingsManager</code> already properly initialized for use by the plugin. In order for the manager to know about the available settings structure and default values upon initialization, implementing plugins will need to provide a dictionary with the plugin's default settings through overriding the method :func:<code>get_settings_defaults</code>. The defined structure will then be available to access through the settings manager available as <code>self._settings</code>.</p> <p>If your plugin needs to react to the change of specific configuration values on the fly, e.g. to adjust the log level of a logger when the user changes a corresponding flag via the settings dialog, you can override the :func:<code>on_settings_save</code> method and wrap the call to the implementation from the parent class with retrieval of the old and the new value and react accordingly.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>import octoprint.plugin</p> <p>class MySettingsPlugin(octoprint.plugin.SettingsPlugin, octoprint.plugin.StartupPlugin):        def get_settings_defaults(self):            return dict(                some_setting=\"foo\",                some_value=23,                sub=dict(                    some_flag=True                )            )</p> <pre><code>   def on_settings_save(self, data):\n       old_flag = self._settings.get_boolean([\"sub\", \"some_flag\"])\n\n       octoprint.plugin.SettingsPlugin.on_settings_save(self, data)\n\n       new_flag = self._settings.get_boolean([\"sub\", \"some_flag\"])\n       if old_flag != new_flag:\n           self._logger.info(\"sub.some_flag changed from {old_flag} to {new_flag}\".format(**locals()))\n\n   def on_after_startup(self):\n       some_setting = self._settings.get([\"some_setting\"])\n       some_value = self._settings.get_int([\"some_value\"])\n       some_flag = self._settings.get_boolean([\"sub\", \"some_flag\"])\n       self._logger.info(\"some_setting = {some_setting}, some_value = {some_value}, sub.some_flag = {some_flag}\".format(**locals())\n</code></pre> <p>plugin_implementation = MySettingsPlugin()</p> <p>Of course, you are always free to completely override both :func:<code>on_settings_load</code> and :func:<code>on_settings_save</code> if the default implementations do not fit your requirements.</p> <p>.. warning::</p> <p>Make sure to protect sensitive information stored by your plugin that only logged in administrators (or users)    should have access to via :meth:<code>~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths</code>. OctoPrint will    return its settings on the REST API even to anonymous clients, but will filter out fields it knows are restricted,    therefore you must make sure that you specify sensitive information accordingly to limit access as required!</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin._settings","title":"<code>_settings = None</code>  <code>instance-attribute</code>","text":"<p>The :class:<code>~octoprint.plugin.PluginSettings</code> instance to use for accessing the plugin's settings. Injected by the plugin core system upon initialization of the implementation.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.config_version_key","title":"<code>config_version_key = '_config_version'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Key of the field in the settings that holds the configuration format version.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_defaults","title":"<code>get_settings_defaults()</code>","text":"<p>Retrieves the plugin's default settings with which the plugin's settings manager will be initialized.</p> <p>Override this in your plugin's implementation and return a dictionary defining your settings data structure with included default values.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_preprocessors","title":"<code>get_settings_preprocessors()</code>","text":"<p>Retrieves the plugin's preprocessors to use for preprocessing returned or set values prior to returning/setting them.</p> <p>The preprocessors should be provided as a dictionary mapping the path of the values to preprocess (hierarchically) to a transform function which will get the value to transform as only input and should return the transformed value.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>def get_settings_defaults(self):        return dict(some_key=\"Some_Value\", some_other_key=\"Some_Value\")</p> <p>def get_settings_preprocessors(self):        return dict(some_key=lambda x: x.upper()),        # getter preprocessors               dict(some_other_key=lambda x: x.lower())   # setter preprocessors</p> <p>def some_method(self):        # getting the value for \"some_key\" should turn it to upper case        assert self._settings.get([\"some_key\"]) == \"SOME_VALUE\"</p> <pre><code>   # the value for \"some_other_key\" should be left alone\n   assert self._settings.get([\"some_other_key\"] = \"Some_Value\"\n\n   # setting a value for \"some_other_key\" should cause the value to first be turned to lower case\n   self._settings.set([\"some_other_key\"], \"SOME_OTHER_VALUE\")\n   assert self._settings.get([\"some_other_key\"]) == \"some_other_value\"\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict, dict</code>         \u2013          <p>A tuple consisting of two dictionaries, the first being the plugin's preprocessors for</p> </li> <li>         \u2013          <p>getters, the second the preprocessors for setters</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_restricted_paths","title":"<code>get_settings_restricted_paths()</code>","text":"<p>Retrieves the list of paths in the plugin's settings which be restricted on the REST API.</p> <p>Override this in your plugin's implementation to restrict whether a path should only be returned to users with certain permissions, or never on the REST API.</p> <p>Return a <code>dict</code> with one of the following keys, mapping to a list of paths (as tuples or lists of the path elements) for which to restrict access via the REST API accordingly.</p> <ul> <li>An class:<code>~octoprint.access.permissions.OctoPrintPermission</code> instance: Paths will only be available on the REST API for users with the permission</li> <li><code>admin</code>: Paths will only be available on the REST API for users with admin rights (any user with the SETTINGS permission)</li> <li><code>user</code>: Paths will only be available on the REST API when accessed as a logged in user</li> <li><code>never</code>: Paths will never be returned on the API</li> </ul> <p>Example:</p> <p>.. code-block:: python</p> <p>def get_settings_defaults(self):        return dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"),                              user_only=dict(path=\"path\", bar=\"bar\")),                    another=dict(admin_only=dict(path=\"path\"),                                 field=\"field\"),                    path=dict(to=dict(never=dict(return=\"return\"))),                    the=dict(webcam=dict(data=\"webcam\")))</p> <p>def get_settings_restricted_paths(self):        from octoprint.access.permissions import Permissions        return {'admin':[[\"some\", \"admin_only\", \"path\"], [\"another\", \"admin_only\", \"path\"],],                'user':[[\"some\", \"user_only\", \"path\"],],                'never':[[\"path\", \"to\", \"never\", \"return\"],],                Permissions.WEBCAM:[[\"the\", \"webcam\", \"data\"],]}</p> <p># this will make the plugin return settings on the REST API like this for an anonymous user    #    #     dict(some=dict(admin_only=dict(path=None, foo=\"foo\"),    #                    user_only=dict(path=None, bar=\"bar\")),    #          another=dict(admin_only=dict(path=None),    #                       field=\"field\"),    #          path=dict(to=dict(never=dict(return=None))),    #          the=dict(webcam=dict(data=None)))    #    # like this for a logged in user without the webcam permission    #    #     dict(some=dict(admin_only=dict(path=None, foo=\"foo\"),    #                    user_only=dict(path=\"path\", bar=\"bar\")),    #          another=dict(admin_only=dict(path=None),    #                       field=\"field\"),    #          path=dict(to=dict(never=dict(return=None))),    #          the=dict(webcam=dict(data=None)))    #    # like this for a logged in user with the webcam permission    #    #     dict(some=dict(admin_only=dict(path=None, foo=\"foo\"),    #                    user_only=dict(path=\"path\", bar=\"bar\")),    #          another=dict(admin_only=dict(path=None),    #                       field=\"field\"),    #          path=dict(to=dict(never=dict(return=None))),    #          the=dict(webcam=dict(data=\"webcam\")))    #    # and like this for an admin user    #    #     dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"),    #                    user_only=dict(path=\"path\", bar=\"bar\")),    #          another=dict(admin_only=dict(path=\"path\"),    #                       field=\"field\"),    #          path=dict(to=dict(never=dict(return=None))),    #          the=dict(webcam=dict(data=\"webcam\")))</p> <p>.. versionadded:: 1.2.17</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_version","title":"<code>get_settings_version()</code>","text":"<p>Retrieves the settings format version of the plugin.</p> <p>Use this to have OctoPrint trigger your migration function if it detects an outdated settings version in config.yaml.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>int or None: an int signifying the current settings format, should be incremented by plugins whenever there</p> </li> <li>         \u2013          <p>are backwards incompatible changes. Returning None here disables the version tracking for the</p> </li> <li>         \u2013          <p>plugin's configuration.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_cleanup","title":"<code>on_settings_cleanup()</code>","text":"<p>Called after migration and initialization but before call to :func:<code>on_settings_initialized</code>.</p> <p>Plugins may overwrite this method to perform additional clean up tasks.</p> <p>The default implementation just minimizes the data persisted on disk to only contain the differences to the defaults (in case the current data was persisted with an older version of OctoPrint that still duplicated default data).</p> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_initialized","title":"<code>on_settings_initialized()</code>","text":"<p>Called after the settings have been initialized and - if necessary - also been migrated through a call to func:<code>on_settings_migrate</code>.</p> <p>This method will always be called after the <code>initialize</code> method.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_load","title":"<code>on_settings_load()</code>","text":"<p>Loads the settings for the plugin, called by the Settings API view in order to retrieve all settings from all plugins. Override this if you want to inject additional settings properties that are not stored within OctoPrint's configuration.</p> <p>.. note::</p> <p>The default implementation will return your plugin's settings as is, so just in the structure and in the types    that are currently stored in OctoPrint's configuration.</p> <p>If you need more granular control here, e.g. over the used data types, you'll need to override this method    and iterate yourself over all your settings, using the proper retriever methods on the settings manager    to retrieve the data in the correct format.</p> <p>The default implementation will also replace any paths that have been restricted by your plugin through    :func:<code>~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths</code> with either the provided    default value (if one was provided), an empty dictionary (as fallback for restricted dictionaries), an    empty list (as fallback for restricted lists) or <code>None</code> values where necessary.    Make sure to do your own restriction if you decide to fully overload this method.</p> <p>:return: the current settings of the plugin, as a dictionary</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_migrate","title":"<code>on_settings_migrate(target, current)</code>","text":"<p>Called by OctoPrint if it detects that the installed version of the plugin necessitates a higher settings version than the one currently stored in _config.yaml. Will also be called if the settings data stored in config.yaml doesn't have version information, in which case the <code>current</code> parameter will be None.</p> <p>Your plugin's implementation should take care of migrating any data by utilizing self._settings. OctoPrint will take care of saving any changes to disk by calling <code>self._settings.save()</code> after returning from this method.</p> <p>This method will be called before your plugin's :func:<code>on_settings_initialized</code> method, with all injections already having taken place. You can therefore depend on the configuration having been migrated by the time :func:<code>on_settings_initialized</code> is called.</p> <p>Parameters:</p> <ul> <li> target             (<code>int</code>)         \u2013          <p>The settings format version the plugin requires, this should always be the same value as           returned by :func:<code>get_settings_version</code>.</p> </li> <li> current             (<code>int or None</code>)         \u2013          <p>The settings format version as currently stored in config.yaml. May be None if           no version information can be found.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_save","title":"<code>on_settings_save(data)</code>","text":"<p>Saves the settings for the plugin, called by the Settings API view in order to persist all settings from all plugins. Override this if you need to directly react to settings changes or want to extract additional settings properties that are not stored within OctoPrint's configuration.</p> <p>.. note::</p> <p>The default implementation will persist your plugin's settings as is, so just in the structure and in the    types that were received by the Settings API view. Values identical to the default settings values    will not be persisted.</p> <p>If you need more granular control here, e.g. over the used data types, you'll need to override this method    and iterate yourself over all your settings, retrieving them (if set) from the supplied received <code>data</code>    and using the proper setter methods on the settings manager to persist the data in the correct format.</p> <p>Parameters:</p> <ul> <li> data             (<code>dict</code>)         \u2013          <p>The settings dictionary to be saved for the plugin</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p>The settings that differed from the defaults and were actually saved.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ShutdownPlugin","title":"<code>ShutdownPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>SortablePlugin</code></p> <p>The <code>ShutdownPlugin</code> allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the <code>StartupPlugin</code> mixin, to cleanly shut down additional services again that where started by the <code>StartupPlugin</code> part of the plugin.</p> <p><code>ShutdownPlugin</code> is a SortablePlugin and provides a sorting context for <code>on_shutdown</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ShutdownPlugin.on_shutdown","title":"<code>on_shutdown()</code>","text":"<p>Called upon the imminent shutdown of OctoPrint.</p> <p>Warning</p> <p>Do not perform long-running or even blocking operations in your implementation or you will block and break the server.</p> <p>The relevant sorting context is <code>ShutdownPlugin.on_shutdown</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin","title":"<code>SimpleApiPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>Utilizing the <code>SimpleApiPlugin</code> mixin plugins may implement a simple API based around one GET resource and one resource accepting JSON commands POSTed to it. This is the easy alternative for plugin's which don't need the full power of a <code>Flask Blueprint &lt;https://flask.palletsprojects.com/blueprints/&gt;</code>_ that the :class:<code>BlueprintPlugin</code> mixin offers.</p> <p>Use this mixin if all you need to do is return some kind of dynamic data to your plugin from the backend and/or want to react to simple commands which boil down to a type of command and a few flat parameters supplied with it.</p> <p>The simple API constructed by OctoPrint for you will be made available under <code>/api/plugin/&lt;plugin identifier&gt;/</code>. OctoPrint will do some preliminary request validation for your defined commands, making sure the request body is in the correct format (content type must be JSON) and contains all obligatory parameters for your command.</p> <p>Let's take a look at a small example for such a simple API and how you would go about calling it.</p> <p>Take this example of a plugin registered under plugin identifier <code>mysimpleapiplugin</code>:</p> <p>.. code-block:: python</p> <p>import octoprint.plugin</p> <p>import flask</p> <p>class MySimpleApiPlugin(octoprint.plugin.SimpleApiPlugin):        def get_api_commands(self):            return dict(                command1=[],                command2=[\"some_parameter\"]            )</p> <pre><code>   def on_api_command(self, command, data):\n       import flask\n       if command == \"command1\":\n           parameter = \"unset\"\n           if \"parameter\" in data:\n               parameter = \"set\"\n           self._logger.info(\"command1 called, parameter is {parameter}\".format(**locals()))\n       elif command == \"command2\":\n           self._logger.info(\"command2 called, some_parameter is {some_parameter}\".format(**data))\n\n   def on_api_get(self, request):\n       return flask.jsonify(foo=\"bar\")\n</code></pre> <p>plugin_implementation = MySimpleApiPlugin()</p> <p>Our plugin defines two commands, <code>command1</code> with no mandatory parameters and <code>command2</code> with one mandatory parameter <code>some_parameter</code>.</p> <p><code>command1</code> can also accept an optional parameter <code>parameter</code>, and will log whether that parameter was set or unset. <code>command2</code> will log the content of the mandatory <code>some_parameter</code> parameter.</p> <p>A valid POST request for <code>command2</code> sent to <code>/api/plugin/mysimpleapiplugin</code> would look like this:</p> <p>.. sourcecode:: http</p> <p>POST /api/plugin/mysimpleapiplugin HTTP/1.1    Host: example.com    Content-Type: application/json    X-Api-Key: abcdef...</p> <p>{      \"command\": \"command2\",      \"some_parameter\": \"some_value\",      \"some_optional_parameter\": 2342    }</p> <p>which would produce a response like this:</p> <p>.. sourcecode:: http</p> <p>HTTP/1.1 204 No Content</p> <p>and print something like this line to <code>octoprint.log</code>::</p> <p>2015-02-12 17:40:21,140 - octoprint.plugins.mysimpleapiplugin - INFO - command2 called, some_parameter is some_value</p> <p>A GET request on our plugin's simple API resource will only return a JSON document like this:</p> <p>.. sourcecode:: http</p> <p>HTTP/1.1 200 Ok    Content-Type: application/json</p> <p>{      \"foo\": \"bar\"    }</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.get_api_commands","title":"<code>get_api_commands()</code>","text":"<p>Return a dictionary here with the keys representing the accepted commands and the values being lists of mandatory parameter names.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.is_api_adminonly","title":"<code>is_api_adminonly()</code>","text":"<p>Return True if the API is only available to users having the admin role.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.on_api_command","title":"<code>on_api_command(command, data)</code>","text":"<p>Called by OctoPrint upon a POST request to <code>/api/plugin/&lt;plugin identifier&gt;</code>. <code>command</code> will contain one of the commands as specified via :func:<code>get_api_commands</code>, <code>data</code> will contain the full request body parsed from JSON into a Python dictionary. Note that this will also contain the <code>command</code> attribute itself. For the example given above, for the <code>command2</code> request the <code>data</code> received by the plugin would be equal to <code>dict(command=\"command2\", some_parameter=\"some_value\")</code>.</p> <p>If your plugin returns nothing here, OctoPrint will return an empty response with return code <code>204 No content</code> for you. You may also return regular responses as you would return from any Flask view here though, e.g. <code>return flask.jsonify(result=\"some json result\")</code> or <code>flask.abort(404)</code>.</p> <p>:param string command: the command with which the resource was called :param dict data:      the full request body of the POST request parsed from JSON into a Python dictionary :return: <code>None</code> in which case OctoPrint will generate a <code>204 No content</code> response with empty body, or optionally          a proper Flask response.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.on_api_get","title":"<code>on_api_get(request)</code>","text":"<p>Called by OctoPrint upon a GET request to <code>/api/plugin/&lt;plugin identifier&gt;</code>. <code>request</code> will contain the received <code>Flask request object &lt;https://flask.palletsprojects.com/api/#flask.Request&gt;</code>_ which you may evaluate for additional arguments supplied with the request.</p> <p>If your plugin returns nothing here, OctoPrint will return an empty response with return code <code>204 No content</code> for you. You may also return regular responses as you would return from any Flask view here though, e.g. <code>return flask.jsonify(result=\"some json result\")</code> or <code>flask.abort(404)</code>.</p> <p>:param request: the Flask request object :return: <code>None</code> in which case OctoPrint will generate a <code>204 No content</code> response with empty body, or optionally          a proper Flask response.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin","title":"<code>SlicerPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>Via the <code>SlicerPlugin</code> mixin plugins can add support for slicing engines to be used by OctoPrint.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.cancel_slicing","title":"<code>cancel_slicing(machinecode_path)</code>","text":"<p>Cancels the slicing to the indicated file.</p> <p>Parameters:</p> <ul> <li> machinecode_path             (<code>str</code>)         \u2013          <p>The absolute path to the machine code file to which to stop slicing to.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.do_slice","title":"<code>do_slice(model_path, printer_profile, machinecode_path = None, profile_path = None, position = None, on_progress = None, on_progress_args = None, on_progress_kwargs = None)</code>","text":"<p>Called by OctoPrint to slice <code>model_path</code> for the indicated <code>printer_profile</code>. If the <code>machinecode_path</code> is <code>None</code>, slicer implementations should generate it from the provided <code>model_path</code>.</p> <p>If provided, the <code>profile_path</code> is guaranteed by OctoPrint to be a serialized slicing profile created through the slicing plugin's own :func:<code>save_slicer_profile</code> method.</p> <p>If provided, <code>position</code> will be a <code>dict</code> containing and <code>x</code> and a <code>y</code> key, indicating the position the center of the model on the print bed should have in the final sliced machine code. If not provided, slicer implementations should place the model in the center of the print bed.</p> <p><code>on_progress</code> will be a callback which expects an additional keyword argument <code>_progress</code> with the current slicing progress which - if progress reporting is supported - the slicing plugin should call like the following:</p> <p>.. code-block:: python</p> <p>if on_progress is not None:        if on_progress_args is None:            on_progress_args = ()        if on_progress_kwargs is None:            on_progress_kwargs = dict()</p> <pre><code>   on_progress_kwargs[\"_progress\"] = your_plugins_slicing_progress\n   on_progress(*on_progress_args, **on_progress_kwargs)\n</code></pre> <p>Please note that both <code>on_progress_args</code> and <code>on_progress_kwargs</code> as supplied by OctoPrint might be <code>None</code>, so always make sure to initialize those values to sane defaults like depicted above before invoking the callback.</p> <p>In order to support external cancellation of an ongoing slicing job via :func:<code>cancel_slicing</code>, implementations should make sure to track the started jobs via the <code>machinecode_path</code>, if provided.</p> <p>The method should return a 2-tuple consisting of a boolean <code>flag</code> indicating whether the slicing job was finished successfully (True) or not (False) and a <code>result</code> depending on the success of the slicing job.</p> <p>For jobs that finished successfully, <code>result</code> should be a :class:<code>dict</code> containing additional information about the slicing job under the following keys:</p> <p>analysis     Analysis result of the generated machine code as returned by the slicer itself. This should match the     data structure described for the analysis queue of the matching machine code format, e.g.     :class:<code>~octoprint.filemanager.analysis.GcodeAnalysisQueue</code> for GCODE files.</p> <p>For jobs that did not finish successfully (but not due to being cancelled!), <code>result</code> should be a :class:<code>str</code> containing a human readable reason for the error.</p> <p>If the job gets cancelled, a :class:<code>~octoprint.slicing.SlicingCancelled</code> exception should be raised.</p> <p>Returns:</p> <ul> <li> tuple        \u2013          <p>A 2-tuple (boolean, object) as outlined above.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>SlicingCancelled</code>           \u2013          <p>The slicing job was cancelled (via :meth:<code>cancel_slicing</code>).</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_default_profile","title":"<code>get_slicer_default_profile()</code>","text":"<p>Should return a :class:<code>~octoprint.slicing.SlicingProfile</code> containing the default slicing profile to use with this slicer if no other profile has been selected.</p> <p>Returns:</p> <ul> <li> SlicingProfile        \u2013          <p>The :class:<code>~octoprint.slicing.SlicingProfile</code> containing the default slicing profile for this slicer.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_extension_tree","title":"<code>get_slicer_extension_tree()</code>","text":"<p>Fetch additional entries to put into the extension tree for accepted files</p> <p>By default, a subtree for <code>model</code> files with <code>stl</code> extension is returned. Slicers who want to support additional/other file types will want to override this.</p> <p>For the extension tree format, take a look at the docs of the :ref:<code>octoprint.filemanager.extension_tree hook &lt;sec-plugins-hook-filemanager-extensiontree&gt;</code>.</p> <p>.. versionadded:: 1.3.11</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profile","title":"<code>get_slicer_profile(path)</code>","text":"<p>Should return a :class:<code>~octoprint.slicing.SlicingProfile</code> parsed from the slicing profile stored at the indicated <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The absolute path from which to read the slicing profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> SlicingProfile        \u2013          <p>The specified slicing profile.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profiles","title":"<code>get_slicer_profiles(profile_path)</code>","text":"<p>Fetch all :class:<code>~octoprint.slicing.SlicingProfile</code> stored for this slicer.</p> <p>For compatibility reasons with existing slicing plugins this method defaults to returning profiles parsed from .profile files in the plugin's <code>profile_path</code>, utilizing the :func:<code>SlicingPlugin.get_slicer_profile</code> method of the plugin implementation.</p> <p>Parameters:</p> <ul> <li> profile_path             (<code>str</code>)         \u2013          <p>The base folder where OctoPrint stores this slicer plugin's profiles</p> </li> </ul> <p>.. versionadded:: 1.3.7</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profiles_lastmodified","title":"<code>get_slicer_profiles_lastmodified(profile_path)</code>","text":"<p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_properties","title":"<code>get_slicer_properties()</code>","text":"<p>Plugins should override this method to return a <code>dict</code> containing a bunch of meta data about the implemented slicer.</p> <p>The expected keys in the returned <code>dict</code> have the following meaning:</p> <p>type     The type identifier to use for the slicer. This should be a short unique lower case string which will be     used to store slicer profiles under or refer to the slicer programmatically or from the API. name     The human readable name of the slicer. This will be displayed to the user during slicer selection. same_device     True if the slicer runs on the same device as OctoPrint, False otherwise. Slicers running on the same     device will not be allowed to slice on systems with less than two CPU cores (or an unknown number) while a     print is running due to performance reasons. Slice requests against slicers running on the same device and     less than two cores will result in an error. progress_report     <code>True</code> if the slicer can report back slicing progress to OctoPrint <code>False</code> otherwise. source_file_types     A list of file types this slicer supports as valid origin file types. These are file types as found in the     paths within the extension tree. Plugins may add additional file types through the :ref:<code>sec-plugins-hook-filemanager-extensiontree</code> hook.     The system will test source files contains in incoming slicing requests via :meth:<code>octoprint.filemanager.valid_file_type</code> against the     targeted slicer's <code>source_file_types</code>. destination_extension     The possible extensions of slicing result files.</p> <p>Returns:</p> <ul> <li> dict        \u2013          <p>A dict describing the slicer as outlined above.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.is_slicer_configured","title":"<code>is_slicer_configured()</code>","text":"<p>Unless the return value of this method is <code>True</code>, OctoPrint will not register the slicer within the slicing sub system upon startup. Plugins may use this to do some start up checks to verify that e.g. the path to a slicing binary as set and the binary is executable, or credentials of a cloud slicing platform are properly entered etc.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.save_slicer_profile","title":"<code>save_slicer_profile(path, profile, allow_overwrite = True, overrides = None)</code>","text":"<p>Should save the provided :class:<code>~octoprint.slicing.SlicingProfile</code> to the indicated <code>path</code>, after applying any supplied <code>overrides</code>. If a profile is already saved under the indicated path and <code>allow_overwrite</code> is set to False (defaults to True), an :class:<code>IOError</code> should be raised.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The absolute path to which to save the profile.</p> </li> <li> profile             (<code>SlicingProfile</code>)         \u2013          <p>The profile to save.</p> </li> <li> allow_overwrite             (<code>boolean</code>)         \u2013          <p>Whether to allow to overwrite an existing profile at the indicated path (True, default) or not (False). If a profile already exists on the path and this is False an :class:<code>IOError</code> should be raised.</p> </li> <li> overrides             (<code>dict</code>)         \u2013          <p>Profile overrides to apply to the <code>profile</code> before saving it</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin","title":"<code>StartupPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>SortablePlugin</code></p> <p>The <code>StartupPlugin</code> allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server.</p> <p><code>StartupPlugin</code> is a SortablePlugin and provides sorting contexts for <code>on_startup</code> as well as <code>on_after_startup</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin.on_after_startup","title":"<code>on_after_startup()</code>","text":"<p>Called just after launch of the server, when the listen loop is actually running already.</p> <p>Warning</p> <p>Do not perform long-running or even blocking operations in your implementation or you will block and break the server.</p> <p>The relevant sorting context is <code>StartupPlugin.on_after_startup</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin.on_startup","title":"<code>on_startup(host, port)</code>","text":"<p>Called just before the server is actually launched. Plugins get supplied with the <code>host</code> and <code>port</code> the server will listen on. Note that the <code>host</code> may be <code>0.0.0.0</code> if it will listen on all interfaces, so you can't just blindly use this for constructing publicly reachable URLs. Also note that when this method is called, the server is not actually up yet and none of your plugin's APIs or blueprints will be reachable yet. If you need to be externally reachable, use <code>on_after_startup</code> instead or additionally.</p> <p>Warning</p> <p>Do not perform long-running or even blocking operations in your implementation or you will block and break the server.</p> <p>The relevant sorting context is <code>StartupPlugin.on_startup</code>.</p> <p>Parameters:</p> <ul> <li> host             (<code>str</code>)         \u2013          <p>The host the server will listen on, may be <code>0.0.0.0</code></p> </li> <li> port             (<code>int</code>)         \u2013          <p>The port the server will listen on</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin","title":"<code>TemplatePlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>ReloadNeedingPlugin</code></p> <p>Using the <code>TemplatePlugin</code> mixin plugins may inject their own components into the OctoPrint web interface.</p> <p>You can find an example for a simple plugin which injects navbar, tab and settings content into the interface in the \"helloworld\" plugin in OctoPrint's [Plugin Tutorial][].</p> <p>Plugins may replace existing components, see the <code>replaces</code> keyword in the template configurations returned by <code>get_template_configs</code> below. Note that if a plugin replaces a core component, it is the plugin's responsibility to ensure that all core functionality is still maintained.</p> <p>Plugins can also add additional template types by implementing the octoprint.ui.web.templatetypes hook.</p> <p><code>TemplatePlugin</code> is a ReloadNeedingPlugin.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--supported-template-types","title":"Supported template types","text":"<p>Currently OctoPrint supports several types out of the box which are described below.</p> <p>.. figure:: ../images/template-plugin-types-main.png    :align: center    :alt: Template injection types in the main part of the interface</p> <p>Template injection types in the main part of the interface</p> <p>.. figure:: ../images/template-plugin-types-settings.png    :align: center    :alt: Template injection types in the settings</p> <p>Template injection types in the settings</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--navbar","title":"Navbar","text":"<p>The right part of the navigation bar located at the top of the UI can be enriched with additional links. Note that with the current implementation, plugins will always be located to the left of the existing links.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_navbar.jinja2</code> (e.g. <code>myplugin_navbar.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper structure will have all additional classes and styles applied as specified via the configuration supplied through <code>get_template_configs</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--sidebar","title":"Sidebar","text":"<p>The left side bar containing Connection, State and Files sections can be enriched with additional sections. Note that with the current implementations, plugins will always be located beneath the existing sections.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_sidebar.jinja2</code> (e.g. <code>myplugin_sidebar.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper divs for both the whole box as well as the content pane will have all additional classes and styles applied as specified via the configuration supplied through <code>get_template_configs</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--tabs","title":"Tabs","text":"<p>The available tabs of the main part of the interface may be extended with additional tabs originating from within plugins. Note that with the current implementation, plugins will always be located to the right of the existing tabs.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_tab.jinja2</code> (e.g. <code>myplugin_tab.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as specified via the configuration supplied through <code>get_template_configs</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--settings","title":"Settings","text":"<p>Plugins may inject a dialog into the existing settings view. Note that with the current implementation, plugins will always be listed beneath the \"Plugins\" header in the settings link list, ordered alphabetically after their displayed name.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_settings.jinja2</code> (e.g. <code>myplugin_settings.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as defined via the configuration through <code>get_template_configs</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--webcam","title":"Webcam","text":"<p>Plugins can provide a custom webcam view for watching a camera stream, which will be embedded into the \"Control\" panel of OctoPrint's default UI.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_webcam.jinja2</code> (e.g. <code>myplugin_webcam.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div will have the additional classes and styles applied as defined via the configuration through <code>get_template_configs</code>.</p> <p>Added in version 1.9.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--wizards","title":"Wizards","text":"<p>Plugins may define wizard dialogs to display to the user if necessary (e.g. in case of missing information that needs to be queried from the user to make the plugin work). Note that with the current implementation, all wizard dialogs will be will always be sorted by their <code>mandatory</code> attribute (which defaults to <code>False</code>) and then alphabetically by their <code>name</code>. Hence, mandatory wizard steps will come first, sorted alphabetically, then the optional steps will follow, also alphabetically. A wizard dialog provided through a plugin will only be displayed if the plugin reports the wizard as being required through <code>is_wizard_required</code>. Please also refer to the octoprint.plugin.WizardPlugin mixin for further details on this.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_wizard.jinja2</code> (e.g. <code>myplugin_wizard.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the wizard navigation will have the additional classes and styles applied as defined via the configuration supplied through <code>get_template_configs</code>.</p> <p>Note</p> <p>A note about <code>mandatory</code> wizard steps: In the current implementation, marking a wizard step as mandatory will only make it styled accordingly. It is the task of the [view model][] to actually prevent the user from skipping the dialog by implementing the <code>onWizardTabChange</code> callback and returning <code>false</code> there if it is detected that the user hasn't yet filled in the wizard step.</p> <p>Added in version 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--about","title":"About","text":"<p>Plugins may define additional panels into OctoPrint's \"About\" dialog. Note that with the current implementation further about dialog panels will be sorted alphabetically by their name and sorted after the predefined ones.</p> <p>The included template must be called <code>&lt;plugin identifier&gt;_about.jinja2</code> (e.g. <code>myplugin_about.jinja2</code>) unless overridden by the configuration supplied through <code>get_template_configs</code>.</p> <p>The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapped div and the link in the navigation will have the additional classes and styles applied as defined via the configuration supplied through <code>get_template_configs</code>.</p> <p>Added in version 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin--generic","title":"Generic","text":"<p>Plugins may also inject arbitrary templates into the page of the web interface itself, e.g. in order to add overlays or dialogs to be called from within the plugin's JavaScript code.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_configs","title":"<code>get_template_configs()</code>","text":"<p>Allows configuration of injected navbar, sidebar, tab and settings templates (and also additional templates of types specified by plugins through the :ref:<code>octoprint.ui.web.templatetypes &lt;sec-plugins-hook-ui-web-templatetypes&gt;</code> hook). Should be a list containing one configuration object per template to inject. Each configuration object is represented by a dictionary which may contain the following keys:</p> <p>.. list-table::    :widths: 5 95</p> <ul> <li> <ul> <li>type</li> <li>The template type the configuration is targeting. Possible values here are <code>navbar</code>, <code>sidebar</code>,    <code>tab</code>, <code>settings</code> and <code>generic</code>. Mandatory.</li> </ul> </li> <li> <ul> <li>name</li> <li> <p>The name of the component, if not set the name of the plugin will be used. The name will be visible at    a location depending on the <code>type</code>:</p> <ul> <li><code>navbar</code>: unused</li> <li><code>sidebar</code>: sidebar heading</li> <li><code>tab</code>: tab heading</li> <li><code>settings</code>: settings link</li> <li><code>wizard</code>: wizard link</li> <li><code>about</code>: about link</li> <li><code>generic</code>: unused</li> </ul> </li> </ul> </li> <li> <ul> <li>template</li> <li> <p>Name of the template to inject, default value depends on the <code>type</code>:</p> <ul> <li><code>navbar</code>: <code>&lt;plugin identifier&gt;_navbar.jinja2</code></li> <li><code>sidebar</code>: <code>&lt;plugin identifier&gt;_sidebar.jinja2</code></li> <li><code>tab</code>: <code>&lt;plugin identifier&gt;_tab.jinja2</code></li> <li><code>settings</code>: <code>&lt;plugin identifier&gt;_settings.jinja2</code></li> <li><code>wizard</code>: <code>&lt;plugin identifier&gt;_wizard.jinja2</code></li> <li><code>about</code>: <code>&lt;plugin identifier&gt;_about.jinja2</code></li> <li><code>generic</code>: <code>&lt;plugin identifier&gt;.jinja2</code></li> </ul> </li> </ul> </li> <li> <ul> <li>suffix</li> <li>Suffix to attach to the component identifier and the div identifier of the injected template. Will be    <code>_&lt;index&gt;</code> if not provided and not the first template of the type, with <code>index</code> counting from 1 and    increasing for each template of the same type.</li> </ul> <p>Example: If your plugin with identifier <code>myplugin</code> defines two tab components like this:</p> <p>.. code-block:: python</p> <pre><code>  return [\n      dict(type=\"tab\", template=\"myplugin_first_tab.jinja2\"),\n      dict(type=\"tab\", template=\"myplugin_second_tab.jinja2\")\n  ]\n</code></pre> <p>then the first tab will have the component identifier <code>plugin_myplugin</code> and the second one will have    the component identifier <code>plugin_myplugin_2</code> (the generated divs will be <code>tab_plugin_myplugin</code> and    <code>tab_plugin_myplugin_2</code> accordingly). Notice that the first tab is not called <code>plugin_myplugin_1</code> --    as stated above while the <code>index</code> used as default suffix starts counting at 1, it will not be applied    for the first component of a given type.</p> <p>If on the other hand your plugin's definition looks like this:</p> <p>.. code-block:: python</p> <pre><code>  return [\n      dict(type=\"tab\", template=\"myplugin_first_tab_jinja2\", suffix=\"_1st\"),\n      dict(type=\"tab\", template=\"myplugin_second_tab_jinja2\", suffix=\"_2nd\")\n  ]\n</code></pre> <p>then the generated component identifier will be <code>plugin_myplugin_1st</code> and <code>plugin_myplugin_2nd</code>    (and the divs will be <code>tab_plugin_myplugin_1st</code> and <code>tab_plugin_myplugin_2nd</code>).</p> </li> <li> <ul> <li>div</li> <li>Id for the div containing the component. If not provided, defaults to <code>&lt;type&gt;_plugin_&lt;plugin identifier&gt;</code> plus    the <code>suffix</code> if provided or required.</li> </ul> </li> <li> <ul> <li>replaces</li> <li>Id of the component this one replaces, might be either one of the core components or a component    provided by another plugin. A list of the core component identifiers can be found    :ref:<code>in the configuration documentation &lt;sec-configuration-config_yaml-appearance&gt;</code>. The identifiers of    other plugin components always follow the format described above.</li> </ul> </li> <li> <ul> <li>custom_bindings</li> <li>A boolean value indicating whether the default view model should be bound to the component (<code>false</code>)    or if a custom binding will be used by the plugin (<code>true</code>, default).</li> </ul> </li> <li> <ul> <li>data_bind</li> <li>Additional knockout data bindings to apply to the component, can be used to add further behaviour to    the container based on internal state if necessary.</li> </ul> </li> <li> <ul> <li>classes</li> <li>Additional classes to apply to the component, as a list of individual classes    (e.g. <code>classes=[\"myclass\", \"myotherclass\"]</code>) which will be joined into the correct format by the template engine.</li> </ul> </li> <li> <ul> <li>styles</li> <li>Additional CSS styles to apply to the component, as a list of individual declarations    (e.g. <code>styles=[\"color: red\", \"display: block\"]</code>) which will be joined into the correct format by the template    engine.</li> </ul> </li> </ul> <p>Further keys to be included in the dictionary depend on the type:</p> <p><code>sidebar</code> type</p> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - icon\n    - Icon to use for the sidebar header, should be the full name of a Font Awesome icon including the ``fas``/``far``/``fab`` prefix, eg. ``fas fa-plus``.\n  * - template_header\n    - Additional template to include in the head section of the sidebar item. For an example of this, see the additional\n      options included in the \"Files\" section.\n  * - classes_wrapper\n    - Like ``classes`` but only applied to the whole wrapper around the sidebar box.\n  * - classes_content\n    - Like ``classes`` but only applied to the content pane itself.\n  * - styles_wrapper\n    - Like ``styles`` but only applied to the whole wrapper around the sidebar box.\n  * - styles_content\n    - Like ``styles`` but only applied to the content pane itself\n</code></pre> <p><code>tab</code> type and <code>settings</code> type</p> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - classes_content\n    - Like ``classes`` but only applied to the content pane itself.\n  * - styles_content\n    - Like ``styles`` but only applied to the content pane itself.\n  * - classes_link\n    - Like ``classes`` but only applied to the link in the navigation.\n  * - styles_link\n    - Like ``styles`` but only applied to the link in the navigation.\n</code></pre> <p><code>webcam</code> type</p> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - classes_content\n    - Like ``classes`` but only applied to the content pane itself.\n  * - styles_content\n    - Like ``styles`` but only applied to the content pane itself.\n</code></pre> <p><code>wizard</code> type</p> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - mandatory\n    - Whether the wizard step is mandatory (True) or not (False). Optional,\n      defaults to False. If set to True, OctoPrint will sort visually mark\n      the step as mandatory in the UI (bold in the navigation and a little\n      alert) and also sort it into the first half.\n</code></pre> <p>.. note::</p> <p>As already outlined above, each template type has a default template name (i.e. the default navbar template    of a plugin is called <code>&lt;plugin identifier&gt;_navbar.jinja2</code>), which may be overridden using the template configuration.    If a plugin needs to include more than one template of a given type, it needs to provide an entry for each of    those, since the implicit default template will only be included automatically if no other templates of that    type are defined.</p> <p>Example: If you have a plugin that injects two tab components, one defined in the template file    <code>myplugin_tab.jinja2</code> (the default template) and one in the template <code>myplugin_othertab.jinja2</code>, you    might be tempted to just return the following configuration since one your templates is named by the default    template name:</p> <p>.. code-block:: python</p> <pre><code>  return [\n      dict(type=\"tab\", template=\"myplugin_othertab.jinja2\")\n  ]\n</code></pre> <p>This will only include the tab defined in <code>myplugin_othertab.jinja2</code> though, <code>myplugin_tab.jinja2</code> will    not be included automatically since the presence of a definition for the <code>tab</code> type overrides the automatic    injection of the default template. You'll have to include it explicitly:</p> <p>.. code-block:: python</p> <pre><code>  return [\n      dict(type=\"tab\", template=\"myplugin_tab.jinja2\"),\n      dict(type=\"tab\", template=\"myplugin_othertab.jinja2\")\n  ]\n</code></pre> <p>:return list: a list containing the configuration options for the plugin's injected templates</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_folder","title":"<code>get_template_folder()</code>","text":"<p>Defines the folder where the plugin stores its templates. Override this if your plugin stores its templates at some other place than the <code>templates</code> sub folder in the plugin base directory.</p> <p>:return string: the absolute path to the folder where the plugin stores its jinja2 templates</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_vars","title":"<code>get_template_vars()</code>","text":"<p>Defines additional template variables to include into the template renderer. Variable names will be prefixed with <code>plugin_&lt;plugin identifier&gt;_</code>.</p> <p>:return dict: a dictionary containing any additional template variables to include in the renderer</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin","title":"<code>UiPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>SortablePlugin</code></p> <p>The <code>UiPlugin</code> mixin allows plugins to completely replace the UI served by OctoPrint when requesting the main page hosted at <code>/</code>.</p> <p>OctoPrint will query whether your mixin implementation will handle a provided request by calling :meth:<code>~octoprint.plugin.UiPlugin.will_handle_ui</code> with the Flask <code>Request &lt;https://flask.palletsprojects.com/api/#flask.Request&gt;</code>_ object as parameter. If you plugin returns <code>True</code> here, OctoPrint will next call :meth:<code>~octoprint.plugin.UiPlugin.on_ui_render</code> with a few parameters like - again - the Flask Request object and the render keyword arguments as used by the default OctoPrint web interface. For more information see below.</p> <p>There are two methods used in order to allow for caching of the actual response sent to the client. Whatever a plugin implementation returns from the call to its :meth:<code>~octoprint.plugin.UiPlugin.on_ui_render</code> method will be cached server side. The cache will be emptied in case of explicit no-cache headers sent by the client, or if the <code>_refresh</code> query parameter on the request exists and is set to <code>true</code>. To prevent caching of the response altogether, a plugin may set no-cache headers on the returned response as well.</p> <p><code>UiPlugin</code> is a :class:<code>~octoprint.plugin.core.SortablePlugin</code> with a sorting context for :meth:<code>~octoprint.plugin.UiPlugin.will_handle_ui</code>. The first plugin to return <code>True</code> for :meth:<code>~octoprint.plugin.UiPlugin.will_handle_ui</code> will be the one whose ui will be used, no further calls to :meth:<code>~octoprint.plugin.UiPlugin.on_ui_render</code> will be performed.</p> <p>If implementations want to serve custom templates in the :meth:<code>~octoprint.plugin.UiPlugin.on_ui_render</code> method it is recommended to also implement the :class:<code>~octoprint.plugin.TemplatePlugin</code> mixin.</p> <p>Example</p> <p>What follows is a very simple example that renders a different (non functional and only exemplary) UI if the requesting client has a UserAgent string hinting at it being a mobile device:</p> <p>.. onlineinclude:: https://raw.githubusercontent.com/OctoPrint/Plugin-Examples/master/dummy_mobile_ui/__init__.py    :tab-width: 4    :caption: <code>dummy_mobile_ui/__init__.py &lt;https://github.com/OctoPrint/Plugin-Examples/blob/master/dummy_mobile_ui/__init__.py&gt;</code>_</p> <p>.. onlineinclude:: https://raw.githubusercontent.com/OctoPrint/Plugin-Examples/master/dummy_mobile_ui/templates/dummy_mobile_ui_index.jinja2    :tab-width: 4    :caption: <code>dummy_mobile_ui/templates/dummy_mobile_ui_index.jinja2 &lt;https://github.com/OctoPrint/Plugin-Examples/blob/master/dummy_mobile_ui/templates/dummy_mobile_ui_index.jinja2&gt;</code>_</p> <p>Try installing the above plugin <code>dummy_mobile_ui</code> (also available in the <code>plugin examples repository &lt;https://github.com/OctoPrint/Plugin-Examples/blob/master/dummy_mobile_ui&gt;</code>_) into your OctoPrint instance. If you access it from a regular desktop browser, you should still see the default UI. However if you access it from a mobile device (make sure to not have that request the desktop version of pages!) you should see the very simple dummy page defined above.</p> <p>Preemptive and Runtime Caching</p> <p>OctoPrint will also cache your custom UI for you in its server side UI cache, making sure it only gets re-rendered if the request demands that (by having no-cache headers set) or if the cache gets invalidated otherwise.</p> <p>In order to be able to do that, the <code>UiPlugin</code> offers overriding some cache specific methods used for figuring out the source files whose modification time to use for cache invalidation as well as override possibilities for ETag and LastModified calculation. Additionally there are methods to allow persisting call parameters to allow for preemptively caching your UI during server startup (basically eager caching instead of lazily waiting for the first request).</p> <p>See below for details on this.</p> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_etag","title":"<code>get_ui_additional_etag(default_additional)</code>","text":"<p>Allows to provide a list of additional fields to use for ETag generation.</p> <p>By default the same list will be returned that is also used in the stock UI (and injected via the parameter <code>default_additional</code>).</p> <p>Parameters:</p> <ul> <li> default_additional             (<code>list</code>)         \u2013          <p>The list of default fields added to the ETag of the default UI</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>         \u2013          <p>A list of additional fields for the ETag generation, or None</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_key_data_for_cache","title":"<code>get_ui_additional_key_data_for_cache()</code>","text":"<p>Allows to return additional data to use in the cache key.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>list, tuple: A list or tuple of strings to use in the cache key. Will be joined by OctoPrint using <code>:</code> as separator and appended to the existing <code>ui:&lt;identifier&gt;:&lt;base url&gt;:&lt;locale&gt;</code> cache key. Ignored if <code>None</code> is returned.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_request_data_for_preemptive_caching","title":"<code>get_ui_additional_request_data_for_preemptive_caching()</code>","text":"<p>Allows defining additional request data to persist in the preemptive cache configuration and to use for the fake request used for populating the preemptive cache.</p> <p>Keys and values are used as keyword arguments for creating the <code>Werkzeug EnvironBuilder &lt;http://werkzeug.pocoo.org/docs/0.11/test/#werkzeug.test.EnvironBuilder&gt;</code>_ used for creating the fake request.</p> <p>Returns:</p> <ul> <li> dict        \u2013          <p>Additional request data to persist in the preemptive cache configuration and to use for request environment construction.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_tracked_files","title":"<code>get_ui_additional_tracked_files()</code>","text":"<p>Allows to return additional files to track for validating existing caches. By default OctoPrint will track all declared templates, assets and translation files in the system. Additional files can be added by a plugin through this callback.</p> <p>Returns:</p> <ul> <li> list        \u2013          <p>A list of paths to additional files whose modification to track for (in)validating the cache. Ignored if <code>None</code> is returned.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_etag","title":"<code>get_ui_custom_etag()</code>","text":"<p>Allows to use a custom way to calculate the ETag, instead of the default method (hashing OctoPrint's version, tracked file paths and <code>LastModified</code> value).</p> <p>Returns:</p> <ul> <li> str        \u2013          <p>An alternatively calculated ETag value. Ignored if <code>None</code> is returned (default).</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_lastmodified","title":"<code>get_ui_custom_lastmodified()</code>","text":"<p>Allows to calculate the LastModified differently than using the most recent modification date of all tracked files.</p> <p>Returns:</p> <ul> <li> int        \u2013          <p>An alternatively calculated LastModified value. Ignored if <code>None</code> is returned (default).</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_template_filter","title":"<code>get_ui_custom_template_filter(default_template_filter)</code>","text":"<p>Allows to specify a custom template filter to use for filtering the template contained in the <code>render_kwargs</code> provided to the templating sub system.</p> <p>Only relevant for UiPlugins that actually utilize the stock templates of OctoPrint.</p> <p>By default simply returns the provided <code>default_template_filter</code>.</p> <p>Parameters:</p> <ul> <li> default_template_filter             (<code>callable</code>)         \u2013          <p>The default template filter used by the default UI</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(callable) A filter function accepting the <code>template_type</code> and <code>template_key</code> of a template</p> </li> <li>         \u2013          <p>and returning <code>True</code> to keep it and <code>False</code> to filter it out. If <code>None</code> is returned, no</p> </li> <li>         \u2013          <p>filtering will take place.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_tracked_files","title":"<code>get_ui_custom_tracked_files()</code>","text":"<p>Allows to define a complete separate set of files to track for (in)validating the cache. If this method returns something, the templates, assets and translation files won't be tracked, only the files specified in the returned list.</p> <p>Returns:</p> <ul> <li> list        \u2013          <p>A list of paths representing the only files whose modification to track for (in)validating the cache. Ignored if <code>None</code> is returned.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_data_for_preemptive_caching","title":"<code>get_ui_data_for_preemptive_caching()</code>","text":"<p>Allows defining additional data to be persisted in the preemptive cache configuration, on top of the request path, base URL and used locale.</p> <p>Returns:</p> <ul> <li> dict        \u2013          <p>Additional data to persist in the preemptive cache configuration.</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_permissions","title":"<code>get_ui_permissions()</code>","text":"<p>Determines a list of permissions that need to be on the current user session. If these requirements are not met, OctoPrint will instead redirect to a login screen.</p> <p>Plugins may override this with their own set of permissions. Returning an empty list will instruct OctoPrint to never show a login dialog when this UiPlugin's view renders, in which case it will fall to your plugin to implement its own login logic.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>(list) A list of permissions which to check the current user session against.</p> </li> <li>         \u2013          <p>May be empty to indicate that no permission checks should be made by OctoPrint.</p> </li> </ul> <p>.. versionadded: 1.5.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_preemptive_caching_additional_unless","title":"<code>get_ui_preemptive_caching_additional_unless()</code>","text":"<p>Allows defining additional reasons for temporarily not adding a preemptive cache record for your plugin's UI.</p> <p>OctoPrint will call this method when processing a UI request, to determine whether to record the access or not. If you return <code>True</code> here, no record will be created.</p> <p>Returns:</p> <ul> <li> bool        \u2013          <p>Whether to suppress a record (True) or not (False, default)</p> </li> </ul> <p>.. versionadded:: 1.3.0</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_preemptive_caching_enabled","title":"<code>get_ui_preemptive_caching_enabled()</code>","text":"<p>Allows to control whether the view provided by the plugin should be preemptively cached on server startup (default) or not.</p> <p>Have this return False if you do not want your plugin's UI to ever be preemptively cached.</p> <p>Returns:</p> <ul> <li> bool        \u2013          <p>Whether to enable preemptive caching (True, default) or not (False)</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.on_ui_render","title":"<code>on_ui_render(now, request, render_kwargs)</code>","text":"<p>Called by OctoPrint to retrieve the response to send to the client for the <code>request</code> to <code>/</code>. Only called if :meth:<code>~octoprint.plugin.UiPlugin.will_handle_ui</code> returned <code>True</code>.</p> <p><code>render_kwargs</code> will be a dictionary (whose contents are cached) which will contain the following key and value pairs (note that not all key value pairs contained in the dictionary are listed here, only those you should depend on as a plugin developer at the current time):</p> <p>.. list-table::    :widths: 5 95</p> <ul> <li> <ul> <li>debug</li> <li><code>True</code> if debug mode is enabled, <code>False</code> otherwise.</li> </ul> </li> <li> <ul> <li>firstRun</li> <li><code>True</code> if the server is being run for the first time (not    configured yet), <code>False</code> otherwise.</li> </ul> </li> <li> <ul> <li>version</li> <li>OctoPrint's version information. This is a <code>dict</code> with the    following keys:</li> </ul> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - number\n    - The version number (e.g. ``x.y.z``)\n  * - branch\n    - The GIT branch from which the OctoPrint instance was built\n      (e.g. ``master``)\n  * - display\n    - The full human readable version string, including the\n      branch information (e.g. ``x.y.z (master branch)``\n</code></pre> </li> <li> <ul> <li>uiApiKey</li> <li>The UI API key to use for unauthorized API requests. This is    freshly generated on every server restart.</li> </ul> </li> <li> <ul> <li>templates</li> <li>Template data to render in the UI. Will be a <code>dict</code> containing entries    for all known template types.</li> </ul> <p>The sub structure for each key will be as follows:</p> <p>.. list-table::       :widths: 5 95</p> <pre><code>  * - order\n    - A list of template names in the order they should appear\n      in the final rendered page\n  * - entries\n    - The template entry definitions to render. Depending on the\n      template type those are either 2-tuples of a name and a ``dict``\n      or directly ``dicts`` with information regarding the\n      template to render.\n\n      For the possible contents of the data ``dicts`` see the\n      :class:`~octoprint.plugin.TemplatePlugin` mixin.\n</code></pre> </li> <li> <ul> <li>pluginNames</li> <li>A list of names of :class:<code>~octoprint.plugin.TemplatePlugin</code>    implementation that were enabled when creating the <code>templates</code>    value.</li> </ul> </li> <li> <ul> <li>locales</li> <li>The locales for which there are translations available.</li> </ul> </li> <li> <ul> <li>supportedExtensions</li> <li>The file extensions supported for uploads.</li> </ul> </li> </ul> <p>On top of that all additional template variables as provided by :meth:<code>~octoprint.plugin.TemplatePlugin.get_template_vars</code> will be contained in the dictionary as well.</p> <p>Parameters:</p> <ul> <li> now             (<code>datetime.datetime</code>)         \u2013          <p>The datetime instance representing \"now\" for this request, in case your plugin implementation needs this information.</p> </li> <li> request             (<code>flask.Request</code>)         \u2013          <p>A Flask <code>Request &lt;https://flask.palletsprojects.com/api/#flask.Request&gt;</code>_ object.</p> </li> <li> render_kwargs             (<code>dict</code>)         \u2013          <p>The (cached) render keyword arguments that would usually be provided to the core UI render function.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>flask.Response: Should return a Flask <code>Response &lt;https://flask.palletsprojects.com/api/#flask.Response&gt;</code>_ object that can be served to the requesting client directly. May be created with <code>flask.make_response</code> combined with something like <code>flask.render_template</code>.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.will_handle_ui","title":"<code>will_handle_ui(request)</code>","text":"<p>Called by OctoPrint to determine if the mixin implementation will be able to handle the <code>request</code> provided as a parameter.</p> <p>Return <code>True</code> here to signal that your implementation will handle the request and that the result of its :meth:<code>~octoprint.plugin.UiPlugin.on_ui_render</code> method is what should be served to the user.</p> <p>The execution order of calls to this method can be influenced via the sorting context <code>UiPlugin.will_handle_ui</code>.</p> <p>Parameters:</p> <ul> <li> request             (<code>flask.Request</code>)         \u2013          <p>A Flask <code>Request &lt;https://flask.palletsprojects.com/api/#flask.Request&gt;</code>_ object.</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p><code>True</code> if the implementation will serve the request, <code>False</code> otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WebcamProviderPlugin","title":"<code>WebcamProviderPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code></p> <p>The <code>WebcamProviderPlugin</code> can be used to provide one or more webcams visible on the frontend and used for snapshots/timelapses.</p> <p>For an example of how to utilize this, see the bundled <code>classicwebcam</code> plugin, or the <code>testpicture</code> plugin available <code>here &lt;https://github.com/OctoPrint/OctoPrint-Testpicture&gt;</code>_.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WebcamProviderPlugin.get_webcam_configurations","title":"<code>get_webcam_configurations()</code>","text":"<p>Used to retrieve a list of available webcams</p> <p>Returns:</p> <ul> <li>         \u2013          <p>A list of :class:<code>~octoprint.schema.webcam.Webcam</code>: The available webcams, can be empty if none available.</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WebcamProviderPlugin.take_webcam_snapshot","title":"<code>take_webcam_snapshot(webcamName)</code>","text":"<p>Used to take a JPEG snapshot of the webcam. This method may raise an exception, you can expect failures to be handled.</p> <p>:param string webcamName: The name of the webcam to take a snapshot of as given by the configurations</p> <p>Returns:</p> <ul> <li>         \u2013          <p>An iterator over bytes of the JPEG image</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin","title":"<code>WizardPlugin</code>","text":"<p>         Bases: <code>OctoPrintPlugin</code>, <code>ReloadNeedingPlugin</code></p> <p>The <code>WizardPlugin</code> mixin allows plugins to report to OctoPrint whether the <code>wizard</code> templates they define via the :class:<code>~octoprint.plugin.TemplatePlugin</code> should be displayed to the user, what details to provide to their respective wizard frontend components and what to do when the wizard is finished by the user.</p> <p>OctoPrint will only display such wizard dialogs to the user which belong to plugins that</p> <ul> <li>report <code>True</code> in their :func:<code>is_wizard_required</code> method and</li> <li>have not yet been shown to the user in the version currently being reported     by the :meth:<code>~octoprint.plugin.WizardPlugin.get_wizard_version</code> method</li> </ul> <p>Example: If a plugin with the identifier <code>myplugin</code> has a specific setting <code>some_key</code> it needs to have filled by the user in order to be able to work at all, it would probably test for that setting's value in the :meth:<code>~octoprint.plugin.WizardPlugin.is_wizard_required</code> method and return <code>True</code> if the value is unset:</p> <p>.. code-block:: python</p> <p>class MyPlugin(octoprint.plugin.SettingsPlugin,                   octoprint.plugin.TemplatePlugin,                   octoprint.plugin.WizardPlugin):</p> <pre><code>   def get_default_settings(self):\n       return dict(some_key=None)\n\n   def is_wizard_required(self):\n       return self._settings.get([\"some_key\"]) is None\n</code></pre> <p>OctoPrint will then display the wizard dialog provided by the plugin through the :class:<code>TemplatePlugin</code> mixin. Once the user finishes the wizard on the frontend, OctoPrint will store that it already showed the wizard of <code>myplugin</code> in the version reported by :meth:<code>~octoprint.plugin.WizardPlugin.get_wizard_version</code> - here <code>None</code> since that is the default value returned by that function and the plugin did not override it.</p> <p>If the plugin in a later version needs another setting from the user in order to function, it will also need to change the reported version in order to have OctoPrint reshow the dialog. E.g.</p> <p>.. code-block:: python</p> <p>class MyPlugin(octoprint.plugin.SettingsPlugin,                   octoprint.plugin.TemplatePlugin,                   octoprint.plugin.WizardPlugin):</p> <pre><code>   def get_default_settings(self):\n       return dict(some_key=None, some_other_key=None)\n\n   def is_wizard_required(self):\n       some_key_unset = self._settings.get([\"some_key\"]) is None\n       some_other_key_unset = self._settings.get([\"some_other_key\"]) is None\n\n       return some_key_unset or some_other_key_unset\n\n   def get_wizard_version(self):\n       return 1\n</code></pre> <p><code>WizardPlugin</code> is a :class:<code>~octoprint.plugin.core.ReloadNeedingPlugin</code>.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.get_wizard_details","title":"<code>get_wizard_details()</code>","text":"<p>Called by OctoPrint when the wizard wrapper dialog is shown. Allows the plugin to return data that will then be made available to the view models via the view model callback <code>onWizardDetails</code>.</p> <p>Use this if your plugin's view model that handles your wizard dialog needs additional data to perform its task.</p> <p>Returns:</p> <ul> <li> dict        \u2013          <p>a dictionary containing additional data to provide to the frontend. Whatever the plugin   returns here will be made available on the wizard API under the plugin's identifier</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.get_wizard_version","title":"<code>get_wizard_version()</code>","text":"<p>The version of this plugin's wizard. OctoPrint will only display a wizard of the same plugin and wizard version once to the user. After they finish the wizard, OctoPrint will remember that it already showed this wizard in this particular version and not reshow it.</p> <p>If a plugin needs to show its wizard to the user again (e.g. because of changes in the required settings), increasing this value is the way to notify OctoPrint of these changes.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>int or None: an int signifying the current wizard version, should be incremented by plugins whenever there          are changes to the plugin that might necessitate reshowing the wizard if it is required. <code>None</code>          will also be accepted and lead to the wizard always be ignored unless it has never been finished          so far</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.is_wizard_ignored","title":"<code>is_wizard_ignored(seen_wizards, implementation)</code>  <code>classmethod</code>","text":"<p>Determines whether the provided implementation is ignored based on the provided information about already seen wizards and their versions or not.</p> <p>A wizard is ignored if</p> <ul> <li>the current and seen versions are identical</li> <li>the current version is None and the seen version is not</li> <li>the seen version is not None and the current version is less or equal than the seen one</li> </ul> <p>.. code-block:: none</p> <pre><code>   |  current  |\n   | N | 1 | 2 |   N = None\n</code></pre> <p>----+---+---+---+   X = ignored    s N | X |   |   |    e --+---+---+---+    e 1 | X | X |   |    n --+---+---+---+      2 | X | X | X |    ----+---+---+---+</p> <p>Parameters:</p> <ul> <li> seen_wizards             (<code>dict</code>)         \u2013          <p>A dictionary with information about already seen wizards and their versions. Mappings from the identifiers of the plugin providing the wizard to the reported wizard version (int or None) that was already seen by the user.</p> </li> <li> implementation             (<code>object</code>)         \u2013          <p>The plugin implementation to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p>False if the provided <code>implementation</code> is either not a :class:<code>WizardPlugin</code>   or has not yet been seen (in this version), True otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.is_wizard_required","title":"<code>is_wizard_required()</code>","text":"<p>Allows the plugin to report whether it needs to display a wizard to the user or not.</p> <p>Defaults to <code>False</code>.</p> <p>OctoPrint will only include those wizards from plugins which are reporting their wizards as being required through this method returning <code>True</code>. Still, if OctoPrint already displayed that wizard in the same version to the user once it won't be displayed again regardless whether this method returns <code>True</code> or not.</p>"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.on_wizard_finish","title":"<code>on_wizard_finish(handled)</code>","text":"<p>Called by OctoPrint whenever the user finishes a wizard session.</p> <p>The <code>handled</code> parameter will indicate whether that plugin's wizard was included in the wizard dialog presented to the user (so the plugin providing it was reporting that the wizard was required and the wizard plus version was not ignored/had already been seen).</p> <p>Use this to do any clean up tasks necessary after wizard completion.</p> <p>Parameters:</p> <ul> <li> handled             (<code>bool</code>)         \u2013          <p>True if the plugin's wizard was previously reported as             required, not ignored and thus presented to the user,             False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/plugins/","title":"octoprint.plugins","text":""},{"location":"reference/octoprint/printer/","title":"octoprint.printer","text":"<p>This module defines the interface for communicating with a connected printer.</p> <p>The communication is in fact divided in two components, the :class:<code>PrinterInterface</code> and a deeper lying communication layer. However, plugins should only ever need to use the :class:<code>PrinterInterface</code> as the abstracted version of the actual printer communication.</p> <p>.. autofunction:: get_connection_options</p> <p>.. autoclass:: PrinterInterface    :members:</p> <p>.. autoclass:: PrinterCallback    :members:</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback","title":"<code>PrinterCallback</code>","text":""},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_log","title":"<code>on_printer_add_log(data)</code>","text":"<p>Called when the :class:<code>PrinterInterface</code> receives a new communication log entry from the communication layer.</p> <p>Parameters:</p> <ul> <li> data             (<code>str</code>)         \u2013          <p>The received log line.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_message","title":"<code>on_printer_add_message(data)</code>","text":"<p>Called when the :class:<code>PrinterInterface</code> receives a new message from the communication layer.</p> <p>Parameters:</p> <ul> <li> data             (<code>str</code>)         \u2013          <p>The received message.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_temperature","title":"<code>on_printer_add_temperature(data)</code>","text":"<p>Called when the :class:<code>PrinterInterface</code> receives a new temperature data set from the communication layer.</p> <p><code>data</code> is a <code>dict</code> of the following structure::</p> <pre><code>tool0:\n    actual: &lt;temperature of the first hotend, in degC&gt;\n    target: &lt;target temperature of the first hotend, in degC&gt;\n...\nbed:\n    actual: &lt;temperature of the bed, in degC&gt;\n    target: &lt;target temperature of the bed, in degC&gt;\nchamber:\n    actual: &lt;temperature of the chamber, in degC&gt;\n    target: &lt;target temperature of the chamber, in degC&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> data             (<code>dict</code>)         \u2013          <p>A dict of all current temperatures in the format as specified above</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_received_registered_message","title":"<code>on_printer_received_registered_message(name, output)</code>","text":"<p>Called when the :class:<code>PrinterInterface</code> received a registered message, e.g. from a feedback command.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>Name of the registered message (e.g. the feedback command)</p> </li> <li> output             (<code>str</code>)         \u2013          <p>Output for the registered message</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_send_current_data","title":"<code>on_printer_send_current_data(data)</code>","text":"<p>Called when the internal state of the :class:<code>PrinterInterface</code> changes, due to changes in the printer state, temperatures, log lines, job progress etc. Updates via this method are guaranteed to be throttled to a maximum of 2 calls per second.</p> <p><code>data</code> is a <code>dict</code> of the following structure::</p> <pre><code>state:\n    text: &lt;current state string&gt;\n    flags:\n        operational: &lt;whether the printer is currently connected and responding&gt;\n        printing: &lt;whether the printer is currently printing&gt;\n        closedOrError: &lt;whether the printer is currently disconnected and/or in an error state&gt;\n        error: &lt;whether the printer is currently in an error state&gt;\n        paused: &lt;whether the printer is currently paused&gt;\n        ready: &lt;whether the printer is operational and ready for jobs&gt;\n        sdReady: &lt;whether an SD card is present&gt;\njob:\n    file:\n        name: &lt;name of the file&gt;,\n        size: &lt;size of the file in bytes&gt;,\n        origin: &lt;origin of the file, \"local\" or \"sdcard\"&gt;,\n        date: &lt;last modification date of the file&gt;\n    estimatedPrintTime: &lt;estimated print time of the file in seconds&gt;\n    lastPrintTime: &lt;last print time of the file in seconds&gt;\n    filament:\n        length: &lt;estimated length of filament needed for this file, in mm&gt;\n        volume: &lt;estimated volume of filament needed for this file, in ccm&gt;\nprogress:\n    completion: &lt;progress of the print job in percent (0-100)&gt;\n    filepos: &lt;current position in the file in bytes&gt;\n    printTime: &lt;current time elapsed for printing, in seconds&gt;\n    printTimeLeft: &lt;estimated time left to finish printing, in seconds&gt;\ncurrentZ: &lt;current position of the z axis, in mm&gt;\noffsets: &lt;current configured temperature offsets, keys are \"bed\" or \"tool[0-9]+\", values the offset in degC&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> data             (<code>dict</code>)         \u2013          <p>The current data in the format as specified above.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_send_initial_data","title":"<code>on_printer_send_initial_data(data)</code>","text":"<p>Called when registering as a callback with the :class:<code>PrinterInterface</code> to receive the initial data (state, log and temperature history etc) from the printer.</p> <p><code>data</code> is a <code>dict</code> of the following structure::</p> <pre><code>temps:\n  - time: &lt;timestamp of the temperature data point&gt;\n    tool0:\n        actual: &lt;temperature of the first hotend, in degC&gt;\n        target: &lt;target temperature of the first hotend, in degC&gt;\n    ...\n    bed:\n        actual: &lt;temperature of the bed, in degC&gt;\n        target: &lt;target temperature of the bed, in degC&gt;\n  - ...\nlogs: &lt;list of current communication log lines&gt;\nmessages: &lt;list of current messages from the firmware&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> data             (<code>dict</code>)         \u2013          <p>The initial data in the format as specified above.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface","title":"<code>PrinterInterface</code>","text":"<p>The :class:<code>PrinterInterface</code> represents the developer interface to the :class:<code>~octoprint.printer.standard.Printer</code> instance.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_axes","title":"<code>valid_axes = ('x', 'y', 'z', 'e')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Valid axes identifiers.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_heater_regex","title":"<code>valid_heater_regex = re.compile('^(tool\\\\d+|bed|chamber)$')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Regex for valid heater identifiers.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_tool_regex","title":"<code>valid_tool_regex = re.compile('^(tool\\\\d+)$')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Regex for valid tool identifiers.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.can_modify_file","title":"<code>can_modify_file(path, sd, *args, **kwargs)</code>","text":"<p>Determines whether the <code>path</code> (on the printer's SD if <code>sd</code> is True) may be modified (updated or deleted) or not.</p> <p>A file that is currently being printed is not allowed to be modified. Any other file or the current file when it is not being printed is fine though.</p> <p>:since: 1.3.2</p> <p>.. warning::</p> <p>This was introduced in 1.3.2 to work around an issue when updating a file that is already selected.    I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide    to depend on this particular method in this interface, be advised that it might vanish in future    versions!</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path in storage of the file to check</p> </li> <li> sd             (<code>bool</code>)         \u2013          <p>True if to check against SD storage, False otherwise</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(bool) True if the file may be modified, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.cancel_print","title":"<code>cancel_print(tags = None, *args, **kwargs)</code>","text":"<p>Cancels the current print job.</p> <p>Parameters:</p> <ul> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.change_tool","title":"<code>change_tool(tool, tags = None, *args, **kwargs)</code>","text":"<p>Switch the currently active <code>tool</code> (for which extrude commands will apply).</p> <p>Parameters:</p> <ul> <li> tool             (<code>str</code>)         \u2013          <p>The tool to switch to, matching the regex \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...)</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.commands","title":"<code>commands(commands, tags = None, force = False, *args, **kwargs)</code>","text":"<p>Sends the provided <code>commands</code> to the printer.</p> <p>Parameters:</p> <ul> <li> commands             (<code>str, list</code>)         \u2013          <p>The commands to send. Might be a single command provided just as a string or a list of multiple commands to send in order.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> <li> force             (<code>bool</code>)         \u2013          <p>Whether to force sending of the command right away or allow queuing while printing</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.connect","title":"<code>connect(port = None, baudrate = None, profile = None, *args, **kwargs)</code>","text":"<p>Connects to the printer, using the specified serial <code>port</code>, <code>baudrate</code> and printer <code>profile</code>. If a connection is already established, that connection will be closed prior to connecting anew with the provided parameters.</p> <p>Parameters:</p> <ul> <li> port             (<code>str</code>)         \u2013          <p>Name of the serial port to connect to. If not provided, an auto detection will be attempted.</p> </li> <li> baudrate             (<code>int</code>)         \u2013          <p>Baudrate to connect with. If not provided, an auto detection will be attempted.</p> </li> <li> profile             (<code>str</code>)         \u2013          <p>Name of the printer profile to use for this connection. If not provided, the default will be retrieved from the :class:<code>PrinterProfileManager</code>.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.disconnect","title":"<code>disconnect(*args, **kwargs)</code>","text":"<p>Disconnects from the printer. Does nothing if no connection is currently established.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.extrude","title":"<code>extrude(amount, speed = None, tags = None, *args, **kwargs)</code>","text":"<p>Extrude <code>amount</code> millimeters of material from the tool.</p> <p>Parameters:</p> <ul> <li> amount             (<code>int, float</code>)         \u2013          <p>The amount of material to extrude in mm</p> </li> <li> speed             (<code>int, None</code>)         \u2013          <p>Speed at which to extrude (F parameter). If set to <code>None</code> (or left out)</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.fake_ack","title":"<code>fake_ack(*args, **kwargs)</code>","text":"<p>Fakes an acknowledgment for the communication layer. If the communication between OctoPrint and the printer gets stuck due to lost \"ok\" responses from the server due to communication issues, this can be used to get things going again.</p>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.feed_rate","title":"<code>feed_rate(factor, tags = None, *args, **kwargs)</code>","text":"<p>Sets the <code>factor</code> for the printer's feed rate.</p> <p>Parameters:</p> <ul> <li> factor             (<code>int, float</code>)         \u2013          <p>The factor for the feed rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.flow_rate","title":"<code>flow_rate(factor, tags = None, *args, **kwargs)</code>","text":"<p>Sets the <code>factor</code> for the printer's flow rate.</p> <p>Parameters:</p> <ul> <li> factor             (<code>int, float</code>)         \u2013          <p>The factor for the flow rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_connection_options","title":"<code>get_connection_options(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Retrieves the available ports, baudrates, preferred port and baudrate for connecting to the printer.</p> <p>Returned <code>dict</code> has the following structure::</p> <pre><code>ports: &lt;list of available serial ports&gt;\nbaudrates: &lt;list of available baudrates&gt;\nportPreference: &lt;configured default serial port&gt;\nbaudratePreference: &lt;configured default baudrate&gt;\nautoconnect: &lt;whether autoconnect upon server startup is enabled or not&gt;\n</code></pre> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dictionary holding the connection options in the structure specified above</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_connection","title":"<code>get_current_connection(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(tuple) The current connection information as a 4-tuple <code>(connection_string, port, baudrate, printer_profile)</code>. If the printer is currently not connected, the tuple will be <code>(\"Closed\", None, None, None)</code>.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_data","title":"<code>get_current_data(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(dict) The current state data.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_job","title":"<code>get_current_job(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(dict) The data of the current job.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_temperatures","title":"<code>get_current_temperatures(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(dict) The current temperatures.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_state_id","title":"<code>get_state_id(*args, **kwargs)</code>","text":"<p>Identifier of the current communication state.</p> Possible values are <ul> <li>OPEN_SERIAL</li> <li>DETECT_SERIAL</li> <li>DETECT_BAUDRATE</li> <li>CONNECTING</li> <li>OPERATIONAL</li> <li>PRINTING</li> <li>PAUSED</li> <li>CLOSED</li> <li>ERROR</li> <li>CLOSED_WITH_ERROR</li> <li>TRANSFERING_FILE</li> <li>OFFLINE</li> <li>UNKNOWN</li> <li>NONE</li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(str) A unique identifier corresponding to the current communication state.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_state_string","title":"<code>get_state_string(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(str) A human readable string corresponding to the current communication state.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_temperature_history","title":"<code>get_temperature_history(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(list) The temperature history.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_transport","title":"<code>get_transport(*args, **kwargs)</code>","text":"<p>Returns the communication layer's transport object, if a connection is currently established.</p> <p>Note that this doesn't have to necessarily be a :class:<code>serial.Serial</code> instance, it might also be something different, so take care to do instance checks before attempting to access any properties or methods.</p> <p>Returns:</p> <ul> <li> object        \u2013          <p>The communication layer's transport object</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.home","title":"<code>home(axes, tags = None, *args, **kwargs)</code>","text":"<p>Homes the specified printer <code>axes</code>.</p> <p>Parameters:</p> <ul> <li> axes             (<code>str, list</code>)         \u2013          <p>The axis or axes to home, each of which must converted to lower case must match one of \"x\", \"y\", \"z\" and \"e\"</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_cancelling","title":"<code>is_cancelling(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently cancelling a print.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_closed_or_error","title":"<code>is_closed_or_error(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently disconnected and/or in an error state.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_current_file","title":"<code>is_current_file(path, sd, *args, **kwargs)</code>","text":"<p>Returns whether the provided <code>path</code> (on the printer's SD if <code>sd</code> is True) is the currently selected file for printing.</p> <p>:since: 1.3.2</p> <p>.. warning::</p> <p>This was introduced in 1.3.2 to work around an issue when updating a file that is already selected.    I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide    to depend on this particular method in this interface, be advised that it might vanish in future    versions!</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>path in storage of the file to check</p> </li> <li> sd             (<code>bool</code>)         \u2013          <p>True if to check against SD storage, False otherwise</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(bool) True if the file is currently selected, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_error","title":"<code>is_error(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently in an error state.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_operational","title":"<code>is_operational(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently connected and available.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_paused","title":"<code>is_paused(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently paused.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_pausing","title":"<code>is_pausing(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently pausing a print.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_printing","title":"<code>is_printing(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently printing.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_ready","title":"<code>is_ready(*args, **kwargs)</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) Whether the printer is currently operational and ready for new print jobs (not printing).</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.job_on_hold","title":"<code>job_on_hold(blocking = True, *args, **kwargs)</code>","text":"<p>Contextmanager that allows executing code while printing while making sure that no commands from the file being printed are continued to be sent to the printer. Note that this will only work for local files, NOT SD files.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>with printer.job_on_hold():        park_printhead()        take_snapshot()        send_printhead_back()</p> <p>It should be used sparingly and only for very specific situations (such as parking the print head somewhere, taking a snapshot from the webcam, then continuing). If you abuse this, you WILL cause print quality issues!</p> <p>A lock is in place that ensures that the context can only actually be held by one thread at a time. If you don't want to block on acquire, be sure to set <code>blocking</code> to <code>False</code> and catch the <code>RuntimeException</code> thrown if the lock can't be acquired.</p> <p>Parameters:</p> <ul> <li> blocking             (<code>bool</code>)         \u2013          <p>Whether to block while attempting to acquire the lock (default) or not</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.jog","title":"<code>jog(axes, relative = True, speed = None, tags = None, *args, **kwargs)</code>","text":"<p>Jogs the specified printer <code>axis</code> by the specified <code>amount</code> in mm.</p> <p>Parameters:</p> <ul> <li> axes             (<code>dict</code>)         \u2013          <p>Axes and distances to jog, keys are axes (\"x\", \"y\", \"z\"), values are distances in mm</p> </li> <li> relative             (<code>bool</code>)         \u2013          <p>Whether to interpret the distance values as relative (true, default) or absolute (false) coordinates</p> </li> <li> speed             (<code>int, bool or None</code>)         \u2013          <p>Speed at which to jog (F parameter). If set to <code>False</code> no speed will be set specifically. If set to <code>None</code> (or left out) the minimum of all involved axes speeds from the printer profile will be used.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.log_lines","title":"<code>log_lines(*lines)</code>","text":"<p>Logs the provided lines to the printer log and serial.log</p> <p>Parameters:</p> <ul> <li> *lines         \u2013          <p>the lines to log</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.pause_print","title":"<code>pause_print(tags = None, *args, **kwargs)</code>","text":"<p>Pauses the current print job if it is currently running, does nothing otherwise.</p> <p>Parameters:</p> <ul> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.register_callback","title":"<code>register_callback(callback, *args, **kwargs)</code>","text":"<p>Registers a :class:<code>PrinterCallback</code> with the instance.</p> <p>Parameters:</p> <ul> <li> callback             (<code>PrinterCallback</code>)         \u2013          <p>The callback object to register.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.resume_print","title":"<code>resume_print(tags = None, *args, **kwargs)</code>","text":"<p>Resumes the current print job if it is currently paused, does nothing otherwise.</p> <p>Parameters:</p> <ul> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.script","title":"<code>script(name, context = None, tags = None, *args, **kwargs)</code>","text":"<p>Sends the GCODE script <code>name</code> to the printer.</p> <p>The script will be run through the template engine, the rendering context can be extended by providing a <code>context</code> with additional template variables to use.</p> <p>If the script is unknown, an :class:<code>UnknownScriptException</code> will be raised.</p> <p>Parameters:</p> <ul> <li> name             (<code>str</code>)         \u2013          <p>The name of the GCODE script to render.</p> </li> <li> context             (<code>dict</code>)         \u2013          <p>An optional context of additional template variables to provide to the renderer.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>UnknownScriptException</code>           \u2013          <p>There is no GCODE script with name <code>name</code></p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.select_file","title":"<code>select_file(path, sd, printAfterSelect = False, pos = None, tags = None, *args, **kwargs)</code>","text":"<p>Selects the specified <code>path</code> for printing, specifying if the file is to be found on the <code>sd</code> or not. Optionally can also directly start the print after selecting the file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The path to select for printing. Either an absolute path or relative path to a  local file in the uploads folder or a filename on the printer's SD card.</p> </li> <li> sd             (<code>boolean</code>)         \u2013          <p>Indicates whether the file is on the printer's SD card or not.</p> </li> <li> printAfterSelect             (<code>boolean</code>)         \u2013          <p>Indicates whether a print should be started after the file is selected.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>InvalidFileType</code>           \u2013          <p>if the file is not a machinecode file and hence cannot be printed</p> </li> <li> <code>InvalidFileLocation</code>           \u2013          <p>if an absolute path was provided and not contained within local storage or doesn't exist</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.send_initial_callback","title":"<code>send_initial_callback(callback)</code>","text":"<p>Sends the initial printer update to :class:<code>PrinterCallback</code>.</p> <p>Parameters:</p> <ul> <li> callback             (<code>PrinterCallback</code>)         \u2013          <p>The callback object to send initial data to.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_job_on_hold","title":"<code>set_job_on_hold(value, blocking = True, *args, **kwargs)</code>","text":"<p>Setter for finer control over putting jobs on hold. Set to <code>True</code> to ensure that no commands from the file being printed are continued to be sent to the printer. Set to <code>False</code> to resume. Note that this will only work for local files, NOT SD files.</p> <p>Make absolutely sure that if you set this flag, you will always also unset it again. If you don't, the job will be stuck forever.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>if printer.set_job_on_hold(True):        try:            park_printhead()            take_snapshot()            send_printhead_back()        finally:            printer.set_job_on_hold(False)</p> <p>Just like :func:<code>~octoprint.printer.PrinterInterface.job_on_hold</code> this should be used sparingly and only for very specific situations. If you abuse this, you WILL cause print quality issues!</p> <p>Parameters:</p> <ul> <li> value             (<code>bool</code>)         \u2013          <p>The value to set</p> </li> <li> blocking             (<code>bool</code>)         \u2013          <p>Whether to block while attempting to set the value (default) or not</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(bool) Whether the value could be set successfully (True) or a timeout was encountered (False)</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_temperature","title":"<code>set_temperature(heater, value, tags = None, *args, **kwargs)</code>","text":"<p>Sets the target temperature on the specified <code>heater</code> to the given <code>value</code> in celsius.</p> <p>Parameters:</p> <ul> <li> heater             (<code>str</code>)         \u2013          <p>The heater for which to set the target temperature. Either \"bed\" for setting the bed temperature, \"chamber\" for setting the temperature of the heated enclosure or something matching the regular expression \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...) for the hotends of the printer. However, addressing components that are disabled or unconfigured in the printer profile will result in a \"Suppressed command\" error popup message.</p> </li> <li> value             (<code>int, float</code>)         \u2013          <p>The temperature in celsius to set the target temperature to.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_temperature_offset","title":"<code>set_temperature_offset(offsets = None, tags = None, *args, **kwargs)</code>","text":"<p>Sets the temperature <code>offsets</code> to apply to target temperatures read from a GCODE file while printing.</p> <p>Parameters:</p> <ul> <li> offsets             (<code>dict</code>)         \u2013          <p>A dictionary specifying the offsets to apply. Keys must match the format for the <code>heater</code> parameter to :func:<code>set_temperature</code>, so \"bed\" for the offset for the bed target temperature and \"tool[0-9]+\" for the offsets to the hotend target temperatures.</p> </li> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.start_print","title":"<code>start_print(tags = None, *args, **kwargs)</code>","text":"<p>Starts printing the currently selected file. If no file is currently selected, does nothing.</p> <p>Parameters:</p> <ul> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.toggle_pause_print","title":"<code>toggle_pause_print(tags = None, *args, **kwargs)</code>","text":"<p>Pauses the current print job if it is currently running or resumes it if it is currently paused.</p> <p>Parameters:</p> <ul> <li> tags             (<code>set of str</code>)         \u2013          <p>An optional set of tags to attach to the command(s) throughout their lifecycle</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.unregister_callback","title":"<code>unregister_callback(callback, *args, **kwargs)</code>","text":"<p>Unregisters a :class:<code>PrinterCallback</code> from the instance.</p> <p>Parameters:</p> <ul> <li> callback             (<code>PrinterCallback</code>)         \u2013          <p>The callback object to unregister.</p> </li> </ul>"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.unselect_file","title":"<code>unselect_file(*args, **kwargs)</code>","text":"<p>Unselects and currently selected file.</p>"},{"location":"reference/octoprint/printer/estimation/","title":"octoprint.printer.estimation","text":""},{"location":"reference/octoprint/printer/estimation/#octoprint.printer.estimation.PrintTimeEstimator","title":"<code>PrintTimeEstimator(job_type)</code>","text":"<p>Estimator implementation.</p> <p>Subclass this and register via the octoprint.printer.estimation.factory hook to provide your own implementation.</p>"},{"location":"reference/octoprint/printer/estimation/#octoprint.printer.estimation.PrintTimeEstimator.estimate","title":"<code>estimate(progress, printTime, cleanedPrintTime, statisticalTotalPrintTime, statisticalTotalPrintTimeType)</code>","text":"<p>Tries to estimate the print time left for the print job</p> <p>This is somewhat horrible since accurate print time estimation is pretty much impossible to achieve, considering that we basically have only two data points (current progress in file and time needed for that so far - former prints or a file analysis might not have happened or simply be completely impossible e.g. if the file is stored on the printer's SD card) and hence can only do a linear estimation of a completely non-linear process. That's a recipe for inaccurate predictions right there. Yay.</p> <p>Anyhow, here's how this implementation works. This method gets the current progress in the printed file (percentage based on bytes read vs total bytes), the print time that elapsed, the same print time with the heat up times subtracted (if possible) and if available also some statistical total print time (former prints or a result from the GCODE analysis).</p> <ol> <li>First get an \"intelligent\" estimate based on the :class:<code>~octoprint.printer.estimation.TimeEstimationHelper</code>.      That thing tries to detect if the estimation based on our progress and time needed for that becomes      stable over time through a rolling window and only returns a result once that appears to be the      case.</li> <li>If we have any statistical data (former prints or a result from the GCODE analysis)      but no intelligent estimate yet, we'll use that for the next step. Otherwise, up to a certain percentage      in the print we do a percentage based weighing of the statistical data and the intelligent      estimate - the closer to the beginning of the print, the more precedence for the statistical      data, the closer to the cut off point, the more precedence for the intelligent estimate. This      is our preliminary total print time.</li> <li>If the total print time is set, we do a sanity check for it. Based on the total print time      estimate and the time we already spent printing, we calculate at what percentage we SHOULD be      and compare that to the percentage at which we actually ARE. If it's too far off, our total      can't be trusted and we fall back on the dumb estimate. Same if the time we spent printing is      already higher than our total estimate.</li> <li>If we do NOT have a total print time estimate yet but we've been printing for longer than      a configured amount of minutes or are further in the file than a configured percentage, we      also use the dumb estimate for now.</li> </ol> <p>Yes, all this still produces horribly inaccurate results. But we have to do this live during the print and hence can't produce to much computational overhead, we do not have any insight into the firmware implementation with regards to planner setup and acceleration settings, we might not even have access to the printed file's contents and such we need to find something that works \"mostly\" all of the time without costing too many resources. Feel free to propose a better solution within the above limitations (and I mean that, this solution here makes me unhappy).</p> <p>Parameters:</p> <ul> <li> progress             (<code>float or None</code>)         \u2013          <p>Current percentage in the printed file</p> </li> <li> printTime             (<code>float or None</code>)         \u2013          <p>Print time elapsed so far</p> </li> <li> cleanedPrintTime             (<code>float or None</code>)         \u2013          <p>Print time elapsed minus the time needed for getting up to temperature (if detectable).</p> </li> <li> statisticalTotalPrintTime             (<code>float or None</code>)         \u2013          <p>Total print time of past prints against same printer profile, or estimated total print time from GCODE analysis.</p> </li> <li> statisticalTotalPrintTimeType             (<code>str or None</code>)         \u2013          <p>Type of statistical print time, either \"average\" (total time of former prints) or \"analysis\"</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(2-tuple) estimated print time left or None if not proper estimate could be made at all, origin of estimation</p> </li> </ul>"},{"location":"reference/octoprint/printer/profile/","title":"octoprint.printer.profile","text":"<p>This module contains printer profile related code.</p> <p>A printer profile is a <code>dict</code> of the following structure:</p> <p>.. list-table::    :widths: 15 5 30    :header-rows: 1</p> <ul> <li> <ul> <li>Name</li> <li>Type</li> <li>Description</li> </ul> </li> <li> <ul> <li><code>id</code></li> <li><code>string</code></li> <li>Internal id of the printer profile</li> </ul> </li> <li> <ul> <li><code>name</code></li> <li><code>string</code></li> <li>Human readable name of the printer profile</li> </ul> </li> <li> <ul> <li><code>model</code></li> <li><code>string</code></li> <li>Printer model</li> </ul> </li> <li> <ul> <li><code>color</code></li> <li><code>string</code></li> <li>Color to associate with the printer profile</li> </ul> </li> <li> <ul> <li><code>volume</code></li> <li><code>dict</code></li> <li>Information about the print volume</li> </ul> </li> <li> <ul> <li><code>volume.width</code></li> <li><code>float</code></li> <li>Width of the print volume (X axis)</li> </ul> </li> <li> <ul> <li><code>volume.depth</code></li> <li><code>float</code></li> <li>Depth of the print volume (Y axis)</li> </ul> </li> <li> <ul> <li><code>volume.height</code></li> <li><code>float</code></li> <li>Height of the print volume (Z axis)</li> </ul> </li> <li> <ul> <li><code>volume.formFactor</code></li> <li><code>string</code></li> <li>Form factor of the print bed, either <code>rectangular</code> or <code>circular</code></li> </ul> </li> <li> <ul> <li><code>volume.origin</code></li> <li><code>string</code></li> <li>Location of gcode origin in the print volume, either <code>lowerleft</code> or <code>center</code></li> </ul> </li> <li> <ul> <li><code>volume.custom_box</code></li> <li><code>dict</code> or <code>False</code></li> <li>Custom boundary box overriding the default bounding box based on the provided width, depth, height and origin.    If <code>False</code>, the default boundary box will be used.</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.x_min</code></li> <li><code>float</code></li> <li>Minimum valid X coordinate</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.y_min</code></li> <li><code>float</code></li> <li>Minimum valid Y coordinate</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.z_min</code></li> <li><code>float</code></li> <li>Minimum valid Z coordinate</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.x_max</code></li> <li><code>float</code></li> <li>Maximum valid X coordinate</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.y_max</code></li> <li><code>float</code></li> <li>Maximum valid Y coordinate</li> </ul> </li> <li> <ul> <li><code>volume.custom_box.z_max</code></li> <li><code>float</code></li> <li>Maximum valid Z coordinate</li> </ul> </li> <li> <ul> <li><code>heatedBed</code></li> <li><code>bool</code></li> <li>Whether the printer has a heated bed (<code>True</code>) or not (<code>False</code>)</li> </ul> </li> <li> <ul> <li><code>heatedChamber</code></li> <li><code>bool</code></li> <li>Whether the printer has a heated chamber (<code>True</code>) or not (<code>False</code>)</li> </ul> </li> <li> <ul> <li><code>extruder</code></li> <li><code>dict</code></li> <li>Information about the printer's extruders</li> </ul> </li> <li> <ul> <li><code>extruder.count</code></li> <li><code>int</code></li> <li>How many extruders the printer has (default 1)</li> </ul> </li> <li> <ul> <li><code>extruder.offsets</code></li> <li><code>list</code> of <code>tuple</code></li> <li>Extruder offsets relative to first extruder, list of (x, y) tuples, first is always (0,0)</li> </ul> </li> <li> <ul> <li><code>extruder.nozzleDiameter</code></li> <li><code>float</code></li> <li>Diameter of the printer nozzle(s)</li> </ul> </li> <li> <ul> <li><code>extruder.sharedNozzle</code></li> <li><code>boolean</code></li> <li>Whether there's only one nozzle shared among all extruders (true) or one nozzle per extruder (false).</li> </ul> </li> <li> <ul> <li><code>extruder.defaultExtrusionLength</code></li> <li><code>int</code></li> <li>Default extrusion length used in Control tab on initial page load in mm.</li> </ul> </li> <li> <ul> <li><code>axes</code></li> <li><code>dict</code></li> <li>Information about the printer axes</li> </ul> </li> <li> <ul> <li><code>axes.x</code></li> <li><code>dict</code></li> <li>Information about the printer's X axis</li> </ul> </li> <li> <ul> <li><code>axes.x.speed</code></li> <li><code>float</code></li> <li>Speed of the X axis in mm/min</li> </ul> </li> <li> <ul> <li><code>axes.x.inverted</code></li> <li><code>bool</code></li> <li>Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True)</li> </ul> </li> <li> <ul> <li><code>axes.y</code></li> <li><code>dict</code></li> <li>Information about the printer's Y axis</li> </ul> </li> <li> <ul> <li><code>axes.y.speed</code></li> <li><code>float</code></li> <li>Speed of the Y axis in mm/min</li> </ul> </li> <li> <ul> <li><code>axes.y.inverted</code></li> <li><code>bool</code></li> <li>Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True)</li> </ul> </li> <li> <ul> <li><code>axes.z</code></li> <li><code>dict</code></li> <li>Information about the printer's Z axis</li> </ul> </li> <li> <ul> <li><code>axes.z.speed</code></li> <li><code>float</code></li> <li>Speed of the Z axis in mm/min</li> </ul> </li> <li> <ul> <li><code>axes.z.inverted</code></li> <li><code>bool</code></li> <li>Whether a positive value change moves the nozzle away from the print bed (False, default) or towards it (True)</li> </ul> </li> <li> <ul> <li><code>axes.e</code></li> <li><code>dict</code></li> <li>Information about the printer's E axis</li> </ul> </li> <li> <ul> <li><code>axes.e.speed</code></li> <li><code>float</code></li> <li>Speed of the E axis in mm/min</li> </ul> </li> <li> <ul> <li><code>axes.e.inverted</code></li> <li><code>bool</code></li> <li>Whether a positive value change extrudes (False, default) or retracts (True) filament</li> </ul> </li> </ul> <p>.. autoclass:: PrinterProfileManager    :members:</p> <p>.. autoclass:: BedFormFactor    :members:</p> <p>.. autoclass:: BedOrigin    :members:</p> <p>.. autoclass:: SaveError</p> <p>.. autoclass:: CouldNotOverwriteError</p> <p>.. autoclass:: InvalidProfileError</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedTypes","title":"<code>BedTypes = BedFormFactor</code>  <code>module-attribute</code>","text":"<p>Deprecated name of :class:<code>BedFormFactors</code></p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor","title":"<code>BedFormFactor</code>","text":"<p>Valid values for bed form factor</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor.CIRCULAR","title":"<code>CIRCULAR = 'circular'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Circular bed</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor.RECTANGULAR","title":"<code>RECTANGULAR = 'rectangular'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Rectangular bed</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin","title":"<code>BedOrigin</code>","text":"<p>Valid values for bed origin</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin.CENTER","title":"<code>CENTER = 'center'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Origin at the center of the bed when looking from top</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin.LOWERLEFT","title":"<code>LOWERLEFT = 'lowerleft'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Origin at lower left corner of the bed when looking from the top</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.CouldNotOverwriteError","title":"<code>CouldNotOverwriteError</code>","text":"<p>         Bases: <code>SaveError</code></p> <p>Overwriting of a profile not allowed</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.InvalidProfileError","title":"<code>InvalidProfileError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Profile invalid</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.PrinterProfileManager","title":"<code>PrinterProfileManager()</code>","text":"<p>Manager for printer profiles. Offers methods to select the globally used printer profile and to list, add, remove, load and save printer profiles.</p>"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.SaveError","title":"<code>SaveError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Saving a profile failed</p>"},{"location":"reference/octoprint/printer/standard/","title":"octoprint.printer.standard","text":"<p>This module holds the standard implementation of the :class:<code>PrinterInterface</code> and it helpers.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer","title":"<code>Printer(fileManager, analysisQueue, printerProfileManager)</code>","text":"<p>         Bases: <code>PrinterInterface</code>, <code>comm.MachineComPrintCallback</code></p> <p>Default implementation of the :class:<code>PrinterInterface</code>. Manages the communication layer object and registers itself with it as a callback to react to changes on the communication layer.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.cancel_print","title":"<code>cancel_print(user = None, *args, **kwargs)</code>","text":"<p>Cancel the current printjob.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.commands","title":"<code>commands(commands, tags = None, force = False, *args, **kwargs)</code>","text":"<p>Sends one or more gcode commands to the printer.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.connect","title":"<code>connect(port = None, baudrate = None, profile = None, *args, **kwargs)</code>","text":"<p>Connects to the printer. If port and/or baudrate is provided, uses these settings, otherwise autodetection will be attempted.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.disconnect","title":"<code>disconnect(*args, **kwargs)</code>","text":"<p>Closes the connection to the printer.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_log","title":"<code>on_comm_log(message)</code>","text":"<p>Callback method for the comm object, called upon log output.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_message","title":"<code>on_comm_message(message)</code>","text":"<p>Callback method for the comm object, called upon message exchanges via serial. Stores the message in the message buffer, truncates buffer to the last 300 lines.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_progress","title":"<code>on_comm_progress()</code>","text":"<p>Callback method for the comm object, called upon any change in progress of the printjob. Triggers storage of new values for printTime, printTimeLeft and the current progress.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_state_change","title":"<code>on_comm_state_change(state)</code>","text":"<p>Callback method for the comm object, called if the connection state changes.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_z_change","title":"<code>on_comm_z_change(newZ)</code>","text":"<p>Callback method for the comm object, called upon change of the z-layer.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.pause_print","title":"<code>pause_print(user = None, *args, **kwargs)</code>","text":"<p>Pause the current printjob.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.refresh_sd_files","title":"<code>refresh_sd_files(blocking = False, *args, **kwargs)</code>","text":"<p>Refreshes the list of file stored on the SD card attached to printer (if available and printer communication available). Optional blocking parameter allows making the method block (max 10s) until the file list has been received (and can be accessed via self._comm.getSdFiles()). Defaults to an asynchronous operation.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.resume_print","title":"<code>resume_print(user = None, *args, **kwargs)</code>","text":"<p>Resume the current printjob.</p>"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.start_print","title":"<code>start_print(pos = None, user = None, *args, **kwargs)</code>","text":"<p>Starts the currently loaded print job. Only starts if the printer is connected and operational, not currently printing and a printjob is loaded</p>"},{"location":"reference/octoprint/schema/","title":"octoprint.schema","text":""},{"location":"reference/octoprint/schema/config/","title":"octoprint.schema.config","text":""},{"location":"reference/octoprint/schema/config/access_control/","title":"octoprint.schema.config.access_control","text":""},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig","title":"<code>AccessControlConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.addRemoteUsers","title":"<code>addRemoteUsers: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.autologinAs","title":"<code>autologinAs: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of the user to automatically log on clients originating from <code>localNetworks</code> as. Must be the name of one of your configured users.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.autologinLocal","title":"<code>autologinLocal: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set to true, will automatically log on clients originating from any of the networks defined in <code>localNetworks</code> as the user defined in <code>autologinAs</code>.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.checkBasicAuthenticationPassword","title":"<code>checkBasicAuthenticationPassword: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.groupManager","title":"<code>groupManager: str = 'octoprint.access.groups.FilebasedGroupManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: <code>groups.yaml</code> in the default configuration folder).</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.groupfile","title":"<code>groupfile: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The YAML group file to use. If left out defaults to <code>groups.yaml</code> in the default configuration folder.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.localNetworks","title":"<code>localNetworks: List[str] = ['127.0.0.0/8', '::1/128']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of networks or IPs for which an automatic logon as the user defined in <code>autologinAs</code> will take place. If available OctoPrint will evaluate the <code>X-Forwarded-For</code> HTTP header for determining the client's IP address. Defaults to anything originating from localhost.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.permissionManager","title":"<code>permissionManager: str = 'octoprint.access.permissions.PermissionManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The permission manager implementation to use.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.remoteUserHeader","title":"<code>remoteUserHeader: str = 'REMOTE_USER'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Header used by the reverse proxy to convey the authenticated user.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.salt","title":"<code>salt: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run.</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.trustBasicAuthentication","title":"<code>trustBasicAuthentication: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication!</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.trustRemoteUser","title":"<code>trustRemoteUser: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy!</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.userManager","title":"<code>userManager: str = 'octoprint.access.users.FilebasedUserManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: <code>users.yaml</code> in the default configuration folder).</p>"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.userfile","title":"<code>userfile: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The YAML user file to use. If left out defaults to <code>users.yaml</code> in the default configuration folder.</p>"},{"location":"reference/octoprint/schema/config/api/","title":"octoprint.schema.config.api","text":""},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig","title":"<code>ApiConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig.allowCrossOrigin","title":"<code>allowCrossOrigin: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to allow cross origin access to the API or not.</p>"},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig.key","title":"<code>key: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run.</p>"},{"location":"reference/octoprint/schema/config/appearance/","title":"octoprint.schema.config.appearance","text":""},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig","title":"<code>AppearanceConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.color","title":"<code>color: ColorEnum = ColorEnum.default</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this to color the navigation bar.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.colorTransparent","title":"<code>colorTransparent: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.components","title":"<code>components: ComponentConfig = ComponentConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configures the order and availability of the UI components.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.defaultLanguage","title":"<code>defaultLanguage: str = '_default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.name","title":"<code>name: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: &lt;&gt;\")"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.showInternalFilename","title":"<code>showInternalFilename: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Show the internal filename in the files sidebar, if necessary.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig","title":"<code>ComponentConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig.disabled","title":"<code>disabled: ComponentDisabledConfig = ComponentDisabledConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig.order","title":"<code>order: ComponentOrderConfig = ComponentOrderConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Defines the order of the components within their respective containers.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig","title":"<code>ComponentDisabledConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.about","title":"<code>about: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled about dialog items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.generic","title":"<code>generic: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled generic items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.navbar","title":"<code>navbar: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled navbar items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.settings","title":"<code>settings: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled settings.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.sidebar","title":"<code>sidebar: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled sidebar items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.tab","title":"<code>tab: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled tabs.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.usersettings","title":"<code>usersettings: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled user settings.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.wizard","title":"<code>wizard: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Disabled wizards.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig","title":"<code>ComponentOrderConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.about","title":"<code>about: List[str] = ['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of about dialog items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.generic","title":"<code>generic: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of generic items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.navbar","title":"<code>navbar: List[str] = ['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of navbar items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.settings","title":"<code>settings: List[str] = ['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of settings.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.sidebar","title":"<code>sidebar: List[str] = ['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of sidebar items.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.tab","title":"<code>tab: List[str] = ['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of tabs.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.usersettings","title":"<code>usersettings: List[str] = ['access', 'interface']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of user settings.</p>"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.wizard","title":"<code>wizard: List[str] = ['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order of wizards.</p>"},{"location":"reference/octoprint/schema/config/controls/","title":"octoprint.schema.config.controls","text":""},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig","title":"<code>ContainerConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.children","title":"<code>children: List[Union[ContainerConfig, ControlConfig]] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of children controls or containers contained within this container.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.layout","title":"<code>layout: LayoutEnum = LayoutEnum.vertical</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The layout to use for laying out the contained children, either from top to bottom (<code>vertical</code>) or from left to right (<code>horizontal</code>).</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.name","title":"<code>name: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A name to display above the container, basically a section header.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig","title":"<code>ControlConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.additionalClasses","title":"<code>additionalClasses: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional classes to apply to the button of a <code>command</code>, <code>commands</code>, <code>script</code> or <code>javascript</code> control, other than the default <code>btn</code>. Can be used to visually style the button, e.g. set to <code>btn-danger</code> to turn the button red.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.command","title":"<code>command: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>commands</code> and <code>script</code>. The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.commands","title":"<code>commands: Optional[List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>command</code> and <code>script</code>. The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.confirm","title":"<code>confirm: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.enabled","title":"<code>enabled: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A JavaScript snippet returning either <code>true</code> or <code>false</code> determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is <code>eval</code>'d and processed in a context where the control it is part of is provided as local variable <code>data</code> and the <code>ControlViewModel</code> is available as <code>self</code>.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.input","title":"<code>input: Optional[List[ControlInputConfig]] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of definitions of input parameters for a <code>command</code> or <code>commands</code>, to be rendered as additional input fields. <code>command</code>/<code>commands</code> may contain placeholders to be replaced by the values obtained from the user for the defined input fields.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.javascript","title":"<code>javascript: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A JavaScript snippet to be executed when the button rendered for <code>command</code> or <code>commands</code> is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is <code>eval</code>'d and processed in a context where the control it is part of is provided as local variable <code>data</code> and the <code>ControlViewModel</code> is available as <code>self</code>.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.regex","title":"<code>regex: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A regular expression  to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with <code>template</code> this allows rendition of received data from the printer within the UI."},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.script","title":"<code>script: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>command</code> and <code>commands</code>. The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met. Values of input parameters will be available in the template context under the <code>parameter</code> variable (e.g. an input parameter <code>speed</code> will be available in the script template as <code>parameter.speed</code>). On top of that all other variables defined in the GCODE template context will be available.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.template","title":"<code>template: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A template to use for rendering the match of <code>regex</code>. May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. <code>Temperature: {temperature}</code> for a regex <code>T:\\s*(?P&lt;temperature&gt;\\d+(\\.\\d*)</code>) or positional groups within the regex (e.g. <code>Position: X={0}, Y={1}, Z={2}, E={3}</code> for a regex <code>X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+)</code>).</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig","title":"<code>ControlInputConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.default","title":"<code>default: Union[str, int, float, bool]</code>  <code>instance-attribute</code>","text":"<p>Default value for the input field.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Name to display for the input field.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.parameter","title":"<code>parameter: str</code>  <code>instance-attribute</code>","text":"<p>Internal parameter name for the input field, used as a placeholder in <code>command</code>/<code>commands</code>.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.slider","title":"<code>slider: Optional[ControlSliderInputConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If this attribute is included, instead of an input field a slider control will be rendered.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig","title":"<code>ControlSliderInputConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.max","title":"<code>max: int = 255</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum value of the slider.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.min","title":"<code>min: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Minimum value of the slider.</p>"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.step","title":"<code>step: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Step size per slider tick.</p>"},{"location":"reference/octoprint/schema/config/devel/","title":"octoprint.schema.config.devel","text":""},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig","title":"<code>DevelCacheConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable caching. Defaults to true. Setting it to false will cause the UI to always be fully rerendered on request to <code>/</code> on the server.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig.preemptive","title":"<code>preemptive: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable the preemptive cache.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig","title":"<code>DevelConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.cache","title":"<code>cache: DevelCacheConfig = DevelCacheConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings for OctoPrint's internal caching.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.enableCsrfProtection","title":"<code>enableCsrfProtection: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable or disable the CSRF protection. Careful, disabling this reduces security.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.enableRateLimiter","title":"<code>enableRateLimiter: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable or disable the rate limiter. Careful, disabling this reduces security.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.showLoadingAnimation","title":"<code>showLoadingAnimation: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable or disable the loading animation.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.stylesheet","title":"<code>stylesheet: StylesheetEnum = StylesheetEnum.css</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.webassets","title":"<code>webassets: DevelWebassetsConfig = DevelWebassetsConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings for OctoPrint's web asset merging and minifying.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig","title":"<code>DevelWebassetsConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.bundle","title":"<code>bundle: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the <code>minify</code> setting.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.clean_on_startup","title":"<code>clean_on_startup: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to delete generated web assets on server startup (forcing a regeneration).</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.minify","title":"<code>minify: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set to true, OctoPrint will the core and library javascript assets. Note: if <code>bundle</code> is set to false, no minification will take place either.</p>"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.minify_plugins","title":"<code>minify_plugins: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if <code>bundle</code> or <code>minify</code> are set to false, no minification of the plugin assets will take place either.</p>"},{"location":"reference/octoprint/schema/config/estimation/","title":"octoprint.schema.config.estimation","text":""},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.EstimationConfig","title":"<code>EstimationConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.EstimationConfig.printTime","title":"<code>printTime: PrintTimeEstimationConfig = PrintTimeEstimationConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Parameters for the print time estimation during an ongoing print job.</p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig","title":"<code>PrintTimeEstimationConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.forceDumbAfterMin","title":"<code>forceDumbAfterMin: float = 30.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate.</p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.forceDumbFromPercent","title":"<code>forceDumbFromPercent: float = 0.3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0.</p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.stableThreshold","title":"<code>stableThreshold: int = 60</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference.</p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.statsWeighingUntil","title":"<code>statsWeighingUntil: float = 0.5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides.</p>"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.validityRange","title":"<code>validityRange: float = 0.15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used.</p>"},{"location":"reference/octoprint/schema/config/events/","title":"octoprint.schema.config.events","text":""},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription","title":"<code>EventSubscription</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.command","title":"<code>command: str</code>  <code>instance-attribute</code>","text":"<p>The command to execute when the event is triggered, either a GCODE or a system command.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.debug","title":"<code>debug: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If set to <code>true</code>, OctoPrint will log the command after performing all placeholder replacements.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the event subscription should be enabled.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.event","title":"<code>event: str</code>  <code>instance-attribute</code>","text":"<p>The event to subscribe to.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.name","title":"<code>name: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The event name to show on the UI</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.type","title":"<code>type: SubscriptionTypeEnum</code>  <code>instance-attribute</code>","text":"<p>The type of the command.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig","title":"<code>EventsConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether event subscriptions should be enabled or not.</p>"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig.subscriptions","title":"<code>subscriptions: List[EventSubscription] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of event subscriptions.</p>"},{"location":"reference/octoprint/schema/config/feature/","title":"octoprint.schema.config.feature","text":""},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig","title":"<code>FeatureConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.autoUppercaseBlacklist","title":"<code>autoUppercaseBlacklist: List[str] = ['M117', 'M118']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands that should never be auto-uppercased when sent to the printer through the Terminal tab.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.enforceReallyUniversalFilenames","title":"<code>enforceReallyUniversalFilenames: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.g90InfluencesExtruder","title":"<code>g90InfluencesExtruder: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether <code>G90</code>/<code>G91</code> also influence absolute/relative mode of extruders.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.keyboardControl","title":"<code>keyboardControl: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable the keyboard control feature in the control tab.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.modelSizeDetection","title":"<code>modelSizeDetection: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable model size detection and warning (true) or not (false).</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.pollWatched","title":"<code>pollWatched: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false).</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.printCancelConfirmation","title":"<code>printCancelConfirmation: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to show a confirmation on print cancelling (true) or not (false)</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.printStartConfirmation","title":"<code>printStartConfirmation: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to show a confirmation on print start (true) or not (false)</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.rememberFileFolder","title":"<code>rememberFileFolder: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to remember the selected folder on the file manager.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.sdSupport","title":"<code>sdSupport: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether support for SD printing and file management should be enabled.</p>"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.temperatureGraph","title":"<code>temperatureGraph: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable the temperature graph in the UI or not.</p>"},{"location":"reference/octoprint/schema/config/folder/","title":"octoprint.schema.config.folder","text":""},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig","title":"<code>FolderConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.data","title":"<code>data: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store additional data. Defaults to the <code>data</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.generated","title":"<code>generated: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store generated files. Defaults to the <code>generated</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.logs","title":"<code>logs: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store logs. Defaults to the <code>logs</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.plugins","title":"<code>plugins: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to locate and install single file plugins. Defaults to the <code>plugins</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.printerProfiles","title":"<code>printerProfiles: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store printer profiles. Defaults to the <code>printerProfiles</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.scripts","title":"<code>scripts: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store (GCODE) scripts. Defaults to the <code>scripts</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.slicingProfiles","title":"<code>slicingProfiles: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store slicing profiles. Defaults to the <code>slicingProfiles</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.timelapse","title":"<code>timelapse: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store finished timelase recordings. Defaults to the <code>timelapse</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.timelapse_tmp","title":"<code>timelapse_tmp: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store temporary timelapse snapshots. Defaults to the <code>timelapse/tmp</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.translations","title":"<code>translations: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store additional translations. Defaults to the <code>translations</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.uploads","title":"<code>uploads: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store gcode uploads. Defaults to the <code>uploads</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.virtualSd","title":"<code>virtualSd: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path where to store the virtual printer's SD card files. Defaults to the <code>virtualSd</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.watched","title":"<code>watched: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Absolute path to the watched folder. Defaults to the <code>watched</code> folder in OctoPrint's base folder.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/","title":"octoprint.schema.config.gcode_analysis","text":""},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig","title":"<code>GcodeAnalysisConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.bedZ","title":"<code>bedZ: float = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Z position considered the location of the bed.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.maxExtruders","title":"<code>maxExtruders: int = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of extruders to support/to sanity check for.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.runAt","title":"<code>runAt: RunAtEnum = RunAtEnum.idle</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to run the analysis only when idle (not printing), regardless of printing state or never.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_highprio","title":"<code>throttle_highprio: float = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_lines","title":"<code>throttle_lines: int = 100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>GCODE line batch size.</p>"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_normalprio","title":"<code>throttle_normalprio: float = 0.01</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Pause between each processed GCODE line batch in normal priority mode, seconds.</p>"},{"location":"reference/octoprint/schema/config/plugins/","title":"octoprint.schema.config.plugins","text":""},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig","title":"<code>PluginsConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.disabled","title":"<code>disabled: List[str] = Field([], alias='_disabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Identifiers of installed but disabled plugins.</p>"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.forced_compatible","title":"<code>forced_compatible: List[str] = Field([], alias='_forcedCompatible')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production.</p>"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.sorting_order","title":"<code>sorting_order: Dict[str, Dict[str, int]] = Field({}, alias='_sortingOrder')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name.</p>"},{"location":"reference/octoprint/schema/config/printer_parameters/","title":"octoprint.schema.config.printer_parameters","text":""},{"location":"reference/octoprint/schema/config/printer_profiles/","title":"octoprint.schema.config.printer_profiles","text":""},{"location":"reference/octoprint/schema/config/printer_profiles/#octoprint.schema.config.printer_profiles.PrinterProfilesConfig","title":"<code>PrinterProfilesConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/printer_profiles/#octoprint.schema.config.printer_profiles.PrinterProfilesConfig.default","title":"<code>default: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the printer profile to default to.</p>"},{"location":"reference/octoprint/schema/config/scripts/","title":"octoprint.schema.config.scripts","text":""},{"location":"reference/octoprint/schema/config/serial/","title":"octoprint.schema.config.serial","text":""},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities","title":"<code>SerialCapabilities</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.autoreport_pos","title":"<code>autoreport_pos: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable position autoreport in the firmware if its support is detected</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.autoreport_sdstatus","title":"<code>autoreport_sdstatus: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable SD printing autoreport in the firmware if its support is detected</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.autoreport_temp","title":"<code>autoreport_temp: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable temperature autoreport in the firmware if its support is detected</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.busy_protocol","title":"<code>busy_protocol: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to shorten the communication timeout if the firmware seems to support the busy protocol</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.emergency_parser","title":"<code>emergency_parser: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to send emergency commands out of band if the firmware seems to support the emergency parser</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.extended_m20","title":"<code>extended_m20: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to request extended M20 (file list) output from the firmware if its support is detected</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.lfn_write","title":"<code>lfn_write: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable long filename support for SD card writes if the firmware reports support for it</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig","title":"<code>SerialConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.additionalBaudrates","title":"<code>additionalBaudrates: List[int] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.additionalPorts","title":"<code>additionalPorts: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.alwaysSendChecksum","title":"<code>alwaysSendChecksum: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.autoconnect","title":"<code>autoconnect: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to try to automatically connect to the printer on startup or not</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.autorefresh","title":"<code>autorefresh: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to automatically refresh the port list while no connection is established</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.autorefreshInterval","title":"<code>autorefreshInterval: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval in seconds at which to refresh the port list while no connection is established</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.baudrate","title":"<code>baudrate: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.blockWhileDwelling","title":"<code>blockWhileDwelling: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.blockedCommands","title":"<code>blockedCommands: List[str] = ['M0', 'M1']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.checksumRequiringCommands","title":"<code>checksumRequiringCommands: List[str] = ['M110']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands which need to always be send with a checksum.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.disconnectOnErrors","title":"<code>disconnectOnErrors: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to disconnect from the printer on errors or not.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.enableShutdownActionCommand","title":"<code>enableShutdownActionCommand: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.encoding","title":"<code>encoding: str = 'ascii'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Encoding to use when talking to a machine. <code>ascii</code> limits access to characters 0-127, <code>latin_1</code> enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.exclusive","title":"<code>exclusive: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to request the serial port exclusively or not</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.externalHeatupDetection","title":"<code>externalHeatupDetection: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.firmwareDetection","title":"<code>firmwareDetection: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.helloCommand","title":"<code>helloCommand: str = 'M110 N0'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Command to send in order to initiate a handshake with the printer.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.identicalResendsCountdown","title":"<code>identicalResendsCountdown: int = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If <code>ignoreIdenticalResends</code> is true, how many consecutive identical resends to ignore.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoreErrorsFromFirmware","title":"<code>ignoreErrorsFromFirmware: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to completely ignore errors from the firmware or not.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoreIdenticalResends","title":"<code>ignoreIdenticalResends: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to ignore identical resends from the printer (true, repetier) or not (false).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoredCommands","title":"<code>ignoredCommands: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.log","title":"<code>log: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to log whole communication to serial.log (warning: might decrease performance)</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.logResends","title":"<code>logResends: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.longRunningCommands","title":"<code>longRunningCommands: List[str] = ['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands which are known to take a long time to be acknowledged by the firmware, e.g. homing, dwelling, auto leveling etc.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.lowLatency","title":"<code>lowLatency: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to request low latency mode on the serial port or not</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.maxWritePasses","title":"<code>maxWritePasses: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.pausingCommands","title":"<code>pausingCommands: List[str] = ['M0', 'M1', 'M25']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands which should cause OctoPrint to pause any ongoing prints.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.port","title":"<code>port: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The default port to use to connect to the printer. If unset or set to <code>AUTO</code>, the port will be auto-detected.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.repetierTargetTemp","title":"<code>repetierTargetTemp: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the printer sends repetier style target temperatures in the format <code>TargetExtr0:&lt;temperature&gt;</code> instead of attaching that information to the regular <code>M105</code> responses.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.resendRatioThreshold","title":"<code>resendRatioThreshold: int = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Percentage of resend requests among all sent lines that should be considered critical.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sdAlwaysAvailable","title":"<code>sdAlwaysAvailable: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sdRelativePath","title":"<code>sdRelativePath: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether firmware expects relative paths for selecting SD files.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sendChecksumWithUnknownCommands","title":"<code>sendChecksumWithUnknownCommands: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression <code>^\\s*([GM]\\d+|T)</code>).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.supportFAsCommand","title":"<code>supportFAsCommand: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to support <code>F</code> on its own as a valid GCODE command (true) or not (false).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.supportResendsWithoutOk","title":"<code>supportResendsWithoutOk: AlwaysDetectNeverEnum = AlwaysDetectNeverEnum.detect</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to support resends without follow-up ok or not.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.timeout","title":"<code>timeout: SerialTimeoutConfig = SerialTimeoutConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.triggerOkForM29","title":"<code>triggerOkForM29: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to automatically trigger an ok for <code>M29</code> (a lot of versions of this command are buggy and the response skips on the ok).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.unknownCommandsNeedAck","title":"<code>unknownCommandsNeedAck: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether OctoPrint should also use up acknowledgments (<code>ok</code>) for commands that are not detected as valid GCODE (as in, they do not match the regular expression <code>^\\s*([GM]\\d+|T)</code>).</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.waitForStartOnConnect","title":"<code>waitForStartOnConnect: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether OctoPrint should wait for the <code>start</code> response from the printer before trying to send commands during connect.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.waitToLoadSdFileList","title":"<code>waitToLoadSdFileList: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed.</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts","title":"<code>SerialMaxTimeouts</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.idle","title":"<code>idle: int = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Max. timeouts when the printer is idle</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.long","title":"<code>long: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Max. timeouts when a long running command is active</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.printing","title":"<code>printing: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Max. timeouts when the printer is printing</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig","title":"<code>SerialTimeoutConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.communication","title":"<code>communication: float = 30.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout during serial communication, in seconds</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.communicationBusy","title":"<code>communicationBusy: float = 3.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout during serial communication when busy protocol support is detected, in seconds</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.connection","title":"<code>connection: float = 10.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for waiting to establish a connection with the selected port, in seconds</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.sdStatus","title":"<code>sdStatus: float = 1.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout after which to query the SD status while SD printing</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.temperature","title":"<code>temperature: float = 5.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout after which to query temperature when no target is set</p>"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.temperatureTargetSet","title":"<code>temperatureTargetSet: float = 2.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout after which to query temperature when a target is set</p>"},{"location":"reference/octoprint/schema/config/server/","title":"octoprint.schema.config.server","text":""},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig","title":"<code>CommandsConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.localPipCommand","title":"<code>localPipCommand: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.serverRestartCommand","title":"<code>serverRestartCommand: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Command to restart OctoPrint.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.systemRestartCommand","title":"<code>systemRestartCommand: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Command to restart the system OctoPrint is running on.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.systemShutdownCommand","title":"<code>systemShutdownCommand: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Command to shut down the system OctoPrint is running on.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig","title":"<code>CookiesConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig.samesite","title":"<code>samesite: SameSiteEnum = SameSiteEnum.lax</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>SameSite</code> setting to use on the cookies. Possible values are <code>None</code>, <code>Lax</code> and <code>Strict</code>. Defaults to <code>Lax</code>. Be advised that if forced unset, this has security implications as many browsers now default to <code>Lax</code> unless you configure cookies to be set with <code>Secure</code> flag set, explicitly set <code>SameSite</code> setting here and also serve OctoPrint over https. The <code>Lax</code> setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\", \"Feature: Reject insecure SameSite=None cookies\" and issue #3482.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig.secure","title":"<code>secure: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to set the <code>Secure</code> flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig","title":"<code>DiskspaceConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig.critical","title":"<code>critical: int = CONST_200MB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig.warning","title":"<code>warning: int = CONST_500MB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig","title":"<code>IpCheckConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable the check.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig.trustedSubnets","title":"<code>trustedSubnets: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional non-local subnets to consider trusted, in CIDR notation, e.g. <code>192.168.1.0/24</code>.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig","title":"<code>OnlineCheckConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.enabled","title":"<code>enabled: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.host","title":"<code>host: str = '1.1.1.1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>DNS host against which to check, defaults to Cloudflare's DNS.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.interval","title":"<code>interval: int = CONST_15MIN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval in which to check for online connectivity (in seconds), defaults to 15 minutes.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.name","title":"<code>name: str = 'octoprint.org'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Host name for which to check name resolution, defaults to OctoPrint's main domain.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.port","title":"<code>port: int = 53</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>DNS port against which to check, defaults to the standard DNS port.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig","title":"<code>PluginBlacklistConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.enabled","title":"<code>enabled: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.timeout","title":"<code>timeout: float = 3.05</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for fetching the blacklist, in seconds (default: 3.05 seconds).</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.ttl","title":"<code>ttl: int = CONST_15MIN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time to live of the cached blacklist, in seconds (default: 15 minutes).</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.url","title":"<code>url: str = 'https://plugins.octoprint.org/blacklist.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL from which to fetch the blacklist.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig","title":"<code>PreemptiveCacheConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig.exceptions","title":"<code>exceptions: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Which server paths to exclude from the preemptive cache, e.g. <code>/some/path</code>.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig.until","title":"<code>until: int = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>How many days to leave unused entries in the preemptive cache config.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig","title":"<code>ReverseProxyConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.hostFallback","title":"<code>hostFallback: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.hostHeader","title":"<code>hostHeader: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request header from which to determine the host under which OctoPrint is served by the reverse proxy.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.prefixFallback","title":"<code>prefixFallback: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than <code>/</code> and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.prefixHeader","title":"<code>prefixHeader: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.schemeFallback","title":"<code>schemeFallback: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.schemeHeader","title":"<code>schemeHeader: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.trustedDownstream","title":"<code>trustedDownstream: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig","title":"<code>ServerConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.allowFraming","title":"<code>allowFraming: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.allowedLoginRedirectPaths","title":"<code>allowedLoginRedirectPaths: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of paths that are allowed to be used as redirect targets for the login page, in addition to the default ones (<code>/</code>, <code>/recovery/</code> and <code>/plugin/appkeys/auth/</code>)</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.commands","title":"<code>commands: CommandsConfig = CommandsConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Commands to restart/shutdown octoprint or the system it's running on.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.cookies","title":"<code>cookies: CookiesConfig = CookiesConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...).</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.diskspace","title":"<code>diskspace: DiskspaceConfig = DiskspaceConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings of when to display what disk space warning.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.firstRun","title":"<code>firstRun: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.host","title":"<code>host: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.ignoreIncompleteStartup","title":"<code>ignoreIncompleteStartup: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Set this to true to make OctoPrint ignore incomplete startups. Helpful for development.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.ipCheck","title":"<code>ipCheck: IpCheckConfig = IpCheckConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration of the client IP check to warn about connections from external networks.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.maxSize","title":"<code>maxSize: int = CONST_100KB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum size of requests other than file uploads in bytes, defaults to 100KB.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.onlineCheck","title":"<code>onlineCheck: OnlineCheckConfig = OnlineCheckConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration of the regular online connectivity check.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.pluginBlacklist","title":"<code>pluginBlacklist: PluginBlacklistConfig = PluginBlacklistConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration of the plugin blacklist.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.port","title":"<code>port: int = 5000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to define the port to which to bind the server.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.preemptiveCache","title":"<code>preemptiveCache: PreemptiveCacheConfig = PreemptiveCacheConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration of the preemptive cache.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.reverseProxy","title":"<code>reverseProxy: ReverseProxyConfig = ReverseProxyConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers. These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.secretKey","title":"<code>secretKey: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Secret key for encrypting cookies and such, randomly generated on first run.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.startOnceInSafeMode","title":"<code>startOnceInSafeMode: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.uploads","title":"<code>uploads: UploadsConfig = UploadsConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig","title":"<code>UploadsConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.maxSize","title":"<code>maxSize: int = CONST_1GB</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum size of uploaded files in bytes, defaults to 1GB.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.nameSuffix","title":"<code>nameSuffix: str = 'name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Suffix used for storing the filename in the file upload headers when streaming uploads.</p>"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.pathSuffix","title":"<code>pathSuffix: str = 'path'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads.</p>"},{"location":"reference/octoprint/schema/config/slicing/","title":"octoprint.schema.config.slicing","text":""},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig","title":"<code>SlicingConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.defaultProfiles","title":"<code>defaultProfiles: Dict[str, str] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default slicing profiles per slicer, maps slicer identifier to profile identifier.</p>"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.defaultSlicer","title":"<code>defaultSlicer: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default slicer to use.</p>"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.enabled","title":"<code>enabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable slicing support or not.</p>"},{"location":"reference/octoprint/schema/config/system/","title":"octoprint.schema.config.system","text":""},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig","title":"<code>ActionConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.action","title":"<code>action: str</code>  <code>instance-attribute</code>","text":"<p>The identifier used internally to identify the action. Set to <code>divider</code> to generate a divider in the menu.</p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.async_","title":"<code>async_: bool = Field(False, alias='async')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to run the command asynchronously.</p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.command","title":"<code>command: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The command to execute when the action is selected. Must be set if the action is not a divider.</p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.confirm","title":"<code>confirm: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional confirmation message to show before executing the command.</p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.name","title":"<code>name: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of the action that will be shown on the menu. Must be set if the action is not a divider.</p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.SystemConfig","title":"<code>SystemConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.SystemConfig.actions","title":"<code>actions: List[ActionConfig] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of system actions to show in the UI.</p>"},{"location":"reference/octoprint/schema/config/temperature/","title":"octoprint.schema.config.temperature","text":""},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig","title":"<code>TemperatureConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.cutoff","title":"<code>cutoff: int = 30</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Cut off time for the temperature data, in minutes.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.profiles","title":"<code>profiles: List[TemperatureProfile] = [TemperatureProfile(name='ABS', extruder=210, bed=100), TemperatureProfile(name='PLA', extruder=180, bed=60)]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Temperature profiles to offer in the UI for quick pre-heating.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.sendAutomatically","title":"<code>sendAutomatically: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to send new temperature settings made in the UI automatically.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.sendAutomaticallyAfter","title":"<code>sendAutomaticallyAfter: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>After what time to send the new temperature settings automatically, in seconds.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile","title":"<code>TemperatureProfile</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.bed","title":"<code>bed: int</code>  <code>instance-attribute</code>","text":"<p>Bed temperature to set with the profile.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.extruder","title":"<code>extruder: int</code>  <code>instance-attribute</code>","text":"<p>Hotend temperature to set with the profile.</p>"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Name of the profile.</p>"},{"location":"reference/octoprint/schema/config/terminalfilters/","title":"octoprint.schema.config.terminalfilters","text":""},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry","title":"<code>TerminalFilterEntry</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>The name of the filter.</p>"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry.regex","title":"<code>regex: str</code>  <code>instance-attribute</code>","text":"<p>The regular expression to match. Use JavaScript regular expressions.</p>"},{"location":"reference/octoprint/schema/config/webcam/","title":"octoprint.schema.config.webcam","text":""},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig","title":"<code>TimelapseConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.fps","title":"<code>fps: int = 25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The framerate at which to render the movie.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.options","title":"<code>options: TimelapseOptions = TimelapseOptions()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional options depending on the timelapse type.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.postRoll","title":"<code>postRoll: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. <code>zchange</code> timelapses will take one final picture and add it <code>fps * postRoll</code> times. <code>timed</code> timelapses continue to record just like at the beginning, so the recording will continue another <code>fps * postRoll * interval</code> seconds. This behaviour can be overridden by setting the <code>capturePostRoll</code> option to <code>false</code>, in which case the post roll will be created identically to <code>zchange</code> mode.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.type","title":"<code>type: TimelapseTypeEnum = TimelapseTypeEnum.off</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timelapse type.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions","title":"<code>TimelapseOptions</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.capturePostRoll","title":"<code>capturePostRoll: Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>timed</code> timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false).</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.interval","title":"<code>interval: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>timed</code> timelapses only: The interval which to leave between images in seconds.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.retractionZHop","title":"<code>retractionZHop: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>zchange</code> timelapses only: z-hop height during retractions to ignore for capturing snapshots.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig","title":"<code>WebcamConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.bitrate","title":"<code>bitrate: str = '10000k'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.cleanTmpAfterDays","title":"<code>cleanTmpAfterDays: int = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>After how many days unrendered timelapses will be deleted.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.defaultWebcam","title":"<code>defaultWebcam: str = 'classic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of the default webcam</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpeg","title":"<code>ffmpeg: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpegThreads","title":"<code>ffmpegThreads: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of how many threads to instruct ffmpeg to use for encoding.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpegVideoCodec","title":"<code>ffmpegVideoCodec: str = 'libx264'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Videocodec to be used for encoding.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.snapshotWebcam","title":"<code>snapshotWebcam: str = 'classic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of the default webcam to use for snapshots</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.timelapse","title":"<code>timelapse: TimelapseConfig = TimelapseConfig()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The default timelapse settings.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.timelapseEnabled","title":"<code>timelapseEnabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.watermark","title":"<code>watermark: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings.</p>"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.webcamEnabled","title":"<code>webcamEnabled: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set.</p>"},{"location":"reference/octoprint/schema/webcam/","title":"octoprint.schema.webcam","text":""},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam","title":"<code>Webcam</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.canSnapshot","title":"<code>canSnapshot: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether this webcam can take a snapshot.</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.compat","title":"<code>compat: Optional[WebcamCompatibility] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A compatibility configuration to allow older clients to make use of this webcam</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.displayName","title":"<code>displayName: str</code>  <code>instance-attribute</code>","text":"<p>Displayable name for this webcam</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.extras","title":"<code>extras: dict = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Unstructured data describing this webcam</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.flipH","title":"<code>flipH: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to flip the webcam horizontally.</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.flipV","title":"<code>flipV: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to flip the webcam vertically.</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Identifier of this webcam</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.rotate90","title":"<code>rotate90: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to rotate the webcam 90\u00b0 counter clockwise.</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.Webcam.snapshotDisplay","title":"<code>snapshotDisplay: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Human readable information about how a snapshot is captured or a HTTP URL from which the snapshot is loaded (optional, only for user reference)</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility","title":"<code>WebcamCompatibility</code>","text":"<p>         Bases: <code>BaseModel</code></p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.cacheBuster","title":"<code>cacheBuster: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the the URL should be randomized to bust caches</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.snapshot","title":"<code>snapshot: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL to get the snapshot from</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.snapshotSslValidation","title":"<code>snapshotSslValidation: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to validate SSL certificates when retrieving a snapshot</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.snapshotTimeout","title":"<code>snapshotTimeout: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timeout when retrieving snapshots</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.stream","title":"<code>stream: str</code>  <code>instance-attribute</code>","text":"<p>The URL to get an MJPEG stream from</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.streamRatio","title":"<code>streamRatio: RatioEnum = RatioEnum.sixteen_nine</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The stream's native aspect ratio</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.streamTimeout","title":"<code>streamTimeout: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timeout of the stream in seconds</p>"},{"location":"reference/octoprint/schema/webcam/#octoprint.schema.webcam.WebcamCompatibility.streamWebrtcIceServers","title":"<code>streamWebrtcIceServers: List[str] = ['stun:stun.l.google.com:19302']</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The WebRTC STUN and TURN servers</p>"},{"location":"reference/octoprint/server/","title":"octoprint.server","text":""},{"location":"reference/octoprint/server/views/","title":"octoprint.server.views","text":""},{"location":"reference/octoprint/server/api/","title":"octoprint.server.api","text":""},{"location":"reference/octoprint/server/api/access/","title":"octoprint.server.api.access","text":""},{"location":"reference/octoprint/server/api/connection/","title":"octoprint.server.api.connection","text":""},{"location":"reference/octoprint/server/api/files/","title":"octoprint.server.api.files","text":""},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper","title":"<code>WerkzeugFileWrapper(file_obj)</code>","text":"<p>         Bases: <code>octoprint.filemanager.util.AbstractFileWrapper</code></p> <p>A wrapper around a Werkzeug <code>FileStorage</code> object.</p> <p>Parameters:</p> <ul> <li> file_obj             (<code>werkzeug.datastructures.FileStorage</code>)         \u2013          <p>The Werkzeug <code>FileStorage</code> instance to wrap.</p> </li> </ul> <p>.. seealso::</p> <p><code>werkzeug.datastructures.FileStorage &lt;http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.FileStorage&gt;</code>_         The documentation of Werkzeug's <code>FileStorage</code> class.</p>"},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper.save","title":"<code>save(path)</code>","text":"<p>Delegates to <code>werkzeug.datastructures.FileStorage.save</code></p>"},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper.stream","title":"<code>stream()</code>","text":"<p>Returns <code>werkzeug.datastructures.FileStorage.stream</code></p>"},{"location":"reference/octoprint/server/api/job/","title":"octoprint.server.api.job","text":""},{"location":"reference/octoprint/server/api/languages/","title":"octoprint.server.api.languages","text":""},{"location":"reference/octoprint/server/api/printer/","title":"octoprint.server.api.printer","text":""},{"location":"reference/octoprint/server/api/printer_profiles/","title":"octoprint.server.api.printer_profiles","text":""},{"location":"reference/octoprint/server/api/settings/","title":"octoprint.server.api.settings","text":""},{"location":"reference/octoprint/server/api/slicing/","title":"octoprint.server.api.slicing","text":""},{"location":"reference/octoprint/server/api/system/","title":"octoprint.server.api.system","text":""},{"location":"reference/octoprint/server/api/timelapse/","title":"octoprint.server.api.timelapse","text":""},{"location":"reference/octoprint/server/api/users/","title":"octoprint.server.api.users","text":""},{"location":"reference/octoprint/server/util/","title":"octoprint.server.util","text":""},{"location":"reference/octoprint/server/util/#octoprint.server.util.corsRequestHandler","title":"<code>corsRequestHandler()</code>","text":"<p><code>before_request</code> handler for blueprints which sets CORS headers for OPTIONS requests if enabled</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.corsResponseHandler","title":"<code>corsResponseHandler(resp)</code>","text":"<p><code>after_request</code> handler for blueprints for which CORS is supported.</p> <p>Sets <code>Access-Control-Allow-Origin</code> headers for <code>Origin</code> request header on response.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.csrfRequestHandler","title":"<code>csrfRequestHandler()</code>","text":"<p><code>before_request</code> handler for blueprints which checks for CRFS double token on relevant requests &amp; methods.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.csrfResponseHandler","title":"<code>csrfResponseHandler(resp)</code>","text":"<p><code>after_request</code> handler for updating the CSRF cookie on each response.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.has_permissions","title":"<code>has_permissions(*permissions)</code>","text":"<p>Determines if the current user (either from the session, api key or authorization header) has all of the requested permissions.</p> <p>Parameters:</p> <ul> <li> *permissions         \u2013          <p>list of all permissions required to pass the check</p> </li> </ul>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginFromApiKeyRequestHandler","title":"<code>loginFromApiKeyRequestHandler()</code>","text":"<p><code>before_request</code> handler for blueprints which creates a login session for the provided api key (if available)</p> <p>App session keys are handled as anonymous keys here and ignored.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginFromAuthorizationHeaderRequestHandler","title":"<code>loginFromAuthorizationHeaderRequestHandler()</code>","text":"<p><code>before_request</code> handler for creating login sessions based on the Authorization header.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginUser","title":"<code>loginUser(user, remember = False, login_mechanism = None)</code>","text":"<p>Logs the provided <code>user</code> into Flask Login and Principal if not None and active</p> <p>Parameters:</p> <ul> <li> user         \u2013          <p>the User to login. May be None in which case the login will fail</p> </li> <li> remember         \u2013          <p>Whether to set the <code>remember</code> flag on the Flask Login operation</p> </li> </ul>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.noCachingExceptGetResponseHandler","title":"<code>noCachingExceptGetResponseHandler(resp)</code>","text":"<p><code>after_request</code> handler for blueprints which shall set no caching headers on their responses to any requests that are not sent with method <code>GET</code>.</p> <p>See :func:<code>noCachingResponseHandler</code>.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.noCachingResponseHandler","title":"<code>noCachingResponseHandler(resp)</code>","text":"<p><code>after_request</code> handler for blueprints which shall set no caching headers on their responses.</p> <p>Sets <code>Cache-Control</code>, <code>Pragma</code> and <code>Expires</code> headers accordingly to prevent all client side caching from taking place.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.optionsAllowOrigin","title":"<code>optionsAllowOrigin(request)</code>","text":"<p>Shortcut for request handling for CORS OPTIONS requests to set CORS headers.</p>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.require_login","title":"<code>require_login(*permissions)</code>","text":"<p>Returns a redirect response to the login view if the permission requirements are not met.</p> <p>Parameters:</p> <ul> <li> *permissions         \u2013          <p>a list of permissions required to pass the check</p> </li> </ul>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.require_login_with","title":"<code>require_login_with(permissions = None, user_id = None)</code>","text":"<p>Requires a login with the given permissions and/or user id.</p> <p>Parameters:</p> <ul> <li> permissions         \u2013          <p>list of all permissions required to pass the check</p> </li> <li> user_id         \u2013          <p>required user to pass the check</p> </li> </ul>"},{"location":"reference/octoprint/server/util/#octoprint.server.util.validate_local_redirect","title":"<code>validate_local_redirect(url, allowed_paths)</code>","text":"<p>Validates the given local redirect URL against the given allowed paths.</p> <p>An <code>url</code> is valid for a local redirect if it has neither scheme nor netloc defined, and its path is one of the given allowed paths.</p> <p>Parameters:</p> <ul> <li> url             (<code>str</code>)         \u2013          <p>URL to validate</p> </li> <li> allowed_paths             (<code>List[str]</code>)         \u2013          <p>List of allowed paths, only paths contained or prefixed (if allowed path ends with \"*\") will be considered valid.</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p>Whether the <code>url</code> passed validation or not.</p> </li> </ul>"},{"location":"reference/octoprint/server/util/csrf/","title":"octoprint.server.util.csrf","text":"<p>CSRF double cookie implementation</p>"},{"location":"reference/octoprint/server/util/flask/","title":"octoprint.server.util.flask","text":""},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.LessSimpleCache","title":"<code>LessSimpleCache(threshold = 500, default_timeout = 300)</code>","text":"<p>         Bases: <code>BaseCache</code></p> <p>Slightly improved version of :class:<code>SimpleCache</code>.</p> <p>Setting <code>default_timeout</code> or <code>timeout</code> to <code>-1</code> will have no timeout be applied at all.</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest","title":"<code>OctoPrintFlaskRequest(environ, *args, **kwargs)</code>","text":"<p>         Bases: <code>flask.Request</code></p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest.server_name","title":"<code>server_name()</code>","text":"<p>Short cut to the request's server name header</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest.server_port","title":"<code>server_port()</code>","text":"<p>Short cut to the request's server port header</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.check_lastmodified","title":"<code>check_lastmodified(lastmodified: Union[int, float, datetime]) -&gt; bool</code>","text":"<p>Compares the provided lastmodified value with the value of the If-Modified-Since header.</p> <p>If <code>lastmodified</code> is an int or float, it's assumed to be a Unix timestamp and converted to a timezone aware datetime instance in UTC.</p> <p>If <code>lastmodified</code> is a datetime instance, it needs to be timezone aware or the result will always be <code>False</code>.</p> <p>Parameters:</p> <ul> <li> lastmodified             (<code>Union[int, float, datetime]</code>)         \u2013          <p>The last modified value to compare against</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If anything but an int, float or datetime instance is passed</p> </li> </ul> <p>Returns:</p> <ul> <li> bool(            <code>bool</code> )        \u2013          <p>true if the values indicate that the document is still up to date</p> </li> </ul>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.firstrun_only_access","title":"<code>firstrun_only_access(func)</code>","text":"<p>If you decorate a view with this, it will ensure that first setup has not been done for OctoPrint's Access Control. Otherwise it will cause a HTTP 403 status code to be returned by the decorated resource.</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.get_cookie_suffix","title":"<code>get_cookie_suffix(request)</code>","text":"<p>Request specific suffix for set and read cookies</p> <p>We need this because cookies are not port-specific and we don't want to overwrite our session and other cookies from one OctoPrint instance on our machine with those of another one who happens to listen on the same address albeit a different port or script root.</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.get_flask_user_from_request","title":"<code>get_flask_user_from_request(request)</code>","text":"<p>Retrieves the current flask user from the request context. Uses API key if available, otherwise the current user session if available.</p> <p>:param request: flask request from which to retrieve the current user :return: the user (might be an anonymous user)</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.make_api_error","title":"<code>make_api_error(message, status)</code>","text":"<p>Helper to generate API error responses in JSON format.</p> <p>Turns something like <code>make_api_error(\"Not Found\", 404)</code> into a JSON response with body <code>{\"error\": \"Not Found\"}</code>.</p> <p>Parameters:</p> <ul> <li> message         \u2013          <p>The error message to put into the response</p> </li> <li> status         \u2013          <p>The HTTP status code</p> </li> </ul>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.make_text_response","title":"<code>make_text_response(message, status)</code>","text":"<p>Helper to generate basic text responses.</p> <p>Response will have the provided message as body, the provided status code, and a content type of \"text/plain\".</p> <p>Parameters:</p> <ul> <li> message         \u2013          <p>The message in the response body</p> </li> <li> status         \u2013          <p>The HTTP status code</p> </li> </ul>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.no_firstrun_access","title":"<code>no_firstrun_access(func)</code>","text":"<p>If you decorate a view with this, it will ensure that first setup has been done for OctoPrint's Access Control.</p> <p>If OctoPrint's Access Control has not been setup yet (indicated by the userManager not reporting that its user database has been customized from default), the decorator will cause a HTTP 403 status code to be returned by the decorated resource.</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.permission_validator","title":"<code>permission_validator(request, permission)</code>","text":"<p>Validates that the given request is made by an authorized user, identified either by API key or existing Flask session.</p> <p>Must be executed in an existing Flask request context!</p> <p>:param request: The Flask request object :param request: The required permission</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.redirect_to_tornado","title":"<code>redirect_to_tornado(request, target, code = 302)</code>","text":"<p>Redirects from flask to tornado, flask request context must exist.</p> <p>:param request: :param target: :param code: :return:</p>"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.restricted_access","title":"<code>restricted_access(func)</code>","text":"<p>This combines func:<code>no_firstrun_access</code> and <code>login_required</code>.</p>"},{"location":"reference/octoprint/server/util/sockjs/","title":"octoprint.server.util.sockjs","text":""},{"location":"reference/octoprint/server/util/sockjs/#octoprint.server.util.sockjs.PrinterStateConnection","title":"<code>PrinterStateConnection(printer, fileManager, analysisQueue, userManager, groupManager, eventManager, pluginManager, connectivityChecker, session)</code>","text":"<p>         Bases: <code>octoprint.vendor.sockjs.tornado.SockJSConnection</code>, <code>octoprint.printer.PrinterCallback</code>, <code>LoginStatusListener</code>, <code>GroupChangeListener</code></p>"},{"location":"reference/octoprint/server/util/tornado/","title":"octoprint.server.util.tornado","text":""},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CorsSupportMixin","title":"<code>CorsSupportMixin</code>","text":"<p>         Bases: <code>tornado.web.RequestHandler</code></p> <p><code>tornado.web.RequestHandler &lt;http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers&gt;</code>_ mixin that makes sure to set CORS headers similarly to the Flask backed API endpoints.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1Connection","title":"<code>CustomHTTP1Connection(stream, is_client, params = None, context = None)</code>","text":"<p>         Bases: <code>tornado.http1connection.HTTP1Connection</code></p> <p>A custom implementation of <code>tornado.http1connection.HTTP1Connection</code> which upon checking the <code>Content-Length</code> of the request against the configured maximum utilizes <code>max_body_sizes</code> and <code>default_max_body_size</code> as a fallback.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1ConnectionParameters","title":"<code>CustomHTTP1ConnectionParameters(*args, **kwargs)</code>","text":"<p>         Bases: <code>tornado.http1connection.HTTP1ConnectionParameters</code></p> <p>An implementation of <code>tornado.http1connection.HTTP1ConnectionParameters</code> that adds two new parameters <code>max_body_sizes</code> and <code>default_max_body_size</code>.</p> <p>For a description of these please see the documentation of <code>CustomHTTPServer</code> above.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1ServerConnection","title":"<code>CustomHTTP1ServerConnection</code>","text":"<p>         Bases: <code>tornado.http1connection.HTTP1ServerConnection</code></p> <p>A custom implementation of <code>tornado.http1connection.HTTP1ServerConnection</code> which utilizes a <code>CustomHTTP1Connection</code> instead of a <code>tornado.http1connection.HTTP1Connection</code> in <code>_server_request_loop</code>. The implementation logic is otherwise the same as <code>tornado.http1connection.HTTP1ServerConnection</code>.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTPServer","title":"<code>CustomHTTPServer(*args, **kwargs)</code>","text":"<p>         Bases: <code>tornado.httpserver.HTTPServer</code></p> <p>Custom implementation of <code>tornado.httpserver.HTTPServer</code> that allows defining max body sizes depending on path and method.</p> <p>The implementation is mostly taken from <code>tornado.httpserver.HTTPServer</code>, the only difference is the creation of a <code>CustomHTTP1ConnectionParameters</code> instance instead of <code>tornado.http1connection.HTTP1ConnectionParameters</code> which is supplied with the two new constructor arguments <code>max_body_sizes</code> and <code>max_default_body_size</code> and the creation of a <code>CustomHTTP1ServerConnection</code> instead of a <code>tornado.http1connection.HTTP1ServerConnection</code> upon connection by a client.</p> <p><code>max_body_sizes</code> is expected to be an iterable containing tuples of the form (method, path regex, maximum body size), with method and path regex having to match in order for maximum body size to take affect.</p> <p><code>default_max_body_size</code> is the default maximum body size to apply if no specific one from <code>max_body_sizes</code> matches.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.DeprecatedEndpointHandler","title":"<code>DeprecatedEndpointHandler</code>","text":"<p>         Bases: <code>CorsSupportMixin</code>, <code>tornado.web.RequestHandler</code></p> <p><code>tornado.web.RequestHandler &lt;http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers&gt;</code>_ that redirects to another <code>url</code> and logs a deprecation warning.</p> <p>Parameters:</p> <ul> <li> url             (<code>str</code>)         \u2013          <p>URL to which to redirect</p> </li> </ul>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler","title":"<code>LargeResponseHandler</code>","text":"<p>         Bases: <code>RequestlessExceptionLoggingMixin</code>, <code>CorsSupportMixin</code>, <code>tornado.web.StaticFileHandler</code></p> <p>Customized <code>tornado.web.StaticFileHandler &lt;http://tornado.readthedocs.org/en/branch4.0/web.html#tornado.web.StaticFileHandler&gt;</code>_ that allows delivery of the requested resource as attachment and access and request path validation through optional callbacks. Note that access validation takes place before path validation.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>The system path from which to serve files (this will be forwarded to the <code>initialize</code> method of  :class:<code>~tornado.web.StaticFileHandler</code>)</p> </li> <li> default_filename             (<code>str</code>)         \u2013          <p>The default filename to serve if none is explicitly specified and the request references  a subdirectory of the served path (this will be forwarded to the <code>initialize</code> method of  :class:<code>~tornado.web.StaticFileHandler</code> as the <code>default_filename</code> keyword parameter). Defaults to <code>None</code>.</p> </li> <li> as_attachment             (<code>bool</code>)         \u2013          <p>Whether to serve requested files with <code>Content-Disposition: attachment</code> header (<code>True</code>)  or not. Defaults to <code>False</code>.</p> </li> <li> allow_client_caching             (<code>bool</code>)         \u2013          <p>Whether to allow the client to cache (by not setting any <code>Cache-Control</code> or  <code>Expires</code> headers on the response) or not.</p> </li> <li> access_validation             (<code>function</code>)         \u2013          <p>Callback to call in the <code>get</code> method to validate access to the resource. Will  be called with <code>self.request</code> as parameter which contains the full tornado request object. Should raise  a <code>tornado.web.HTTPError</code> if access is not allowed in which case the request will not be further processed.  Defaults to <code>None</code> and hence no access validation being performed.</p> </li> <li> path_validation             (<code>function</code>)         \u2013          <p>Callback to call in the <code>get</code> method to validate the requested path. Will be called  with the requested path as parameter. Should raise a <code>tornado.web.HTTPError</code> (e.g. an 404) if the requested  path does not pass validation in which case the request will not be further processed.  Defaults to <code>None</code> and hence no path validation being performed.</p> </li> <li> etag_generator             (<code>function</code>)         \u2013          <p>Callback to call for generating the value of the ETag response header. Will be  called with the response handler as parameter. May return <code>None</code> to prevent the ETag response header  from being set. If not provided the last modified time of the file in question will be used as returned  by <code>get_content_version</code>.</p> </li> <li> name_generator             (<code>function</code>)         \u2013          <p>Callback to call for generating the value of the attachment file name header. Will be  called with the requested path as parameter.</p> </li> <li> mime_type_guesser             (<code>function</code>)         \u2013          <p>Callback to guess the mime type to use for the content type encoding of the  response. Will be called with the requested path on disk as parameter.</p> </li> <li> is_pre_compressed             (<code>bool</code>)         \u2013          <p>if the file is expected to be pre-compressed, i.e, if there is a file in the same  directory with the same name, but with '.gz' appended and gzip-encoded</p> </li> </ul>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler.original_absolute_path","title":"<code>original_absolute_path</code>  <code>property</code>","text":"<p>The path of the uncompressed file corresponding to the compressed file</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler.streamed_get","title":"<code>streamed_get(path, include_body = True)</code>","text":"<p>Version of StaticFileHandler.get that doesn't support ranges or ETag but streams the content. Helpful for files that might still change while being transmitted (e.g. log files)</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.StaticDataHandler","title":"<code>StaticDataHandler</code>","text":"<p>         Bases: <code>RequestlessExceptionLoggingMixin</code>, <code>CorsSupportMixin</code>, <code>tornado.web.RequestHandler</code></p> <p><code>tornado.web.RequestHandler &lt;http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers&gt;</code>_ that returns static <code>data</code> of a configured <code>content_type</code>.</p> <p>Parameters:</p> <ul> <li> data             (<code>str</code>)         \u2013          <p>The data with which to respond</p> </li> <li> content_type             (<code>str</code>)         \u2013          <p>The content type with which to respond. Defaults to <code>text/plain</code></p> </li> </ul>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler","title":"<code>UploadStorageFallbackHandler</code>","text":"<p>         Bases: <code>RequestlessExceptionLoggingMixin</code>, <code>CorsSupportMixin</code></p> <p>A <code>RequestHandler</code> similar to <code>tornado.web.FallbackHandler</code> which fetches any files contained in the request bodies of content type <code>multipart</code>, stores them in temporary files and supplies the <code>fallback</code> with the file's <code>name</code>, <code>content_type</code>, <code>path</code> and <code>size</code> instead via a rewritten body.</p> <p>Basically similar to what the nginx upload module does.</p> <p>Basic request body example:</p> <p>.. code-block:: none</p> <pre><code>------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"file\"; filename=\"test.gcode\"\nContent-Type: application/octet-stream\n\n...\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"apikey\"\n\nmy_funny_apikey\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"select\"\n\ntrue\n------WebKitFormBoundarypYiSUx63abAmhT5C--\n</code></pre> <p>That would get turned into:</p> <p>.. code-block:: none</p> <pre><code>------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"apikey\"\n\nmy_funny_apikey\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"select\"\n\ntrue\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"file.path\"\nContent-Type: text/plain; charset=utf-8\n\n/tmp/tmpzupkro\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"file.name\"\nContent-Type: text/plain; charset=utf-8\n\ntest.gcode\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"file.content_type\"\nContent-Type: text/plain; charset=utf-8\n\napplication/octet-stream\n------WebKitFormBoundarypYiSUx63abAmhT5C\nContent-Disposition: form-data; name=\"file.size\"\nContent-Type: text/plain; charset=utf-8\n\n349182\n------WebKitFormBoundarypYiSUx63abAmhT5C--\n</code></pre> <p>The underlying application can then access the contained files via their respective paths and just move them where necessary.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.BODY_METHODS","title":"<code>BODY_METHODS = ('POST', 'PATCH', 'PUT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request methods that may contain a request body.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.data_received","title":"<code>data_received(chunk)</code>","text":"<p>Called by Tornado on receiving a chunk of the request body. If request is a multipart request, takes care of processing the multipart data structure via :func:<code>_process_multipart_data</code>. If not, just adds the chunk to internal in-memory buffer.</p> <p>:param chunk: chunk of data received from Tornado</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.is_multipart","title":"<code>is_multipart()</code>","text":"<p>Checks whether this request is a <code>multipart</code> request</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.prepare","title":"<code>prepare()</code>","text":"<p>Prepares the processing of the request. If it's a request that may contain a request body (as defined in :attr:<code>UploadStorageFallbackHandler.BODY_METHODS</code>) prepares the multipart parsing if content type fits. If it's a body-less request, just calls the <code>fallback</code> with an empty body and finishes the request.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UrlProxyHandler","title":"<code>UrlProxyHandler</code>","text":"<p>         Bases: <code>RequestlessExceptionLoggingMixin</code>, <code>CorsSupportMixin</code>, <code>tornado.web.RequestHandler</code></p> <p><code>tornado.web.RequestHandler &lt;http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers&gt;</code>_ that proxies requests to a preconfigured url and returns the response. Allows delivery of the requested content as attachment and access validation through an optional callback.</p> <p>This will use <code>tornado.httpclient.AsyncHTTPClient &lt;http://tornado.readthedocs.org/en/branch4.0/httpclient.html#tornado.httpclient.AsyncHTTPClient&gt;</code>_ for making the request to the configured endpoint and return the body of the client response with the status code</p> from the client response and the following headers <ul> <li><code>Date</code>, <code>Cache-Control</code>, <code>Expires</code>, <code>ETag</code>, <code>Server</code>, <code>Content-Type</code> and <code>Location</code> will be copied over.</li> <li>If <code>as_attachment</code> is set to True, <code>Content-Disposition</code> will be set to <code>attachment</code>. If <code>basename</code> is   set including the attachment's <code>filename</code> attribute will be set to the base name followed by the extension   guessed based on the MIME type from the <code>Content-Type</code> header of the response. If no extension can be guessed   no <code>filename</code> attribute will be set.</li> </ul> <p>Parameters:</p> <ul> <li> url             (<code>str</code>)         \u2013          <p>URL to forward any requests to. A 404 response will be returned if this is not set. Defaults to <code>None</code>.</p> </li> <li> as_attachment             (<code>bool</code>)         \u2013          <p>Whether to serve files with <code>Content-Disposition: attachment</code> header (<code>True</code>)  or not. Defaults to <code>False</code>.</p> </li> <li> basename             (<code>str</code>)         \u2013          <p>base name of file names to return as part of the attachment header, see above. Defaults to <code>None</code>.</p> </li> <li> access_validation             (<code>function</code>)         \u2013          <p>Callback to call in the <code>get</code> method to validate access to the resource. Will  be called with <code>self.request</code> as parameter which contains the full tornado request object. Should raise  a <code>tornado.web.HTTPError</code> if access is not allowed in which case the request will not be further processed.  Defaults to <code>None</code> and hence no access validation being performed.</p> </li> </ul>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer","title":"<code>WsgiInputContainer(wsgi_application, headers = None, forced_headers = None, removed_headers = None)</code>","text":"<p>A WSGI container for use with Tornado that allows supplying the request body to be used for <code>wsgi.input</code> in the generated WSGI environment upon call.</p> <p>A <code>RequestHandler</code> can thus provide the WSGI application with a stream for the request body, or a modified body.</p> <p>Example usage:</p> <p>.. code-block:: python</p> <p>wsgi_app = octoprint.server.util.WsgiInputContainer(octoprint_app)    application = tornado.web.Application([        (r\".*\", UploadStorageFallbackHandler, dict(fallback=wsgi_app),    ])</p> <p>The implementation logic is basically the same as <code>tornado.wsgi.WSGIContainer</code> but the <code>__call__</code> and <code>environ</code> methods have been adjusted to allow for an optionally supplied <code>body</code> argument which is then used for <code>wsgi.input</code>.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer.__call__","title":"<code>__call__(request, body = None)</code>","text":"<p>Wraps the call against the WSGI app, deriving the WSGI environment from the supplied Tornado <code>HTTPServerRequest</code>.</p> <p>:param request: the <code>tornado.httpserver.HTTPServerRequest</code> to derive the WSGI environment from :param body: an optional body  to use as <code>wsgi.input</code> instead of <code>request.body</code>, can be a string or a stream</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer.environ","title":"<code>environ(request, body = None)</code>  <code>staticmethod</code>","text":"<p>Converts a <code>tornado.httputil.HTTPServerRequest</code> to a WSGI environment.</p> <p>An optional <code>body</code> to be used for populating <code>wsgi.input</code> can be supplied (either a string or a stream). If not supplied, <code>request.body</code> will be wrapped into a <code>io.BytesIO</code> stream and used instead.</p> <p>:param request: the <code>tornado.httpserver.HTTPServerRequest</code> to derive the WSGI environment from :param body: an optional body  to use as <code>wsgi.input</code> instead of <code>request.body</code>, can be a string or a stream</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.access_validation_factory","title":"<code>access_validation_factory(app, validator, *args)</code>","text":"<p>Creates an access validation wrapper using the supplied validator.</p> <p>:param validator: the access validator to use inside the validation wrapper :return: an access validator taking a request as parameter and performing the request validation</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.enable_per_message_deflate_extension","title":"<code>enable_per_message_deflate_extension()</code>","text":"<p>This configures tornado.websocket.WebSocketHandler.get_compression_options to support the permessage-deflate extension to the websocket protocol, minimizing data bandwidth if clients support the extension as well</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.fix_json_encode","title":"<code>fix_json_encode()</code>","text":"<p>This makes tornado.escape.json_encode use octoprint.util.JsonEncoding.encode as fallback in order to allow serialization of globally registered types like frozendict and others.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.fix_websocket_check_origin","title":"<code>fix_websocket_check_origin()</code>","text":"<p>This fixes tornado.websocket.WebSocketHandler.check_origin to do the same origin check against the Host header case-insensitively, as defined in RFC6454, Section 4, item 5.</p>"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.path_validation_factory","title":"<code>path_validation_factory(path_filter, status_code = 404)</code>","text":"<p>Creates a request path validation wrapper returning the defined status code if the supplied path_filter returns False.</p> <p>:param path_filter: the path filter to use on the requested path, should return False for requests that should    be responded with the provided error code. :return: a request path validator taking a request path as parameter and performing the request validation</p>"},{"location":"reference/octoprint/server/util/watchdog/","title":"octoprint.server.util.watchdog","text":""},{"location":"reference/octoprint/server/util/watchdog/#octoprint.server.util.watchdog.GcodeWatchdogHandler","title":"<code>GcodeWatchdogHandler(file_manager, printer)</code>","text":"<p>         Bases: <code>watchdog.events.PatternMatchingEventHandler</code></p> <p>Takes care of automatically \"uploading\" files that get added to the watched folder.</p>"},{"location":"reference/octoprint/server/util/webassets/","title":"octoprint.server.util.webassets","text":""},{"location":"reference/octoprint/settings/","title":"octoprint.settings","text":"<p>This module represents OctoPrint's settings management. Within this module the default settings for the core application are defined and the instance of the :class:<code>Settings</code> is held, which offers getter and setter methods for the raw configuration values as well as various convenience methods to access the paths to base folders of various types and the configuration file itself.</p> <p>.. autodata:: default_settings    :annotation: = dict(...)</p> <p>.. autodata:: valid_boolean_trues</p> <p>.. autofunction:: settings</p> <p>.. autoclass:: Settings    :members:    :undoc-members:</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.default_settings","title":"<code>default_settings = _config.dict(by_alias=True)</code>  <code>module-attribute</code>","text":"<p>The default settings of the core application.</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.valid_boolean_trues","title":"<code>valid_boolean_trues = CaseInsensitiveSet(True, 'true', 'yes', 'y', '1', 1)</code>  <code>module-attribute</code>","text":"<p>Values that are considered to be equivalent to the boolean <code>True</code> value, used for type conversion in various places.</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap","title":"<code>HierarchicalChainMap(*maps)</code>","text":"<p>Stores a bunch of nested dictionaries in chain map, allowing queries of nested values work on lower directories. For example:</p> Example <p>example_dict = {\"a\": \"a\", \"b\": {\"c\": \"c\"}} hcm = HierarchicalChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm = ChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm\"b\" 'd' cm\"b\" Traceback (most recent call last):     ... KeyError: 'c' hcm.get_by_path([\"b\", \"d\"]) 'd' hcm.get_by_path([\"b\", \"c\"]) 'c'</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.all_layers","title":"<code>all_layers</code>  <code>property</code>","text":"<p>A list of all layers in this map. read-only</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.bottom_map","title":"<code>bottom_map</code>  <code>property</code>","text":"<p>The very bottom layer is the default layer</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.top_map","title":"<code>top_map</code>  <code>writable</code> <code>property</code>","text":"<p>This is the layer that is written to</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.with_config_defaults","title":"<code>with_config_defaults(config = None, defaults = None)</code>","text":"<p>Builds a new map with the following layers: provided config + any intermediary parents + provided defaults + regular defaults</p> <p>:param config: :param defaults: :return:</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings","title":"<code>Settings(configfile = None, basedir = None, overlays = None)</code>","text":"<p>The :class:<code>Settings</code> class allows managing all of OctoPrint's settings. It takes care of initializing the settings directory, loading the configuration from <code>config.yaml</code>, persisting changes to disk etc and provides access methods for getting and setting specific values from the overall settings structure via paths.</p> <p>A general word on the concept of paths, since they play an important role in OctoPrint's settings management. A path is basically a list or tuple consisting of keys to follow down into the settings (which are basically like a <code>dict</code>) in order to set or retrieve a specific value (or more than one). For example, for a settings structure like the following::</p> <pre><code>serial:\n    port: \"/dev/ttyACM0\"\n    baudrate: 250000\n    timeout:\n        communication: 20.0\n        temperature: 5.0\n        sdStatus: 1.0\n        connection: 10.0\nserver:\n    host: \"0.0.0.0\"\n    port: 5000\n</code></pre> <p>the following paths could be used:</p> <p>========================================== ============================================================================ Path                                       Value ========================================== ============================================================================ <code>[\"serial\", \"port\"]</code>                     ::</p> <pre><code>                                           \"/dev/ttyACM0\"\n</code></pre> <p><code>[\"serial\", \"timeout\"]</code>                  ::</p> <pre><code>                                           communication: 20.0\n                                           temperature: 5.0\n                                           sdStatus: 1.0\n                                           connection: 10.0\n</code></pre> <p><code>[\"serial\", \"timeout\", \"temperature\"]</code>   ::</p> <pre><code>                                           5.0\n</code></pre> <p><code>[\"server\", \"port\"]</code>                     ::</p> <pre><code>                                           5000\n</code></pre> <p>========================================== ============================================================================</p> <p>However, these would be invalid paths: <code>[\"key\"]</code>, <code>[\"serial\", \"port\", \"value\"]</code>, <code>[\"server\", \"host\", 3]</code>.</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings.config","title":"<code>config</code>  <code>property</code>","text":"<p>A view of the local config as stored in config.yaml</p> <p>Does not support modifications, they will be thrown away silently. If you need to modify anything in the settings, utilize the provided set and remove methods.</p>"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings.last_modified","title":"<code>last_modified</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(int) The last modification time of the configuration file.</p> </li> </ul>"},{"location":"reference/octoprint/settings/#octoprint.settings.settings","title":"<code>settings(init = False, basedir = None, configfile = None, overlays = None)</code>","text":"<p>Factory method for initially constructing and consecutively retrieving the :class:<code>~octoprint.settings.Settings</code> singleton.</p> <p>Parameters:</p> <ul> <li> init             (<code>boolean</code>)         \u2013          <p>A flag indicating whether this is the initial call to construct the singleton (True) or not (False, default). If this is set to True and the plugin manager has already been initialized, a :class:<code>ValueError</code> will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False.</p> </li> <li> basedir             (<code>str</code>)         \u2013          <p>Path of the base directory for all of OctoPrint's settings, log files, uploads etc. If not set the default will be used: <code>~/.octoprint</code> on Linux, <code>%APPDATA%/OctoPrint</code> on Windows and <code>~/Library/Application Support/OctoPrint</code> on MacOS.</p> </li> <li> configfile             (<code>str</code>)         \u2013          <p>Path of the configuration file (<code>config.yaml</code>) to work on. If not set the default will be used: <code>&lt;basedir&gt;/config.yaml</code> for <code>basedir</code> as defined above.</p> </li> <li> overlays             (<code>list</code>)         \u2013          <p>List of paths to config overlays to put between default settings and config.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> Settings        \u2013          <p>The fully initialized :class:<code>Settings</code> instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p><code>init</code> is True but settings are already initialized or vice versa.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/","title":"octoprint.slicing","text":"<p>In this module the slicing support of OctoPrint is encapsulated.</p> <p>.. autoclass:: SlicingProfile    :members:</p> <p>.. autoclass:: TemporaryProfile    :members:</p> <p>.. autoclass:: SlicingManager    :members:</p>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager","title":"<code>SlicingManager(profile_path, printer_profile_manager)</code>","text":"<p>The :class:<code>SlicingManager</code> is responsible for managing available slicers and slicing profiles.</p> <p>Parameters:</p> <ul> <li> profile_path             (<code>str</code>)         \u2013          <p>Absolute path to the base folder where all slicing profiles are stored.</p> </li> <li> printer_profile_manager             (<code>~octoprint.printer.profile.PrinterProfileManager</code>)         \u2013          <p>:class:<code>~octoprint.printer.profile.PrinterProfileManager</code> instance to use for accessing available printer profiles, most importantly the currently selected one.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.configured_slicers","title":"<code>configured_slicers</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(list of str) Identifiers of all available configured slicers.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.default_slicer","title":"<code>default_slicer</code>  <code>property</code>","text":"<p>Retrieves the default slicer.</p> <p>Returns:</p> <ul> <li>         \u2013          <p>(str) The identifier of the default slicer or <code>None</code> if the default slicer is not registered in the system.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.registered_slicers","title":"<code>registered_slicers</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(list of str) Identifiers of all available slicers.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.slicing_enabled","title":"<code>slicing_enabled</code>  <code>property</code>","text":"<p>Returns:</p> <ul> <li>         \u2013          <p>(boolean) True if there is at least one configured slicer available, False otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.all_profiles","title":"<code>all_profiles(slicer, require_configured = False)</code>","text":"<p>Retrieves all profiles for slicer <code>slicer</code>.</p> <p>If <code>require_configured</code> is set to True (default is False), only will return the profiles if the <code>slicer</code> is already configured, otherwise a :class:<code>SlicerNotConfigured</code> exception will be raised.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer for which to retrieve all slicer profiles</p> </li> <li> require_configured             (<code>boolean</code>)         \u2013          <p>Whether to require the slicer <code>slicer</code> to be already configured (True) or not (False, default). If False and the slicer is not yet configured, a :class:<code>~octoprint.slicing.exceptions.SlicerNotConfigured</code> exception will be raised.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>dict of SlicingProfile: A dict of all :class:<code>SlicingProfile</code> instances available for the slicer <code>slicer</code>, mapped by the identifier.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.SlicerNotConfigured</code>           \u2013          <p>The slicer <code>slicer</code> is not configured and <code>require_configured</code> was True.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.cancel_slicing","title":"<code>cancel_slicing(slicer_name, source_path, dest_path)</code>","text":"<p>Cancels the slicing job on slicer <code>slicer_name</code> from <code>source_path</code> to <code>dest_path</code>.</p> <p>Parameters:</p> <ul> <li> slicer_name             (<code>str</code>)         \u2013          <p>Identifier of the slicer on which to cancel the job.</p> </li> <li> source_path             (<code>str</code>)         \u2013          <p>The absolute path to the source file being sliced.</p> </li> <li> dest_path             (<code>str</code>)         \u2013          <p>The absolute path to the destination file being sliced to.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer specified via <code>slicer_name</code> is unknown.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.delete_profile","title":"<code>delete_profile(slicer, name)</code>","text":"<p>Deletes the profile <code>name</code> for the specified <code>slicer</code>.</p> <p>If the profile does not exist, nothing will happen.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer for which to delete the profile.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Identifier of the profile to delete.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.CouldNotDeleteProfile</code>           \u2013          <p>There was an error while deleting the profile.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_profile_path","title":"<code>get_profile_path(slicer, name, must_exist = False)</code>","text":"<p>Retrieves the path to the profile named <code>name</code> for slicer <code>slicer</code>.</p> <p>If <code>must_exist</code> is set to True (defaults to False) a :class:<code>UnknownProfile</code> exception will be raised if the profile doesn't exist yet.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer to which the profile belongs to.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Identifier of the profile for which to retrieve the path.</p> </li> <li> must_exist             (<code>boolean</code>)         \u2013          <p>Whether the path must exist (True) or not (False, default).</p> </li> </ul> <p>Returns:</p> <ul> <li> str        \u2013          <p>The absolute path to the profile identified by <code>name</code> for slicer <code>slicer</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.UnknownProfile</code>           \u2013          <p>The profile named <code>name</code> doesn't exist and <code>must_exist</code> was True.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_slicer","title":"<code>get_slicer(slicer, require_configured = True)</code>","text":"<p>Retrieves the slicer named <code>slicer</code>. If <code>require_configured</code> is set to True (the default) an exception will be raised if the slicer is not yet configured.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer to return</p> </li> <li> require_configured             (<code>boolean</code>)         \u2013          <p>Whether to raise an exception if the slicer has not been configured yet (True, the default), or also return an unconfigured slicer (False).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.SlicerNotConfigured</code>           \u2013          <p>The <code>slicer</code> is not yet configured and <code>require_configured</code> was set to True.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_slicer_profile_path","title":"<code>get_slicer_profile_path(slicer)</code>","text":"<p>Retrieves the path where the profiles for slicer <code>slicer</code> are stored.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer for which to retrieve the path.</p> </li> </ul> <p>Returns:</p> <ul> <li> str        \u2013          <p>The absolute path to the folder where the slicer's profiles are stored.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.initialize","title":"<code>initialize()</code>","text":"<p>Initializes the slicing manager by loading and initializing all available :class:<code>~octoprint.plugin.SlicerPlugin</code> implementations.</p>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.load_profile","title":"<code>load_profile(slicer, name, require_configured = True)</code>","text":"<p>Loads the slicing profile for <code>slicer</code> with the given profile <code>name</code> and returns it. If it can't be loaded due to an :class:<code>IOError</code> <code>None</code> will be returned instead.</p> <p>If <code>require_configured</code> is True (the default) a :class:<code>SlicerNotConfigured</code> exception will be raised if the indicated <code>slicer</code> has not yet been configured.</p> <p>Returns:</p> <ul> <li> SlicingProfile        \u2013          <p>The requested slicing profile or None if it could not be loaded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer specified via <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.SlicerNotConfigured</code>           \u2013          <p>The slicer specified via <code>slicer</code> has not yet been configured and <code>require_configured</code> was True.</p> </li> <li> <code>~octoprint.slicing.exceptions.UnknownProfile</code>           \u2013          <p>The profile for slicer <code>slicer</code> named <code>name</code> does not exist.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.profiles_last_modified","title":"<code>profiles_last_modified(slicer)</code>","text":"<p>Retrieves the last modification date of <code>slicer</code>'s profiles.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>the slicer for which to retrieve the last modification date</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(float) the time stamp of the last modification of the slicer's profiles</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.reload_slicers","title":"<code>reload_slicers()</code>","text":"<p>Retrieves all registered :class:<code>~octoprint.plugin.SlicerPlugin</code> implementations and registers them as available slicers.</p>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.save_profile","title":"<code>save_profile(slicer, name, profile, overrides = None, allow_overwrite = True, display_name = None, description = None)</code>","text":"<p>Saves the slicer profile <code>profile</code> for slicer <code>slicer</code> under name <code>name</code>.</p> <p><code>profile</code> may be either a :class:<code>SlicingProfile</code> or a :class:<code>dict</code>.</p> <p>If it's a :class:<code>SlicingProfile</code>, its :attr:<code>~SlicingProfile.slicer``, :attr:</code>~SlicingProfile.name<code>and - if provided - :attr:</code>~SlicingProfile.display_name<code>and :attr:</code>~SlicingProfile.description` attributes will be overwritten with the supplied values.</p> <p>If it's a :class:<code>dict</code>, a new :class:<code>SlicingProfile</code> instance will be created with the supplied meta data and the profile data as the :attr:<code>~SlicingProfile.data</code> attribute.</p> <p>.. note::</p> <p>If the profile is the first profile to be saved for the slicer, it will automatically be marked as default.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer for which to save the <code>profile</code>.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Identifier under which to save the <code>profile</code>.</p> </li> <li> profile             (<code>SlicingProfile or dict</code>)         \u2013          <p>The :class:<code>SlicingProfile</code> or a :class:<code>dict</code> containing the profile data of the profile the save.</p> </li> <li> overrides             (<code>dict</code>)         \u2013          <p>Overrides to apply to the <code>profile</code> before saving it.</p> </li> <li> allow_overwrite             (<code>boolean</code>)         \u2013          <p>If True (default) if a profile for the same <code>slicer</code> of the same <code>name</code> already exists, it will be overwritten. Otherwise an exception will be thrown.</p> </li> <li> display_name             (<code>str</code>)         \u2013          <p>The name to display to the user for the profile.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>A description of the profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> SlicingProfile        \u2013          <p>The saved profile (including the applied overrides).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>The supplied <code>profile</code> is neither a :class:<code>SlicingProfile</code> nor a :class:<code>dict</code>.</p> </li> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.ProfileAlreadyExists</code>           \u2013          <p>A profile with name <code>name</code> already exists for <code>slicer</code> and <code>allow_overwrite</code> is False.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.set_default_profile","title":"<code>set_default_profile(slicer, name, require_configured = False, require_exists = True)</code>","text":"<p>Sets the given profile as default profile for the slicer.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer for which to set the default profile.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Identifier of the profile to set as default.</p> </li> <li> require_configured             (<code>bool</code>)         \u2013          <p>Whether the slicer needs to be configured for the action to succeed. Defaults to false. Will raise a SlicerNotConfigured error if true and the slicer has not been configured yet.</p> </li> <li> require_exists             (<code>bool</code>)         \u2013          <p>Whether the profile is required to exist in order to be set as default. Defaults to true. Will raise a UnknownProfile error if true and the profile is unknown.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer <code>slicer</code> is unknown</p> </li> <li> <code>~octoprint.slicing.exceptions.SlicerNotConfigured</code>           \u2013          <p>The slicer <code>slicer</code> has not yet been configured and <code>require_configured</code> was true.</p> </li> <li> <code>~octoprint.slicing.exceptions.UnknownProfile</code>           \u2013          <p>The profile <code>name</code> was unknown for slicer <code>slicer</code> and <code>require_exists</code> was true.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.slice","title":"<code>slice(slicer_name, source_path, dest_path, profile_name, callback, callback_args = None, callback_kwargs = None, overrides = None, on_progress = None, on_progress_args = None, on_progress_kwargs = None, printer_profile_id = None, position = None)</code>","text":"<p>Slices <code>source_path</code> to <code>dest_path</code> using slicer <code>slicer_name</code> and slicing profile <code>profile_name</code>. Since slicing happens asynchronously, <code>callback</code> will be called when slicing has finished (either successfully or not), with <code>callback_args</code> and <code>callback_kwargs</code> supplied.</p> <p>If <code>callback_args</code> is left out, an empty argument list will be assumed for the callback. If <code>callback_kwargs</code> is left out, likewise an empty keyword argument list will be assumed for the callback. Note that in any case the callback must support being called with the following optional keyword arguments:</p> <p>_analysis     If the slicer returned analysis data of the created machine code as part of its slicing result, this keyword     argument will contain that data. _error     If there was an error while slicing this keyword argument will contain the error message as returned from     the slicer. _cancelled     If the slicing job was cancelled this keyword argument will be set to True.</p> <p>Additionally callees may specify <code>overrides</code> for the specified slicing profile, e.g. a different extrusion temperature than defined in the profile or a different layer height.</p> <p>With <code>on_progress</code>, <code>on_progress_args</code> and <code>on_progress_kwargs</code>, callees may specify a callback plus arguments and keyword arguments to call upon progress reports from the slicing job. The progress callback will be called with a keyword argument <code>_progress</code> containing the current slicing progress as a value between 0 and 1 plus all additionally specified args and kwargs.</p> <p>If a different printer profile than the currently selected one is to be used for slicing, its id can be provided via the keyword argument <code>printer_profile_id</code>.</p> <p>If the <code>source_path</code> is to be a sliced at a different position than the print bed center, this <code>position</code> can be supplied as a dictionary defining the <code>x</code> and <code>y</code> coordinate in print bed coordinates of the model's center.</p> <p>Parameters:</p> <ul> <li> slicer_name             (<code>str</code>)         \u2013          <p>The identifier of the slicer to use for slicing.</p> </li> <li> source_path             (<code>str</code>)         \u2013          <p>The absolute path to the source file to slice.</p> </li> <li> dest_path             (<code>str</code>)         \u2013          <p>The absolute path to the destination file to slice to.</p> </li> <li> profile_name             (<code>str</code>)         \u2013          <p>The name of the slicing profile to use.</p> </li> <li> callback             (<code>callable</code>)         \u2013          <p>A callback to call after slicing has finished.</p> </li> <li> callback_args             (<code>list or tuple</code>)         \u2013          <p>Arguments of the callback to call after slicing has finished. Defaults to an empty list.</p> </li> <li> callback_kwargs             (<code>dict</code>)         \u2013          <p>Keyword arguments for the callback to call after slicing has finished, will be extended by <code>_analysis</code>, <code>_error</code> or <code>_cancelled</code> as described above! Defaults to an empty dictionary.</p> </li> <li> overrides             (<code>dict</code>)         \u2013          <p>Overrides for the printer profile to apply.</p> </li> <li> on_progress             (<code>callable</code>)         \u2013          <p>Callback to call upon slicing progress.</p> </li> <li> on_progress_args             (<code>list or tuple</code>)         \u2013          <p>Arguments of the progress callback. Defaults to an empty list.</p> </li> <li> on_progress_kwargs             (<code>dict</code>)         \u2013          <p>Keyword arguments of the progress callback, will be extended by <code>_progress</code> as described above! Defaults to an empty dictionary.</p> </li> <li> printer_profile_id             (<code>str</code>)         \u2013          <p>Identifier of the printer profile for which to slice, if another than the one currently selected is to be used.</p> </li> <li> position             (<code>dict</code>)         \u2013          <p>Dictionary containing the <code>x</code> and <code>y</code> coordinate in the print bed's coordinate system of the sliced model's center. If not provided the model will be positioned at the print bed's center. Example: <code>dict(x=10,y=20)</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>~octoprint.slicing.exceptions.UnknownSlicer</code>           \u2013          <p>The slicer specified via <code>slicer_name</code> is unknown.</p> </li> <li> <code>~octoprint.slicing.exceptions.SlicerNotConfigured</code>           \u2013          <p>The slice specified via <code>slicer_name</code> is not configured yet.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingProfile","title":"<code>SlicingProfile(slicer, name, data, display_name = None, description = None, default = False)</code>","text":"<p>A wrapper for slicing profiles, both meta data and actual profile data.</p> <p>Parameters:</p> <ul> <li> slicer             (<code>str</code>)         \u2013          <p>Identifier of the slicer this profile belongs to.</p> </li> <li> name             (<code>str</code>)         \u2013          <p>Identifier of this slicing profile.</p> </li> <li> data             (<code>object</code>)         \u2013          <p>Profile data, actual structure depends on individual slicer implementation.</p> </li> <li> display_name             (<code>str</code>)         \u2013          <p>Displayable name for this slicing profile.</p> </li> <li> description             (<code>str</code>)         \u2013          <p>Description of this slicing profile.</p> </li> <li> default             (<code>bool</code>)         \u2013          <p>Whether this is the default slicing profile for the slicer.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/#octoprint.slicing.TemporaryProfile","title":"<code>TemporaryProfile(save_profile, profile, overrides = None)</code>","text":"<p>A wrapper for a temporary slicing profile to be used for a slicing job, based on a :class:<code>SlicingProfile</code> with optional <code>overrides</code> applied through the supplied <code>save_profile</code> method.</p> <p>Usage example:</p> <p>.. code-block:: python</p> <p>temporary = TemporaryProfile(my_slicer.save_slicer_profile, my_default_profile,                                 overrides=my_overrides)    with (temporary) as profile_path:        my_slicer.do_slice(..., profile_path=profile_path, ...)</p> <p>Parameters:</p> <ul> <li> save_profile             (<code>callable</code>)         \u2013          <p>Method to use for saving the temporary profile, also responsible for applying the supplied <code>overrides</code>. This will be called according to the method signature of :meth:<code>~octoprint.plugin.SlicerPlugin.save_slicer_profile</code>.</p> </li> <li> profile             (<code>SlicingProfile</code>)         \u2013          <p>The profile from which to derive the temporary profile.</p> </li> <li> overrides             (<code>dict</code>)         \u2013          <p>Optional overrides to apply to the <code>profile</code> for creation of the temporary profile.</p> </li> </ul>"},{"location":"reference/octoprint/slicing/exceptions/","title":"octoprint.slicing.exceptions","text":"<p>Slicing related exceptions.</p> <p>.. autoclass:: SlicingException</p> <p>.. autoclass:: SlicingCancelled    :show-inheritance:</p> <p>.. autoclass:: SlicerException    :show-inheritance:</p> <p>.. autoclass:: UnknownSlicer    :show-inheritance:</p> <p>.. autoclass:: SlicerNotConfigured    :show-inheritance:</p> <p>.. autoclass:: ProfileException</p> <p>.. autoclass:: UnknownProfile    :show-inheritance:</p> <p>.. autoclass:: ProfileAlreadyExists    :show-inheritance:</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.CouldNotDeleteProfile","title":"<code>CouldNotDeleteProfile(slicer, profile, cause = None, *args, **kwargs)</code>","text":"<p>         Bases: <code>ProfileException</code></p> <p>Raised if there is an unexpected error trying to delete a known profile.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.ProfileAlreadyExists","title":"<code>ProfileAlreadyExists(slicer, profile, *args, **kwargs)</code>","text":"<p>         Bases: <code>ProfileException</code></p> <p>Raised if a slicing profile already exists and must not be overwritten.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.ProfileException","title":"<code>ProfileException(slicer, profile, *args, **kwargs)</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base exception of all slicing profile related exceptions.</p> <p>.. attribute:: slicer</p> <p>Identifier of the slicer to which the profile belongs.</p> <p>.. attribute:: profile</p> <p>Identifier of the profile for which the exception was raised.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicerException","title":"<code>SlicerException(slicer, *args, **kwargs)</code>","text":"<p>         Bases: <code>SlicingException</code></p> <p>Base exception of all slicer related exceptions.</p> <p>.. attribute:: slicer</p> <p>Identifier of the slicer for which the exception was raised.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicerNotConfigured","title":"<code>SlicerNotConfigured(slicer, *args, **kwargs)</code>","text":"<p>         Bases: <code>SlicerException</code></p> <p>Raised if a slicer is not yet configured but must be configured to proceed.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicingCancelled","title":"<code>SlicingCancelled</code>","text":"<p>         Bases: <code>SlicingException</code></p> <p>Raised if a slicing job was cancelled.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicingException","title":"<code>SlicingException</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base exception of all slicing related exceptions.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.UnknownProfile","title":"<code>UnknownProfile(slicer, profile, *args, **kwargs)</code>","text":"<p>         Bases: <code>ProfileException</code></p> <p>Raised if a slicing profile does not exist but must exist to proceed.</p>"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.UnknownSlicer","title":"<code>UnknownSlicer(slicer, *args, **kwargs)</code>","text":"<p>         Bases: <code>SlicerException</code></p> <p>Raised if a slicer is unknown.</p>"},{"location":"reference/octoprint/systemcommands/","title":"octoprint.systemcommands","text":"<p>This module represents OctoPrint's system and server commands.</p>"},{"location":"reference/octoprint/util/","title":"octoprint.util","text":"<p>This module bundles commonly used utility methods or helper classes that are used in multiple places within OctoPrint's source code.</p> <p>Changed in version 1.8.0</p>"},{"location":"reference/octoprint/util/#octoprint.util.deprecated","title":"<code>deprecated = warning_decorator_factory(DeprecationWarning)</code>  <code>module-attribute</code>","text":"<p>A decorator for deprecated methods. Logs a deprecation warning via Python's <code>:mod:</code>warnings` module including the supplied <code>message</code>. The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional <code>stacklevel</code> parameter. If both <code>since</code> and <code>includedoc</code> are provided, a deprecation warning will also be added to the function's docstring by providing or extending its <code>__doc__</code> property.</p> <p>Parameters:</p> <ul> <li> message             (<code>string</code>)         \u2013          <p>The message to include in the deprecation warning.</p> </li> <li> stacklevel             (<code>int</code>)         \u2013          <p>Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden <code>getattr</code> methods).</p> </li> <li> includedoc             (<code>string</code>)         \u2013          <p>Message about the deprecation to include in the wrapped function's docstring.</p> </li> <li> extenddoc             (<code>boolean</code>)         \u2013          <p>If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message.</p> </li> <li> since             (<code>string</code>)         \u2013          <p>Version since when the function was deprecated, must be present for the docstring to get extended.</p> </li> </ul> <p>Returns:</p> <ul> <li> function        \u2013          <p>The wrapped function with the deprecation warnings in place.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.pending_deprecation","title":"<code>pending_deprecation = warning_decorator_factory(PendingDeprecationWarning)</code>  <code>module-attribute</code>","text":"<p>A decorator for methods pending deprecation. Logs a pending deprecation warning via Python's <code>:mod:</code>warnings` module including the supplied <code>message</code>. The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional <code>stacklevel</code> parameter. If both <code>since</code> and <code>includedoc</code> are provided, a deprecation warning will also be added to the function's docstring by providing or extending its <code>__doc__</code> property.</p> <p>Parameters:</p> <ul> <li> message             (<code>string</code>)         \u2013          <p>The message to include in the deprecation warning.</p> </li> <li> stacklevel             (<code>int</code>)         \u2013          <p>Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden <code>getattr</code> methods).</p> </li> <li> extenddoc             (<code>boolean</code>)         \u2013          <p>If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message.</p> </li> <li> includedoc             (<code>string</code>)         \u2013          <p>Message about the deprecation to include in the wrapped function's docstring.</p> </li> <li> since             (<code>string</code>)         \u2013          <p>Version since when the function was deprecated, must be present for the docstring to get extended.</p> </li> </ul> <p>Returns:</p> <ul> <li> function        \u2013          <p>The wrapped function with the deprecation warnings in place.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.variable_deprecated","title":"<code>variable_deprecated = warning_factory(DeprecationWarning)</code>  <code>module-attribute</code>","text":"<p>A function for deprecated variables. Logs a deprecation warning via Python's <code>:mod:</code>warnings` module including the supplied <code>message</code>. The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional <code>stacklevel</code> parameter.</p> <p>Parameters:</p> <ul> <li> message             (<code>string</code>)         \u2013          <p>The message to include in the deprecation warning.</p> </li> <li> stacklevel             (<code>int</code>)         \u2013          <p>Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden <code>getattr</code> methods).</p> </li> <li> since             (<code>string</code>)         \u2013          <p>Version since when the function was deprecated, must be present for the docstring to get extended.</p> </li> </ul> <p>Returns:</p> <ul> <li> value        \u2013          <p>The value of the variable with the deprecation warnings in place.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.variable_pending_deprecation","title":"<code>variable_pending_deprecation = warning_factory(PendingDeprecationWarning)</code>  <code>module-attribute</code>","text":"<p>A decorator for variables pending deprecation. Logs a pending deprecation warning via Python's <code>:mod:</code>warnings` module including the supplied <code>message</code>. The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional <code>stacklevel</code> parameter.</p> <p>Parameters:</p> <ul> <li> message             (<code>string</code>)         \u2013          <p>The message to include in the deprecation warning.</p> </li> <li> stacklevel             (<code>int</code>)         \u2013          <p>Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden <code>getattr</code> methods).</p> </li> <li> since             (<code>string</code>)         \u2013          <p>Version since when the function was deprecated, must be present for the docstring to get extended.</p> </li> </ul> <p>Returns:</p> <ul> <li> value        \u2013          <p>The value of the variable with the deprecation warnings in place.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.CaseInsensitiveSet","title":"<code>CaseInsensitiveSet(*args)</code>","text":"<p>         Bases: <code>Set</code></p> <p>Basic case insensitive set</p> <p>Any str values will be stored and compared in lower case. Other value types are left as-is.</p>"},{"location":"reference/octoprint/util/#octoprint.util.RepeatedTimer","title":"<code>RepeatedTimer(interval, function, args = None, kwargs = None, run_first = False, condition = None, on_condition_false = None, on_cancelled = None, on_finish = None, daemon = True)</code>","text":"<p>         Bases: <code>threading.Thread</code></p> <p>This class represents an action that should be run repeatedly in an interval. It is similar to python's own :class:<code>threading.Timer</code> class, but instead of only running once the <code>function</code> will be run again and again, sleeping the stated <code>interval</code> in between.</p> <p>RepeatedTimers are started, as with threads, by calling their <code>start()</code> method. The timer can be stopped (in between runs) by calling the :func:<code>cancel</code> method. The interval the time waited before execution of a loop may not be exactly the same as the interval specified by the user.</p> <p>For example:</p> <p>.. code-block:: python</p> <p>def hello():        print(\"Hello World!\")</p> <p>t = RepeatedTimer(1.0, hello)    t.start() # prints \"Hello World!\" every second</p> <p>Another example with dynamic interval and loop condition:</p> <p>.. code-block:: python</p> <p>count = 0    maximum = 5    factor = 1</p> <p>def interval():        global count        global factor        return count * factor</p> <p>def condition():        global count        global maximum        return count &lt;= maximum</p> <p>def hello():        print(\"Hello World!\")</p> <pre><code>   global count\n   count += 1\n</code></pre> <p>t = RepeatedTimer(interval, hello, run_first=True, condition=condition)    t.start() # prints \"Hello World!\" 5 times, printing the first one              # directly, then waiting 1, 2, 3, 4s in between (adaptive interval)</p> <p>Parameters:</p> <ul> <li> interval             (<code>float or callable</code>)         \u2013          <p>The interval between each <code>function</code> call, in seconds. Can also be a callable returning the interval to use, in case the interval is not static.</p> </li> <li> function             (<code>callable</code>)         \u2013          <p>The function to call.</p> </li> <li> args             (<code>list or tuple</code>)         \u2013          <p>The arguments for the <code>function</code> call. Defaults to an empty list.</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>The keyword arguments for the <code>function</code> call. Defaults to an empty dict.</p> </li> <li> run_first             (<code>boolean</code>)         \u2013          <p>If set to True, the function will be run for the first time before the first wait period. If set to False (the default), the function will be run for the first time after the first wait period.</p> </li> <li> condition             (<code>callable</code>)         \u2013          <p>Condition that needs to be True for loop to continue. Defaults to <code>lambda: True</code>.</p> </li> <li> on_condition_false             (<code>callable</code>)         \u2013          <p>Callback to call when the timer finishes due to condition becoming false. Will be called before the <code>on_finish</code> callback.</p> </li> <li> on_cancelled             (<code>callable</code>)         \u2013          <p>Callback to call when the timer finishes due to being cancelled. Will be called before the <code>on_finish</code> callback.</p> </li> <li> on_finish             (<code>callable</code>)         \u2013          <p>Callback to call when the timer finishes, either due to being cancelled or since the condition became false.</p> </li> <li> daemon             (<code>bool</code>)         \u2013          <p>daemon flag to set on underlying thread.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.ResettableTimer","title":"<code>ResettableTimer(interval, function, args = None, kwargs = None, on_reset = None, on_cancelled = None, daemon = True)</code>","text":"<p>         Bases: <code>threading.Thread</code></p> <p>This class represents an action that should be run after a specified amount of time. It is similar to python's own :class:<code>threading.Timer</code> class, with the addition of being able to reset the counter to zero.</p> <p>ResettableTimers are started, as with threads, by calling their <code>start()</code> method. The timer can be stopped (in between runs) by calling the :func:<code>cancel</code> method. Resetting the counter can be done with the :func:<code>reset</code> method.</p> <p>For example:</p> <p>.. code-block:: python</p> <p>def hello():        print(\"Ran hello() at {}\").format(time.time())</p> <p>t = ResettableTimer(60.0, hello)    t.start()    print(\"Started at {}\").format(time.time())    time.sleep(30)    t.reset()    print(\"Reset at {}\").format(time.time())</p> <p>Parameters:</p> <ul> <li> interval             (<code>float or callable</code>)         \u2013          <p>The interval before calling <code>function</code>, in seconds. Can also be a callable returning the interval to use, in case the interval is not static.</p> </li> <li> function             (<code>callable</code>)         \u2013          <p>The function to call.</p> </li> <li> args             (<code>list or tuple</code>)         \u2013          <p>The arguments for the <code>function</code> call. Defaults to an empty list.</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>The keyword arguments for the <code>function</code> call. Defaults to an empty dict.</p> </li> <li> on_cancelled             (<code>callable</code>)         \u2013          <p>Callback to call when the timer finishes due to being cancelled.</p> </li> <li> on_reset             (<code>callable</code>)         \u2013          <p>Callback to call when the timer is reset.</p> </li> <li> daemon             (<code>bool</code>)         \u2013          <p>daemon flag to set on underlying thread.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.chunks","title":"<code>chunks(l, n)</code>","text":"<p>Yield successive n-sized chunks from l.</p> <p>Taken from http://stackoverflow.com/a/312464/2028598</p>"},{"location":"reference/octoprint/util/#octoprint.util.count","title":"<code>count(gen)</code>","text":"<p>Used instead of len(generator), which doesn't work</p>"},{"location":"reference/octoprint/util/#octoprint.util.deserialize","title":"<code>deserialize(filename, encoding = 'utf-8')</code>","text":"<p>Deserializes data from a file</p> <p>In the current implementation this uses json.loads and - if the file is found to be compressed - zlib.decompress.</p> <p>Parameters:</p> <ul> <li> filename             (<code>str</code>)         \u2013          <p>The file to deserialize from</p> </li> <li> encoding             (<code>str</code>)         \u2013          <p>The encoding to use for the file, defaults to utf-8</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>The deserialized data structure</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_contains_keys","title":"<code>dict_contains_keys(keys, dictionary)</code>","text":"<p>Recursively deep-checks if <code>dictionary</code> contains all keys found in <code>keys</code>.</p> <p>Example::</p> <pre><code>&gt;&gt;&gt; positive = dict(foo=\"some_other_bar\", fnord=dict(b=100))\n&gt;&gt;&gt; negative = dict(foo=\"some_other_bar\", fnord=dict(b=100, d=20))\n&gt;&gt;&gt; dictionary = dict(foo=\"bar\", fnord=dict(a=1, b=2, c=3))\n&gt;&gt;&gt; dict_contains_keys(positive, dictionary)\nTrue\n&gt;&gt;&gt; dict_contains_keys(negative, dictionary)\nFalse\n</code></pre> <p>Parameters:</p> <ul> <li> a             (<code>dict</code>)         \u2013          <p>The dictionary to check for the keys from <code>b</code>.</p> </li> <li> b             (<code>dict</code>)         \u2013          <p>The dictionary whose keys to check <code>a</code> for.</p> </li> </ul> <p>Returns:</p> <ul> <li> boolean        \u2013          <p>True if all keys found in <code>b</code> are also present in <code>a</code>, False otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_filter","title":"<code>dict_filter(dictionary, filter_function)</code>","text":"<p>Filters a dictionary with the provided filter_function</p> <p>Example::</p> <pre><code>&gt;&gt;&gt; data = dict(key1=\"value1\", key2=\"value2\", other_key=\"other_value\", foo=\"bar\", bar=\"foo\")\n&gt;&gt;&gt; dict_filter(data, lambda k, v: k.startswith(\"key\")) == dict(key1=\"value1\", key2=\"value2\")\nTrue\n&gt;&gt;&gt; dict_filter(data, lambda k, v: v.startswith(\"value\")) == dict(key1=\"value1\", key2=\"value2\")\nTrue\n&gt;&gt;&gt; dict_filter(data, lambda k, v: k == \"foo\" or v == \"foo\") == dict(foo=\"bar\", bar=\"foo\")\nTrue\n&gt;&gt;&gt; dict_filter(data, lambda k, v: False) == dict()\nTrue\n&gt;&gt;&gt; dict_filter(data, lambda k, v: True) == data\nTrue\n&gt;&gt;&gt; dict_filter(None, lambda k, v: True)\nTraceback (most recent call last):\n    ...\nAssertionError\n&gt;&gt;&gt; dict_filter(data, None)\nTraceback (most recent call last):\n    ...\nAssertionError\n</code></pre> <p>Parameters:</p> <ul> <li> dictionary             (<code>dict</code>)         \u2013          <p>The dictionary to filter</p> </li> <li> filter_function             (<code>callable</code>)         \u2013          <p>The filter function to apply, called with key and value of an entry in the dictionary, must return <code>True</code> for values to keep and <code>False</code> for values to strip</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p>A shallow copy of the provided dictionary, stripped of the key-value-pairs for which the <code>filter_function</code> returned <code>False</code></p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_flatten","title":"<code>dict_flatten(dictionary, prefix = '', separator = '.')</code>","text":"<p>Flatten a dictionary.</p> <p>Example::     &gt;&gt;&gt; data = {'a': {'a1': 'a1', 'a2': 'a2'}, 'b': 'b'}     &gt;&gt;&gt; expected = {'a.a1': 'a1', 'a.a2': 'a2', 'b': 'b'}     &gt;&gt;&gt; actual = dict_flatten(data)     &gt;&gt;&gt; shared = {(k, actual[k]) for k in actual if k in expected and actual[k] == expected[k]}     &gt;&gt;&gt; len(shared) == len(expected)     True</p> <p>Parameters:</p> <ul> <li> dictionary         \u2013          <p>the dictionary to flatten</p> </li> <li> prefix         \u2013          <p>the key prefix, initially an empty string</p> </li> <li> separator         \u2013          <p>key separator, '.' by default</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_merge","title":"<code>dict_merge(a, b, leaf_merger = None, in_place = False)</code>","text":"<p>Recursively deep-merges two dictionaries.</p> <p>Based on https://www.xormedia.com/recursively-merge-dictionaries-in-python/</p> <p>Example::</p> <pre><code>&gt;&gt;&gt; a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1))\n&gt;&gt;&gt; b = dict(foo=\"other foo\", fnord=dict(b=2, l=[\"some\", \"list\"]))\n&gt;&gt;&gt; expected = dict(foo=\"other foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"]))\n&gt;&gt;&gt; dict_merge(a, b) == expected\nTrue\n&gt;&gt;&gt; dict_merge(a, None) == a\nTrue\n&gt;&gt;&gt; dict_merge(None, b) == b\nTrue\n&gt;&gt;&gt; dict_merge(None, None) == dict()\nTrue\n&gt;&gt;&gt; def leaf_merger(a, b):\n...     if isinstance(a, list) and isinstance(b, list):\n...         return a + b\n...     raise ValueError()\n&gt;&gt;&gt; result = dict_merge(dict(l1=[3, 4], l2=[1], a=\"a\"), dict(l1=[1, 2], l2=\"foo\", b=\"b\"), leaf_merger=leaf_merger)\n&gt;&gt;&gt; result.get(\"l1\") == [3, 4, 1, 2]\nTrue\n&gt;&gt;&gt; result.get(\"l2\") == \"foo\"\nTrue\n&gt;&gt;&gt; result.get(\"a\") == \"a\"\nTrue\n&gt;&gt;&gt; result.get(\"b\") == \"b\"\nTrue\n&gt;&gt;&gt; c = dict(foo=\"foo\")\n&gt;&gt;&gt; dict_merge(c, {\"bar\": \"bar\"}) is c\nFalse\n&gt;&gt;&gt; dict_merge(c, {\"bar\": \"bar\"}, in_place=True) is c\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> a             (<code>dict</code>)         \u2013          <p>The dictionary to merge <code>b</code> into</p> </li> <li> b             (<code>dict</code>)         \u2013          <p>The dictionary to merge into <code>a</code></p> </li> <li> leaf_merger             (<code>callable</code>)         \u2013          <p>An optional callable to use to merge leaves (non-dict values)</p> </li> <li> in_place             (<code>boolean</code>)         \u2013          <p>If set to True, a will be merged with b in place, meaning a will be modified</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p><code>b</code> deep-merged into <code>a</code></p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_minimal_mergediff","title":"<code>dict_minimal_mergediff(source, target)</code>","text":"<p>Recursively calculates the minimal dict that would be needed to be deep merged with a in order to produce the same result as deep merging a and b.</p> <p>Example::</p> <pre><code>&gt;&gt;&gt; a = dict(foo=dict(a=1, b=2), bar=dict(c=3, d=4))\n&gt;&gt;&gt; b = dict(bar=dict(c=3, d=5), fnord=None)\n&gt;&gt;&gt; c = dict_minimal_mergediff(a, b)\n&gt;&gt;&gt; c == dict(bar=dict(d=5), fnord=None)\nTrue\n&gt;&gt;&gt; dict_merge(a, c) == dict_merge(a, b)\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> source             (<code>dict</code>)         \u2013          <p>Source dictionary</p> </li> <li> target             (<code>dict</code>)         \u2013          <p>Dictionary to compare to source dictionary and derive diff for</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p>The minimal dictionary to deep merge on <code>source</code> to get the same result as deep merging <code>target</code> on <code>source</code>.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.dict_sanitize","title":"<code>dict_sanitize(a, b)</code>","text":"<p>Recursively deep-sanitizes <code>a</code> based on <code>b</code>, removing all keys (and associated values) from <code>a</code> that do not appear in <code>b</code>.</p> <p>Example::</p> <pre><code>&gt;&gt;&gt; a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"]))\n&gt;&gt;&gt; b = dict(foo=None, fnord=dict(a=None, b=None))\n&gt;&gt;&gt; expected = dict(foo=\"foo\", fnord=dict(a=1, b=2))\n&gt;&gt;&gt; dict_sanitize(a, b) == expected\nTrue\n&gt;&gt;&gt; dict_clean(a, b) == expected\nTrue\n</code></pre> <p>Parameters:</p> <ul> <li> a             (<code>dict</code>)         \u2013          <p>The dictionary to clean against <code>b</code>.</p> </li> <li> b             (<code>dict</code>)         \u2013          <p>The dictionary containing the key structure to clean from <code>a</code>.</p> </li> </ul> Results"},{"location":"reference/octoprint/util/#octoprint.util.filter_non_ascii","title":"<code>filter_non_ascii(line)</code>","text":"<p>Filter predicate to test if a line contains non ASCII characters.</p> <p>Parameters:</p> <ul> <li> line             (<code>string</code>)         \u2013          <p>The line to test</p> </li> </ul> <p>Returns:</p> <ul> <li> boolean        \u2013          <p>True if the line contains non ASCII characters, False otherwise.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_bom","title":"<code>get_bom(filename, encoding)</code>","text":"<p>Check if the file has a BOM and if so return it.</p> <p>Parameters:</p> <ul> <li> filename             (<code>str</code>)         \u2013          <p>The file to check.</p> </li> <li> encoding             (<code>str</code>)         \u2013          <p>The encoding to check for.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(bytes) the BOM or None if there is no BOM.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_class","title":"<code>get_class(name)</code>","text":"<p>Retrieves the class object for a given fully qualified class name.</p> <p>Parameters:</p> <ul> <li> name             (<code>string</code>)         \u2013          <p>The fully qualified class name, including all modules separated by <code>.</code></p> </li> </ul> <p>Returns:</p> <ul> <li> type        \u2013          <p>The class if it could be found.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_exception_string","title":"<code>get_exception_string(fmt = \"{type}: '{message}' @ {file}:{function}:{line}\")</code>","text":"<p>Retrieves the exception info of the last raised exception and returns it as a string formatted as <code>&lt;exception type&gt;: &lt;exception message&gt; @ &lt;source file&gt;:&lt;function name&gt;:&lt;line number&gt;</code>.</p> <p>Returns:</p> <ul> <li> string        \u2013          <p>The formatted exception information.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_datetime","title":"<code>get_formatted_datetime(d)</code>","text":"<p>Formats a datetime instance as \"YYYY-mm-dd HH:MM\" and returns the resulting string.</p> <p>Parameters:</p> <ul> <li> d             (<code>datetime.datetime</code>)         \u2013          <p>The datetime instance to format</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>The datetime formatted as \"YYYY-mm-dd HH:MM\"</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_size","title":"<code>get_formatted_size(num)</code>","text":"<p>Formats the given byte count as a human readable rounded size expressed in the most pressing unit among B(ytes), K(ilo)B(ytes), M(ega)B(ytes), G(iga)B(ytes) and T(era)B(ytes), with one decimal place.</p> <p>Based on http://stackoverflow.com/a/1094933/2028598</p> <p>Parameters:</p> <ul> <li> num             (<code>int</code>)         \u2013          <p>The byte count to format</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>The formatted byte count.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_timedelta","title":"<code>get_formatted_timedelta(d)</code>","text":"<p>Formats a timedelta instance as \"HH:MM:ss\" and returns the resulting string.</p> <p>Parameters:</p> <ul> <li> d             (<code>datetime.timedelta</code>)         \u2013          <p>The timedelta instance to format</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>The timedelta formatted as \"HH:MM:ss\"</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.get_fully_qualified_classname","title":"<code>get_fully_qualified_classname(o)</code>","text":"<p>Returns the fully qualified class name for an object.</p> <p>Based on https://stackoverflow.com/a/2020083</p> <p>Parameters:</p> <ul> <li> o         \u2013          <p>the object of which to determine the fqcn</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(str) the fqcn of the object</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.is_allowed_file","title":"<code>is_allowed_file(filename, extensions)</code>","text":"<p>Determines if the provided <code>filename</code> has one of the supplied <code>extensions</code>. The check is done case-insensitive.</p> <p>Parameters:</p> <ul> <li> filename             (<code>string</code>)         \u2013          <p>The file name to check against the extensions.</p> </li> <li> extensions             (<code>list</code>)         \u2013          <p>The extensions to check against, a list of strings</p> </li> </ul> Return"},{"location":"reference/octoprint/util/#octoprint.util.pp","title":"<code>pp(value)</code>","text":"<p>pp(dict()) 'dict()' pp(dict(a=1, b=2, c=3)) 'dict(a=1, b=2, c=3)' pp(set()) 'set()' pp({\"a\", \"b\"}) \"{'a', 'b'}\" pp([\"a\", \"b\", \"d\", \"c\"]) \"['a', 'b', 'd', 'c']\" pp((\"a\", \"b\", \"d\", \"c\")) \"('a', 'b', 'd', 'c')\" pp(\"foo\") \"'foo'\" pp([dict(a=1, b=2), {\"a\", \"c\", \"b\"}, (1, 2), None, 1, True, \"foo\"]) \"[dict(a=1, b=2), {'a', 'b', 'c'}, (1, 2), None, 1, True, 'foo']\"</p>"},{"location":"reference/octoprint/util/#octoprint.util.serialize","title":"<code>serialize(filename, data, encoding = 'utf-8', compressed = True)</code>","text":"<p>Serializes data to a file</p> <p>In the current implementation this uses json.dumps.</p> <p>If <code>compressed</code> is True (the default), the serialized data put through zlib.compress.</p> <p>Supported data types are listed at the bottom of :func:<code>octoprint.util.comprehensive_json</code>, and include some data types that are not supported by json.dumps by default.</p> <p>This is not thread-safe, if concurrent access is required, the caller needs to ensure that only one thread is writing to the file at any given time.</p> <p>Parameters:</p> <ul> <li> filename             (<code>str</code>)         \u2013          <p>The file to write to</p> </li> <li> data             (<code>object</code>)         \u2013          <p>The data to serialize</p> </li> <li> encoding             (<code>str</code>)         \u2013          <p>The encoding to use for the file</p> </li> <li> compressed             (<code>bool</code>)         \u2013          <p>Whether to compress the data before writing it to the file</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.to_bytes","title":"<code>to_bytes(s_or_u: Union[str, bytes], encoding: str = 'utf-8', errors: str = 'strict') -&gt; bytes</code>","text":"<p>Make sure <code>s_or_u</code> is a byte string.</p> <p>Parameters:</p> <ul> <li> s_or_u             (<code>str or bytes</code>)         \u2013          <p>The value to convert</p> </li> <li> encoding             (<code>str</code>)         \u2013          <p>encoding to use if necessary, see :meth:<code>python:str.encode</code></p> </li> <li> errors             (<code>str</code>)         \u2013          <p>error handling to use if necessary, see :meth:<code>python:str.encode</code></p> </li> </ul> <p>Returns:</p> <ul> <li> bytes(            <code>bytes</code> )        \u2013          <p>converted bytes.</p> </li> </ul>"},{"location":"reference/octoprint/util/#octoprint.util.to_unicode","title":"<code>to_unicode(s_or_u: Union[str, bytes], encoding: str = 'utf-8', errors: str = 'strict') -&gt; str</code>","text":"<p>Make sure <code>s_or_u</code> is a string (str).</p> <p>Parameters:</p> <ul> <li> s_or_u             (<code>str or bytes</code>)         \u2013          <p>The value to convert</p> </li> <li> encoding             (<code>str</code>)         \u2013          <p>encoding to use if necessary, see :meth:<code>python:bytes.decode</code></p> </li> <li> errors             (<code>str</code>)         \u2013          <p>error handling to use if necessary, see :meth:<code>python:bytes.decode</code></p> </li> </ul> <p>Returns:</p> <ul> <li> str(            <code>str</code> )        \u2013          <p>converted string.</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/","title":"octoprint.util.comm","text":""},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_command","title":"<code>regex_command = re.compile('^\\\\s*((?P&lt;codeGM&gt;[GM]\\\\d+)(\\\\.(?P&lt;subcode&gt;\\\\d+))?|(?P&lt;codeT&gt;T)\\\\d+|(?P&lt;codeF&gt;F)\\\\d+)')</code>  <code>module-attribute</code>","text":"<p>Regex for a GCODE command.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_e_positions","title":"<code>regex_e_positions = re.compile(f'E(?P&lt;id&gt;\\\\d+):\\\\s*(?P&lt;value&gt;{regex_float_pattern})')</code>  <code>module-attribute</code>","text":"<p>Regex for matching multiple E coordinates in a position report.</p> Groups will be as follows <ul> <li><code>id</code>: id of the extruder or which the position is reported</li> <li><code>value</code>: reported position value</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_firmware_splitter","title":"<code>regex_firmware_splitter = re.compile('(^|\\\\s+)([A-Z][A-Z0-9_]*):')</code>  <code>module-attribute</code>","text":"<p>Regex to use for splitting M115 responses.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_float","title":"<code>regex_float = re.compile(regex_float_pattern)</code>  <code>module-attribute</code>","text":"<p>Regex for a float value.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_marlinKillError","title":"<code>regex_marlinKillError = re.compile('Heating failed|Thermal Runaway|MAXTEMP triggered|MINTEMP triggered|Invalid extruder number|Watchdog barked|KILL caused')</code>  <code>module-attribute</code>","text":"<p>Regex matching first line of kill causing errors from Marlin.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_minMaxError","title":"<code>regex_minMaxError = re.compile('Error:[0-9]\\\\n')</code>  <code>module-attribute</code>","text":"<p>Regex matching first line of min/max errors from the firmware.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_position","title":"<code>regex_position = re.compile('X:\\\\s*(?P&lt;x&gt;{float})\\\\s*Y:\\\\s*(?P&lt;y&gt;{float})\\\\s*Z:\\\\s*(?P&lt;z&gt;{float})\\\\s*((E:\\\\s*(?P&lt;e&gt;{float}))|(?P&lt;es&gt;(E\\\\d+:\\\\s*{float}\\\\s*)+))'.format(float=regex_float_pattern))</code>  <code>module-attribute</code>","text":"<p>Regex for matching position reporting.</p> Groups will be as follows <ul> <li><code>x</code>: X coordinate</li> <li><code>y</code>: Y coordinate</li> <li><code>z</code>: Z coordinate</li> <li><code>e</code>: E coordinate if present, or</li> <li><code>es</code>: multiple E coordinates if present, to be parsed further with regex_e_positions</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_repetierTempBed","title":"<code>regex_repetierTempBed = re.compile('TargetBed:(?P&lt;target&gt;%s)' % regex_float_pattern)</code>  <code>module-attribute</code>","text":"<p>Regex for matching target temp reporting from Repetier for beds.</p> Groups will be as follows <ul> <li><code>target</code>: new target temperature (float)</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_repetierTempExtr","title":"<code>regex_repetierTempExtr = re.compile('TargetExtr(?P&lt;toolnum&gt;\\\\d+):(?P&lt;target&gt;%s)' % regex_float_pattern)</code>  <code>module-attribute</code>","text":"<p>Regex for matching target temp reporting from Repetier.</p> Groups will be as follows <ul> <li><code>toolnum</code>: number of the extruder to which the target temperature   report belongs (int)</li> <li><code>target</code>: new target temperature (float)</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_resend_linenumber","title":"<code>regex_resend_linenumber = re.compile('(N|N:)?(?P&lt;n&gt;%s)' % regex_int_pattern)</code>  <code>module-attribute</code>","text":"<p>Regex to use for request line numbers in resend requests</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_sdFileOpened","title":"<code>regex_sdFileOpened = re.compile('File opened:\\\\s*(?P&lt;name&gt;.*?)\\\\s+Size:\\\\s*(?P&lt;size&gt;%s)' % regex_int_pattern)</code>  <code>module-attribute</code>","text":"<p>Regex matching \"File opened\" messages from the firmware.</p> Groups will be as follows <ul> <li><code>name</code>: name of the file reported as having been opened (str)</li> <li><code>size</code>: size of the file in bytes (int)</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_sdPrintingByte","title":"<code>regex_sdPrintingByte = re.compile('(?P&lt;current&gt;[0-9]+)/(?P&lt;total&gt;[0-9]+)')</code>  <code>module-attribute</code>","text":"<p>Regex matching SD printing status reports.</p> Groups will be as follows <ul> <li><code>current</code>: current byte position in file being printed</li> <li><code>total</code>: total size of file being printed</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_serial_devices","title":"<code>regex_serial_devices = re.compile('^(?:ttyUSB|ttyACM|tty\\\\.usb|cu\\\\.|cuaU|ttyS|rfcomm).*')</code>  <code>module-attribute</code>","text":"<p>Regex used to filter out valid tty devices</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_temp","title":"<code>regex_temp = re.compile('(^|\\\\s)(?P&lt;sensor&gt;B|C|T(?P&lt;toolnum&gt;\\\\d*)|([\\\\w]+)):\\\\s*(?P&lt;actual&gt;%s)(\\\\s*\\\\/?\\\\s*(?P&lt;target&gt;%s))?' % (regex_float_pattern, regex_float_pattern))</code>  <code>module-attribute</code>","text":"<p>Regex matching temperature entries in line.</p> Groups will be as follows <ul> <li><code>sensor</code>: whole sensor designator, incl. optional <code>toolnum</code>, e.g. \"T1\", \"B\",   \"C\" or anything custom (str)</li> <li><code>toolnum</code>: tool number, if provided, only for T0, T1, etc (int)</li> <li><code>actual</code>: actual temperature (float)</li> <li><code>target</code>: target temperature, if provided (float)</li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regexes_parameters","title":"<code>regexes_parameters = {'floatE': re.compile('(^|[^A-Za-z])[Ee](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatF': re.compile('(^|[^A-Za-z])[Ff](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatP': re.compile('(^|[^A-Za-z])[Pp](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatR': re.compile('(^|[^A-Za-z])[Rr](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatS': re.compile('(^|[^A-Za-z])[Ss](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatX': re.compile('(^|[^A-Za-z])[Xx](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatY': re.compile('(^|[^A-Za-z])[Yy](?P&lt;value&gt;%s)' % regex_float_pattern), 'floatZ': re.compile('(^|[^A-Za-z])[Zz](?P&lt;value&gt;%s)' % regex_float_pattern), 'intN': re.compile('(^|[^A-Za-z])[Nn](?P&lt;value&gt;%s)' % regex_int_pattern), 'intS': re.compile('(^|[^A-Za-z])[Ss](?P&lt;value&gt;%s)' % regex_int_pattern), 'intT': re.compile('(^|[^A-Za-z])[Tt](?P&lt;value&gt;%s)' % regex_int_pattern)}</code>  <code>module-attribute</code>","text":"<p>Regexes for parsing various GCODE command parameters.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.MachineCom","title":"<code>MachineCom(port = None, baudrate = None, callbackObject = None, printerProfileManager = None)</code>","text":""},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.MachineCom.close","title":"<code>close(is_error = False, wait = True, timeout = 10.0, *args, **kwargs)</code>","text":"<p>Closes the connection to the printer.</p> <p>If <code>is_error</code> is False, will attempt to send the <code>beforePrinterDisconnected</code> gcode script. If <code>is_error</code> is False and <code>wait</code> is True, will wait until all messages in the send queue (including the <code>beforePrinterDisconnected</code> gcode script) have been sent to the printer.</p> <p>Parameters:</p> <ul> <li> is_error             (<code>bool</code>)         \u2013          <p>Whether the closing takes place due to an error (True) or not (False, default)</p> </li> <li> wait             (<code>bool</code>)         \u2013          <p>Whether to wait for all messages in the send queue to be processed before closing (True, default) or not (False)</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation","title":"<code>PrintingFileInformation(filename, user = None)</code>","text":"<p>Encapsulates information regarding the current file being printed: file name, current position, total size and time the print started. Allows to reset the current file position to 0 and to calculate the current progress as a floating point value between 0 and 1.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.close","title":"<code>close()</code>","text":"<p>Closes the print job.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.getProgress","title":"<code>getProgress()</code>","text":"<p>The current progress of the file, calculated as relation between file position and absolute size. Returns -1 if file size is None or &lt; 1.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.reset","title":"<code>reset()</code>","text":"<p>Resets the current file position to 0.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.start","title":"<code>start()</code>","text":"<p>Marks the print job as started and remembers the start time.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation","title":"<code>PrintingGcodeFileInformation(filename, offsets_callback = None, current_tool_callback = None, user = None)</code>","text":"<p>         Bases: <code>PrintingFileInformation</code></p> <p>Encapsulates information regarding an ongoing direct print. Takes care of the needed file handle and ensures that the file is closed in case of an error.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.close","title":"<code>close()</code>","text":"<p>Closes the file if it's still open.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.getNext","title":"<code>getNext()</code>","text":"<p>Retrieves the next line for printing.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.start","title":"<code>start()</code>","text":"<p>Opens the file for reading and determines the file size.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingSdFileInformation","title":"<code>PrintingSdFileInformation(filename, size, user = None)</code>","text":"<p>         Bases: <code>PrintingFileInformation</code></p> <p>Encapsulates information regarding an ongoing print from SD.</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.SpecialStreamingGcodeFileInformation","title":"<code>SpecialStreamingGcodeFileInformation</code>","text":"<p>         Bases: <code>StreamingGcodeFileInformation</code></p> <p>For streaming files to the printer that aren't GCODE.</p> <p>Difference to regular StreamingGcodeFileInformation: no checksum requirement, only rudimentary line processing (stripping of whitespace from the end and ignoring of empty lines)</p>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.canonicalize_temperatures","title":"<code>canonicalize_temperatures(parsed, current)</code>","text":"<p>Canonicalizes the temperatures provided in parsed.</p> <p>Will make sure that returned result only contains extruder keys like Tn, so always qualified with a tool number.</p> The algorithm for cleaning up the parsed keys is the following <ul> <li>If <code>T</code> is not included with the reported extruders, return</li> <li>If more than just <code>T</code> is reported:</li> <li>If both <code>T</code> and <code>T0</code> are reported, remove <code>T</code> from     the result.</li> <li>Else set <code>T0</code> to <code>T</code> and delete <code>T</code> (Smoothie extra).</li> <li>If only <code>T</code> is reported, set <code>Tc</code> to <code>T</code> and delete <code>T</code></li> <li>return</li> </ul> <p>Parameters:</p> <ul> <li> parsed             (<code>dict</code>)         \u2013          <p>the parsed temperatures (mapping tool =&gt; (actual, target)) to canonicalize</p> </li> <li> current             (<code>int</code>)         \u2013          <p>the current active extruder</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p>the canonicalized version of <code>parsed</code></p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.gcode_command_for_cmd","title":"<code>gcode_command_for_cmd(cmd)</code>","text":"<p>Tries to parse the provided <code>cmd</code> and extract the GCODE command identifier from it (e.g. \"G0\" for \"G0 X10.0\").</p> <p>Parameters:</p> <ul> <li> cmd             (<code>str</code>)         \u2013          <p>The command to try to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>str or None: The GCODE command identifier if it could be parsed, or None if not.</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_capability_line","title":"<code>parse_capability_line(line)</code>","text":"<p>Parses the provided firmware capability line.</p> <p>Lines are expected to be of the format</p> <pre><code>Cap:&lt;capability name in caps&gt;:&lt;0 or 1&gt;\n</code></pre> <p>e.g.</p> <pre><code>Cap:AUTOREPORT_TEMP:1\nCap:TOGGLE_LIGHTS:0\n</code></pre> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>the line to parse</p> </li> </ul> <p>Returns:</p> <ul> <li> tuple        \u2013          <p>a 2-tuple of the parsed capability name and whether it's on (true) or off (false), or None if the line could not be parsed</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_firmware_line","title":"<code>parse_firmware_line(line)</code>","text":"<p>Parses the provided firmware info line.</p> <p>The result will be a dictionary mapping from the contained keys to the contained values.</p> <p>Valid keys must only contain A-Z, 0-9 and _ and must start with a letter. See the unit tests for valid and invalid examples. There sadly is no existing specification of the key format, but this is the format extracted from real life logs.</p> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>the line to parse</p> </li> </ul> <p>Returns:</p> <ul> <li> dict        \u2013          <p>a dictionary with the parsed data</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_position_line","title":"<code>parse_position_line(line)</code>","text":"<p>Parses the provided M114 response line and returns the parsed coordinates.</p> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>the line to parse</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>dict or None: the parsed coordinates, or None if no coordinates could be parsed</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_resend_line","title":"<code>parse_resend_line(line)</code>","text":"<p>Parses the provided resend line and returns requested line number.</p> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>the line to parse</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>int or None: the extracted line number to resend, or None if no number could be extracted</p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_temperature_line","title":"<code>parse_temperature_line(line, current)</code>","text":"<p>Parses the provided temperature line.</p> <p>The result will be a dictionary mapping from the extruder or bed key to a tuple with current and target temperature. The result will be canonicalized with :func:<code>canonicalize_temperatures</code> before returning.</p> <p>Parameters:</p> <ul> <li> line             (<code>str</code>)         \u2013          <p>the temperature line to parse</p> </li> <li> current             (<code>int</code>)         \u2013          <p>the current active extruder</p> </li> </ul> <p>Returns:</p> <ul> <li> tuple        \u2013          <p>a 2-tuple with the maximum tool number and a dict mapping from key to (actual, target) tuples, with key either matching <code>Tn</code> for <code>n &gt;= 0</code> or <code>B</code></p> </li> </ul>"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.upload_cli","title":"<code>upload_cli()</code>","text":"<p>Uploads  to  on SD card of printer on port , using baudrate ."},{"location":"reference/octoprint/util/commandline/","title":"octoprint.util.commandline","text":""},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller","title":"<code>CommandlineCaller()</code>","text":"<p>The CommandlineCaller is a utility class that allows running command line commands while logging their stdout and stderr via configurable callback functions.</p> <p>Callbacks are expected to have a signature matching</p> <p>.. code-block:: python</p> <p>def callback(*lines):        do_something_with_the_passed_lines()</p> <p>The class utilizes sarge underneath.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>from octoprint.util.commandline import CommandLineCaller, CommandLineError</p> <p>def log(prefix, *lines):        for line in lines:            print(\"{} {}\".format(prefix, line))</p> <p>def log_stdout(lines):        log(\"&gt;&gt;&gt;\", lines)</p> <p>def log_stderr(lines):        log(\"!!!\", lines)</p> <p>def log_call(lines)        log(\"---\", lines)</p> <p>caller = CommandLineCaller()    caller.on_log_call = log_call    caller.on_log_stdout = log_stdout    caller.on_log_stderr = log_stderr</p> <p>try:        caller.checked_call([\"some\", \"command\", \"with\", \"parameters\"])    except CommandLineError as err:        print(\"Command returned {}\".format(err.returncode))    else:        print(\"Command finished successfully\")</p>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_call","title":"<code>on_log_call = lambda : None</code>  <code>instance-attribute</code>","text":"<p>Callback for the called command line</p>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_stderr","title":"<code>on_log_stderr = lambda : None</code>  <code>instance-attribute</code>","text":"<p>Callback for stderr output</p>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_stdout","title":"<code>on_log_stdout = lambda : None</code>  <code>instance-attribute</code>","text":"<p>Callback for stdout output</p>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.call","title":"<code>call(command: Union[str, List[str], Tuple[str]], delimiter: bytes = b'\\n', buffer_size: int = -1, logged: bool = True, **kwargs: bool) -&gt; Tuple[Optional[int], List[str], List[str]]</code>","text":"<p>Calls a command</p> <p>Parameters:</p> <ul> <li> command             (<code>list, tuple or str</code>)         \u2013          <p>command to call</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>additional keyword arguments to pass to the sarge <code>run</code> call (note that <code>_async</code>,            <code>stdout</code> and <code>stderr</code> will be overwritten)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tuple[Optional[int], List[str], List[str]]</code>         \u2013          <p>(tuple) a 3-tuple of return code, full stdout and full stderr output</p> </li> </ul>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.checked_call","title":"<code>checked_call(command: Union[str, List[str], Tuple[str]], **kwargs: Union[str, List[str], Tuple[str]]) -&gt; Tuple[int, List[str], List[str]]</code>","text":"<p>Calls a command and raises an error if it doesn't return with return code 0</p> <p>Parameters:</p> <ul> <li> command             (<code>list, tuple or str</code>)         \u2013          <p>command to call</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>additional keyword arguments to pass to the sarge <code>run</code> call (note that <code>_async</code>,            <code>stdout</code> and <code>stderr</code> will be overwritten)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tuple[int, List[str], List[str]]</code>         \u2013          <p>(tuple) a 3-tuple of return code, full stdout and full stderr output</p> </li> </ul>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineError","title":"<code>CommandlineError(returncode, stdout, stderr)</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Raised by func:<code>~octoprint.util.commandline.CommandLineCaller.checked_call</code> on non zero return codes</p> <p>Parameters:</p> <ul> <li> returncode             (<code>int</code>)         \u2013          <p>the return code of the command</p> </li> <li> stdout             (<code>str</code>)         \u2013          <p>the stdout output produced by the command</p> </li> <li> stderr             (<code>str</code>)         \u2013          <p>the stderr output produced by the command</p> </li> </ul>"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.clean_ansi","title":"<code>clean_ansi(line: Union[str, bytes]) -&gt; Union[str, bytes]</code>","text":"<p>Removes ANSI control codes from <code>line</code>.</p> <p>Note: This function also still supports an input of <code>bytes</code>, leading to an <code>output</code> of <code>bytes</code>. This if for reasons of backwards compatibility only, should no longer be used and considered to be deprecated and to be removed in a future version of OctoPrint. A warning will be logged.</p> <p>Parameters:</p> <ul> <li> line             (<code>str or bytes</code>)         \u2013          <p>the line to process</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[str, bytes]</code>         \u2013          <p>(str or bytes) The line without any ANSI control codes</p> </li> </ul> <p>.. versionchanged:: 1.8.0</p> <p>Usage as <code>clean_ansi(line: bytes) -&gt; bytes</code> is now deprecated and will be removed    in a future version of OctoPrint.</p>"},{"location":"reference/octoprint/util/connectivity/","title":"octoprint.util.connectivity","text":""},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker","title":"<code>ConnectivityChecker(interval, host, port, name = None, enabled = True, on_change = None)</code>","text":"<p>Regularly checks for online connectivity.</p> <p>Tries to open a connection to the provided <code>host</code> and <code>port</code> every <code>interval</code> seconds and sets the <code>online</code> status accordingly.</p> <p>If a <code>name</code>is provided, also tries to resolve that name to a valid IP address during connectivity check and only set <code>online</code> to <code>True</code> if that succeeds as well.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.enabled","title":"<code>enabled</code>  <code>writable</code> <code>property</code>","text":"<p>Whether the check is enabled or not.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.host","title":"<code>host</code>  <code>writable</code> <code>property</code>","text":"<p>DNS host to query.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.interval","title":"<code>interval</code>  <code>writable</code> <code>property</code>","text":"<p>Interval between consecutive automatic checks.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.online","title":"<code>online</code>  <code>property</code>","text":"<p>Current online status, True if online, False if offline.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.port","title":"<code>port</code>  <code>writable</code> <code>property</code>","text":"<p>DNS port to query.</p>"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.check_immediately","title":"<code>check_immediately()</code>","text":"<p>Check immediately and return result.</p>"},{"location":"reference/octoprint/util/dev/","title":"octoprint.util.dev","text":"<p>This module provides a bunch of utility methods and helpers FOR DEVELOPMENT ONLY.</p>"},{"location":"reference/octoprint/util/dev/#octoprint.util.dev.duration_log","title":"<code>duration_log(context = None, log = None)</code>","text":"<p>Context manager to log the duration of the wrapped code block.</p> <p>If no <code>log</code> function is provided will use a <code>debug</code> python logger for <code>octoprint.util.dev</code>.</p> <p><code>context</code> can be set to give some textual context in the output.</p> <p>Parameters:</p> <ul> <li> context             (<code>str</code>)         \u2013          <p>A custom string to give some textual context in the output.</p> </li> <li> log             (<code>callable</code>)         \u2013          <p>The log function to use to log the execution duration.</p> </li> </ul>"},{"location":"reference/octoprint/util/dev/#octoprint.util.dev.log_duration","title":"<code>log_duration(log = None, with_args = False)</code>","text":"<p>Decorator that logs the execution duration of the annotated function.</p> <p>Parameters:</p> <ul> <li> log             (<code>callable</code>)         \u2013          <p>The logging function to use.</p> </li> <li> with_args             (<code>bool</code>)         \u2013          <p>Whether to include the calling arguments in the logged output or not.</p> </li> </ul>"},{"location":"reference/octoprint/util/files/","title":"octoprint.util.files","text":""},{"location":"reference/octoprint/util/files/#octoprint.util.files.find_collision_free_name","title":"<code>find_collision_free_name(filename, extension, existing_filenames, max_power = 2)</code>","text":"<p>Tries to find a collision free translation of \".\" to the 8.3 DOS compatible format, preventing collisions with any of the <code>existing_filenames</code>. <p>First strips all of <code>.\"/\\[]:;=,</code> from the filename and extensions, converts them to lower case and truncates the <code>extension</code> to a maximum length of 3 characters.</p> <p>If the filename is already equal or less than 8 characters in length after that procedure and \".\" are not contained in the <code>existing_files</code>, that concatenation will be returned as the result. <p>If not, the following algorithm will be applied to try to find a collision free name::</p> <pre><code>set counter := power := 1\nwhile counter &lt; 10^max_power:\n    set truncated := substr(filename, 0, 6 - power + 1) + \"~\" + counter\n    set result := \"&lt;truncated&gt;.&lt;extension&gt;\"\n    if result is collision free:\n        return result\n    counter++\n    if counter &gt;= 10 ** power:\n        power++\nraise ValueError\n</code></pre> <p>This will basically -- for a given original filename of <code>some_filename</code> and an extension of <code>gco</code> -- iterate through names of the format <code>some_f~1.gco</code>, <code>some_f~2.gco</code>, ..., <code>some_~10.gco</code>, <code>some_~11.gco</code>, ..., <code>&lt;prefix&gt;~&lt;n&gt;.gco</code> for <code>n</code> less than 10 ^ <code>max_power</code>, returning as soon as one is found that is not colliding.</p> <p>Parameters:</p> <ul> <li> filename             (<code>string</code>)         \u2013          <p>The filename without the extension to convert to 8.3.</p> </li> <li> extension             (<code>string</code>)         \u2013          <p>The extension to convert to 8.3 -- will be truncated to 3 characters if it's longer than that.</p> </li> <li> existing_filenames             (<code>list</code>)         \u2013          <p>A list of existing filenames to prevent name collisions with.</p> </li> <li> max_power             (<code>int</code>)         \u2013          <p>Limits the possible attempts of generating a collision free name to 10 ^ <code>max_power</code> variations. Defaults to 2, so the name generation will maximally reach <code>&lt;name&gt;~99.&lt;ext&gt;</code> before aborting and raising an exception.</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>A 8.3 representation of the provided original filename, ensured to not collide with the provided <code>existing_filenames</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>No collision free name could be found.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; find_collision_free_name(\"test1234\", \"gco\", [])\n'test1234.gco'\n&gt;&gt;&gt; find_collision_free_name(\"test1234\", \"gcode\", [])\n'test1234.gco'\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", [])\n'test12~1.gco'\n&gt;&gt;&gt; find_collision_free_name(\"test 123\", \"gco\", [])\n'test_123.gco'\n&gt;&gt;&gt; find_collision_free_name(\"test1234\", \"g o\", [])\n'test1234.g_o'\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", [\"/test12~1.gco\"])\n'test12~2.gco'\n&gt;&gt;&gt; many_files = [\"/test12~{}.gco\".format(x) for x in range(10)[1:]]\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", many_files)\n'test1~10.gco'\n&gt;&gt;&gt; many_more_files = many_files + [\"/test1~{}.gco\".format(x) for x in range(10, 99)]\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", many_more_files)\n'test1~99.gco'\n&gt;&gt;&gt; many_more_files_plus_one = many_more_files + [\"/test1~99.gco\"]\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", many_more_files_plus_one)\nTraceback (most recent call last):\n...\nValueError: Can't create a collision free filename\n&gt;&gt;&gt; find_collision_free_name(\"test12345\", \"gco\", many_more_files_plus_one, max_power=3)\n'test~100.gco'\n</code></pre>"},{"location":"reference/octoprint/util/files/#octoprint.util.files.get_dos_filename","title":"<code>get_dos_filename(input, existing_filenames = None, extension = None, whitelisted_extensions = None, **kwargs)</code>","text":"<p>Converts the provided input filename to a 8.3 DOS compatible filename. If <code>existing_filenames</code> is provided, the conversion result will be guaranteed not to collide with any of the filenames provided thus.</p> <p>Uses :func:<code>find_collision_free_name</code> internally.</p> <p>Parameters:</p> <ul> <li> input             (<code>string</code>)         \u2013          <p>The original filename incl. extension to convert to the 8.3 format.</p> </li> <li> existing_filenames             (<code>list</code>)         \u2013          <p>A list of existing filenames with which the generated 8.3 name must not collide. Optional.</p> </li> <li> extension             (<code>string</code>)         \u2013          <p>The .3 file extension to use for the generated filename. If not provided, the extension of the provided <code>filename</code> will simply be truncated to 3 characters.</p> </li> <li> whitelisted_extensions             (<code>list</code>)         \u2013          <p>A list of extensions on <code>input</code> that will be left as-is instead of exchanging for <code>extension</code>.</p> </li> <li> kwargs             (<code>dict</code>)         \u2013          <p>Additional keyword arguments to provide to :func:<code>find_collision_free_name</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>A 8.3 compatible translation of the original filename, not colliding with the optionally provided <code>existing_filenames</code> and with the provided <code>extension</code> or the original extension shortened to a maximum of 3 characters.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>No 8.3 compatible name could be found that doesn't collide with the provided <code>existing_filenames</code>.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_dos_filename(\"test1234.gco\")\n'test1234.gco'\n&gt;&gt;&gt; get_dos_filename(\"test1234.gcode\")\n'test1234.gco'\n&gt;&gt;&gt; get_dos_filename(\"test12345.gco\")\n'test12~1.gco'\n&gt;&gt;&gt; get_dos_filename(\"W\u00f6lfe \ud83d\udc3a.gcode\")\n'wolfe_~1.gco'\n&gt;&gt;&gt; get_dos_filename(\"\ud83d\udc9a.gcode\")\n'green_~1.gco'\n&gt;&gt;&gt; get_dos_filename(\"test1234.fnord\", extension=\"gco\")\n'test1234.gco'\n&gt;&gt;&gt; get_dos_filename(\"auto0.g\", extension=\"gco\")\n'auto0.gco'\n&gt;&gt;&gt; get_dos_filename(\"auto0.g\", extension=\"gco\", whitelisted_extensions=[\"g\"])\n'auto0.g'\n&gt;&gt;&gt; get_dos_filename(None)\n&gt;&gt;&gt; get_dos_filename(\"foo\")\n'foo'\n</code></pre>"},{"location":"reference/octoprint/util/files/#octoprint.util.files.m20_timestamp_to_unix_timestamp","title":"<code>m20_timestamp_to_unix_timestamp(timestamp)</code>","text":"<p>Converts \"M20 T\" timestamp to unix timestamp. Upper 16 bit contain date, lower 16 bit contain time.</p> <p>https://reprap.org/wiki/G-code#M20:_List_SD_card</p> <p>Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT</p> <p>Parameters:</p> <ul> <li> timestamp             (<code>string</code>)         \u2013          <p>M20 T timestamp as hex string</p> </li> </ul> <p>Returns:</p> <ul> <li> int        \u2013          <p>Unix timestamp in seconds</p> </li> </ul>"},{"location":"reference/octoprint/util/files/#octoprint.util.files.sanitize_filename","title":"<code>sanitize_filename(name, really_universal = False)</code>","text":"<p>Sanitizes the provided filename. Implementation differs between Python versions.</p> <p>Under normal operation, <code>pathvalidate.sanitize_filename</code> will be used, leaving the name as intact as possible while still being a legal file name under all operating systems.</p> <p>Behaviour can be changed by setting <code>really_universal</code> to <code>True</code>. In this case, the name will be ASCII-fied, using <code>octoprint.util.text.sanitize</code> with safe chars <code>-_.()[]</code> and all spaces replaced by <code>_</code>. This is the old behaviour.</p> <p>In all cases, a single leading <code>.</code> will be removed (as it denotes hidden files on *nix).</p> <p>Parameters:</p> <ul> <li> name         \u2013          <p>The file name to sanitize. Only the name, no path elements.</p> </li> <li> really_universal         \u2013          <p>If <code>True</code>, the old method of sanitization will always               be used. Defaults to <code>False</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>the sanitized file name</p> </li> </ul>"},{"location":"reference/octoprint/util/files/#octoprint.util.files.silent_remove","title":"<code>silent_remove(file)</code>","text":"<p>Silently removes a file. Does not raise an error if the file doesn't exist.</p> <p>Parameters:</p> <ul> <li> file             (<code>string</code>)         \u2013          <p>The path of the file to be removed</p> </li> </ul>"},{"location":"reference/octoprint/util/files/#octoprint.util.files.unix_timestamp_to_m20_timestamp","title":"<code>unix_timestamp_to_m20_timestamp(unix_timestamp)</code>","text":"<p>Converts unix timestamp to \"M20 T\" format which embeds date and time into 32bit int. Upper 16 bit contain date, lower 16 bit contain time.</p> <p>https://reprap.org/wiki/G-code#M20:_List_SD_card</p> <p>Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT</p> <p>Parameters:</p> <ul> <li> unix_timestamp             (<code>int</code>)         \u2013          <p>Unix timestamp in seconds</p> </li> </ul> <p>Returns:</p> <ul> <li> string        \u2013          <p>M20 T timestamp as hex string</p> </li> </ul>"},{"location":"reference/octoprint/util/fixes/","title":"octoprint.util.fixes","text":"<p>This module contains a functions that monkey patch third party dependencies in the one or other way.</p>"},{"location":"reference/octoprint/util/gcodeInterpreter/","title":"octoprint.util.gcodeInterpreter","text":""},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.regex_command","title":"<code>regex_command = re.compile('^\\\\s*((?P&lt;codeGM&gt;[GM]\\\\d+)(\\\\.(?P&lt;subcode&gt;\\\\d+))?|(?P&lt;codeT&gt;T)(?P&lt;tool&gt;\\\\d+))')</code>  <code>module-attribute</code>","text":"<p>Regex for a GCODE command.</p>"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.MinMax3D","title":"<code>MinMax3D(min_x = None, min_y = None, min_z = None, max_x = None, max_y = None, max_z = None)</code>","text":"<p>Tracks minimum and maximum of recorded values</p> <p>Examples:</p> <p>minmax = MinMax3D() minmax.record(Vector3D(2.0, 2.0, 2.0)) minmax.min.x == 2.0 == minmax.max.x and minmax.min.y == 2.0 == minmax.max.y and minmax.min.z == 2.0 == minmax.max.z True minmax.record(Vector3D(1.0, 2.0, 3.0)) minmax.min.x == 1.0 and minmax.min.y == 2.0 and minmax.min.z == 2.0 True minmax.max.x == 2.0 and minmax.max.y == 2.0 and minmax.max.z == 3.0 True minmax.size == Vector3D(1.0, 0.0, 1.0) True empty = MinMax3D() empty.size == Vector3D(0.0, 0.0, 0.0) True weird = MinMax3D(min_z=-1.0) weird.record(Vector3D(2.0, 2.0, 2.0)) weird.record(Vector3D(1.0, 2.0, 3.0)) weird.min.z == -1.0 True weird.size == Vector3D(1.0, 0.0, 4.0) True</p>"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.MinMax3D.record","title":"<code>record(coordinate)</code>","text":"<p>Records the coordinate, storing the min and max values.</p> <p>The input vector components must not be None.</p>"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.Vector3D","title":"<code>Vector3D(*args)</code>","text":"<p>3D vector value</p> <p>Supports addition, subtraction and multiplication with a scalar value (float, int) as well as calculating the length of the vector.</p> <p>Examples:</p> <p>a = Vector3D(1.0, 1.0, 1.0) b = Vector3D(4.0, 4.0, 4.0) a + b == Vector3D(5.0, 5.0, 5.0) True b - a == Vector3D(3.0, 3.0, 3.0) True abs(a - b) == Vector3D(3.0, 3.0, 3.0) True a * 2 == Vector3D(2.0, 2.0, 2.0) True a * 2 == 2 * a True a.length == math.sqrt(a.x  2 + a.y  2 + a.z ** 2) True copied_a = Vector3D(a) a == copied_a True copied_a.x == a.x and copied_a.y == a.y and copied_a.z == a.z True</p>"},{"location":"reference/octoprint/util/jinja/","title":"octoprint.util.jinja","text":""},{"location":"reference/octoprint/util/jinja/#octoprint.util.jinja.FilteredFileSystemLoader","title":"<code>FilteredFileSystemLoader(searchpath, path_filter = None, **kwargs)</code>","text":"<p>         Bases: <code>FileSystemLoader</code></p> <p>Jinja2 <code>FileSystemLoader</code> subclass that allows filtering templates.</p> <p>Only such templates will be accessible for whose paths the provided <code>path_filter</code> filter function returns True.</p> <p><code>path_filter</code> will receive the actual path on disc and should behave just like callables provided to Python's internal <code>filter</code> function, returning <code>True</code> if the path is cleared and <code>False</code> if it is supposed to be removed from results and hence <code>filter(path_filter, iterable)</code> should be equivalent to <code>[item for item in iterable if path_filter(item)]</code>.</p> <p>If <code>path_filter</code> is not set or not a <code>callable</code>, the loader will behave just like the regular Jinja2 <code>FileSystemLoader</code>.</p>"},{"location":"reference/octoprint/util/jinja/#octoprint.util.jinja.WarningLoader","title":"<code>WarningLoader(loader, warning_message)</code>","text":"<p>         Bases: <code>BaseLoader</code></p> <p>Logs a warning if the loader is used to successfully load a template.</p>"},{"location":"reference/octoprint/util/net/","title":"octoprint.util.net","text":""},{"location":"reference/octoprint/util/net/#octoprint.util.net.address_for_client","title":"<code>address_for_client(host, port, timeout = 3.05, addresses = None, interfaces = None, ignored = None)</code>","text":"<p>Determines the address of the network interface on this host needed to connect to the indicated client host and port.</p>"},{"location":"reference/octoprint/util/net/#octoprint.util.net.interface_addresses","title":"<code>interface_addresses(family = None, interfaces = None, ignored = None)</code>","text":"<p>Retrieves all of the host's network interface addresses.</p>"},{"location":"reference/octoprint/util/net/#octoprint.util.net.server_reachable","title":"<code>server_reachable(host, port, timeout = 3.05, proto = 'tcp', source = None)</code>","text":"<p>Checks if a server is reachable</p> <p>Parameters:</p> <ul> <li> host             (<code>str</code>)         \u2013          <p>host to check against</p> </li> <li> port             (<code>int</code>)         \u2013          <p>port to check against</p> </li> <li> timeout             (<code>float</code>)         \u2013          <p>timeout for check</p> </li> <li> proto             (<code>str</code>)         \u2013          <p><code>tcp</code> or <code>udp</code></p> </li> <li> source             (<code>str</code>)         \u2013          <p>optional, socket used for check will be bound against this address if provided</p> </li> </ul> <p>Returns:</p> <ul> <li> boolean        \u2013          <p>True if a connection to the server could be opened, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/util/paths/","title":"octoprint.util.paths","text":""},{"location":"reference/octoprint/util/pip/","title":"octoprint.util.pip","text":""},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_ALREADY_INSTALLED","title":"<code>OUTPUT_ALREADY_INSTALLED = 'Requirement already satisfied'</code>  <code>module-attribute</code>","text":"<p>Start of a line indicating some package was already installed in this version</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_ERROR","title":"<code>OUTPUT_ERROR = 'ERROR:'</code>  <code>module-attribute</code>","text":"<p>Start of error line</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_FAILURE","title":"<code>OUTPUT_FAILURE = 'Could not install'</code>  <code>module-attribute</code>","text":"<p>Start of failure result line</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_POTENTIAL_EGG_PROBLEM_POSIX","title":"<code>OUTPUT_POTENTIAL_EGG_PROBLEM_POSIX = 'No such file or directory'</code>  <code>module-attribute</code>","text":"<p>Line indicating a potential egg problem on Posix</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_POTENTIAL_EGG_PROBLEM_WINDOWS","title":"<code>OUTPUT_POTENTIAL_EGG_PROBLEM_WINDOWS = 'The system cannot find the file specified'</code>  <code>module-attribute</code>","text":"<p>Line indicating a potential egg problem on Windows</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_PYTHON_MISMATCH","title":"<code>OUTPUT_PYTHON_MISMATCH = 'requires a different Python:'</code>  <code>module-attribute</code>","text":"<p>Line segment indicating a mismatch of python_requires version</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_PYTHON_SYNTAX","title":"<code>OUTPUT_PYTHON_SYNTAX = 'SyntaxError: invalid syntax'</code>  <code>module-attribute</code>","text":"<p>Line segment indicating a syntax error, could be a python mismatch, e.g. f-strings</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_SUCCESS","title":"<code>OUTPUT_SUCCESS = 'Successfully installed'</code>  <code>module-attribute</code>","text":"<p>Start of successful result line</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.LocalPipCaller","title":"<code>LocalPipCaller</code>","text":"<p>         Bases: <code>PipCaller</code></p> <p>The LocalPipCaller always uses the pip instance associated with sys.executable.</p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.PipCaller","title":"<code>PipCaller(configured = None, ignore_cache = False, force_sudo = False, force_user = False)</code>","text":"<p>         Bases: <code>CommandlineCaller</code></p>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.get_result_line","title":"<code>get_result_line(lines)</code>","text":"<p>Returns the success or failure line contained in the output.</p> <p>pip might generate more lines after the actual result line, which is why we can't just take the final line. So instead we look for the last line starting with either \"Successfully installed\" or \"Could not install\". If neither can be found, an empty string will be returned, which should also be considered a failure to install.</p> <p>Parameters:</p> <ul> <li> lines             (<code>list of str</code>)         \u2013          <p>the output to parse, stdout or stderr</p> </li> </ul> <p>Returns:</p> <ul> <li> str        \u2013          <p>the last result line, or an empty string if none was found, in which case  failure should be resumed</p> </li> </ul>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_already_installed","title":"<code>is_already_installed(lines)</code>","text":"<p>Returns whether the given output lines indicates the packages was already installed or not.</p> <p>This is currently determined by an empty result line and any line starting with \"Requirement already satisfied\".</p> <p>Parameters:</p> <ul> <li> lines             (<code>list of str</code>)         \u2013          <p>the output to parse, stdout or stderr</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p>True if detected, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_egg_problem","title":"<code>is_egg_problem(lines)</code>","text":"<p>Returns whether the given output lines indicates an occurrence of the \"egg-problem\".</p> <p>If something (target or dependency of target) was installed as an egg at an earlier date (e.g. thanks to just running python setup.py install), pip install will throw an error after updating that something to a newer (non-egg) version since it will still have the egg on its sys.path and expect to read data from it.</p> <p>See commit 8ad0aadb52b9ef354cad1b33bd4882ae2fbdb8d6 for more details.</p> <p>Parameters:</p> <ul> <li> lines             (<code>list of str</code>)         \u2013          <p>the output to parse, stdout or stderr</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p>True if detected, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_python_mismatch","title":"<code>is_python_mismatch(lines)</code>","text":"<p>Returns whether the given output lines indicates a Python version mismatch.</p> <p>This is currently determined by either a syntax error or an explicit \"requires a different Python\" line.</p> <p>Parameters:</p> <ul> <li> lines             (<code>list of str</code>)         \u2013          <p>the output to parse, stdout or stderr</p> </li> </ul> <p>Returns:</p> <ul> <li> bool        \u2013          <p>True if detected, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/util/text/","title":"octoprint.util.text","text":""},{"location":"reference/octoprint/util/text/#octoprint.util.text.sanitize","title":"<code>sanitize(text, safe_chars = '-_.', demoji = True)</code>","text":"<p>Sanitizes text by running it through slugify and optionally emoji translating.</p> <p>Examples:</p> <p>sanitize(\"Hello World!\") 'Hello-World' sanitize(\"Hello World!\", safe_chars=\"-_. \") 'Hello World' sanitize(\"\u2764\") 'red_heart' sanitize(\"\u2764\ufe00\") 'red_heart' sanitize(\"\u2764\", demoji=False) ''</p> <p>Parameters:</p> <ul> <li> text         \u2013          <p>the text to sanitize</p> </li> <li> safe_chars         \u2013          <p>characters to consider safe and to keep after sanitization</p> </li> <li> emoji         \u2013          <p>whether to also convert emoji to text</p> </li> </ul>"},{"location":"reference/octoprint/util/tz/","title":"octoprint.util.tz","text":""},{"location":"reference/octoprint/util/version/","title":"octoprint.util.version","text":"<p>This module provides a bunch of utility methods and helpers for version handling.</p>"},{"location":"reference/octoprint/util/version/#octoprint.util.version.get_comparable_version","title":"<code>get_comparable_version(version_string, cut = None, **kwargs)</code>","text":"<p>Parameters:</p> <ul> <li> version_string         \u2013          <p>The version string for which to create a comparable version instance</p> </li> <li> cut         \u2013          <p>optional, how many version digits to remove (e.g., cut=1 will turn 1.2.3 into 1.2).  Defaults to <code>None</code>, meaning no further action. Settings this to 0 will remove  anything up to the last digit, e.g. dev or rc information.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>A comparable version</p> </li> </ul>"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_octoprint_compatible","title":"<code>is_octoprint_compatible(*compatibility_entries, **kwargs)</code>","text":"<p>Tests if the current <code>octoprint_version</code> is compatible to any of the provided <code>compatibility_entries</code>.</p> <p>Parameters:</p> <ul> <li> compatibility_entries             (<code>str</code>)         \u2013          <p>compatibility string(s) to test against, result will be <code>True</code> if any match is found</p> </li> <li> octoprint_version             (<code>tuple or SetuptoolsVersion</code>)         \u2013          <p>optional OctoPrint version to match against, if not current base version will be determined via :func:<code>get_octoprint_version</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>(bool) <code>True</code> if any of the provided compatibility entries matches or there are no entries, else <code>False</code></p> </li> </ul>"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_release","title":"<code>is_release(version)</code>","text":"<p>import pkg_resources is_release(pkg_resources.parse_version(\"1.3.6rc3\")) True is_release(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.6\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False</p>"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_stable","title":"<code>is_stable(version)</code>","text":"<p>import pkg_resources is_stable(pkg_resources.parse_version(\"1.3.6rc3\")) False is_stable(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.6\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False</p>"},{"location":"reference/octoprint/util/yaml/","title":"octoprint.util.yaml","text":""},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.dump","title":"<code>dump(data, pretty = False, **kwargs)</code>","text":"<p>Safely and performantly dumps the <code>data</code> to a yaml string.</p> <p>:param data: the data to be serialized :param pretty: formats the output yaml into a more human-friendly format :param kwargs: any other args to be passed to the internal yaml.dump() call. :return: yaml-serialized data :rtype: str</p>"},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.load_from_file","title":"<code>load_from_file(file: TextIO = None, path: str = None) -&gt; Union[Dict[Hashable, Any], list, None]</code>","text":"<p>Safely and performantly loads yaml data from the given source. Either a path or a file must be passed in.</p>"},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.save_to_file","title":"<code>save_to_file(data, file = None, path = None, pretty = False, **kwargs)</code>","text":"<p>Safely and performantly dumps the <code>data</code> to yaml.</p> <p>To dump to a string, use <code>yaml.dump()</code>.</p> <p>:type data: object :param data: the data to be serialized :type file: typing.TextIO | None :type path: str | None :type pretty: bool :param pretty: formats the output yaml into a more human-friendly format</p>"},{"location":"reference/octoprint/util/json/","title":"octoprint.util.json","text":""},{"location":"reference/octoprint/util/json/encoding/","title":"octoprint.util.json.encoding","text":""},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding","title":"<code>JsonEncoding</code>","text":""},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding.add_encoder","title":"<code>add_encoder(typ: type, encoder: Callable[[Any], Any]) -&gt; None</code>  <code>classmethod</code>","text":"<p>Add an encoder for a type.</p> <p>:param typ: the type to add an encoder for :param encoder: the encoder. Must take a single argument and return a     tuple (name, parameters...)</p>"},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding.dumps","title":"<code>dumps(obj: Any) -&gt; str</code>  <code>classmethod</code>","text":"<p>Dump an object to JSON, handles additional types that the JSON encoder can't, like bytes and frozendicts.</p>"},{"location":"reference/octoprint/util/json/serializing/","title":"octoprint.util.json.serializing","text":""},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding","title":"<code>SerializableJsonEncoding</code>","text":"<p>         Bases: <code>JsonEncoding</code></p> <p>A JSON encoding that can serialize and deserialize objects, including additional</p> objects otherwise not serializable by the standard JSON encoder <ul> <li><code>bytes</code></li> <li><code>frozendict.frozendict</code></li> <li><code>datetime.datetime</code></li> <li><code>time.struct_time</code></li> </ul>"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding.decode","title":"<code>decode(dct)</code>  <code>classmethod</code>","text":"<p>Recursively replace all instances of decodable types with their decoded values.</p> <p>You'll want to have used <code>class_encode()</code> in your encoder to get this to work properly.</p>"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding.encode","title":"<code>encode(val)</code>  <code>classmethod</code>","text":"<p>Recursively replace all instances of encodable types with their encoded value. This is useful over the <code>default=</code> functionality of the JSON encoder because JSON will not call default for tuples, lists, ints, etc: https://docs.python.org/3/library/json.html#json.JSONEncoder</p> <p>Cannot handle circular references.</p>"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.class_encode","title":"<code>class_encode(name: str, *params: Any) -&gt; Dict[str, List]</code>","text":"<p>Encode a class name and parameters into a serializable dict. You'll probably want to use this if you're going to set a custom decoder.</p> <p>This stores the class names in a format inspired by the JSON-RPC spec at https://www.jsonrpc.org/specification_v1#a3.JSONClasshinting</p>"},{"location":"reference/octoprint/util/platform/","title":"octoprint.util.platform","text":"<p>This module bundles platform specific flags and implementations.</p>"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.CLOSE_FDS","title":"<code>CLOSE_FDS = True</code>  <code>module-attribute</code>","text":"<p>Default setting for close_fds parameter to Popen/sarge.run.</p> <p>Set <code>close_fds</code> on every sub process to this to ensure file handlers will be closed on child processes on platforms.</p>"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.get_os","title":"<code>get_os()</code>","text":"<p>Returns a canonical OS identifier.</p> <p>Currently the following OS are recognized: <code>win32</code>, <code>linux</code> (<code>sys.platform</code> = <code>linux*</code>), <code>macos</code> (<code>sys.platform</code> = <code>darwin</code>) and <code>freebsd</code> (<code>sys.platform</code> = <code>freebsd*</code>).</p> <p>Returns:</p> <ul> <li>         \u2013          <p>(str) mapped OS identifier</p> </li> </ul>"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.is_os_compatible","title":"<code>is_os_compatible(compatibility_entries, current_os = None)</code>","text":"<p>Tests if the <code>current_os</code> or <code>sys.platform</code> are blacklisted or whitelisted in <code>compatibility_entries</code></p> <p>Returns:</p> <ul> <li>         \u2013          <p>(bool) True if the os is compatible, False otherwise</p> </li> </ul>"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.set_close_exec","title":"<code>set_close_exec(handle)</code>","text":"<p>Set <code>close_exec</code> flag on handle, if supported by the OS.</p>"},{"location":"reference/octoprint/vendor/","title":"octoprint.vendor","text":""},{"location":"reference/octoprint/vendor/flask_principal/","title":"octoprint.vendor.flask_principal","text":"<p>flask_principal ~~~~~~~~~~~~~~~</p> <p>Identity management for Flask.</p> <p> (c) 2012 by Ali Afshar. :license: MIT, see LICENSE for more details.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.ItemNeed","title":"<code>ItemNeed = namedtuple('ItemNeed', ['method', 'value', 'type'])</code>  <code>module-attribute</code>","text":"<p>A required item need</p> <p>An item need is just a named tuple, and practically any tuple will do. In addition to other Needs, there is a type, for example this could be specified as::</p> <pre><code>ItemNeed('update', 27, 'posts')\n('update', 27, 'posts') # or like this\n</code></pre> <p>And that might describe the permission to update a particular blog post. In reality, the developer is free to choose whatever convention the permissions are.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Need","title":"<code>Need = namedtuple('Need', ['method', 'value'])</code>  <code>module-attribute</code>","text":"<p>A required need</p> <p>This is just a named tuple, and practically any tuple will do.</p> <p>The <code>method</code> attribute can be used to look up element 0, and the <code>value</code> attribute can be used to look up element 1.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.AnonymousIdentity","title":"<code>AnonymousIdentity()</code>","text":"<p>         Bases: <code>Identity</code></p> <p>An anonymous identity</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Denial","title":"<code>Denial(*excludes)</code>","text":"<p>         Bases: <code>Permission</code></p> <p>Shortcut class for passing excluded needs.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Identity","title":"<code>Identity(id, auth_type = None)</code>","text":"<p>         Bases: <code>object</code></p> <p>Represent the user's identity.</p> <p>:param id: The user id :param auth_type: The authentication type used to confirm the user's                   identity.</p> <p>The identity is used to represent the user's identity in the system. This object is created on login, or on the start of the request as loaded from the user's session.</p> <p>Once loaded it is sent using the <code>identity-loaded</code> signal, and should be populated with additional required information.</p> <p>Needs that are provided by this identity should be added to the <code>provides</code> set after loading.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Identity.can","title":"<code>can(permission)</code>","text":"<p>Whether the identity has access to the permission.</p> <p>:param permission: The permission to test provision for.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext","title":"<code>IdentityContext(permission, http_exception = None)</code>","text":"<p>         Bases: <code>object</code></p> <p>The context of an identity for a permission.</p> <p>.. note:: The principal is usually created by the flaskext.Permission.require method           call for normal use-cases.</p> <p>The principal behaves as either a context manager or a decorator. The permission is checked for provision in the identity, and if available the flow is continued (context manager) or the function is executed (decorator).</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.http_exception","title":"<code>http_exception = http_exception</code>  <code>instance-attribute</code>","text":"<p>The permission of this principal</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.identity","title":"<code>identity</code>  <code>property</code>","text":"<p>The identity of this principal</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.can","title":"<code>can()</code>","text":"<p>Whether the identity has access to the permission</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission","title":"<code>Permission(*needs)</code>","text":"<p>         Bases: <code>object</code></p> <p>Represents needs, any of which must be present to access a resource</p> <p>:param needs: The needs for this permission</p> <p>A set of needs, any of which must be present in an identity to have access.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__and__","title":"<code>__and__(other)</code>","text":"<p>Does the same thing as <code>self.union(other)</code></p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__bool__","title":"<code>__bool__()</code>","text":"<p>Equivalent to <code>self.can()</code>.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__contains__","title":"<code>__contains__(other)</code>","text":"<p>Does the same thing as <code>other.issubset(self)</code>.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__nonzero__","title":"<code>__nonzero__()</code>","text":"<p>Equivalent to <code>self.can()</code>.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__or__","title":"<code>__or__(other)</code>","text":"<p>Does the same thing as <code>self.difference(other)</code></p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.allows","title":"<code>allows(identity)</code>","text":"<p>Whether the identity can access this permission.</p> <p>:param identity: The identity</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.can","title":"<code>can()</code>","text":"<p>Whether the required context for this permission has access</p> <p>This creates an identity context and tests whether it can access this permission</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.difference","title":"<code>difference(other)</code>","text":"<p>Create a new permission consisting of requirements in this permission and not in the other.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.issubset","title":"<code>issubset(other)</code>","text":"<p>Whether this permission needs are a subset of another</p> <p>:param other: The other permission</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.require","title":"<code>require(http_exception = None)</code>","text":"<p>Create a principal for this permission.</p> <p>The principal may be used as a context manager, or a decroator.</p> <p>If <code>http_exception</code> is passed then <code>abort()</code> will be called with the HTTP exception code. Otherwise a <code>PermissionDenied</code> exception will be raised if the identity does not meet the requirements.</p> <p>:param http_exception: the HTTP exception code (403, 401 etc)</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.reverse","title":"<code>reverse()</code>","text":"<p>Returns reverse of current state (needs-&gt;excludes, excludes-&gt;needs)</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.test","title":"<code>test(http_exception = None)</code>","text":"<p>Checks if permission available and raises relevant exception if not. This is useful if you just want to check permission without wrapping everything in a require() block.</p> <p>This is equivalent to::</p> <pre><code>with permission.require():\n    pass\n</code></pre>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.union","title":"<code>union(other)</code>","text":"<p>Create a new permission with the requirements of the union of this and other.</p> <p>:param other: The other permission</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.PermissionDenied","title":"<code>PermissionDenied</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>Permission denied to the resource</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal","title":"<code>Principal(app = None, use_sessions = True, skip_static = False, anonymous_identity = AnonymousIdentity)</code>","text":"<p>         Bases: <code>object</code></p> <p>Principal extension</p> <p>:param app: The flask application to extend :param use_sessions: Whether to use sessions to extract and store                      identification. :param skip_static: Whether to ignore static endpoints.</p>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.identity_loader","title":"<code>identity_loader(f)</code>","text":"<p>Decorator to define a function as an identity loader.</p> <p>An identity loader function is called before request to find any provided identities. The first found identity is used to load from.</p> <p>For example::</p> <pre><code>app = Flask(__name__)\n\nprincipals = Principal(app)\n\n@principals.identity_loader\ndef load_identity_from_weird_usecase():\n    return Identity('ali')\n</code></pre>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.identity_saver","title":"<code>identity_saver(f)</code>","text":"<p>Decorator to define a function as an identity saver.</p> <p>An identity loader saver is called when the identity is set to persist it for the next request.</p> <p>For example::</p> <pre><code>app = Flask(__name__)\n\nprincipals = Principal(app)\n\n@principals.identity_saver\ndef save_identity_to_weird_usecase(identity):\n    my_special_cookie['identity'] = identity\n</code></pre>"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.set_identity","title":"<code>set_identity(identity)</code>","text":"<p>Set the current identity.</p> <p>:param identity: The identity to set</p>"},{"location":"reference/octoprint/vendor/imp/","title":"octoprint.vendor.imp","text":"<p>This module provides the components needed to build your own import function.  Undocumented functions are obsolete.</p> <p>In most cases it is preferred you consider using the importlib module's functionality over this module.</p> <p>Taken from CPython 3.7.0 and vendored to still have it when it gets completely removed.</p> <p>Licensed under the PSF LICENSE AGREEMENT https://docs.python.org/3/license.html</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.NullImporter","title":"<code>NullImporter(path)</code>","text":"<p>Null import object.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.NullImporter.find_module","title":"<code>find_module(fullname)</code>","text":"<p>Always returns None.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.cache_from_source","title":"<code>cache_from_source(path, debug_override = None)</code>","text":"<p>Given the path to a .py file, return the path to its .pyc file.</p> <p>The .py file does not need to exist; this simply returns the path to the .pyc file calculated as if the .py file were imported.</p> <p>If debug_override is not None, then it must be a boolean and is used in place of sys.flags.optimize.</p> <p>If sys.implementation.cache_tag is None then NotImplementedError is raised.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.find_module","title":"<code>find_module(name, path = None)</code>","text":"<p>Search for a module.</p> <p>If path is omitted or None, search for a built-in, frozen or special module and continue search in sys.path. The module name cannot contain '.'; to search for a submodule of a package, pass the submodule name and the package's path.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.get_magic","title":"<code>get_magic()</code>","text":"<p>Return the magic number for .pyc files.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.get_tag","title":"<code>get_tag()</code>","text":"<p>Return the magic tag for .pyc files.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.init_builtin","title":"<code>init_builtin(name)</code>","text":"<p>Load and return a built-in module by name, or None is such module doesn't exist</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_compiled","title":"<code>load_compiled(name, pathname, file = None)</code>","text":"<p>DEPRECATED</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_dynamic","title":"<code>load_dynamic(name, path, file = None)</code>","text":"<p>Load an extension module.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_module","title":"<code>load_module(name, file, filename, details)</code>","text":"<p>Load a module, given information returned by find_module().</p> <p>The module name must include the full package name, if any.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.new_module","title":"<code>new_module(name)</code>","text":"<p>Create a new module.</p> <p>The module is not entered into sys.modules.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.reload","title":"<code>reload(module)</code>","text":"<p>Reload the module and return it.</p> <p>The module must have been successfully imported before.</p>"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.source_from_cache","title":"<code>source_from_cache(path)</code>","text":"<p>Given the path to a .pyc. file, return the path to its .py file.</p> <p>The .pyc file does not need to exist; this simply returns the path to the .py file calculated to correspond to the .pyc file.  If path does not conform to PEP 3147 format, ValueError will be raised. If sys.implementation.cache_tag is None then NotImplementedError is raised.</p>"},{"location":"reference/octoprint/vendor/with_attrs_docs/","title":"octoprint.vendor.with_attrs_docs","text":""},{"location":"reference/octoprint/vendor/with_attrs_docs/#octoprint.vendor.with_attrs_docs.apply_attributes_docs","title":"<code>apply_attributes_docs(model: Type[BaseModel], override_existing: bool = True) -&gt; None</code>","text":"<p>Apply model attributes documentation in-place. Resulted docs are placed inside :code:<code>field.schema.description</code> for pydantic model field. :param model: any pydantic model :param override_existing: override existing descriptions</p>"},{"location":"reference/octoprint/vendor/with_attrs_docs/#octoprint.vendor.with_attrs_docs.with_attrs_docs","title":"<code>with_attrs_docs(model_cls: Type[BaseModel]) -&gt; Type[BaseModel]</code>","text":"<p>Applies func:<code>.apply_attributes_docs</code>.</p>"},{"location":"reference/octoprint/vendor/awesome_slugify/","title":"octoprint.vendor.awesome_slugify","text":""},{"location":"reference/octoprint/vendor/awesome_slugify/alt_translates/","title":"octoprint.vendor.awesome_slugify.alt_translates","text":""},{"location":"reference/octoprint/vendor/awesome_slugify/main/","title":"octoprint.vendor.awesome_slugify.main","text":""},{"location":"reference/octoprint/vendor/awesome_slugify/main/#octoprint.vendor.awesome_slugify.main.UniqueSlugify","title":"<code>UniqueSlugify(*args, **kwargs)</code>","text":"<p>         Bases: <code>Slugify</code></p> <p>Manage unique slugified ids</p>"},{"location":"reference/octoprint/vendor/awesome_slugify/main/#octoprint.vendor.awesome_slugify.main.join_words","title":"<code>join_words(words, separator, max_length = None)</code>","text":"<p>words - iterator or list</p>"},{"location":"reference/octoprint/vendor/sockjs/","title":"octoprint.vendor.sockjs","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/","title":"octoprint.vendor.sockjs.tornado","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/","title":"octoprint.vendor.sockjs.tornado.basehandler","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler","title":"<code>BaseHandler</code>","text":"<p>         Bases: <code>RequestHandler</code></p> <p>Base request handler with set of helpers.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.disable_cache","title":"<code>disable_cache()</code>","text":"<p>Disable client-side cache for the current request</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.enable_cache","title":"<code>enable_cache()</code>","text":"<p>Enable client-side caching for the current request</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.finish","title":"<code>finish(chunk = None)</code>","text":"<p>Tornado <code>finish</code> handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.handle_session_cookie","title":"<code>handle_session_cookie()</code>","text":"<p>Handle JSESSIONID cookie logic</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.initialize","title":"<code>initialize(server)</code>","text":"<p>Initialize request</p> <p><code>server</code>     SockJSRouter instance.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.on_connection_close","title":"<code>on_connection_close()</code>","text":"<p>Tornado <code>on_connection_close</code> handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.prepare","title":"<code>prepare()</code>","text":"<p>Increment connection count</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.safe_finish","title":"<code>safe_finish()</code>","text":"<p>Finish session. If it will blow up - connection was set to Keep-Alive and client dropped connection, ignore any IOError or socket error.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler","title":"<code>PreflightHandler</code>","text":"<p>         Bases: <code>BaseHandler</code></p> <p>CORS preflight handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.options","title":"<code>options(*args, **kwargs)</code>","text":"<p>XHR cross-domain OPTIONS handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.preflight","title":"<code>preflight()</code>","text":"<p>Handles request authentication</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.verify_origin","title":"<code>verify_origin()</code>","text":"<p>Verify if request can be served</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/","title":"octoprint.vendor.sockjs.tornado.conn","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection","title":"<code>SockJSConnection(session)</code>","text":"<p>         Bases: <code>object</code></p> <p>Connection constructor.</p> <p><code>session</code>     Associated session</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.is_closed","title":"<code>is_closed</code>  <code>property</code>","text":"<p>Check if connection was closed</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.broadcast","title":"<code>broadcast(clients, message)</code>","text":"<p>Broadcast message to the one or more clients. Use this method if you want to send same message to lots of clients, as it contains several optimizations and will work fast than just having loop in your code.</p> <p><code>clients</code>     Clients iterable <code>message</code>     Message to send.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_close","title":"<code>on_close()</code>","text":"<p>Default on_close handler.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_message","title":"<code>on_message(message)</code>","text":"<p>Default on_message handler. Must be overridden in your application</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_open","title":"<code>on_open(request)</code>","text":"<p>Default on_open() handler.</p> <p>Override when you need to do some initialization or request validation. If you return False, connection will be rejected.</p> <p>You can also throw Tornado HTTPError to close connection.</p> <p><code>request</code> <code>ConnectionInfo</code> object which contains caller IP address, query string     parameters and cookies associated with this request (if any).</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.send","title":"<code>send(message, binary = False)</code>","text":"<p>Send message to the client.</p> <p><code>message</code>     Message to send.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/","title":"octoprint.vendor.sockjs.tornado.migrate","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler","title":"<code>WebsocketHandler</code>","text":"<p>         Bases: <code>conn.SockJSConnection</code></p> <p>If you already use Tornado websockets for your application and want try sockjs-tornado, change your handlers to derive from this WebsocketHandler class. There are some limitations, for example only self.request only contains remote_ip, cookies and arguments collection</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler.on_open","title":"<code>on_open(info)</code>","text":"<p>sockjs-tornado on_open handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler.open","title":"<code>open()</code>","text":"<p>open handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/","title":"octoprint.vendor.sockjs.tornado.periodic","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback","title":"<code>Callback(callback, callback_time, io_loop)</code>","text":"<p>         Bases: <code>object</code></p> <p>Custom implementation of the Tornado.Callback with support of callback timeout delays.</p> <p>Constructor.</p> <p><code>callback</code>     Callback function <code>callback_time</code>     Callback timeout value (in milliseconds) <code>io_loop</code>     io_loop instance</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.calculate_next_run","title":"<code>calculate_next_run()</code>","text":"<p>Caltulate next scheduled run</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.delay","title":"<code>delay()</code>","text":"<p>Delay callback</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.start","title":"<code>start(timeout = None)</code>","text":"<p>Start callbacks</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.stop","title":"<code>stop()</code>","text":"<p>Stop callbacks</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/proto/","title":"octoprint.vendor.sockjs.tornado.proto","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/proto/#octoprint.vendor.sockjs.tornado.proto.disconnect","title":"<code>disconnect(code, reason)</code>","text":"<p>Return SockJS packet with code and close reason</p> <p><code>code</code>     Closing code <code>reason</code>     Closing reason</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/","title":"octoprint.vendor.sockjs.tornado.router","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter","title":"<code>SockJSRouter(connection, prefix = '', user_settings = {}, io_loop = None, session_kls = None)</code>","text":"<p>         Bases: <code>object</code></p> <p>SockJS protocol router</p> <p>Constructor.</p> <p><code>connection</code>     SockJSConnection class <code>prefix</code>     Connection prefix <code>user_settings</code>     Settings dictionary <code>io_loop</code>     Optional IOLoop instance</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.urls","title":"<code>urls</code>  <code>property</code>","text":"<p>List of the URLs to be added to the Tornado application</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.apply_routes","title":"<code>apply_routes(routes)</code>","text":"<p>Feed list of the URLs to the routes list. Returns list</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.broadcast","title":"<code>broadcast(clients, msg)</code>","text":"<p>Optimized <code>broadcast</code> implementation. Depending on type of the session, will json-encode message once and will call either <code>send_message</code> or <code>send_jsonifed</code>.</p> <p><code>clients</code>     Clients iterable <code>msg</code>     Message to send</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.create_session","title":"<code>create_session(session_id, register = True)</code>","text":"<p>Creates new session object and returns it.</p> <p><code>request</code>     Request that created the session. Will be used to get query string     parameters and cookies <code>register</code>     Should be session registered in a storage. Websockets don't     need it.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.get_connection_class","title":"<code>get_connection_class()</code>","text":"<p>Return associated connection class</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.get_session","title":"<code>get_session(session_id)</code>","text":"<p>Get session by session id</p> <p><code>session_id</code>     Session id</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/","title":"octoprint.vendor.sockjs.tornado.session","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession","title":"<code>BaseSession(conn, server)</code>","text":"<p>         Bases: <code>object</code></p> <p>Base session implementation class</p> <p>Base constructor.</p> <p><code>conn</code>     Connection class <code>server</code>     SockJSRouter instance</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.is_closed","title":"<code>is_closed</code>  <code>property</code>","text":"<p>Check if session was closed.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.broadcast","title":"<code>broadcast(clients, msg)</code>","text":"<p>Optimized <code>broadcast</code> implementation. Depending on type of the session, will json-encode message once and will call either <code>send_message</code> or <code>send_jsonifed</code>.</p> <p><code>clients</code>     Clients iterable <code>msg</code>     Message to send</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.close","title":"<code>close(code = 3000, message = 'Go away!')</code>","text":"<p>Close session or endpoint connection.</p> <p><code>code</code>     Closing code <code>message</code>     Close message</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.delayed_close","title":"<code>delayed_close()</code>","text":"<p>Delayed close - won't close immediately, but on next ioloop tick.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.get_close_reason","title":"<code>get_close_reason()</code>","text":"<p>Return last close reason tuple.</p> For example <p>if self.session.is_closed:     code, reason = self.session.get_close_reason()</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.remove_handler","title":"<code>remove_handler(handler)</code>","text":"<p>Remove active handler from the session</p> <p><code>handler</code>     Handler to remove</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.send_jsonified","title":"<code>send_jsonified(msg, stats = True)</code>","text":"<p>Send or queue outgoing message which was json-encoded before. Used by the <code>broadcast</code> method.</p> <p><code>msg</code>     JSON-encoded message to send <code>stats</code>     If set to True, will update statistics after operation completes</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.send_message","title":"<code>send_message(msg, stats = True, binary = False)</code>","text":"<p>Send or queue outgoing message</p> <p><code>msg</code>     Message to send <code>stats</code>     If set to True, will update statistics after operation completes</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.set_handler","title":"<code>set_handler(handler)</code>","text":"<p>Set transport handler <code>handler</code>     Handler, should derive from the <code>sockjs.tornado.transports.base.BaseTransportMixin</code>.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.verify_state","title":"<code>verify_state()</code>","text":"<p>Verify if session was not yet opened. If it is, open it and call connections <code>on_open</code></p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo","title":"<code>ConnectionInfo(ip, cookies, arguments, headers, path)</code>","text":"<p>         Bases: <code>object</code></p> <p>Connection information object.</p> <p>Will be passed to the <code>on_open</code> handler of your connection class.</p> <p>Has few properties:</p> <p><code>ip</code>     Caller IP address <code>cookies</code>     Collection of cookies <code>arguments</code>     Collection of the query string arguments <code>headers</code>     Collection of headers sent by the browser that established this     connection <code>path</code>     Request uri path</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_argument","title":"<code>get_argument(name)</code>","text":"<p>Return single argument by name</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_cookie","title":"<code>get_cookie(name)</code>","text":"<p>Return single cookie by its name</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_header","title":"<code>get_header(name)</code>","text":"<p>Return single header by its name</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session","title":"<code>Session(conn, server, session_id, expiry = None)</code>","text":"<p>         Bases: <code>BaseSession</code>, <code>sessioncontainer.SessionMixin</code></p> <p>SockJS session implementation.</p> <p>Session constructor.</p> <p><code>conn</code>     Default connection class <code>server</code> <code>SockJSRouter</code> instance <code>session_id</code>     Session id <code>expiry</code>     Session expiry time</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.close","title":"<code>close(code = 3000, message = 'Go away!')</code>","text":"<p>Close session.</p> <p><code>code</code>     Closing code <code>message</code>     Closing message</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.delay_heartbeat","title":"<code>delay_heartbeat()</code>","text":"<p>Delay active heartbeat</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.flush","title":"<code>flush()</code>","text":"<p>Flush message queue if there's an active connection running</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.on_delete","title":"<code>on_delete(forced)</code>","text":"<p>Session expiration callback</p> <p><code>forced</code>     If session item explicitly deleted, forced will be set to True. If     item expired, will be set to False.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.on_messages","title":"<code>on_messages(msg_list)</code>","text":"<p>Handle incoming messages</p> <p><code>msg_list</code>     Message list to process</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.remove_handler","title":"<code>remove_handler(handler)</code>","text":"<p>Detach active handler from the session</p> <p><code>handler</code>     Handler to remove</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.send_jsonified","title":"<code>send_jsonified(msg, stats = True)</code>","text":"<p>Send JSON-encoded message</p> <p><code>msg</code>     JSON encoded string to send <code>stats</code>     If set to True, will update statistics after operation completes</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.send_message","title":"<code>send_message(msg, stats = True, binary = False)</code>","text":"<p>Send or queue outgoing message</p> <p><code>msg</code>     Message to send <code>stats</code>     If set to True, will update statistics after operation completes</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.set_handler","title":"<code>set_handler(handler, start_heartbeat = True)</code>","text":"<p>Set active handler for the session</p> <p><code>handler</code>     Associate active Tornado handler with the session <code>start_heartbeat</code>     Should session start heartbeat immediately</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.start_heartbeat","title":"<code>start_heartbeat()</code>","text":"<p>Reset hearbeat timer</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.stop_heartbeat","title":"<code>stop_heartbeat()</code>","text":"<p>Stop active heartbeat</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.verify_state","title":"<code>verify_state()</code>","text":"<p>Verify if session was not yet opened. If it is, open it and call connections <code>on_open</code></p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/","title":"octoprint.vendor.sockjs.tornado.sessioncontainer","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer","title":"<code>SessionContainer()</code>","text":"<p>         Bases: <code>object</code></p> <p>Session container object.</p> <p>If we will implement sessions with Tornado timeouts, for polling transports it will be nightmare - if load will be high, number of discarded timeouts will be huge and will be huge performance hit, as Tornado will have to clean them up all the time.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.add","title":"<code>add(session)</code>","text":"<p>Add session to the container.</p> <p><code>session</code>     Session object</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.expire","title":"<code>expire(current_time = None)</code>","text":"<p>Expire any old entries</p> <p><code>current_time</code>     Optional time to be used to clean up queue (can be used in unit tests)</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.get","title":"<code>get(session_id)</code>","text":"<p>Return session object or None if it is not available</p> <p><code>session_id</code>     Session identifier</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.remove","title":"<code>remove(session_id)</code>","text":"<p>Remove session object from the container</p> <p><code>session_id</code>     Session identifier</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin","title":"<code>SessionMixin(session_id = None, expiry = None)</code>","text":"<p>         Bases: <code>object</code></p> <p>Represents one session object stored in the session container. Derive from this object to store additional data.</p> <p>Constructor.</p> <p><code>session_id</code>     Optional session id. If not provided, will generate     new session id. <code>expiry</code>     Expiration time. If not provided, will never expire.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.is_alive","title":"<code>is_alive()</code>","text":"<p>Check if session is still alive</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.on_delete","title":"<code>on_delete(forced)</code>","text":"<p>Triggered when object was expired or deleted.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.promote","title":"<code>promote()</code>","text":"<p>Mark object as alive, so it won't be collected during next run of the garbage collector.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/","title":"octoprint.vendor.sockjs.tornado.static","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.ChunkingTestHandler","title":"<code>ChunkingTestHandler</code>","text":"<p>         Bases: <code>PreflightHandler</code></p> <p>SockJS chunking test handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.GreetingsHandler","title":"<code>GreetingsHandler</code>","text":"<p>         Bases: <code>BaseHandler</code></p> <p>SockJS greetings page handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.IFrameHandler","title":"<code>IFrameHandler</code>","text":"<p>         Bases: <code>BaseHandler</code></p> <p>SockJS IFrame page handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.InfoHandler","title":"<code>InfoHandler</code>","text":"<p>         Bases: <code>PreflightHandler</code></p> <p>SockJS 0.2+ /info handler</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/","title":"octoprint.vendor.sockjs.tornado.stats","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage","title":"<code>MovingAverage(period = 10)</code>","text":"<p>         Bases: <code>object</code></p> <p>Moving average class implementation</p> <p>Constructor.</p> <p><code>period</code>     Moving window size. Average will be calculated     from the data in the window.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage.add","title":"<code>add(n)</code>","text":"<p>Add value to the current accumulator</p> <p><code>n</code>     Value to add</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage.flush","title":"<code>flush()</code>","text":"<p>Add accumulator to the moving average queue and reset it. For example, called by the StatsCollector once per second to calculate per-second average.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.StatsCollector","title":"<code>StatsCollector()</code>","text":"<p>         Bases: <code>object</code></p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.StatsCollector.dump","title":"<code>dump()</code>","text":"<p>Return dictionary with current statistical information</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/util/","title":"octoprint.vendor.sockjs.tornado.util","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/websocket/","title":"octoprint.vendor.sockjs.tornado.websocket","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/","title":"octoprint.vendor.sockjs.tornado.transports","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/","title":"octoprint.vendor.sockjs.tornado.transports.base","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin","title":"<code>BaseTransportMixin</code>","text":"<p>         Bases: <code>object</code></p> <p>Base transport.</p> <p>Implements few methods that session expects to see in each transport.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin.get_conn_info","title":"<code>get_conn_info()</code>","text":"<p>Return <code>ConnectionInfo</code> object from current transport</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin.session_closed","title":"<code>session_closed()</code>","text":"<p>Called by the session, when it gets closed</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/eventsource/","title":"octoprint.vendor.sockjs.tornado.transports.eventsource","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/htmlfile/","title":"octoprint.vendor.sockjs.tornado.transports.htmlfile","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/jsonp/","title":"octoprint.vendor.sockjs.tornado.transports.jsonp","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/","title":"octoprint.vendor.sockjs.tornado.transports.pollingbase","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase","title":"<code>PollingTransportBase</code>","text":"<p>         Bases: <code>basehandler.PreflightHandler</code>, <code>base.BaseTransportMixin</code></p> <p>Polling transport handler base class</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase.send_message","title":"<code>send_message(message, binary = False)</code>","text":"<p>Called by the session when some data is available</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase.session_closed","title":"<code>session_closed()</code>","text":"<p>Called by the session when it was closed</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/","title":"octoprint.vendor.sockjs.tornado.transports.rawwebsocket","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/#octoprint.vendor.sockjs.tornado.transports.rawwebsocket.RawSession","title":"<code>RawSession</code>","text":"<p>         Bases: <code>session.BaseSession</code></p> <p>Raw session without any sockjs protocol encoding/decoding. Simply works as a proxy between <code>SockJSConnection</code> class and <code>RawWebSocketTransport</code>.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/#octoprint.vendor.sockjs.tornado.transports.rawwebsocket.RawWebSocketTransport","title":"<code>RawWebSocketTransport</code>","text":"<p>         Bases: <code>websocket.SockJSWebSocketHandler</code>, <code>base.BaseTransportMixin</code></p> <p>Raw Websocket transport</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/","title":"octoprint.vendor.sockjs.tornado.transports.streamingbase","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase","title":"<code>StreamingTransportBase</code>","text":"<p>         Bases: <code>pollingbase.PollingTransportBase</code></p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.notify_sent","title":"<code>notify_sent(data_len)</code>","text":"<p>Update amount of data sent</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.send_complete","title":"<code>send_complete(f = None)</code>","text":"<p>Verify if connection should be closed based on amount of data that was sent.</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.should_finish","title":"<code>should_finish()</code>","text":"<p>Check if transport should close long running connection after sending X bytes to the client.</p> <p><code>data_len</code>     Amount of data that was sent</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/websocket/","title":"octoprint.vendor.sockjs.tornado.transports.websocket","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/websocket/#octoprint.vendor.sockjs.tornado.transports.websocket.WebSocketTransport","title":"<code>WebSocketTransport</code>","text":"<p>         Bases: <code>websocket.SockJSWebSocketHandler</code>, <code>base.BaseTransportMixin</code></p> <p>Websocket transport</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhr/","title":"octoprint.vendor.sockjs.tornado.transports.xhr","text":""},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhr/#octoprint.vendor.sockjs.tornado.transports.xhr.XhrPollingTransport","title":"<code>XhrPollingTransport</code>","text":"<p>         Bases: <code>pollingbase.PollingTransportBase</code></p> <p>xhr-polling transport implementation</p>"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhrstreaming/","title":"octoprint.vendor.sockjs.tornado.transports.xhrstreaming","text":""},{"location":"reference/octoprint_client/","title":"octoprint_client","text":""},{"location":"reference/octoprint_client/#octoprint_client.SocketClient","title":"<code>SocketClient(url, use_ssl = False, daemon = True, **kwargs)</code>","text":""},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.is_connected","title":"<code>is_connected</code>  <code>property</code>","text":"<p>Whether the web socket is connected or not.</p>"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.connect","title":"<code>connect()</code>","text":"<p>Connects the socket.</p>"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnect the web socket.</p>"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.reconnect","title":"<code>reconnect(timeout = None, disconnect = True)</code>","text":"<p>Tries to reconnect to the web socket.</p> <p>If timeout is set will try to reconnect over the specified timeout in seconds and return False if the connection could not be re-established.</p> <p>If no timeout is provided, the method will block until the connection could be re-established.</p> <p>If disconnect is set to <code>True</code> will disconnect the socket explicitly first if it is currently connected.</p> <p>Parameters:</p> <ul> <li> timeout             (<code>number</code>)         \u2013          <p>timeout in seconds to wait for the reconnect to happen.</p> </li> <li> disconnect             (<code>bool</code>)         \u2013          <p>Whether to disconnect explicitly from the socket if a connection is currently established (True, default) or not (False).</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>bool - True if the reconnect was successful, False otherwise.</p> </li> </ul>"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.wait","title":"<code>wait(timeout = None)</code>","text":"<p>Waits for the closing of the socket or the timeout.</p>"},{"location":"reference/octoprint_setuptools/","title":"octoprint_setuptools","text":""},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/bundled-plugins/discovery/","title":"Discovery Plugin","text":"<p>Todo</p> <p>Migrate me</p>"},{"location":"user-guide/configuration/cli/","title":"Command-line configuration interface","text":"<p>Added in version 1.3.0</p> <p>OctoPrint provides a basic command line interface for manipulation of <code>config.yaml</code>:</p> <pre><code>$ octoprint config --help\nUsage: octoprint config [OPTIONS] COMMAND [ARGS]...\n  Basic config manipulation.\nOptions:\n  --help  Show this message and exit.\nCommands:\n  append_value  Appends value to list behind config path.\n  effective     Retrieves the full effective config.\n  get           Retrieves value from config path.\n  insert_value  Inserts value at index of list behind config key.\n  remove        Removes a config path.\n  remove_value  Removes value from list at config path.\n  set           Sets a config path to the provided value.\n$ octoprint config append_value --help\nUsage: octoprint config append_value [OPTIONS] PATH VALUE\n  Appends value to list behind config path.\nOptions:\n  --json\n  --help  Show this message and exit.\n$ octoprint config effective --help\nUsage: octoprint config effective [OPTIONS]\n  Retrieves the full effective config.\nOptions:\n  --json  Output value formatted as JSON\n  --yaml  Output value formatted as YAML\n  --raw   Output value as raw string representation\n  --help  Show this message and exit.\n$ octoprint config get --help\nUsage: octoprint config get [OPTIONS] PATH\n  Retrieves value from config path.\nOptions:\n  --json  Output value formatted as JSON\n  --yaml  Output value formatted as YAML\n  --raw   Output value as raw string representation\n  --help  Show this message and exit.\n$ octoprint config insert_value --help\nUsage: octoprint config insert_value [OPTIONS] PATH INDEX VALUE\n  Inserts value at index of list behind config key.\nOptions:\n  --json\n  --help  Show this message and exit.\n$ octoprint config remove --help\nUsage: octoprint config remove [OPTIONS] PATH\n  Removes a config path.\nOptions:\n  --help  Show this message and exit.\n$ octoprint config remove_value --help\nUsage: octoprint config remove_value [OPTIONS] PATH VALUE\n  Removes value from list at config path.\nOptions:\n  --json\n  --help  Show this message and exit.\n$ octoprint config set --help\nUsage: octoprint config set [OPTIONS] PATH VALUE\n  Sets a config path to the provided value.\nOptions:\n  --bool   Interpret value as bool\n  --float  Interpret value as float\n  --int    Interpret value as int\n  --json   Parse value from json\n  --help   Show this message and exit.\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/","title":"Main configuration: config.yaml","text":"<p>If not specified via the command line, the main configuration file <code>config.yaml</code> for  OctoPrint is expected in its settings folder, which unless defined differently via the  command line is located at <code>~/.octoprint</code> on Linux, at <code>%APPDATA%/OctoPrint</code> on Windows  and at <code>~/Library/Application Support/OctoPrint</code> on macOS. If the file is not there, you  can just create it - it will only get created by OctoPrint once you save settings that  deviate from the default settings.</p> <p>Note that many of these settings are available from the Settings in OctoPrint  itself. They can also be configured via config command line interface.</p> <p>The configuration is a YAML file with a top-level dictionary. The keys of this dictionary are as follows:</p> <pre><code>accessControl:\n# ...\napi:\n# ...\nappearance:\n# ...\ncontrols:\n# ...\ndevel:\n# ...\nestimation:\n# ...\nevents:\n# ...\nfeature:\n# ...\nfolder:\n# ...\ngcodeAnalysis:\n# ...\nplugins:\n# ...\nprinterParameters:\n# ...\nprinterProfiles:\n# ...\nscripts:\n# ...\nserial:\n# ...\nserver:\n# ...\nslicing:\n# ...\nsystem:\n# ...\ntemperature:\n# ...\nterminalFilters:\n# ...\nwebcam:\n# ...\n</code></pre> <p>Their content is described in the following sections.</p>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.accessControl","title":"accessControl","text":""},{"location":"user-guide/configuration/config-yaml/#defaults","title":"Defaults","text":"<pre><code>accessControl:\nsalt:\nuserManager: octoprint.access.users.FilebasedUserManager\ngroupManager: octoprint.access.groups.FilebasedGroupManager\npermissionManager: octoprint.access.permissions.PermissionManager\nuserfile:\ngroupfile:\nautologinLocal: false\nlocalNetworks:\n- 127.0.0.0/8\n- ::1/128\nautologinAs:\ntrustBasicAuthentication: false\ncheckBasicAuthenticationPassword: true\ntrustRemoteUser: false\nremoteUserHeader: REMOTE_USER\naddRemoteUsers: false\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model","title":"Data model","text":"Name Type Description Default <code>salt</code> <code>Optional[str]</code> Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. unset <code>userManager</code> <code>str</code> The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: <code>users.yaml</code> in the default configuration folder). <code>'octoprint.access.users.FilebasedUserManager'</code> <code>groupManager</code> <code>str</code> The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: <code>groups.yaml</code> in the default configuration folder). <code>'octoprint.access.groups.FilebasedGroupManager'</code> <code>permissionManager</code> <code>str</code> The permission manager implementation to use. <code>'octoprint.access.permissions.PermissionManager'</code> <code>userfile</code> <code>Optional[str]</code> The YAML user file to use. If left out defaults to <code>users.yaml</code> in the default configuration folder. unset <code>groupfile</code> <code>Optional[str]</code> The YAML group file to use. If left out defaults to <code>groups.yaml</code> in the default configuration folder. unset <code>autologinLocal</code> <code>bool</code> If set to true, will automatically log on clients originating from any of the networks defined in <code>localNetworks</code> as the user defined in <code>autologinAs</code>. <code>False</code> <code>localNetworks</code> <code>List[str]</code> A list of networks or IPs for which an automatic logon as the user defined in <code>autologinAs</code> will take place. If available OctoPrint will evaluate the <code>X-Forwarded-For</code> HTTP header for determining the client's IP address. Defaults to anything originating from localhost. <code>['127.0.0.0/8', '::1/128']</code> <code>autologinAs</code> <code>Optional[str]</code> The name of the user to automatically log on clients originating from <code>localNetworks</code> as. Must be the name of one of your configured users. unset <code>trustBasicAuthentication</code> <code>bool</code> Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! <code>False</code> <code>checkBasicAuthenticationPassword</code> <code>bool</code> Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. <code>True</code> <code>trustRemoteUser</code> <code>bool</code> Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! <code>False</code> <code>remoteUserHeader</code> <code>str</code> Header used by the reverse proxy to convey the authenticated user. <code>'REMOTE_USER'</code> <code>addRemoteUsers</code> <code>bool</code> If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. <code>False</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.api","title":"api","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_1","title":"Defaults","text":"<pre><code>api:\nkey:\napps: {}\nallowCrossOrigin: false\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_1","title":"Data model","text":"Name Type Description Default <code>key</code> <code>Optional[str]</code> Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run. unset <code>apps</code> <code>Dict[str, str]</code> <code>{}</code> <code>allowCrossOrigin</code> <code>bool</code> Whether to allow cross origin access to the API or not. <code>False</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.appearance","title":"appearance","text":"<p>Using the <code>appearance</code> settings you can tweak OctoPrint's appearance a bit to better  distinguish multiple instances/printers appearance or to modify the order and presence  of the various UI components</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_2","title":"Defaults","text":"<pre><code>appearance:\nname: ''\ncolor: default\ncolorTransparent: false\ncolorIcon: true\ndefaultLanguage: _default\nshowFahrenheitAlso: false\nfuzzyTimes: true\ncloseModalsWithClick: true\nshowInternalFilename: true\ncomponents:\norder:\nnavbar:\n- settings\n- systemmenu\n- plugin_announcements\n- plugin_logging_seriallog\n- plugin_logging_plugintimingslog\n- plugin_pi_support\n- login\nsidebar:\n- plugin_firmware_check_warning\n- plugin_firmware_check_info\n- connection\n- state\n- files\ntab:\n- temperature\n- control\n- plugin_gcodeviewer\n- terminal\n- timelapse\nsettings:\n- section_printer\n- serial\n- printerprofiles\n- temperatures\n- terminalfilters\n- gcodescripts\n- section_features\n- features\n- webcam\n- accesscontrol\n- plugin_gcodeviewer\n- api\n- plugin_appkeys\n- section_octoprint\n- server\n- folders\n- appearance\n- plugin_logging\n- plugin_pluginmanager\n- plugin_softwareupdate\n- plugin_announcements\n- plugin_eventmanager\n- plugin_backup\n- plugin_tracking\n- plugin_errortracking\n- plugin_pi_support\nusersettings:\n- access\n- interface\nwizard:\n- plugin_softwareupdate_update\n- plugin_backup\n- plugin_corewizard_acl\n- plugin_corewizard_onlinecheck\nabout:\n- about\n- plugin_pi_support\n- supporters\n- authors\n- changelog\n- license\n- thirdparty\n- plugin_pluginmanager\ngeneric: []\ndisabled:\nnavbar: []\nsidebar: []\ntab: []\nsettings: []\nusersettings: []\nwizard: []\nabout: []\ngeneric: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_2","title":"Data model","text":"Name Type Description Default <code>name</code> <code>str</code> Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: &lt;&gt;\") <code>''</code> <code>color</code> <code>str</code> Use this to color the navigation bar. Valid values: <code>blue</code>, <code>default</code>, <code>green</code>, <code>orange</code>, <code>red</code>, <code>violet</code>, <code>yellow</code>. <code>'default'</code> <code>colorTransparent</code> <code>bool</code> Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. <code>False</code> <code>colorIcon</code> <code>bool</code> <code>True</code> <code>defaultLanguage</code> <code>str</code> Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. <code>'_default'</code> <code>showFahrenheitAlso</code> <code>bool</code> <code>False</code> <code>fuzzyTimes</code> <code>bool</code> <code>True</code> <code>closeModalsWithClick</code> <code>bool</code> <code>True</code> <code>showInternalFilename</code> <code>bool</code> Show the internal filename in the files sidebar, if necessary. <code>True</code> <code>components.*</code> Configures the order and availability of the UI components. <code>components.order.*</code> Defines the order of the components within their respective containers. <code>components.order.navbar</code> <code>List[str]</code> Order of navbar items. <code>['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login']</code> <code>components.order.sidebar</code> <code>List[str]</code> Order of sidebar items. <code>['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files']</code> <code>components.order.tab</code> <code>List[str]</code> Order of tabs. <code>['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse']</code> <code>components.order.settings</code> <code>List[str]</code> Order of settings. <code>['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support']</code> <code>components.order.usersettings</code> <code>List[str]</code> Order of user settings. <code>['access', 'interface']</code> <code>components.order.wizard</code> <code>List[str]</code> Order of wizards. <code>['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck']</code> <code>components.order.about</code> <code>List[str]</code> Order of about dialog items. <code>['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager']</code> <code>components.order.generic</code> <code>List[str]</code> Order of generic items. <code>[]</code> <code>components.disabled.*</code> Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. <code>components.disabled.navbar</code> <code>List[str]</code> Disabled navbar items. <code>[]</code> <code>components.disabled.sidebar</code> <code>List[str]</code> Disabled sidebar items. <code>[]</code> <code>components.disabled.tab</code> <code>List[str]</code> Disabled tabs. <code>[]</code> <code>components.disabled.settings</code> <code>List[str]</code> Disabled settings. <code>[]</code> <code>components.disabled.usersettings</code> <code>List[str]</code> Disabled user settings. <code>[]</code> <code>components.disabled.wizard</code> <code>List[str]</code> Disabled wizards. <code>[]</code> <code>components.disabled.about</code> <code>List[str]</code> Disabled about dialog items. <code>[]</code> <code>components.disabled.generic</code> <code>List[str]</code> Disabled generic items. <code>[]</code> <p>Hint</p> <p>By modifying the <code>components.order</code> lists you may reorder OctoPrint's UI components  as you like.  You can also inject Plugins at another than their default location in  their respective container by adding the entry <code>plugin_&lt;plugin identifier&gt;</code> where  you want them to appear.</p> <p>When you override this setting, the resulting order for display will be calculated as follows:</p> <ul> <li>first all components as defined by the <code>components.order</code> list</li> <li>then all enabled core components as defined in the default order</li> </ul> <p>Components not contained within the default order (e.g. from third party plugins) will be either prepended or appended to that result, depending on the component type.</p> <p>Example: If you want the tab of the Hello World Plugin to appear as the first tab in OctoPrint, you'd need to redefine <code>components.order.tab</code> by including something  like this in your <code>config.yaml</code>:</p> <pre><code>appearance:\ncomponents:\norder:\ntab:\n- plugin_helloworld\n</code></pre> <p>OctoPrint will then display the Hello World tab first, followed by the default tabs and then any other not explicitely ordered tabs.</p>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.controls","title":"controls","text":"<p>Use the <code>controls</code> section to add custom controls to the \"Controls\" tab within  OctoPrint.</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_3","title":"Defaults","text":"<pre><code>controls: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_3","title":"Data model","text":"<p><code>controls</code> is a list, with each entry in the list being a dictionary describing either a  control or a container.</p>"},{"location":"user-guide/configuration/config-yaml/#control-model","title":"Control model","text":"Name Type Description Default <code>name</code> <code>str</code> The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. required <code>command</code> <code>Optional[str]</code> A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>commands</code> and <code>script</code>. The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met. unset <code>commands</code> <code>Optional[List[str]]</code> A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>command</code> and <code>script</code>. The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met. unset <code>script</code> <code>Optional[str]</code> The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the <code>name</code> attribute. Mutually exclusive with <code>command</code> and <code>commands</code>. The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the <code>enabled</code> attribute are not met. Values of input parameters will be available in the template context under the <code>parameter</code> variable (e.g. an input parameter <code>speed</code> will be available in the script template as <code>parameter.speed</code>). On top of that all other variables defined in the GCODE template context will be available. unset <code>javascript</code> <code>Optional[str]</code> A JavaScript snippet to be executed when the button rendered for <code>command</code> or <code>commands</code> is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is <code>eval</code>'d and processed in a context where the control it is part of is provided as local variable <code>data</code> and the <code>ControlViewModel</code> is available as <code>self</code>. unset <code>additionalClasses</code> <code>Optional[str]</code> Additional classes to apply to the button of a <code>command</code>, <code>commands</code>, <code>script</code> or <code>javascript</code> control, other than the default <code>btn</code>. Can be used to visually style the button, e.g. set to <code>btn-danger</code> to turn the button red. unset <code>enabled</code> <code>Optional[str]</code> A JavaScript snippet returning either <code>true</code> or <code>false</code> determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is <code>eval</code>'d and processed in a context where the control it is part of is provided as local variable <code>data</code> and the <code>ControlViewModel</code> is available as <code>self</code>. unset <code>regex</code> <code>Optional[str]</code> A regular expression  to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with <code>template</code> this allows rendition of received data from the printer within the UI. unset <code>template</code> <code>Optional[str]</code> A template to use for rendering the match of <code>regex</code>. May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. <code>Temperature: {temperature}</code> for a regex <code>T:\\s*(?P&lt;temperature&gt;\\d+(\\.\\d*)</code>) or positional groups within the regex (e.g. <code>Position: X={0}, Y={1}, Z={2}, E={3}</code> for a regex <code>X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+)</code>). unset <code>confirm</code> <code>Optional[str]</code> A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. unset"},{"location":"user-guide/configuration/config-yaml/#container-model","title":"Container model","text":"Name Type Description Default <code>children</code> <code>List[Union[Control, Container]]</code> A list of children controls or containers contained within this container. <code>[]</code> <code>name</code> <code>Optional[str]</code> A name to display above the container, basically a section header. unset <code>layout</code> <code>str</code> The layout to use for laying out the contained children, either from top to bottom (<code>vertical</code>) or from left to right (<code>horizontal</code>). Valid values: <code>horizontal</code>, <code>vertical</code>. <code>'vertical'</code>"},{"location":"user-guide/configuration/config-yaml/#example","title":"Example","text":"<pre><code>controls:\n- name: Fan\nlayout: horizontal\nchildren:\n- name: Enable Fan\ncommand: M106 S%(speed)s\ninput:\n- name: Speed (0-255)\nparameter: speed\ndefault: 255\nslider:\nmin: 0\nmax: 255\n- name: Disable Fan\ncommand: M107\n- name: Example for multiple commands\nchildren:\n- name: Move X (static)\nconfirm: You are about to move the X axis right by 10mm with 3000mm/min.\ncommands:\n- G91\n- G1 X10 F3000\n- G90\n- name: Move X (parametric)\ncommands:\n- G91\n- G1 X%(distance)s F%(speed)s\n- G90\ninput:\n- default: 10\nname: Distance\nparameter: distance\n- default: 3000\nname: Speed\nparameter: speed\n- name: Reporting\nchildren:\n- name: Get Position\ncommand: M114\nregex: \"X:([-+]?[0-9.]+) Y:([-+]?[0-9.]+) Z:([-+]?[0-9.]+) E:([-+]?[0-9.]+)\"\ntemplate: \"Position: X={0}, Y={1}, Z={2}, E={3}\"\n- name: Fun stuff\nchildren:\n- name: Dance\nscript: custom/dance.gco\ninput:\n- name: Go arounds\nparameter: repetitions\nslider:\nmax: 10\nmin: 1\nstep: 1\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.devel","title":"devel","text":"<p>The following settings are only relevant to you if you want to do OctoPrint development.</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_4","title":"Defaults","text":"<pre><code>devel:\nstylesheet: css\ncache:\nenabled: true\npreemptive: true\nwebassets:\nbundle: true\nclean_on_startup: true\nminify: true\nminify_plugins: false\nuseFrozenDictForPrinterState: true\nshowLoadingAnimation: true\nsockJsConnectTimeout: 30\npluginTimings: false\nenableRateLimiter: true\nenableCsrfProtection: true\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_4","title":"Data model","text":"Name Type Description Default <code>stylesheet</code> <code>str</code> Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. Valid values: <code>css</code>, <code>less</code>. <code>'css'</code> <code>cache.*</code> Settings for OctoPrint's internal caching. <code>cache.enabled</code> <code>bool</code> <code>True</code> <code>cache.preemptive</code> <code>bool</code> <code>True</code> <code>webassets.*</code> Settings for OctoPrint's web asset merging and minifying. <code>webassets.bundle</code> <code>bool</code> If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the <code>minify</code> setting. <code>True</code> <code>webassets.clean_on_startup</code> <code>bool</code> Whether to delete generated web assets on server startup (forcing a regeneration). <code>True</code> <code>webassets.minify</code> <code>bool</code> If set to true, OctoPrint will the core and library javascript assets. Note: if <code>bundle</code> is set to false, no minification will take place either. <code>True</code> <code>webassets.minify_plugins</code> <code>bool</code> If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if <code>bundle</code> or <code>minify</code> are set to false, no minification of the plugin assets will take place either. <code>False</code> <code>useFrozenDictForPrinterState</code> <code>bool</code> <code>True</code> <code>showLoadingAnimation</code> <code>bool</code> Enable or disable the loading animation. <code>True</code> <code>sockJsConnectTimeout</code> <code>float</code> <code>30</code> <code>pluginTimings</code> <code>bool</code> <code>False</code> <code>enableRateLimiter</code> <code>bool</code> Enable or disable the rate limiter. Careful, disabling this reduces security. <code>True</code> <code>enableCsrfProtection</code> <code>bool</code> Enable or disable the CSRF protection. Careful, disabling this reduces security. <code>True</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.estimation","title":"estimation","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_5","title":"Defaults","text":"<pre><code>estimation:\nprintTime:\nstatsWeighingUntil: 0.5\nvalidityRange: 0.15\nforceDumbFromPercent: 0.3\nforceDumbAfterMin: 30.0\nstableThreshold: 60\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_5","title":"Data model","text":"Name Type Description Default <code>printTime.*</code> Parameters for the print time estimation during an ongoing print job. <code>printTime.statsWeighingUntil</code> <code>float</code> Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. <code>0.5</code> <code>printTime.validityRange</code> <code>float</code> Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used. <code>0.15</code> <code>printTime.forceDumbFromPercent</code> <code>float</code> If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. <code>0.3</code> <code>printTime.forceDumbAfterMin</code> <code>float</code> If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. <code>30.0</code> <code>printTime.stableThreshold</code> <code>int</code> Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. <code>60</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.events","title":"events","text":"<p>Use the following settings to add shell/gcode commands to be executed on certain events:</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_6","title":"Defaults","text":"<pre><code>events:\nenabled: true\nsubscriptions: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_6","title":"Data model","text":"Name Type Description Default <code>enabled</code> <code>bool</code> Whether event subscriptions should be enabled or not. <code>True</code> <code>subscriptions[]</code> A list of event subscriptions. <code>subscriptions[].event</code> <code>str</code> The event to subscribe to. required <code>subscriptions[].name</code> <code>Optional[str]</code> The event name to show on the UI unset <code>subscriptions[].command</code> <code>str</code> The command to execute when the event is triggered, either a GCODE or a system command. required <code>subscriptions[].type</code> <code>str</code> The type of the command. Valid values: <code>gcode</code>, <code>system</code>. required <code>subscriptions[].enabled</code> <code>bool</code> Whether the event subscription should be enabled. <code>True</code> <code>subscriptions[].debug</code> <code>bool</code> If set to <code>true</code>, OctoPrint will log the command after performing all placeholder replacements. <code>False</code>"},{"location":"user-guide/configuration/config-yaml/#example_1","title":"Example","text":"<pre><code>events:\nsubscriptions:\n# example event consumer that prints a message to the system log if the printer is disconnected\n- event: Disconnected\ncommand: \"logger 'Printer got disconnected'\"\ntype: system\n# example event consumer that queries printer information from the firmware, prints a \"Connected\"\n# message to the LCD and homes the print head upon established printer connection, disabled though\n- event: Connected\ncommand: M115,M117 printer connected!,G28\ntype: gcode\nenabled: False\n</code></pre> <p>Hint</p> <p>For debugging purposes, you can set the <code>debug</code> property on your event subscription  definition to <code>true</code>. That will make the event handler print a log line with your  subscription's command after performing all placeholder replacements.</p> <p>Example:</p> <pre><code>events:\nsubscriptions:\n- event: Startup\ncommand: \"logger 'OctoPrint started up'\"\ntype: system\ndebug: true\n</code></pre> <p>This will be logged in OctoPrint's logfile as</p> <pre><code>Executing System Command: logger 'OctoPrint started up'\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.feature","title":"feature","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_7","title":"Defaults","text":"<pre><code>feature:\ntemperatureGraph: true\nsdSupport: true\nkeyboardControl: true\npollWatched: false\nmodelSizeDetection: true\nrememberFileFolder: false\nprintStartConfirmation: false\nprintCancelConfirmation: true\nuploadOverwriteConfirmation: true\nautoUppercaseBlacklist:\n- M117\n- M118\ng90InfluencesExtruder: false\nenforceReallyUniversalFilenames: false\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_7","title":"Data model","text":"Name Type Description Default <code>temperatureGraph</code> <code>bool</code> Whether to enable the temperature graph in the UI or not. <code>True</code> <code>sdSupport</code> <code>bool</code> Specifies whether support for SD printing and file management should be enabled. <code>True</code> <code>keyboardControl</code> <code>bool</code> Whether to enable the keyboard control feature in the control tab. <code>True</code> <code>pollWatched</code> <code>bool</code> Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). <code>False</code> <code>modelSizeDetection</code> <code>bool</code> Whether to enable model size detection and warning (true) or not (false). <code>True</code> <code>rememberFileFolder</code> <code>bool</code> Whether to remember the selected folder on the file manager. <code>False</code> <code>printStartConfirmation</code> <code>bool</code> Whether to show a confirmation on print start (true) or not (false) <code>False</code> <code>printCancelConfirmation</code> <code>bool</code> Whether to show a confirmation on print cancelling (true) or not (false) <code>True</code> <code>uploadOverwriteConfirmation</code> <code>bool</code> <code>True</code> <code>autoUppercaseBlacklist</code> <code>List[str]</code> Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. <code>['M117', 'M118']</code> <code>g90InfluencesExtruder</code> <code>bool</code> Whether <code>G90</code>/<code>G91</code> also influence absolute/relative mode of extruders. <code>False</code> <code>enforceReallyUniversalFilenames</code> <code>bool</code> Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. <code>False</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.folder","title":"folder","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_8","title":"Defaults","text":"<pre><code>folder:\nuploads:\ntimelapse:\ntimelapse_tmp:\nlogs:\nvirtualSd:\nwatched:\nplugins:\nslicingProfiles:\nprinterProfiles:\nscripts:\ntranslations:\ngenerated:\ndata:\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_8","title":"Data model","text":"Name Type Description Default <code>uploads</code> <code>Optional[str]</code> Absolute path where to store gcode uploads. Defaults to the <code>uploads</code> folder in OctoPrint's base folder. unset <code>timelapse</code> <code>Optional[str]</code> Absolute path where to store finished timelase recordings. Defaults to the <code>timelapse</code> folder in OctoPrint's base folder. unset <code>timelapse_tmp</code> <code>Optional[str]</code> Absolute path where to store temporary timelapse snapshots. Defaults to the <code>timelapse/tmp</code> folder in OctoPrint's base folder. unset <code>logs</code> <code>Optional[str]</code> Absolute path where to store logs. Defaults to the <code>logs</code> folder in OctoPrint's base folder. unset <code>virtualSd</code> <code>Optional[str]</code> Absolute path where to store the virtual printer's SD card files. Defaults to the <code>virtualSd</code> folder in OctoPrint's base folder. unset <code>watched</code> <code>Optional[str]</code> Absolute path to the watched folder. Defaults to the <code>watched</code> folder in OctoPrint's base folder. unset <code>plugins</code> <code>Optional[str]</code> Absolute path where to locate and install single file plugins. Defaults to the <code>plugins</code> folder in OctoPrint's base folder. unset <code>slicingProfiles</code> <code>Optional[str]</code> Absolute path where to store slicing profiles. Defaults to the <code>slicingProfiles</code> folder in OctoPrint's base folder. unset <code>printerProfiles</code> <code>Optional[str]</code> Absolute path where to store printer profiles. Defaults to the <code>printerProfiles</code> folder in OctoPrint's base folder. unset <code>scripts</code> <code>Optional[str]</code> Absolute path where to store (GCODE) scripts. Defaults to the <code>scripts</code> folder in OctoPrint's base folder. unset <code>translations</code> <code>Optional[str]</code> Absolute path where to store additional translations. Defaults to the <code>translations</code> folder in OctoPrint's base folder. unset <code>generated</code> <code>Optional[str]</code> Absolute path where to store generated files. Defaults to the <code>generated</code> folder in OctoPrint's base folder. unset <code>data</code> <code>Optional[str]</code> Absolute path where to store additional data. Defaults to the <code>data</code> folder in OctoPrint's base folder. unset"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.gcodeAnalysis","title":"gcodeAnalysis","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_9","title":"Defaults","text":"<pre><code>gcodeAnalysis:\nmaxExtruders: 10\nthrottle_normalprio: 0.01\nthrottle_highprio: 0.0\nthrottle_lines: 100\nrunAt: idle\nbedZ: 0.0\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_9","title":"Data model","text":"Name Type Description Default <code>maxExtruders</code> <code>int</code> Maximum number of extruders to support/to sanity check for. <code>10</code> <code>throttle_normalprio</code> <code>float</code> Pause between each processed GCODE line batch in normal priority mode, seconds. <code>0.01</code> <code>throttle_highprio</code> <code>float</code> Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. <code>0.0</code> <code>throttle_lines</code> <code>int</code> GCODE line batch size. <code>100</code> <code>runAt</code> <code>str</code> Whether to run the analysis only when idle (not printing), regardless of printing state or never. Valid values: <code>always</code>, <code>idle</code>, <code>never</code>. <code>'idle'</code> <code>bedZ</code> <code>float</code> Z position considered the location of the bed. <code>0.0</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.plugins","title":"plugins","text":"<p>The <code>plugins</code> section is where plugins can store their specific settings. It is also  where the installed but disabled plugins are tracked.</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_10","title":"Defaults","text":"<pre><code>plugins:\n_disabled: []\n_forcedCompatible: []\n_sortingOrder: {}\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_10","title":"Data model","text":"Name Type Description Default <code>_disabled</code> <code>None</code> Identifiers of installed but disabled plugins. <code>[]</code> <code>_forcedCompatible</code> <code>None</code> Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. <code>[]</code> <code>_sortingOrder</code> <code>None</code> Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name. <code>{}</code> <p>Additionally to the fields listed here, <code>plugins</code> will contain further keys for each plugin that is storing settings itself. The keys will be the plugin's identifier.</p>"},{"location":"user-guide/configuration/config-yaml/#example_2","title":"Example","text":"<pre><code>plugins:\n_disabled:\n- some_plugin\n_forcedCompatible:\n- some_other_plugin\n_sortingOrder:\nyet_another_plugin:\noctoprint.plugin.ordertest.callback: 1\nStartupPlugin.on_startup: 10\nvirtual_printer:\n_config_version: 1\nenabled: true\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.printerParameters","title":"printerParameters","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_11","title":"Defaults","text":"<pre><code>printerParameters:\npauseTriggers: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_11","title":"Data model","text":"Name Type Description Default <code>pauseTriggers</code> <code>List[str]</code> <code>[]</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.printerProfiles","title":"printerProfiles","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_12","title":"Defaults","text":"<pre><code>printerProfiles:\ndefault:\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_12","title":"Data model","text":"Name Type Description Default <code>default</code> <code>Optional[str]</code> Name of the printer profile to default to. unset"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.scripts","title":"scripts","text":"<p>Default scripts and snippets. You'd usually not edit the <code>config.yaml</code> file to adjust  those but instead create the corresponding files in <code>~/.octoprint/scripts/</code>.  See GCODE Scripts.</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_13","title":"Defaults","text":"<pre><code>scripts:\ngcode:\nafterPrinterConnected:\nbeforePrinterDisconnected:\nbeforePrintStarted:\nafterPrintCancelled: \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet\n'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\"\nafterPrintDone:\nbeforePrintPaused:\nafterPrintResumed:\nbeforeToolChange:\nafterToolChange:\nsnippets:\ndisable_hotends: \"{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{\ntool }} S0\\n{% endfor %}{% endif %}\"\ndisable_bed: \"{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}\"\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_13","title":"Data model","text":"Name Type Description Default <code>gcode.*</code> <code>gcode.afterPrinterConnected</code> <code>Optional[str]</code> unset <code>gcode.beforePrinterDisconnected</code> <code>Optional[str]</code> unset <code>gcode.beforePrintStarted</code> <code>Optional[str]</code> unset <code>gcode.afterPrintCancelled</code> <code>Optional[str]</code> <code>\"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\"</code> <code>gcode.afterPrintDone</code> <code>Optional[str]</code> unset <code>gcode.beforePrintPaused</code> <code>Optional[str]</code> unset <code>gcode.afterPrintResumed</code> <code>Optional[str]</code> unset <code>gcode.beforeToolChange</code> <code>Optional[str]</code> unset <code>gcode.afterToolChange</code> <code>Optional[str]</code> unset <code>gcode.snippets</code> <code>Dict[str, str]</code> <code>{'disable_hotends': '{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{ tool }} S0\\n{% endfor %}{% endif %}', 'disable_bed': '{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}'}</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.serial","title":"serial","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_14","title":"Defaults","text":"<pre><code>serial:\nport:\nbaudrate:\nexclusive: true\nlowLatency: false\nautoconnect: false\nautorefresh: true\nautorefreshInterval: 1\nlog: false\ntimeout:\ndetectionFirst: 10.0\ndetectionConsecutive: 2.0\nconnection: 10.0\ncommunication: 30.0\ncommunicationBusy: 3.0\ntemperature: 5.0\ntemperatureTargetSet: 2.0\ntemperatureAutoreport: 2.0\nsdStatus: 1.0\nsdStatusAutoreport: 1.0\nposAutoreport: 5.0\nresendOk: 0.5\nbaudrateDetectionPause: 1.0\npositionLogWait: 10.0\nmaxCommunicationTimeouts:\nidle: 2\nprinting: 5\nlong: 5\nmaxWritePasses: 5\nadditionalPorts: []\nadditionalBaudrates: []\nblacklistedPorts: []\nblacklistedBaudrates: []\nlongRunningCommands:\n- G4\n- G28\n- G29\n- G30\n- G32\n- M400\n- M226\n- M600\nblockedCommands:\n- M0\n- M1\nignoredCommands: []\npausingCommands:\n- M0\n- M1\n- M25\nemergencyCommands:\n- M112\n- M108\n- M410\nchecksumRequiringCommands:\n- M110\nhelloCommand: M110 N0\ndisconnectOnErrors: true\nignoreErrorsFromFirmware: false\nterminalLogSize: 20\nlastLineBufferSize: 50\nlogResends: true\nsupportResendsWithoutOk: detect\nlogPositionOnPause: true\nlogPositionOnCancel: false\nabortHeatupOnCancel: true\nwaitForStartOnConnect: false\nwaitToLoadSdFileList: true\nalwaysSendChecksum: false\nneverSendChecksum: false\nsendChecksumWithUnknownCommands: false\nunknownCommandsNeedAck: false\nsdRelativePath: false\nsdAlwaysAvailable: false\nsdLowerCase: false\nsdCancelCommand: M25\nmaxNotSdPrinting: 2\nswallowOkAfterResend: true\nrepetierTargetTemp: false\nexternalHeatupDetection: true\nsupportWait: true\nignoreIdenticalResends: false\nidenticalResendsCountdown: 7\nsupportFAsCommand: false\nfirmwareDetection: true\nblockWhileDwelling: false\nuseParityWorkaround: detect\nmaxConsecutiveResends: 10\nsendM112OnError: true\ndisableSdPrintingDetection: false\nackMax: 1\nsanityCheckTools: true\nnotifySuppressedCommands: warn\ncapabilities:\nautoreport_temp: true\nautoreport_sdstatus: true\nautoreport_pos: true\nbusy_protocol: true\nemergency_parser: true\nextended_m20: true\nlfn_write: true\nresendRatioThreshold: 10\nresendRatioStart: 100\nignoreEmptyPorts: false\nencoding: ascii\nenableShutdownActionCommand: false\ntriggerOkForM29: true\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_14","title":"Data model","text":"Name Type Description Default <code>port</code> <code>Optional[str]</code> The default port to use to connect to the printer. If unset or set to <code>AUTO</code>, the port will be auto-detected. unset <code>baudrate</code> <code>Optional[int]</code> The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. unset <code>exclusive</code> <code>bool</code> Whether to request the serial port exclusively or not <code>True</code> <code>lowLatency</code> <code>bool</code> Whether to request low latency mode on the serial port or not <code>False</code> <code>autoconnect</code> <code>bool</code> Whether to try to automatically connect to the printer on startup or not <code>False</code> <code>autorefresh</code> <code>bool</code> Whether to automatically refresh the port list while no connection is established <code>True</code> <code>autorefreshInterval</code> <code>int</code> Interval in seconds at which to refresh the port list while no connection is established <code>1</code> <code>log</code> <code>bool</code> Whether to log whole communication to serial.log (warning: might decrease performance) <code>False</code> <code>timeout.*</code> Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems <code>timeout.detectionFirst</code> <code>float</code> <code>10.0</code> <code>timeout.detectionConsecutive</code> <code>float</code> <code>2.0</code> <code>timeout.connection</code> <code>float</code> Timeout for waiting to establish a connection with the selected port, in seconds <code>10.0</code> <code>timeout.communication</code> <code>float</code> Timeout during serial communication, in seconds <code>30.0</code> <code>timeout.communicationBusy</code> <code>float</code> Timeout during serial communication when busy protocol support is detected, in seconds <code>3.0</code> <code>timeout.temperature</code> <code>float</code> Timeout after which to query temperature when no target is set <code>5.0</code> <code>timeout.temperatureTargetSet</code> <code>float</code> Timeout after which to query temperature when a target is set <code>2.0</code> <code>timeout.temperatureAutoreport</code> <code>float</code> <code>2.0</code> <code>timeout.sdStatus</code> <code>float</code> Timeout after which to query the SD status while SD printing <code>1.0</code> <code>timeout.sdStatusAutoreport</code> <code>float</code> <code>1.0</code> <code>timeout.posAutoreport</code> <code>float</code> <code>5.0</code> <code>timeout.resendOk</code> <code>float</code> <code>0.5</code> <code>timeout.baudrateDetectionPause</code> <code>float</code> <code>1.0</code> <code>timeout.positionLogWait</code> <code>float</code> <code>10.0</code> <code>maxCommunicationTimeouts.*</code> <code>maxCommunicationTimeouts.idle</code> <code>int</code> Max. timeouts when the printer is idle <code>2</code> <code>maxCommunicationTimeouts.printing</code> <code>int</code> Max. timeouts when the printer is printing <code>5</code> <code>maxCommunicationTimeouts.long</code> <code>int</code> Max. timeouts when a long running command is active <code>5</code> <code>maxWritePasses</code> <code>int</code> Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error <code>5</code> <code>additionalPorts</code> <code>List[str]</code> Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern <code>[]</code> <code>additionalBaudrates</code> <code>List[int]</code> Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer <code>[]</code> <code>blacklistedPorts</code> <code>List[str]</code> <code>[]</code> <code>blacklistedBaudrates</code> <code>List[int]</code> <code>[]</code> <code>longRunningCommands</code> <code>List[str]</code> Commands which are known to take a long time to be acknowledged by the firmware, e.g. homing, dwelling, auto leveling etc. <code>['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600']</code> <code>blockedCommands</code> <code>List[str]</code> Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. <code>['M0', 'M1']</code> <code>ignoredCommands</code> <code>List[str]</code> Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. <code>[]</code> <code>pausingCommands</code> <code>List[str]</code> Commands which should cause OctoPrint to pause any ongoing prints. <code>['M0', 'M1', 'M25']</code> <code>emergencyCommands</code> <code>List[str]</code> <code>['M112', 'M108', 'M410']</code> <code>checksumRequiringCommands</code> <code>List[str]</code> Commands which need to always be send with a checksum. <code>['M110']</code> <code>helloCommand</code> <code>str</code> Command to send in order to initiate a handshake with the printer. <code>'M110 N0'</code> <code>disconnectOnErrors</code> <code>bool</code> Whether to disconnect from the printer on errors or not. <code>True</code> <code>ignoreErrorsFromFirmware</code> <code>bool</code> Whether to completely ignore errors from the firmware or not. <code>False</code> <code>terminalLogSize</code> <code>int</code> <code>20</code> <code>lastLineBufferSize</code> <code>int</code> <code>50</code> <code>logResends</code> <code>bool</code> Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. <code>True</code> <code>supportResendsWithoutOk</code> <code>str</code> Whether to support resends without follow-up ok or not. Valid values: <code>always</code>, <code>detect</code>, <code>never</code>. <code>'detect'</code> <code>logPositionOnPause</code> <code>bool</code> <code>True</code> <code>logPositionOnCancel</code> <code>bool</code> <code>False</code> <code>abortHeatupOnCancel</code> <code>bool</code> <code>True</code> <code>waitForStartOnConnect</code> <code>bool</code> Whether OctoPrint should wait for the <code>start</code> response from the printer before trying to send commands during connect. <code>False</code> <code>waitToLoadSdFileList</code> <code>bool</code> Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed. <code>True</code> <code>alwaysSendChecksum</code> <code>bool</code> Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. <code>False</code> <code>neverSendChecksum</code> <code>bool</code> <code>False</code> <code>sendChecksumWithUnknownCommands</code> <code>bool</code> Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression <code>^\\s*([GM]\\d+|T)</code>). <code>False</code> <code>unknownCommandsNeedAck</code> <code>bool</code> Specifies whether OctoPrint should also use up acknowledgments (<code>ok</code>) for commands that are not detected as valid GCODE (as in, they do not match the regular expression <code>^\\s*([GM]\\d+|T)</code>). <code>False</code> <code>sdRelativePath</code> <code>bool</code> Specifies whether firmware expects relative paths for selecting SD files. <code>False</code> <code>sdAlwaysAvailable</code> <code>bool</code> Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. <code>False</code> <code>sdLowerCase</code> <code>bool</code> <code>False</code> <code>sdCancelCommand</code> <code>str</code> <code>'M25'</code> <code>maxNotSdPrinting</code> <code>int</code> <code>2</code> <code>swallowOkAfterResend</code> <code>bool</code> <code>True</code> <code>repetierTargetTemp</code> <code>bool</code> Whether the printer sends repetier style target temperatures in the format <code>TargetExtr0:&lt;temperature&gt;</code> instead of attaching that information to the regular <code>M105</code> responses. <code>False</code> <code>externalHeatupDetection</code> <code>bool</code> Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. <code>True</code> <code>supportWait</code> <code>bool</code> <code>True</code> <code>ignoreIdenticalResends</code> <code>bool</code> Whether to ignore identical resends from the printer (true, repetier) or not (false). <code>False</code> <code>identicalResendsCountdown</code> <code>int</code> If <code>ignoreIdenticalResends</code> is true, how many consecutive identical resends to ignore. <code>7</code> <code>supportFAsCommand</code> <code>bool</code> Whether to support <code>F</code> on its own as a valid GCODE command (true) or not (false). <code>False</code> <code>firmwareDetection</code> <code>bool</code> Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). <code>True</code> <code>blockWhileDwelling</code> <code>bool</code> Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). <code>False</code> <code>useParityWorkaround</code> <code>str</code> Valid values: <code>always</code>, <code>detect</code>, <code>never</code>. <code>'detect'</code> <code>maxConsecutiveResends</code> <code>int</code> <code>10</code> <code>sendM112OnError</code> <code>bool</code> <code>True</code> <code>disableSdPrintingDetection</code> <code>bool</code> <code>False</code> <code>ackMax</code> <code>int</code> <code>1</code> <code>sanityCheckTools</code> <code>bool</code> <code>True</code> <code>notifySuppressedCommands</code> <code>str</code> Valid values: <code>info</code>, <code>never</code>, <code>warn</code>. <code>'warn'</code> <code>capabilities.*</code> <code>capabilities.autoreport_temp</code> <code>bool</code> Whether to enable temperature autoreport in the firmware if its support is detected <code>True</code> <code>capabilities.autoreport_sdstatus</code> <code>bool</code> Whether to enable SD printing autoreport in the firmware if its support is detected <code>True</code> <code>capabilities.autoreport_pos</code> <code>bool</code> Whether to enable position autoreport in the firmware if its support is detected <code>True</code> <code>capabilities.busy_protocol</code> <code>bool</code> Whether to shorten the communication timeout if the firmware seems to support the busy protocol <code>True</code> <code>capabilities.emergency_parser</code> <code>bool</code> Whether to send emergency commands out of band if the firmware seems to support the emergency parser <code>True</code> <code>capabilities.extended_m20</code> <code>bool</code> Whether to request extended M20 (file list) output from the firmware if its support is detected <code>True</code> <code>capabilities.lfn_write</code> <code>bool</code> Whether to enable long filename support for SD card writes if the firmware reports support for it <code>True</code> <code>resendRatioThreshold</code> <code>int</code> Percentage of resend requests among all sent lines that should be considered critical. <code>10</code> <code>resendRatioStart</code> <code>int</code> <code>100</code> <code>ignoreEmptyPorts</code> <code>bool</code> <code>False</code> <code>encoding</code> <code>str</code> Encoding to use when talking to a machine. <code>ascii</code> limits access to characters 0-127, <code>latin_1</code> enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings. <code>'ascii'</code> <code>enableShutdownActionCommand</code> <code>bool</code> Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. <code>False</code> <code>triggerOkForM29</code> <code>bool</code> Whether to automatically trigger an ok for <code>M29</code> (a lot of versions of this command are buggy and the response skips on the ok). <code>True</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.server","title":"server","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_15","title":"Defaults","text":"<pre><code>server:\nhost:\nport: 5000\nfirstRun: true\nstartOnceInSafeMode: false\nignoreIncompleteStartup: false\nseenWizards: {}\nsecretKey:\nheartbeat: 900\nreverseProxy:\nprefixHeader:\nschemeHeader:\nhostHeader:\nserverHeader:\nportHeader:\nprefixFallback:\nschemeFallback:\nhostFallback:\nserverFallback:\nportFallback:\ntrustedDownstream: []\nuploads:\nmaxSize: 1073741824\nnameSuffix: name\npathSuffix: path\nmaxSize: 102400\ncommands:\nsystemShutdownCommand:\nsystemRestartCommand:\nserverRestartCommand:\nlocalPipCommand:\nonlineCheck:\nenabled:\ninterval: 900\nhost: 1.1.1.1\nport: 53\nname: octoprint.org\npluginBlacklist:\nenabled:\nurl: https://plugins.octoprint.org/blacklist.json\nttl: 900\ntimeout: 3.05\ndiskspace:\nwarning: 524288000\ncritical: 209715200\npreemptiveCache:\nexceptions: []\nuntil: 7\nipCheck:\nenabled: true\ntrustedSubnets: []\nallowFraming: false\ncookies:\nsecure: false\nsamesite: Lax\nallowedLoginRedirectPaths: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_15","title":"Data model","text":"Name Type Description Default <code>host</code> <code>Optional[str]</code> Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. unset <code>port</code> <code>int</code> Use this option to define the port to which to bind the server. <code>5000</code> <code>firstRun</code> <code>bool</code> If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. <code>True</code> <code>startOnceInSafeMode</code> <code>bool</code> If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false <code>False</code> <code>ignoreIncompleteStartup</code> <code>bool</code> Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. <code>False</code> <code>seenWizards</code> <code>Dict[str, str]</code> <code>{}</code> <code>secretKey</code> <code>Optional[str]</code> Secret key for encrypting cookies and such, randomly generated on first run. unset <code>heartbeat</code> <code>int</code> <code>900</code> <code>reverseProxy.*</code> Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers. These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. <code>reverseProxy.prefixHeader</code> <code>Optional[str]</code> The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. unset <code>reverseProxy.schemeHeader</code> <code>Optional[str]</code> The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. unset <code>reverseProxy.hostHeader</code> <code>Optional[str]</code> The request header from which to determine the host under which OctoPrint is served by the reverse proxy. unset <code>reverseProxy.serverHeader</code> <code>Optional[str]</code> unset <code>reverseProxy.portHeader</code> <code>Optional[str]</code> unset <code>reverseProxy.prefixFallback</code> <code>Optional[str]</code> Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than <code>/</code> and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. unset <code>reverseProxy.schemeFallback</code> <code>Optional[str]</code> Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. unset <code>reverseProxy.hostFallback</code> <code>Optional[str]</code> Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. unset <code>reverseProxy.serverFallback</code> <code>Optional[str]</code> unset <code>reverseProxy.portFallback</code> <code>Optional[str]</code> unset <code>reverseProxy.trustedDownstream</code> <code>List[str]</code> List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. <code>[]</code> <code>uploads.*</code> Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. <code>uploads.maxSize</code> <code>int</code> Maximum size of uploaded files in bytes, defaults to 1GB. <code>1073741824</code> <code>uploads.nameSuffix</code> <code>str</code> Suffix used for storing the filename in the file upload headers when streaming uploads. <code>'name'</code> <code>uploads.pathSuffix</code> <code>str</code> Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads. <code>'path'</code> <code>maxSize</code> <code>int</code> Maximum size of requests other than file uploads in bytes, defaults to 100KB. <code>102400</code> <code>commands.*</code> Commands to restart/shutdown octoprint or the system it's running on. <code>commands.systemShutdownCommand</code> <code>Optional[str]</code> Command to shut down the system OctoPrint is running on. unset <code>commands.systemRestartCommand</code> <code>Optional[str]</code> Command to restart the system OctoPrint is running on. unset <code>commands.serverRestartCommand</code> <code>Optional[str]</code> Command to restart OctoPrint. unset <code>commands.localPipCommand</code> <code>Optional[str]</code> pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. unset <code>onlineCheck.*</code> Configuration of the regular online connectivity check. <code>onlineCheck.enabled</code> <code>Optional[bool]</code> Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. unset <code>onlineCheck.interval</code> <code>int</code> Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. <code>900</code> <code>onlineCheck.host</code> <code>str</code> DNS host against which to check, defaults to Cloudflare's DNS. <code>'1.1.1.1'</code> <code>onlineCheck.port</code> <code>int</code> DNS port against which to check, defaults to the standard DNS port. <code>53</code> <code>onlineCheck.name</code> <code>str</code> Host name for which to check name resolution, defaults to OctoPrint's main domain. <code>'octoprint.org'</code> <code>pluginBlacklist.*</code> Configuration of the plugin blacklist. <code>pluginBlacklist.enabled</code> <code>Optional[bool]</code> Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. unset <code>pluginBlacklist.url</code> <code>str</code> The URL from which to fetch the blacklist. <code>'https://plugins.octoprint.org/blacklist.json'</code> <code>pluginBlacklist.ttl</code> <code>int</code> Time to live of the cached blacklist, in seconds (default: 15 minutes). <code>900</code> <code>pluginBlacklist.timeout</code> <code>float</code> Timeout for fetching the blacklist, in seconds (default: 3.05 seconds). <code>3.05</code> <code>diskspace.*</code> Settings of when to display what disk space warning. <code>diskspace.warning</code> <code>int</code> Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. <code>524288000</code> <code>diskspace.critical</code> <code>int</code> Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. <code>209715200</code> <code>preemptiveCache.*</code> Configuration of the preemptive cache. <code>preemptiveCache.exceptions</code> <code>List[str]</code> Which server paths to exclude from the preemptive cache, e.g. <code>/some/path</code>. <code>[]</code> <code>preemptiveCache.until</code> <code>int</code> How many days to leave unused entries in the preemptive cache config. <code>7</code> <code>ipCheck.*</code> Configuration of the client IP check to warn about connections from external networks. <code>ipCheck.enabled</code> <code>bool</code> Whether to enable the check. <code>True</code> <code>ipCheck.trustedSubnets</code> <code>List[str]</code> Additional non-local subnets to consider trusted, in CIDR notation, e.g. <code>192.168.1.0/24</code>. <code>[]</code> <code>allowFraming</code> <code>bool</code> Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. <code>False</code> <code>cookies.*</code> Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). <code>cookies.secure</code> <code>bool</code> Whether to set the <code>Secure</code> flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. <code>False</code> <code>cookies.samesite</code> <code>str</code> <code>SameSite</code> setting to use on the cookies. Possible values are <code>None</code>, <code>Lax</code> and <code>Strict</code>. Defaults to <code>Lax</code>. Be advised that if forced unset, this has security implications as many browsers now default to <code>Lax</code> unless you configure cookies to be set with <code>Secure</code> flag set, explicitly set <code>SameSite</code> setting here and also serve OctoPrint over https. The <code>Lax</code> setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\", \"Feature: Reject insecure SameSite=None cookies\" and issue #3482. Valid values: <code>Lax</code>, <code>None</code>, <code>Strict</code>. <code>'Lax'</code> <code>allowedLoginRedirectPaths</code> <code>List[str]</code> List of paths that are allowed to be used as redirect targets for the login page, in addition to the default ones (<code>/</code>, <code>/recovery/</code> and <code>/plugin/appkeys/auth/</code>) <code>[]</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.slicing","title":"slicing","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_16","title":"Defaults","text":"<pre><code>slicing:\nenabled: true\ndefaultSlicer:\ndefaultProfiles: {}\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_16","title":"Data model","text":"Name Type Description Default <code>enabled</code> <code>bool</code> Whether to enable slicing support or not. <code>True</code> <code>defaultSlicer</code> <code>Optional[str]</code> Default slicer to use. unset <code>defaultProfiles</code> <code>Dict[str, str]</code> Default slicing profiles per slicer, maps slicer identifier to profile identifier. <code>{}</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.system","title":"system","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_17","title":"Defaults","text":"<pre><code>system:\nactions: []\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_17","title":"Data model","text":"Name Type Description Default <code>actions[]</code> A list of system actions to show in the UI. <code>actions[].action</code> <code>str</code> The identifier used internally to identify the action. Set to <code>divider</code> to generate a divider in the menu. required <code>actions[].name</code> <code>Optional[str]</code> The name of the action that will be shown on the menu. Must be set if the action is not a divider. unset <code>actions[].command</code> <code>Optional[str]</code> The command to execute when the action is selected. Must be set if the action is not a divider. unset <code>actions[].async</code> <code>None</code> Whether to run the command asynchronously. <code>False</code> <code>actions[].confirm</code> <code>Optional[str]</code> An optional confirmation message to show before executing the command. unset"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.temperature","title":"temperature","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_18","title":"Defaults","text":"<pre><code>temperature:\nprofiles:\n- name: ABS\nextruder: 210\nbed: 100\n- name: PLA\nextruder: 180\nbed: 60\ncutoff: 30\nsendAutomatically: false\nsendAutomaticallyAfter: 1\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_18","title":"Data model","text":"Name Type Description Default <code>profiles[]</code> Temperature profiles to offer in the UI for quick pre-heating. <code>profiles[].name</code> <code>str</code> Name of the profile. required <code>profiles[].extruder</code> <code>int</code> Hotend temperature to set with the profile. required <code>profiles[].bed</code> <code>int</code> Bed temperature to set with the profile. required <code>cutoff</code> <code>int</code> Cut off time for the temperature data, in minutes. <code>30</code> <code>sendAutomatically</code> <code>bool</code> Whether to send new temperature settings made in the UI automatically. <code>False</code> <code>sendAutomaticallyAfter</code> <code>int</code> After what time to send the new temperature settings automatically, in seconds. <code>1</code>"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.terminalFilters","title":"terminalFilters","text":"<p>Use the following settings to define a list of terminal filters to display in the terminal tab for filtering certain lines from the display terminal log.</p>"},{"location":"user-guide/configuration/config-yaml/#defaults_19","title":"Defaults","text":"<pre><code>terminal_filters:\n- name: Suppress temperature messages\nregex: '(Send: (N\\d+\\s+)?M105)|(Recv:\\s+(ok\\s+([PBN]\\d+\\s+)*)?([BCLPR]|T\\d*):-?\\d+)'\n- name: Suppress SD status messages\nregex: '(Send: (N\\d+\\s+)?M27)|(Recv: SD printing byte)|(Recv: Not SD printing)'\n- name: Suppress position messages\nregex: (Send:\\s+(N\\d+\\s+)?M114)|(Recv:\\s+(ok\\s+)?X:[+-]?([0-9]*[.])?[0-9]+\\s+Y:[+-]?([0-9]*[.])?[0-9]+\\s+Z:[+-]?([0-9]*[.])?[0-9]+\\s+E\\d*:[+-]?([0-9]*[.])?[0-9]+).*\n- name: Suppress wait responses\nregex: 'Recv: wait'\n- name: Suppress processing responses\nregex: 'Recv: (echo:\\s*)?busy:\\s*processing'\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_19","title":"Data model","text":"<p>Each filter entry in the list is a dictionary with the following keys:</p> Name Type Description Default <code>name</code> <code>str</code> The name of the filter. required <code>regex</code> <code>str</code> The regular expression to match. Use JavaScript regular expressions. required"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.webcam","title":"webcam","text":""},{"location":"user-guide/configuration/config-yaml/#defaults_20","title":"Defaults","text":"<pre><code>webcam:\nwebcamEnabled: true\ntimelapseEnabled: true\nffmpeg:\nffmpegThreads: 1\nffmpegVideoCodec: libx264\nbitrate: 10000k\nwatermark: true\nffmpegCommandline: '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec}\n-threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"'\nffmpegThumbnailCommandline: '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7\n\"{output}\"'\ntimelapse:\ntype: off\nfps: 25\npostRoll: 0\noptions:\ninterval:\ncapturePostRoll:\nretractionZHop:\ncleanTmpAfterDays: 7\ndefaultWebcam: classic\nsnapshotWebcam: classic\n</code></pre>"},{"location":"user-guide/configuration/config-yaml/#data-model_20","title":"Data model","text":"Name Type Description Default <code>webcamEnabled</code> <code>bool</code> Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set. <code>True</code> <code>timelapseEnabled</code> <code>bool</code> Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. <code>True</code> <code>ffmpeg</code> <code>Optional[str]</code> Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. unset <code>ffmpegThreads</code> <code>int</code> Number of how many threads to instruct ffmpeg to use for encoding. <code>1</code> <code>ffmpegVideoCodec</code> <code>str</code> Videocodec to be used for encoding. <code>'libx264'</code> <code>bitrate</code> <code>str</code> The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. <code>'10000k'</code> <code>watermark</code> <code>bool</code> Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. <code>True</code> <code>ffmpegCommandline</code> <code>str</code> <code>'{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"'</code> <code>ffmpegThumbnailCommandline</code> <code>str</code> <code>'{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"'</code> <code>timelapse.*</code> The default timelapse settings. <code>timelapse.type</code> <code>str</code> The timelapse type. Valid values: <code>off</code>, <code>timed</code>, <code>zchange</code>. <code>'off'</code> <code>timelapse.fps</code> <code>int</code> The framerate at which to render the movie. <code>25</code> <code>timelapse.postRoll</code> <code>int</code> The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. <code>zchange</code> timelapses will take one final picture and add it <code>fps * postRoll</code> times. <code>timed</code> timelapses continue to record just like at the beginning, so the recording will continue another <code>fps * postRoll * interval</code> seconds. This behaviour can be overridden by setting the <code>capturePostRoll</code> option to <code>false</code>, in which case the post roll will be created identically to <code>zchange</code> mode. <code>0</code> <code>timelapse.options.*</code> Additional options depending on the timelapse type. <code>timelapse.options.interval</code> <code>Optional[int]</code> <code>timed</code> timelapses only: The interval which to leave between images in seconds. unset <code>timelapse.options.capturePostRoll</code> <code>Optional[bool]</code> <code>timed</code> timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). unset <code>timelapse.options.retractionZHop</code> <code>Optional[float]</code> <code>zchange</code> timelapses only: z-hop height during retractions to ignore for capturing snapshots. unset <code>cleanTmpAfterDays</code> <code>int</code> After how many days unrendered timelapses will be deleted. <code>7</code> <code>defaultWebcam</code> <code>str</code> The name of the default webcam <code>'classic'</code> <code>snapshotWebcam</code> <code>str</code> The name of the default webcam to use for snapshots <code>'classic'</code>"},{"location":"user-guide/configuration/logging-yaml/","title":"Logging configuration: logging.yaml","text":"<p>The logging configuration file <code>logging.yaml</code> for OctoPrint is expected in its settings  folder, which unless defined differently on the command line is located at <code>~/.octoprint</code>  on Linux, at <code>%APPDATA%/OctoPrint</code> on Windows and at <code>~/Library/Application Support/OctoPrint</code>  on macOS.</p> <p>You can use it to change the log levels of the individual components within OctoPrint,  which might be necessary to help in debugging issues you are experiencing, or to change  the configuration of the logging handlers themselves, e.g. in order to change size after  which to rollover the <code>serial.log</code>.</p> <p>Hint</p> <p>You can also configure individual logging levels for all components via UI by using  the Logging options in the Settings.</p>"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.levels","title":"Changing log levels","text":"<p>If you need to change the default logging level within OctoPrint, create the file with a text editor of your choice (it's usually not there). The general format is this:</p> <pre><code>loggers:\n&lt;component&gt;:\nlevel: &lt;loglevel&gt;\n</code></pre> <p>with <code>&lt;component&gt;</code> being the internal OctoPrint component for which to change the  loglevel, and <code>&lt;loglevel&gt;</code> being the new log level to set. An example for increasing the  log level of the events and the file management components to <code>DEBUG</code> (the highest amount  of logging) would be this <code>logging.yaml</code>:</p> <pre><code>loggers:\noctoprint.events:\nlevel: DEBUG\noctoprint.filemanager:\nlevel: DEBUG\n</code></pre> <p>A list of important components for which an increase in logging might be interesting follows:</p> <ul> <li><code>octoprint.events</code>: the event sub system</li> <li><code>octoprint.filemanager</code>: the file management layer</li> <li><code>octoprint.plugin</code>: the plugin sub system</li> <li><code>octoprint.plugins.&lt;plugin&gt;</code>: the plugin <code>&lt;plugin&gt;</code> to change the log level of,      e.g. <code>octoprint.plugins.discovery</code> to change the log level of the      Discovery Plugin or <code>octoprint.plugins.backup</code> to change the log level of the      Backup plugin.</li> <li><code>octoprint.slicing</code>: the slicing sub system</li> </ul> <p>This list will be expanded as deemed necessary.</p>"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.handlers","title":"Changing logging handlers","text":"<p>You can also change the configuration of the logging handlers themselves, e.g. in order  to make the <code>serial.log</code> larger for debugging long running communications or to change  the behaviour of the <code>octoprint.log</code>.</p> <p>You can find the default configurations of the <code>file</code> handler used for the  <code>octoprint.log</code>, the <code>serialFile</code> handler used for the <code>serial.log</code> and the <code>console</code>  handler used for the output to stdout in YAML format below:</p> <pre><code>handlers:\n# stdout\nconsole:\nclass: logging.StreamHandler\nlevel: DEBUG\nformatter: simple\nstream: ext://sys.stdout\n# octoprint.log\nfile:\nclass: logging.handlers.TimedRotatingFileHandler\nlevel: DEBUG\nformatter: simple\nwhen: D\nbackupCount: 1\nfilename: /path/to/octoprints/logs/octoprint.log\n# serial.log\nserialFile:\nclass: logging.handlers.RotatingFileHandler\nlevel: DEBUG\nformatter: simple\nmaxBytes: 2097152 # 2 * 1024 * 1024 = 2 MB in bytes\nfilename: /path/to/octoprints/logs/serial.log\n</code></pre> <p>Todo</p> <p>This is currently not being synced up with the code and needs rework.</p> <p>You can find more information on the used logging handlers in the Python documentation on logging.handlers.</p>"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.formatters","title":"Changing logging formatters","text":"<p>The logging formatters can be defined via <code>logging.yaml</code> as well. The <code>simple</code> formatter  as referenced above is expressed in YAML as follows:</p> <pre><code>formatters:\nsimple:\nformat: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n</code></pre> <p>Todo</p> <p>This is currently not being synced up with the code and needs rework.</p> <p>The possible keys for the logging format can be found in the  Python documentation on LogRecord attributes.</p>"},{"location":"user-guide/configuration/yaml-primer/","title":"A YAML Primer","text":"<p>Most of OctoPrint's configuration is done under the hood through YAML files, which is why it makes sense to shed some light on the basics of this data serialization format.</p> <p>YAML is a text based format which excels at representing the most common of data structures in an easy and very human readable way, which is why it was chosen for OctoPrint's configuration files. A text editor is all you need in order to write YAML configuration files.</p>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.basic","title":"Basic Rules","text":"<p>First of all some basic things to know about working with YAML files:</p> <ul> <li>Never use tabs outside of quoted strings, especially not for indentation. The tab character is illegal within     YAML files.</li> <li>Whitespace and indentation matters and plays an important part in structuring the data, so take special care     to stay consistent here.</li> <li>YAML's comments start with a <code>#</code> and go until the end of the line.</li> </ul>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types","title":"Interesting data types","text":"<p>You will probably only come across the three most basic types of data within OctoPrint's YAML files: scalars (such as strings, integers, ...), lists and associated arrays (aka key-value-pairs, aka maps, aka dictionaries).</p>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar","title":"Scalars","text":"<p>Scalars are the most basic of all data types and are simple string, integer, float or boolean values.</p> <p>For most scalars you don't need any quotes at all, but if you need to define some piece of data which contains characters that could be mistaken with YAML syntax you need to quote it in either double <code>\"</code> or single <code>'</code> quotes for the YAML file to stay valid. As simple rule of thumb, if your data contains any of these characters <code>:-{}[]!#|&gt;&amp;%@</code> better quote it. Also quote it if you want a string but it could be mistaken for a valid number (integer or float) or if it consists only of \"Yes\", \"No\", \"yes\", \"no\", \"true\" or \"false\", which would be converted to a boolean without quotes.</p> <p>In double quoted strings if you need to include a literal double quote in your string you can escape it by prefixing it with a backslash <code>\\</code> (which you can in turn escape by itself). In single quoted strings the single quote character can be escaped by prefixing it with another single quote, basically doubling it. Backslashes in single quoted strings do not need to be escaped.</p> <p>Quoted strings can also span across multiple lines, just indent the following lines. Note that you'll need to add a completely empty line in order for force a line break, the data will not be actually wrapped across multiple lines just because you spread its representation across multiple lines.</p>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.int","title":"int","text":"<pre><code>23\n42\n</code></pre>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.float","title":"float","text":"<pre><code>23.5\n100.0\n</code></pre>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.boolean","title":"boolean","text":"<pre><code>true\nfalse\nYes\nNo\nyes\nno\n</code></pre>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.string","title":"string","text":"<pre><code>a string\n\"some quoted string with a : colon and a { bracket and a quote \\\" and a backslash \\\\ - phew\"\n'some single quoted string with a single quote '' and a backslash \\ - yay'\n\"and a multiline string - just because we can we'll make it span\nacross not two but four YAML lines!\nIncluding this paragraph. But in fact it will only be two lines :)\"\n\"23\"\n\"42.3\"\n\"Yes\"\n\"No\"\n\"true\"\n\"false\"\nyes and no\ntrue or false\n</code></pre>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.list","title":"Lists","text":"<p>Lists allow to \"collect\" a number of similar things into one data structure. They are created by prefixing one or more consecutive lines with a <code>-</code>:</p> <p><pre><code>- item 1\n- 23.42\n- 57\n- true\n</code></pre> Take special care to have all of your list items at the same indentation level!</p>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.dict","title":"Dictionaries","text":"<p>Dictionaries (aka associative arrays aka maps) allow organizing the data in key value pairs, with the key and the value being separated through a colon <code>:</code>:</p> <pre><code>key: value\nanotherkey: another value\n</code></pre>"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.examples","title":"Examples","text":"<p>Based on the three types explained above, quite complex data structures are possible:</p> <pre><code>general:\nsome_setting: some_value\na_list:\n- item 1\n- 23.42\n- 57\n- true\nsome_flag: true\nquoted_string: \"This string is quoted because {we have this here} and also &gt; this and : that\"\nspecific:\nsetting1: value1\nsetting2:\nsubsetting21: value21\nsubsetting22:\n- subsubsetting221\n- subsubsetting222\n- subsubsetting223\nthe_end: yes\n</code></pre> <p>In this example we have a dictionary on the top most \"layer\" which has three keys, <code>general</code>, <code>specific</code> and <code>the_end</code>.</p> <p><code>general</code> in turn is a dictionary with the keys <code>some_setting</code> (a string), <code>a_list</code> (a list with four items, a string, a float, an int and a boolean), <code>some_flag</code> (a boolean) and <code>quoted_string</code> (a - you guessed it - string).</p> <p><code>specific</code> is also a dictionary, with keys <code>setting1</code> (a string) and <code>setting2</code>, a dictionary with two keys, one a string and the other again a list.</p> <p>Finally, <code>the_end</code> is just a boolean, since an unquoted <code>yes</code> evaluates as a boolean value as we saw in the section about boolean scalars above.</p> <p>Note how we have indented lists and dictionaries with two spaces here. This makes the structure easier to read and the hierarchy easier to distinguish. You don't have to indent your YAML like this, but it's strongly recommended.</p> <p>Whatever you do, make sure you follow a consistent way of indenting your files -- YAML is not as strict as Python when it comes to differing indentation variants within the same file (as long as it's still valid), but consistency will help you as a lot as a human. Ideally you'll use a text editor which highlights white space characters for you (most editors can be configured this way), this will help tremendously when editing whitespace sensitive syntax such as YAML.</p>"},{"location":"user-guide/features/safe-mode/","title":"Safe mode","text":"<p>Added in version 1.3.0</p> <p>Changed in version 1.3.13</p> <p>With the advent of support for plugins in OctoPrint, it quickly became apparent that some of the bugs reported on OctoPrint's bug tracker were actually bugs with installed third party plugins or language packs instead of OctoPrint itself.</p> <p>To allow an easier identification of these cases, OctoPrint 1.3.0 introduced safe mode. Starting OctoPrint in safe mode disables all plugins (and starting with 1.3.13 also all language packs) that are not bundled with OctoPrint, allowing to easier identify most cases where a third party plugin or language pack is the culprit of an observed issue.</p> <p>Additionally, OctoPrint allows uninstalling plugins and language packs in this mode, allowing recovery from cases where a third party addition causes the server to not start up or the web interface to not render or function correctly anymore.</p> <p>Whenever reporting an issue with OctoPrint, please always attempt to reproduce it in safe mode as well to ensure it really is an issue in OctoPrint itself and now caused by one of your installed third party additions.</p>"},{"location":"user-guide/features/safe-mode/#user-guide.features.safe-mode.start","title":"How to start OctoPrint in safe mode","text":"<p>There exist three ways to start OctoPrint in safe mode.</p>"},{"location":"user-guide/features/safe-mode/#via-the-restart-octoprint-in-safe-mode-system-menu-entry","title":"Via the \"Restart OctoPrint in safe mode\" system menu entry","text":"<p>Added in version 1.3.2</p> <p>You can select \"Restart OctoPrint in safe mode\" from the \"System\" menu, if the \"Restart  OctoPrint\" server command has been correctly configured.</p> <p> </p> \"Restart OctoPrint in safe mode\" in the \"System\" menu"},{"location":"user-guide/features/safe-mode/#via-the-serverstartonceinsafemode-config-flag","title":"Via the <code>server.startOnceInSafeMode</code> config flag","text":"<p>You can set the flag <code>server.startOnceInSafeMode</code> in <code>config.yaml</code> to <code>true</code> and restart. This will make OctoPrint start up in safe mode. The flag will clear automatically.</p> <p>To set this flag you have the following options:</p> <ul> <li> <p>from command line run <code>octoprint safemode</code>1 (since OctoPrint 1.3.6)</p> </li> <li> <p>from command line run <code>octoprint config set --bool server.startOnceInSafeMode true</code>1</p> </li> <li> <p>edit <code>config.yaml</code> manually with a text editor, locate the <code>server</code> block if it already exists or create it     if it doesn't and add <code>startOnceInSafeMode: true</code> to it:</p> <pre><code>server:\nstartOnceInSafeMode: true\n</code></pre> <p>Please also refer to the YAML primer.</p> </li> </ul>"},{"location":"user-guide/features/safe-mode/#via-the-safe-command-line-flag","title":"Via the <code>--safe</code> command line flag","text":"<p>You can start OctoPrint in safe mode with the command line parameter <code>--safe</code>, e.g. <code>octoprint serve --safe</code>1.  Don't forget to shutdown OctoPrint first before doing this.</p>"},{"location":"user-guide/features/safe-mode/#user-guide.features.safe-mode.differences","title":"Differences of safe mode vs normal operation mode","text":"<p>When OctoPrint is running in safe mode the following changes to its normal operation mode apply:</p> <ul> <li>OctoPrint will not enable any of the installed third party plugins. OctoPrint considers all plugins third     party plugins that do not ship with OctoPrint's sources, so any plugins installed either via <code>pip</code> or     into OctoPrint's plugin folder2.</li> <li>OctoPrint will not enable any of the installed third party language packs. OctoPrint considers all language packs     third party language packs that do not ship with OctoPrint's sources, so any language plugins installed     through the language pack manager within settings and/or stored in the language pack folder3.</li> <li>OctoPrint will still allow to uninstall third party plugins through the built-in Plugin Manager.</li> <li>OctoPrint will still allow to disable (bundled) plugins that are still enabled.</li> <li>OctoPrint will not allow to enable third party plugins.</li> <li>OctoPrint will still allow to manage language packs.</li> <li> <p>OctoPrint's web interface will display a notification to remind you that it is running in     safe mode.</p> <p> Safe mode notification </p> </li> </ul> <ol> <li> <p>OctoPi users: For you that's <code>~/oprint/bin/octoprint</code> wherever it says just <code>octoprint</code>.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p><code>~/.octoprint/plugins</code> (Linux), <code>%APPDATA%/OctoPrint/plugins</code> (Windows) or <code>~/Library/Application Support/OctoPrint/plugins</code> (macOS)\u00a0\u21a9</p> </li> <li> <p><code>~/.octoprint/translations</code> (Linux), <code>%APPDATA%/OctoPrint/translations</code> (Windows) or <code>~/Library/Application Support/OctoPrint/translations</code> (macOS)\u00a0\u21a9</p> </li> </ol>"}]}