{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OctoPrint OctoPrint provides a snappy web interface for controlling consumer 3D printers. It is Free Software and released under the GNU Affero General Public License V3 . Its website can be found at octoprint.org . The community forum is available at community.octoprint.org . It also serves as central knowledge base. An invite to the Discord server can be found at discord.octoprint.org . The FAQ can be accessed by following faq.octoprint.org . The documentation is located at docs.octoprint.org . The official plugin repository can be reached at plugins.octoprint.org . OctoPrint's development wouldn't be possible without the financial support by its community . If you enjoy OctoPrint, please consider becoming a regular supporter! Note This documentation currently focuses primarily on developers and less on end users. If you are interested in helping to change this, please get in touch on the forum ! Contributing # Contributions of all kinds are welcome, not only in the form of code but also with regards to the official documentation , debugging help in the bug tracker , support of other users on the community forum at community.octoprint.org or the official discord at discord.octoprint.org and also financially . If you think something is bad about OctoPrint or its documentation the way it is, please help in any way to make it better instead of just complaining about it -- this is an Open Source Project after all :) For information about how to go about submitting bug reports or pull requests, please see the project's Contribution Guidelines . Installation # Installation instructions for installing from source for different operating systems can be found on the forum . If you want to run OctoPrint on a Raspberry Pi, you really should take a look at OctoPi which is a custom SD card image that includes OctoPrint plus dependencies. The generic steps that should basically be done regardless of operating system and runtime environment are the following (as regular user , please keep your hands off of the sudo command here!) - this assumes you already have Python 3.7+, pip and virtualenv and their dependencies set up on your system: Create a user-owned virtual environment therein: virtualenv venv . If you want to specify a specific python to use instead of whatever version your system defaults to, you can also explicitly require that via the --python parameter, e.g. virtualenv --python=python3 venv . Install OctoPrint into that virtual environment : ./venv/bin/pip install OctoPrint You may then start the OctoPrint server via /path/to/OctoPrint/venv/bin/octoprint , see Usage for details. After installation, please make sure you follow the first-run wizard and set up access control as necessary. Dependencies # OctoPrint depends on a few python modules to do its job. Those are automatically installed when installing OctoPrint via pip . OctoPrint currently supports Python 3.7, 3.8, 3.9 and 3.10. Usage # Running the pip install via pip install OctoPrint installs the octoprint script in your Python installation's scripts folder (which, depending on whether you installed OctoPrint globally or into a virtual env, will be in your PATH or not). The following usage examples assume that the octoprint script is on your PATH . You can start the server via octoprint serve By default it binds to all interfaces on port 5000 (so pointing your browser to http://127.0.0.1:5000 will do the trick). If you want to change that, use the additional command line parameters host and port , which accept the host ip to bind to and the numeric port number respectively. If for example you want the server to only listen on the local interface on port 8080, the command line would be octoprint serve --host=127.0.0.1 --port=8080 Alternatively, the host and port on which to bind can be defined via the config file. If you want to run OctoPrint as a daemon (only supported on Linux), use octoprint daemon {start|stop|restart} [--pid PIDFILE] If you do not supply a custom pidfile location via --pid PIDFILE , it will be created at /tmp/octoprint.pid . You can also specify the config file or the base directory (for basing off the uploads , timelapse and logs folders), e.g.: octoprint serve --config /path/to/another/config.yaml --basedir /path/to/my/basedir To start OctoPrint in safe mode - which disables all third party plugins that do not come bundled with OctoPrint - use the --safe flag: octoprint serve --safe See octoprint --help for more information on the available command line parameters. OctoPrint also ships with a run script in its source directory. You can invoke it to start the server. It takes the same command line arguments as the octoprint script. Configuration # If not specified via the command line, the config file config.yaml for OctoPrint is expected in the settings folder, which is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on MacOS. A comprehensive overview of all available configuration settings can be found in the docs . Please note that the most commonly used configuration settings can also easily be edited from OctoPrint's settings dialog. Special Thanks # Cross-browser testing services are kindly provided by BrowserStack . Profiling is done with the help of PyVmMonitor . Error tracking is powered and sponsored by Sentry .","title":"Home"},{"location":"#contributing","text":"Contributions of all kinds are welcome, not only in the form of code but also with regards to the official documentation , debugging help in the bug tracker , support of other users on the community forum at community.octoprint.org or the official discord at discord.octoprint.org and also financially . If you think something is bad about OctoPrint or its documentation the way it is, please help in any way to make it better instead of just complaining about it -- this is an Open Source Project after all :) For information about how to go about submitting bug reports or pull requests, please see the project's Contribution Guidelines .","title":"Contributing"},{"location":"#installation","text":"Installation instructions for installing from source for different operating systems can be found on the forum . If you want to run OctoPrint on a Raspberry Pi, you really should take a look at OctoPi which is a custom SD card image that includes OctoPrint plus dependencies. The generic steps that should basically be done regardless of operating system and runtime environment are the following (as regular user , please keep your hands off of the sudo command here!) - this assumes you already have Python 3.7+, pip and virtualenv and their dependencies set up on your system: Create a user-owned virtual environment therein: virtualenv venv . If you want to specify a specific python to use instead of whatever version your system defaults to, you can also explicitly require that via the --python parameter, e.g. virtualenv --python=python3 venv . Install OctoPrint into that virtual environment : ./venv/bin/pip install OctoPrint You may then start the OctoPrint server via /path/to/OctoPrint/venv/bin/octoprint , see Usage for details. After installation, please make sure you follow the first-run wizard and set up access control as necessary.","title":"Installation"},{"location":"#dependencies","text":"OctoPrint depends on a few python modules to do its job. Those are automatically installed when installing OctoPrint via pip . OctoPrint currently supports Python 3.7, 3.8, 3.9 and 3.10.","title":"Dependencies"},{"location":"#usage","text":"Running the pip install via pip install OctoPrint installs the octoprint script in your Python installation's scripts folder (which, depending on whether you installed OctoPrint globally or into a virtual env, will be in your PATH or not). The following usage examples assume that the octoprint script is on your PATH . You can start the server via octoprint serve By default it binds to all interfaces on port 5000 (so pointing your browser to http://127.0.0.1:5000 will do the trick). If you want to change that, use the additional command line parameters host and port , which accept the host ip to bind to and the numeric port number respectively. If for example you want the server to only listen on the local interface on port 8080, the command line would be octoprint serve --host=127.0.0.1 --port=8080 Alternatively, the host and port on which to bind can be defined via the config file. If you want to run OctoPrint as a daemon (only supported on Linux), use octoprint daemon {start|stop|restart} [--pid PIDFILE] If you do not supply a custom pidfile location via --pid PIDFILE , it will be created at /tmp/octoprint.pid . You can also specify the config file or the base directory (for basing off the uploads , timelapse and logs folders), e.g.: octoprint serve --config /path/to/another/config.yaml --basedir /path/to/my/basedir To start OctoPrint in safe mode - which disables all third party plugins that do not come bundled with OctoPrint - use the --safe flag: octoprint serve --safe See octoprint --help for more information on the available command line parameters. OctoPrint also ships with a run script in its source directory. You can invoke it to start the server. It takes the same command line arguments as the octoprint script.","title":"Usage"},{"location":"#configuration","text":"If not specified via the command line, the config file config.yaml for OctoPrint is expected in the settings folder, which is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on MacOS. A comprehensive overview of all available configuration settings can be found in the docs . Please note that the most commonly used configuration settings can also easily be edited from OctoPrint's settings dialog.","title":"Configuration"},{"location":"#special-thanks","text":"Cross-browser testing services are kindly provided by BrowserStack . Profiling is done with the help of PyVmMonitor . Error tracking is powered and sponsored by Sentry .","title":"Special Thanks"},{"location":"dev-guide/","text":"Core Development Guide #","title":"Core Development Guide"},{"location":"dev-guide/#core-development-guide","text":"","title":"Core Development Guide"},{"location":"plugin-guide/","text":"Plugin Development Guide #","title":"Plugin Development Guide"},{"location":"plugin-guide/#plugin-development-guide","text":"","title":"Plugin Development Guide"},{"location":"plugin-guide/mixins/","text":"Mixins # General Concepts # Plugin mixins are the heart of OctoPrint's plugin system. They are :ref: special base classes <sec-plugins-mixins> which are to be subclassed and extended to add functionality to OctoPrint. Plugins declare their instances that implement one or multiple mixins using the __plugin_implementation__ control property. OctoPrint's plugin core collects those from the plugins and offers methods to access them based on the mixin type, which get used at multiple locations within OctoPrint. Using mixins always follows the pattern of retrieving the matching implementations from the plugin subsystem, then calling the specific mixin's methods as defined and necessary. The following snippet taken from OctoPrint's code for example shows how all octoprint.plugin.AssetPlugin implementations are collected and then all assets they return via their get_assets methods are retrieved and merged into one big asset map (differing between javascripts and stylesheets of various types) for use during rendition of the UI. asset_plugins = pluginManager . get_implementations ( octoprint . plugin . AssetPlugin ) for name , implementation in asset_plugins . items (): all_assets = implementation . get_assets () if \"js\" in all_assets : for asset in all_assets [ \"js\" ]: assets [ \"js\" ] . append ( url_for ( 'plugin_assets' , name = name , filename = asset )) if preferred_stylesheet in all_assets : for asset in all_assets [ preferred_stylesheet ]: assets [ \"stylesheets\" ] . append (( preferred_stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) else : for stylesheet in supported_stylesheets : if not stylesheet in all_assets : continue for asset in all_assets [ stylesheet ]: assets [ \"stylesheets\" ] . append (( stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) break See-also The Plugin Tutorial Tutorial on how to write a simple OctoPrint module utilizing mixins for various types of extension. Execution Order # Some mixin types, such as :class: ~octoprint.plugin.StartupPlugin , :class: ~octoprint.plugin.ShutdownPlugin and :class: ~octoprint.plugin.UiPlugin , support influencing the execution order for various execution contexts by also implementing the :class: ~octoprint.plugin.core.SortablePlugin mixin. If a method is to be called on a plugin implementation for which a sorting context is defined (see the mixin documentation for information on this), OctoPrint's plugin subsystem will ensure that the order in which the implementation calls are done is as follows: Plugins with a return value that is not None for :meth: ~octoprint.plugin.core.SortablePlugin.get_sorting_key for the provided sorting context will be ordered among each other first. If the returned order number is equal for two or more implementations, they will be sorted first by whether they come bundled with OctoPrint or not, then by their identifier. After that follow plugins which returned None (the default). They are first sorted by whether they come bundled with OctoPrint or not, then by their identifier. Example Consider four plugin implementations implementing the :class: ~octoprint.plugin.StartupPlugin mixin, called plugin_a , plugin_b , plugin_c and plugin_d , the latter coming bundled with OctoPrint. plugin_a and plugin_d don't override :meth: ~octoprint.plugin.core.SortablePlugin.get_sorting_key . plugin_b and plugin_c both return 1 for the sorting context StartupPlugin.on_startup , None otherwise: plugin_a.py import octoprint.plugin class PluginA ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA started up\" ) __plugin_implementation__ = PluginA () plugin_b.py import octoprint.plugin class PluginB ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB started up\" ) __plugin_implementation__ = PluginB () plugin_c.py import octoprint.plugin class PluginC ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC started up\" ) __plugin_implementation__ = PluginC () plugin_d.py # in this example this is bundled with OctoPrint import octoprint.plugin class PluginD ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD started up\" ) __plugin_implementation__ = PluginD () OctoPrint will detect that plugin_b and plugin_c define a order number, and since it's identical for both, namely 1 , will order both plugins based first on their bundling status and then on their plugin identifier. plugin_a and plugin_d don't define a sort key and hence will be put after the other two, with plugin_d coming before plugin_a since it comes bundled with OctoPrint. The execution order of the on_startup method will hence be plugin_b , plugin_c , plugin_d , plugin_a . Now, the execution order of the on_after_startup method will be determined based on another sorting context, StartupPlugin.on_after_startup for which all of the plugins return None . Hence, the execution order of the on_after_startup method will be ordered first by bundle status, then by plugin identifier: plugin_d , plugin_a , plugin_b , plugin_c . This will result in the following messages to be generated: Plugin B starting up Plugin C starting up Plugin D starting up Plugin A starting up Plugin D started up Plugin A started up Plugin B started up Plugin C started up Injected Properties # OctoPrint's plugin subsystem will inject a bunch of properties into each :ref: mixin implementation <sec-plugins-mixins> . An overview of these properties can be found in the section :ref: Injected Properties <sec-plugins-injectedproperties> . See-also octoprint.plugin.core.Plugin and octoprint.plugin.OctoPrintPlugin Class documentation also containing the properties shared among all mixin implementations. Available plugin mixins # The following plugin mixins are currently available: Please note that all plugin mixins inherit from octoprint.plugin.core.Plugin and octoprint.plugin.types.OctoPrintPlugin , which also provide attributes of interest to plugin developers. StartupPlugin # Bases: OctoPrintPlugin , SortablePlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. StartupPlugin is a SortablePlugin and provides sorting contexts for on_startup as well as on_after_startup . on_after_startup () # Called just after launch of the server, so when the listen loop is actually running already. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_after_startup . on_startup ( host , port ) # Called just before the server is actually launched. Plugins get supplied with the host and port the server will listen on. Note that the host may be 0.0.0.0 if it will listen on all interfaces, so you can't just blindly use this for constructing publicly reachable URLs. Also note that when this method is called, the server is not actually up yet and none of your plugin's APIs or blueprints will be reachable yet. If you need to be externally reachable, use :func: on_after_startup instead or additionally. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_startup . :param string host: the host the server will listen on, may be 0.0.0.0 :param int port: the port the server will listen on ShutdownPlugin # Bases: OctoPrintPlugin , SortablePlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the :class: StartupPlugin mixin, to cleanly shut down additional services again that where started by the :class: StartupPlugin part of the plugin. ShutdownPlugin is a :class: ~octoprint.plugin.core.SortablePlugin and provides a sorting context for :meth: ~octoprint.plugin.ShutdownPlugin.on_shutdown . on_shutdown () # Called upon the imminent shutdown of OctoPrint. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is ShutdownPlugin.on_shutdown . SettingsPlugin # Bases: OctoPrintPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. Plugins including the mixing will get injected an additional property self._settings which is an instance of PluginSettingsManager already properly initialized for use by the plugin. In order for the manager to know about the available settings structure and default values upon initialization, implementing plugins will need to provide a dictionary with the plugin's default settings through overriding the method :func: get_settings_defaults . The defined structure will then be available to access through the settings manager available as self._settings . If your plugin needs to react to the change of specific configuration values on the fly, e.g. to adjust the log level of a logger when the user changes a corresponding flag via the settings dialog, you can override the :func: on_settings_save method and wrap the call to the implementation from the parent class with retrieval of the old and the new value and react accordingly. Example: .. code-block:: python import octoprint.plugin class MySettingsPlugin(octoprint.plugin.SettingsPlugin, octoprint.plugin.StartupPlugin): def get_settings_defaults(self): return dict( some_setting=\"foo\", some_value=23, sub=dict( some_flag=True ) ) def on_settings_save(self, data): old_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) octoprint.plugin.SettingsPlugin.on_settings_save(self, data) new_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) if old_flag != new_flag: self._logger.info(\"sub.some_flag changed from {old_flag} to {new_flag}\".format(**locals())) def on_after_startup(self): some_setting = self._settings.get([\"some_setting\"]) some_value = self._settings.get_int([\"some_value\"]) some_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) self._logger.info(\"some_setting = {some_setting}, some_value = {some_value}, sub.some_flag = {some_flag}\".format(**locals()) plugin_implementation = MySettingsPlugin() Of course, you are always free to completely override both :func: on_settings_load and :func: on_settings_save if the default implementations do not fit your requirements. .. warning:: Make sure to protect sensitive information stored by your plugin that only logged in administrators (or users) should have access to via :meth: ~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths . OctoPrint will return its settings on the REST API even to anonymous clients, but will filter out fields it knows are restricted, therefore you must make sure that you specify sensitive information accordingly to limit access as required! config_version_key = '_config_version' class-attribute # Key of the field in the settings that holds the configuration format version. get_settings_defaults () # Retrieves the plugin's default settings with which the plugin's settings manager will be initialized. Override this in your plugin's implementation and return a dictionary defining your settings data structure with included default values. get_settings_preprocessors () # Retrieves the plugin's preprocessors to use for preprocessing returned or set values prior to returning/setting them. The preprocessors should be provided as a dictionary mapping the path of the values to preprocess (hierarchically) to a transform function which will get the value to transform as only input and should return the transformed value. Example: .. code-block:: python def get_settings_defaults(self): return dict(some_key=\"Some_Value\", some_other_key=\"Some_Value\") def get_settings_preprocessors(self): return dict(some_key=lambda x: x.upper()), # getter preprocessors dict(some_other_key=lambda x: x.lower()) # setter preprocessors def some_method(self): # getting the value for \"some_key\" should turn it to upper case assert self._settings.get([\"some_key\"]) == \"SOME_VALUE\" # the value for \"some_other_key\" should be left alone assert self._settings.get([\"some_other_key\"] = \"Some_Value\" # setting a value for \"some_other_key\" should cause the value to first be turned to lower case self._settings.set([\"some_other_key\"], \"SOME_OTHER_VALUE\") assert self._settings.get([\"some_other_key\"]) == \"some_other_value\" Returns: Type Description dict , dict A tuple consisting of two dictionaries, the first being the plugin's preprocessors for getters, the second the preprocessors for setters get_settings_restricted_paths () # Retrieves the list of paths in the plugin's settings which be restricted on the REST API. Override this in your plugin's implementation to restrict whether a path should only be returned to users with certain permissions, or never on the REST API. Return a dict with one of the following keys, mapping to a list of paths (as tuples or lists of the path elements) for which to restrict access via the REST API accordingly. An class: ~octoprint.access.permissions.OctoPrintPermission instance: Paths will only be available on the REST API for users with the permission admin : Paths will only be available on the REST API for users with admin rights (any user with the SETTINGS permission) user : Paths will only be available on the REST API when accessed as a logged in user never : Paths will never be returned on the API Example: .. code-block:: python def get_settings_defaults(self): return dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), user_only=dict(path=\"path\", bar=\"bar\")), another=dict(admin_only=dict(path=\"path\"), field=\"field\"), path=dict(to=dict(never=dict(return=\"return\"))), the=dict(webcam=dict(data=\"webcam\"))) def get_settings_restricted_paths(self): from octoprint.access.permissions import Permissions return {'admin':[[\"some\", \"admin_only\", \"path\"], [\"another\", \"admin_only\", \"path\"],], 'user':[[\"some\", \"user_only\", \"path\"],], 'never':[[\"path\", \"to\", \"never\", \"return\"],], Permissions.WEBCAM:[[\"the\", \"webcam\", \"data\"],]} # this will make the plugin return settings on the REST API like this for an anonymous user # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=None, bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user without the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user with the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) # # and like this for an admin user # # dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=\"path\"), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) .. versionadded:: 1.2.17 get_settings_version () # Retrieves the settings format version of the plugin. Use this to have OctoPrint trigger your migration function if it detects an outdated settings version in config.yaml. Returns: Type Description int or None: an int signifying the current settings format, should be incremented by plugins whenever there are backwards incompatible changes. Returning None here disables the version tracking for the plugin's configuration. on_settings_cleanup () # Called after migration and initialization but before call to :func: on_settings_initialized . Plugins may overwrite this method to perform additional clean up tasks. The default implementation just minimizes the data persisted on disk to only contain the differences to the defaults (in case the current data was persisted with an older version of OctoPrint that still duplicated default data). .. versionadded:: 1.3.0 on_settings_initialized () # Called after the settings have been initialized and - if necessary - also been migrated through a call to func: on_settings_migrate . This method will always be called after the initialize method. on_settings_load () # Loads the settings for the plugin, called by the Settings API view in order to retrieve all settings from all plugins. Override this if you want to inject additional settings properties that are not stored within OctoPrint's configuration. .. note:: The default implementation will return your plugin's settings as is, so just in the structure and in the types that are currently stored in OctoPrint's configuration. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, using the proper retriever methods on the settings manager to retrieve the data in the correct format. The default implementation will also replace any paths that have been restricted by your plugin through :func: ~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths with either the provided default value (if one was provided), an empty dictionary (as fallback for restricted dictionaries), an empty list (as fallback for restricted lists) or None values where necessary. Make sure to do your own restriction if you decide to fully overload this method. :return: the current settings of the plugin, as a dictionary on_settings_migrate ( target , current ) # Called by OctoPrint if it detects that the installed version of the plugin necessitates a higher settings version than the one currently stored in _config.yaml. Will also be called if the settings data stored in config.yaml doesn't have version information, in which case the current parameter will be None. Your plugin's implementation should take care of migrating any data by utilizing self._settings. OctoPrint will take care of saving any changes to disk by calling self._settings.save() after returning from this method. This method will be called before your plugin's :func: on_settings_initialized method, with all injections already having taken place. You can therefore depend on the configuration having been migrated by the time :func: on_settings_initialized is called. Parameters: Name Type Description Default target int The settings format version the plugin requires, this should always be the same value as returned by :func: get_settings_version . required current int or None The settings format version as currently stored in config.yaml. May be None if no version information can be found. required on_settings_save ( data ) # Saves the settings for the plugin, called by the Settings API view in order to persist all settings from all plugins. Override this if you need to directly react to settings changes or want to extract additional settings properties that are not stored within OctoPrint's configuration. .. note:: The default implementation will persist your plugin's settings as is, so just in the structure and in the types that were received by the Settings API view. Values identical to the default settings values will not be persisted. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, retrieving them (if set) from the supplied received data and using the proper setter methods on the settings manager to persist the data in the correct format. Parameters: Name Type Description Default data dict The settings dictionary to be saved for the plugin required Returns: Name Type Description dict The settings that differed from the defaults and were actually saved. AssetPlugin # Bases: OctoPrintPlugin , RestartNeedingPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. A typical usage of the AssetPlugin functionality is to embed a custom view model to be used by templates injected through a TemplatePlugin . get_asset_folder () # Defines the folder where the plugin stores its static assets as defined in get_assets . Override this if your plugin stores its assets at some other place than the static sub folder in the plugin base directory. Returns: Type Description str The absolute path to the folder where the plugin stores its static assets get_assets () # Defines the static assets the plugin offers. The following asset types are recognized and automatically imported at the appropriate places to be available: js JavaScript files, such as additional view models jsclient JavaScript files containing additional parts for the JS Client Library (since 1.3.10) css CSS files with additional styles, will be embedded into delivered pages when not running in LESS mode. less LESS files with additional styles, will be embedded into delivered pages when running in LESS mode. The expected format to be returned is a dictionary mapping one or more of these keys to a list of files of that type, the files being represented as relative paths from the asset folder as defined via get_asset_folder . Example def get_assets ( self ): return dict ( js = [ 'js/my_file.js' , 'js/my_other_file.js' ], clientjs = [ 'clientjs/my_file.js' ], css = [ 'css/my_styles.css' ], less = [ 'less/my_styles.less' ] ) The assets will be made available by OctoPrint under the URL /plugin/<plugin identifier>/static/<path> , with plugin identifier being the plugin's identifier and path being the path as defined in the asset dictionary. Assets of the types js , css and less will be automatically bundled by OctoPrint using Flask-Assets . Returns: Type Description dict A dictionary describing the static assets to publish for the plugin. TemplatePlugin .. autoclass:: octoprint.plugin.TemplatePlugin :members: :show-inheritance: .. _sec-plugins-mixins-wizardplugin: WizardPlugin ~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.WizardPlugin :members: :show-inheritance: .. _sec-plugins-mixins-uiplugin: UiPlugin ~~~~~~~~ .. autoclass:: octoprint.plugin.UiPlugin :members: :show-inheritance: .. _sec-plugins-mixins-simpleapiplugin: SimpleApiPlugin ~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.SimpleApiPlugin :members: :show-inheritance: .. _sec-plugins-mixins-blueprintplugin: BlueprintPlugin ~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.BlueprintPlugin :members: :show-inheritance: .. _sec-plugins-mixins-eventhandlerplugin: EventHandlerPlugin ~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.EventHandlerPlugin :members: :show-inheritance: .. _sec-plugins-mixins-progressplugin: ProgressPlugin .. autoclass:: octoprint.plugin.ProgressPlugin :members: :show-inheritance: .. _sec-plugins-mixins-slicerplugin: SlicerPlugin ~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.SlicerPlugin :members: :show-inheritance: .. _sec-plugins-mixins-restartneeding: RestartNeedingPlugin ~~~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.RestartNeedingPlugin :members: :show-inheritance: .. _sec-plugins-mixins-reloadneeding: ReloadNeedingPlugin ~~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.ReloadNeedingPlugin :members: :show-inheritance:","title":"Mixins"},{"location":"plugin-guide/mixins/#mixins","text":"","title":"Mixins"},{"location":"plugin-guide/mixins/#general-concepts","text":"Plugin mixins are the heart of OctoPrint's plugin system. They are :ref: special base classes <sec-plugins-mixins> which are to be subclassed and extended to add functionality to OctoPrint. Plugins declare their instances that implement one or multiple mixins using the __plugin_implementation__ control property. OctoPrint's plugin core collects those from the plugins and offers methods to access them based on the mixin type, which get used at multiple locations within OctoPrint. Using mixins always follows the pattern of retrieving the matching implementations from the plugin subsystem, then calling the specific mixin's methods as defined and necessary. The following snippet taken from OctoPrint's code for example shows how all octoprint.plugin.AssetPlugin implementations are collected and then all assets they return via their get_assets methods are retrieved and merged into one big asset map (differing between javascripts and stylesheets of various types) for use during rendition of the UI. asset_plugins = pluginManager . get_implementations ( octoprint . plugin . AssetPlugin ) for name , implementation in asset_plugins . items (): all_assets = implementation . get_assets () if \"js\" in all_assets : for asset in all_assets [ \"js\" ]: assets [ \"js\" ] . append ( url_for ( 'plugin_assets' , name = name , filename = asset )) if preferred_stylesheet in all_assets : for asset in all_assets [ preferred_stylesheet ]: assets [ \"stylesheets\" ] . append (( preferred_stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) else : for stylesheet in supported_stylesheets : if not stylesheet in all_assets : continue for asset in all_assets [ stylesheet ]: assets [ \"stylesheets\" ] . append (( stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) break See-also The Plugin Tutorial Tutorial on how to write a simple OctoPrint module utilizing mixins for various types of extension.","title":"General Concepts"},{"location":"plugin-guide/mixins/#execution-order","text":"Some mixin types, such as :class: ~octoprint.plugin.StartupPlugin , :class: ~octoprint.plugin.ShutdownPlugin and :class: ~octoprint.plugin.UiPlugin , support influencing the execution order for various execution contexts by also implementing the :class: ~octoprint.plugin.core.SortablePlugin mixin. If a method is to be called on a plugin implementation for which a sorting context is defined (see the mixin documentation for information on this), OctoPrint's plugin subsystem will ensure that the order in which the implementation calls are done is as follows: Plugins with a return value that is not None for :meth: ~octoprint.plugin.core.SortablePlugin.get_sorting_key for the provided sorting context will be ordered among each other first. If the returned order number is equal for two or more implementations, they will be sorted first by whether they come bundled with OctoPrint or not, then by their identifier. After that follow plugins which returned None (the default). They are first sorted by whether they come bundled with OctoPrint or not, then by their identifier. Example Consider four plugin implementations implementing the :class: ~octoprint.plugin.StartupPlugin mixin, called plugin_a , plugin_b , plugin_c and plugin_d , the latter coming bundled with OctoPrint. plugin_a and plugin_d don't override :meth: ~octoprint.plugin.core.SortablePlugin.get_sorting_key . plugin_b and plugin_c both return 1 for the sorting context StartupPlugin.on_startup , None otherwise: plugin_a.py import octoprint.plugin class PluginA ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA started up\" ) __plugin_implementation__ = PluginA () plugin_b.py import octoprint.plugin class PluginB ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB started up\" ) __plugin_implementation__ = PluginB () plugin_c.py import octoprint.plugin class PluginC ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC started up\" ) __plugin_implementation__ = PluginC () plugin_d.py # in this example this is bundled with OctoPrint import octoprint.plugin class PluginD ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD started up\" ) __plugin_implementation__ = PluginD () OctoPrint will detect that plugin_b and plugin_c define a order number, and since it's identical for both, namely 1 , will order both plugins based first on their bundling status and then on their plugin identifier. plugin_a and plugin_d don't define a sort key and hence will be put after the other two, with plugin_d coming before plugin_a since it comes bundled with OctoPrint. The execution order of the on_startup method will hence be plugin_b , plugin_c , plugin_d , plugin_a . Now, the execution order of the on_after_startup method will be determined based on another sorting context, StartupPlugin.on_after_startup for which all of the plugins return None . Hence, the execution order of the on_after_startup method will be ordered first by bundle status, then by plugin identifier: plugin_d , plugin_a , plugin_b , plugin_c . This will result in the following messages to be generated: Plugin B starting up Plugin C starting up Plugin D starting up Plugin A starting up Plugin D started up Plugin A started up Plugin B started up Plugin C started up","title":"Execution Order"},{"location":"plugin-guide/mixins/#injected-properties","text":"OctoPrint's plugin subsystem will inject a bunch of properties into each :ref: mixin implementation <sec-plugins-mixins> . An overview of these properties can be found in the section :ref: Injected Properties <sec-plugins-injectedproperties> . See-also octoprint.plugin.core.Plugin and octoprint.plugin.OctoPrintPlugin Class documentation also containing the properties shared among all mixin implementations.","title":"Injected Properties"},{"location":"plugin-guide/mixins/#available-plugin-mixins","text":"The following plugin mixins are currently available: Please note that all plugin mixins inherit from octoprint.plugin.core.Plugin and octoprint.plugin.types.OctoPrintPlugin , which also provide attributes of interest to plugin developers.","title":"Available plugin mixins"},{"location":"plugin-guide/mixins/#startupplugin","text":"Bases: OctoPrintPlugin , SortablePlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. StartupPlugin is a SortablePlugin and provides sorting contexts for on_startup as well as on_after_startup .","title":"StartupPlugin"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.StartupPlugin.on_after_startup","text":"Called just after launch of the server, so when the listen loop is actually running already. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_after_startup .","title":"on_after_startup()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.StartupPlugin.on_startup","text":"Called just before the server is actually launched. Plugins get supplied with the host and port the server will listen on. Note that the host may be 0.0.0.0 if it will listen on all interfaces, so you can't just blindly use this for constructing publicly reachable URLs. Also note that when this method is called, the server is not actually up yet and none of your plugin's APIs or blueprints will be reachable yet. If you need to be externally reachable, use :func: on_after_startup instead or additionally. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_startup . :param string host: the host the server will listen on, may be 0.0.0.0 :param int port: the port the server will listen on","title":"on_startup()"},{"location":"plugin-guide/mixins/#shutdownplugin","text":"Bases: OctoPrintPlugin , SortablePlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the :class: StartupPlugin mixin, to cleanly shut down additional services again that where started by the :class: StartupPlugin part of the plugin. ShutdownPlugin is a :class: ~octoprint.plugin.core.SortablePlugin and provides a sorting context for :meth: ~octoprint.plugin.ShutdownPlugin.on_shutdown .","title":"ShutdownPlugin"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.ShutdownPlugin.on_shutdown","text":"Called upon the imminent shutdown of OctoPrint. .. warning:: Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is ShutdownPlugin.on_shutdown .","title":"on_shutdown()"},{"location":"plugin-guide/mixins/#settingsplugin","text":"Bases: OctoPrintPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. Plugins including the mixing will get injected an additional property self._settings which is an instance of PluginSettingsManager already properly initialized for use by the plugin. In order for the manager to know about the available settings structure and default values upon initialization, implementing plugins will need to provide a dictionary with the plugin's default settings through overriding the method :func: get_settings_defaults . The defined structure will then be available to access through the settings manager available as self._settings . If your plugin needs to react to the change of specific configuration values on the fly, e.g. to adjust the log level of a logger when the user changes a corresponding flag via the settings dialog, you can override the :func: on_settings_save method and wrap the call to the implementation from the parent class with retrieval of the old and the new value and react accordingly. Example: .. code-block:: python import octoprint.plugin class MySettingsPlugin(octoprint.plugin.SettingsPlugin, octoprint.plugin.StartupPlugin): def get_settings_defaults(self): return dict( some_setting=\"foo\", some_value=23, sub=dict( some_flag=True ) ) def on_settings_save(self, data): old_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) octoprint.plugin.SettingsPlugin.on_settings_save(self, data) new_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) if old_flag != new_flag: self._logger.info(\"sub.some_flag changed from {old_flag} to {new_flag}\".format(**locals())) def on_after_startup(self): some_setting = self._settings.get([\"some_setting\"]) some_value = self._settings.get_int([\"some_value\"]) some_flag = self._settings.get_boolean([\"sub\", \"some_flag\"]) self._logger.info(\"some_setting = {some_setting}, some_value = {some_value}, sub.some_flag = {some_flag}\".format(**locals()) plugin_implementation = MySettingsPlugin() Of course, you are always free to completely override both :func: on_settings_load and :func: on_settings_save if the default implementations do not fit your requirements. .. warning:: Make sure to protect sensitive information stored by your plugin that only logged in administrators (or users) should have access to via :meth: ~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths . OctoPrint will return its settings on the REST API even to anonymous clients, but will filter out fields it knows are restricted, therefore you must make sure that you specify sensitive information accordingly to limit access as required!","title":"SettingsPlugin"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.config_version_key","text":"Key of the field in the settings that holds the configuration format version.","title":"config_version_key"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.get_settings_defaults","text":"Retrieves the plugin's default settings with which the plugin's settings manager will be initialized. Override this in your plugin's implementation and return a dictionary defining your settings data structure with included default values.","title":"get_settings_defaults()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.get_settings_preprocessors","text":"Retrieves the plugin's preprocessors to use for preprocessing returned or set values prior to returning/setting them. The preprocessors should be provided as a dictionary mapping the path of the values to preprocess (hierarchically) to a transform function which will get the value to transform as only input and should return the transformed value. Example: .. code-block:: python def get_settings_defaults(self): return dict(some_key=\"Some_Value\", some_other_key=\"Some_Value\") def get_settings_preprocessors(self): return dict(some_key=lambda x: x.upper()), # getter preprocessors dict(some_other_key=lambda x: x.lower()) # setter preprocessors def some_method(self): # getting the value for \"some_key\" should turn it to upper case assert self._settings.get([\"some_key\"]) == \"SOME_VALUE\" # the value for \"some_other_key\" should be left alone assert self._settings.get([\"some_other_key\"] = \"Some_Value\" # setting a value for \"some_other_key\" should cause the value to first be turned to lower case self._settings.set([\"some_other_key\"], \"SOME_OTHER_VALUE\") assert self._settings.get([\"some_other_key\"]) == \"some_other_value\" Returns: Type Description dict , dict A tuple consisting of two dictionaries, the first being the plugin's preprocessors for getters, the second the preprocessors for setters","title":"get_settings_preprocessors()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.get_settings_restricted_paths","text":"Retrieves the list of paths in the plugin's settings which be restricted on the REST API. Override this in your plugin's implementation to restrict whether a path should only be returned to users with certain permissions, or never on the REST API. Return a dict with one of the following keys, mapping to a list of paths (as tuples or lists of the path elements) for which to restrict access via the REST API accordingly. An class: ~octoprint.access.permissions.OctoPrintPermission instance: Paths will only be available on the REST API for users with the permission admin : Paths will only be available on the REST API for users with admin rights (any user with the SETTINGS permission) user : Paths will only be available on the REST API when accessed as a logged in user never : Paths will never be returned on the API Example: .. code-block:: python def get_settings_defaults(self): return dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), user_only=dict(path=\"path\", bar=\"bar\")), another=dict(admin_only=dict(path=\"path\"), field=\"field\"), path=dict(to=dict(never=dict(return=\"return\"))), the=dict(webcam=dict(data=\"webcam\"))) def get_settings_restricted_paths(self): from octoprint.access.permissions import Permissions return {'admin':[[\"some\", \"admin_only\", \"path\"], [\"another\", \"admin_only\", \"path\"],], 'user':[[\"some\", \"user_only\", \"path\"],], 'never':[[\"path\", \"to\", \"never\", \"return\"],], Permissions.WEBCAM:[[\"the\", \"webcam\", \"data\"],]} # this will make the plugin return settings on the REST API like this for an anonymous user # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=None, bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user without the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user with the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) # # and like this for an admin user # # dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=\"path\"), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) .. versionadded:: 1.2.17","title":"get_settings_restricted_paths()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.get_settings_version","text":"Retrieves the settings format version of the plugin. Use this to have OctoPrint trigger your migration function if it detects an outdated settings version in config.yaml. Returns: Type Description int or None: an int signifying the current settings format, should be incremented by plugins whenever there are backwards incompatible changes. Returning None here disables the version tracking for the plugin's configuration.","title":"get_settings_version()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.on_settings_cleanup","text":"Called after migration and initialization but before call to :func: on_settings_initialized . Plugins may overwrite this method to perform additional clean up tasks. The default implementation just minimizes the data persisted on disk to only contain the differences to the defaults (in case the current data was persisted with an older version of OctoPrint that still duplicated default data). .. versionadded:: 1.3.0","title":"on_settings_cleanup()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.on_settings_initialized","text":"Called after the settings have been initialized and - if necessary - also been migrated through a call to func: on_settings_migrate . This method will always be called after the initialize method.","title":"on_settings_initialized()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.on_settings_load","text":"Loads the settings for the plugin, called by the Settings API view in order to retrieve all settings from all plugins. Override this if you want to inject additional settings properties that are not stored within OctoPrint's configuration. .. note:: The default implementation will return your plugin's settings as is, so just in the structure and in the types that are currently stored in OctoPrint's configuration. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, using the proper retriever methods on the settings manager to retrieve the data in the correct format. The default implementation will also replace any paths that have been restricted by your plugin through :func: ~octoprint.plugin.SettingsPlugin.get_settings_restricted_paths with either the provided default value (if one was provided), an empty dictionary (as fallback for restricted dictionaries), an empty list (as fallback for restricted lists) or None values where necessary. Make sure to do your own restriction if you decide to fully overload this method. :return: the current settings of the plugin, as a dictionary","title":"on_settings_load()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.on_settings_migrate","text":"Called by OctoPrint if it detects that the installed version of the plugin necessitates a higher settings version than the one currently stored in _config.yaml. Will also be called if the settings data stored in config.yaml doesn't have version information, in which case the current parameter will be None. Your plugin's implementation should take care of migrating any data by utilizing self._settings. OctoPrint will take care of saving any changes to disk by calling self._settings.save() after returning from this method. This method will be called before your plugin's :func: on_settings_initialized method, with all injections already having taken place. You can therefore depend on the configuration having been migrated by the time :func: on_settings_initialized is called. Parameters: Name Type Description Default target int The settings format version the plugin requires, this should always be the same value as returned by :func: get_settings_version . required current int or None The settings format version as currently stored in config.yaml. May be None if no version information can be found. required","title":"on_settings_migrate()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.SettingsPlugin.on_settings_save","text":"Saves the settings for the plugin, called by the Settings API view in order to persist all settings from all plugins. Override this if you need to directly react to settings changes or want to extract additional settings properties that are not stored within OctoPrint's configuration. .. note:: The default implementation will persist your plugin's settings as is, so just in the structure and in the types that were received by the Settings API view. Values identical to the default settings values will not be persisted. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, retrieving them (if set) from the supplied received data and using the proper setter methods on the settings manager to persist the data in the correct format. Parameters: Name Type Description Default data dict The settings dictionary to be saved for the plugin required Returns: Name Type Description dict The settings that differed from the defaults and were actually saved.","title":"on_settings_save()"},{"location":"plugin-guide/mixins/#assetplugin","text":"Bases: OctoPrintPlugin , RestartNeedingPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. A typical usage of the AssetPlugin functionality is to embed a custom view model to be used by templates injected through a TemplatePlugin .","title":"AssetPlugin"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.AssetPlugin.get_asset_folder","text":"Defines the folder where the plugin stores its static assets as defined in get_assets . Override this if your plugin stores its assets at some other place than the static sub folder in the plugin base directory. Returns: Type Description str The absolute path to the folder where the plugin stores its static assets","title":"get_asset_folder()"},{"location":"plugin-guide/mixins/#octoprint.plugin.types.AssetPlugin.get_assets","text":"Defines the static assets the plugin offers. The following asset types are recognized and automatically imported at the appropriate places to be available: js JavaScript files, such as additional view models jsclient JavaScript files containing additional parts for the JS Client Library (since 1.3.10) css CSS files with additional styles, will be embedded into delivered pages when not running in LESS mode. less LESS files with additional styles, will be embedded into delivered pages when running in LESS mode. The expected format to be returned is a dictionary mapping one or more of these keys to a list of files of that type, the files being represented as relative paths from the asset folder as defined via get_asset_folder . Example def get_assets ( self ): return dict ( js = [ 'js/my_file.js' , 'js/my_other_file.js' ], clientjs = [ 'clientjs/my_file.js' ], css = [ 'css/my_styles.css' ], less = [ 'less/my_styles.less' ] ) The assets will be made available by OctoPrint under the URL /plugin/<plugin identifier>/static/<path> , with plugin identifier being the plugin's identifier and path being the path as defined in the asset dictionary. Assets of the types js , css and less will be automatically bundled by OctoPrint using Flask-Assets . Returns: Type Description dict A dictionary describing the static assets to publish for the plugin. TemplatePlugin .. autoclass:: octoprint.plugin.TemplatePlugin :members: :show-inheritance: .. _sec-plugins-mixins-wizardplugin: WizardPlugin ~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.WizardPlugin :members: :show-inheritance: .. _sec-plugins-mixins-uiplugin: UiPlugin ~~~~~~~~ .. autoclass:: octoprint.plugin.UiPlugin :members: :show-inheritance: .. _sec-plugins-mixins-simpleapiplugin: SimpleApiPlugin ~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.SimpleApiPlugin :members: :show-inheritance: .. _sec-plugins-mixins-blueprintplugin: BlueprintPlugin ~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.BlueprintPlugin :members: :show-inheritance: .. _sec-plugins-mixins-eventhandlerplugin: EventHandlerPlugin ~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.EventHandlerPlugin :members: :show-inheritance: .. _sec-plugins-mixins-progressplugin: ProgressPlugin .. autoclass:: octoprint.plugin.ProgressPlugin :members: :show-inheritance: .. _sec-plugins-mixins-slicerplugin: SlicerPlugin ~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.SlicerPlugin :members: :show-inheritance: .. _sec-plugins-mixins-restartneeding: RestartNeedingPlugin ~~~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.RestartNeedingPlugin :members: :show-inheritance: .. _sec-plugins-mixins-reloadneeding: ReloadNeedingPlugin ~~~~~~~~~~~~~~~~~~~ .. autoclass:: octoprint.plugin.ReloadNeedingPlugin :members: :show-inheritance:","title":"get_assets()"},{"location":"user-guide/","text":"User Guide #","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"},{"location":"user-guide/configuration/cli/","text":"Command-line configuration interface # New in version 1.3.0. OctoPrint provides a basic command line interface for manipulation of config.yaml : $ octoprint config --help Usage: octoprint config [OPTIONS] COMMAND [ARGS]... Basic config manipulation. Options: --help Show this message and exit. Commands: append_value Appends value to list behind config path. effective Retrieves the full effective config. get Retrieves value from config path. insert_value Inserts value at index of list behind config key. remove Removes a config path. remove_value Removes value from list at config path. set Sets a config path to the provided value. $ octoprint config append_value --help Usage: octoprint config append_value [OPTIONS] PATH VALUE Appends value to list behind config path. Options: --json --help Show this message and exit. $ octoprint config effective --help Usage: octoprint config effective [OPTIONS] Retrieves the full effective config. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config get --help Usage: octoprint config get [OPTIONS] PATH Retrieves value from config path. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config insert_value --help Usage: octoprint config insert_value [OPTIONS] PATH INDEX VALUE Inserts value at index of list behind config key. Options: --json --help Show this message and exit. $ octoprint config remove --help Usage: octoprint config remove [OPTIONS] PATH Removes a config path. Options: --help Show this message and exit. $ octoprint config remove_value --help Usage: octoprint config remove_value [OPTIONS] PATH VALUE Removes value from list at config path. Options: --json --help Show this message and exit. $ octoprint config set --help Usage: octoprint config set [OPTIONS] PATH VALUE Sets a config path to the provided value. Options: --bool Interpret value as bool --float Interpret value as float --int Interpret value as int --json Parse value from json --help Show this message and exit.","title":"Command-line configuration interface"},{"location":"user-guide/configuration/cli/#command-line-configuration-interface","text":"New in version 1.3.0. OctoPrint provides a basic command line interface for manipulation of config.yaml : $ octoprint config --help Usage: octoprint config [OPTIONS] COMMAND [ARGS]... Basic config manipulation. Options: --help Show this message and exit. Commands: append_value Appends value to list behind config path. effective Retrieves the full effective config. get Retrieves value from config path. insert_value Inserts value at index of list behind config key. remove Removes a config path. remove_value Removes value from list at config path. set Sets a config path to the provided value. $ octoprint config append_value --help Usage: octoprint config append_value [OPTIONS] PATH VALUE Appends value to list behind config path. Options: --json --help Show this message and exit. $ octoprint config effective --help Usage: octoprint config effective [OPTIONS] Retrieves the full effective config. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config get --help Usage: octoprint config get [OPTIONS] PATH Retrieves value from config path. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config insert_value --help Usage: octoprint config insert_value [OPTIONS] PATH INDEX VALUE Inserts value at index of list behind config key. Options: --json --help Show this message and exit. $ octoprint config remove --help Usage: octoprint config remove [OPTIONS] PATH Removes a config path. Options: --help Show this message and exit. $ octoprint config remove_value --help Usage: octoprint config remove_value [OPTIONS] PATH VALUE Removes value from list at config path. Options: --json --help Show this message and exit. $ octoprint config set --help Usage: octoprint config set [OPTIONS] PATH VALUE Sets a config path to the provided value. Options: --bool Interpret value as bool --float Interpret value as float --int Interpret value as int --json Parse value from json --help Show this message and exit.","title":"Command-line configuration interface"},{"location":"user-guide/configuration/config.yaml/","text":"config.yaml # If not specified via the command line, the main configuration file config.yaml for OctoPrint is expected in its settings folder, which unless defined differently via the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. If the file is not there, you can just create it - it will only get created by OctoPrint once you save settings that deviate from the default settings. Note that many of these settings are available from the Settings in OctoPrint itself. They can also be configured via config command line interface. The configuration is a YAML file with a top-level dictionary. The keys of this dictionary are as follows: accessControl : # ... api : # ... appearance : # ... controls : # ... devel : # ... estimation : # ... events : # ... feature : # ... folder : # ... gcodeAnalysis : # ... plugins : # ... printerParameters : # ... printerProfiles : # ... scripts : # ... serial : # ... server : # ... slicing : # ... system : # ... temperature : # ... terminalFilters : # ... webcam : # ... Their content is described in the following sections. accessControl # Defaults # accessControl : salt : userManager : octoprint.access.users.FilebasedUserManager groupManager : octoprint.access.groups.FilebasedGroupManager permissionManager : octoprint.access.permissions.PermissionManager userfile : groupfile : autologinLocal : false localNetworks : - 127.0.0.0/8 - ::1/128 autologinAs : trustBasicAuthentication : false checkBasicAuthenticationPassword : true trustRemoteUser : false remoteUserHeader : REMOTE_USER addRemoteUsers : false Data model # Name Type Description Default salt Optional[str] Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. unset userManager str The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder). 'octoprint.access.users.FilebasedUserManager' groupManager str The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder). 'octoprint.access.groups.FilebasedGroupManager' permissionManager str The permission manager implementation to use. 'octoprint.access.permissions.PermissionManager' userfile Optional[str] The YAML user file to use. If left out defaults to users.yaml in the default configuration folder. unset groupfile Optional[str] The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder. unset autologinLocal bool If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs . False localNetworks List[str] A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost. ['127.0.0.0/8', '::1/128'] autologinAs Optional[str] The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users. unset trustBasicAuthentication bool Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! False checkBasicAuthenticationPassword bool Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. True trustRemoteUser bool Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! False remoteUserHeader str Header used by the reverse proxy to convey the authenticated user. 'REMOTE_USER' addRemoteUsers bool If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. False api # Defaults # api : key : apps : {} allowCrossOrigin : false Data model # Name Type Description Default key str Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run. unset apps Dict[str, str] {} allowCrossOrigin bool Whether to allow cross origin access to the API or not. False appearance # Using the appearance settings you can tweak OctoPrint's appearance a bit to better distinguish multiple instances/printers appearance or to modify the order and presence of the various UI components Defaults # appearance : name : '' color : default colorTransparent : false colorIcon : true defaultLanguage : _default showFahrenheitAlso : false fuzzyTimes : true closeModalsWithClick : true showInternalFilename : true components : order : navbar : - settings - systemmenu - plugin_announcements - plugin_logging_seriallog - plugin_logging_plugintimingslog - plugin_pi_support - login sidebar : - plugin_firmware_check_warning - plugin_firmware_check_info - connection - state - files tab : - temperature - control - plugin_gcodeviewer - terminal - timelapse settings : - section_printer - serial - printerprofiles - temperatures - terminalfilters - gcodescripts - section_features - features - webcam - accesscontrol - plugin_gcodeviewer - api - plugin_appkeys - section_octoprint - server - folders - appearance - plugin_logging - plugin_pluginmanager - plugin_softwareupdate - plugin_announcements - plugin_eventmanager - plugin_backup - plugin_tracking - plugin_errortracking - plugin_pi_support usersettings : - access - interface wizard : - plugin_softwareupdate_update - plugin_backup - plugin_corewizard_acl - plugin_corewizard_onlinecheck about : - about - plugin_pi_support - supporters - authors - changelog - license - thirdparty - plugin_pluginmanager generic : [] disabled : navbar : [] sidebar : [] tab : [] settings : [] usersettings : [] wizard : [] about : [] generic : [] Data model # Name Type Description Default name str Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\") '' color str Use this to color the navigation bar. Valid values: blue , default , green , orange , red , violet , yellow . 'default' colorTransparent bool Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. False colorIcon bool True defaultLanguage str Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. '_default' showFahrenheitAlso bool False fuzzyTimes bool True closeModalsWithClick bool True showInternalFilename bool Show the internal filename in the files sidebar, if necessary. True components.* Configures the order and availability of the UI components. components.order.* Defines the order of the components within their respective containers. components.order.navbar List[str] ['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login'] components.order.sidebar List[str] ['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files'] components.order.tab List[str] ['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse'] components.order.settings List[str] ['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support'] components.order.usersettings List[str] Order of user settings. ['access', 'interface'] components.order.wizard List[str] ['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck'] components.order.about List[str] ['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager'] components.order.generic List[str] Order of generic items. [] components.disabled.* Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. components.disabled.navbar List[str] Disabled navbar items. [] components.disabled.sidebar List[str] Disabled sidebar items. [] components.disabled.tab List[str] Disabled tabs. [] components.disabled.settings List[str] Disabled settings. [] components.disabled.usersettings List[str] Disabled user settings. [] components.disabled.wizard List[str] Disabled wizards. [] components.disabled.about List[str] Disabled about dialog items. [] components.disabled.generic List[str] Disabled generic items. [] Hint By modifying the components.order lists you may reorder OctoPrint's UI components as you like. You can also inject Plugins at another than their default location in their respective container by adding the entry plugin_<plugin identifier> where you want them to appear. When you override this setting, the resulting order for display will be calculated as follows: first all components as defined by the components.order list then all enabled core components as defined in the default order Components not contained within the default order (e.g. from third party plugins) will be either prepended or appended to that result, depending on the component type. Example: If you want the tab of the Hello World Plugin to appear as the first tab in OctoPrint, you'd need to redefine components.order.tab by including something like this in your config.yaml : appearance : components : order : tab : - plugin_helloworld OctoPrint will then display the Hello World tab first, followed by the default tabs and then any other not explicitely ordered tabs. controls # Use the controls section to add custom controls to the \"Controls\" tab within OctoPrint. Defaults # controls : [] Data model # controls is a list, with each entry in the list being a dictionary describing either a control or a container. Control model # Name Type Description Default name str The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. required command Optional[str] A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset commands Optional[typing.List[str]] A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset script Optional[str] The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available. unset javascript Optional[str] A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset additionalClasses Optional[str] Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red. unset enabled Optional[str] A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset regex Optional[str] A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI. unset template Optional[str] A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ). unset confirm Optional[str] A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. unset Container model # Name Type Description Default children List[typing.Union[octoprint.schema.config.controls.ControlConfig, octoprint.schema.config.controls.ContainerConfig]] A list of children controls or containers contained within this container. [] name Optional[str] A name to display above the container, basically a section header. unset layout str The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ). Valid values: horizontal , vertical . 'vertical' Example # controls : - name : Fan layout : horizontal children : - name : Enable Fan command : M106 S%(speed)s input : - name : Speed (0-255) parameter : speed default : 255 slider : min : 0 max : 255 - name : Disable Fan command : M107 - name : Example for multiple commands children : - name : Move X (static) confirm : You are about to move the X axis right by 10mm with 3000mm/min. commands : - G91 - G1 X10 F3000 - G90 - name : Move X (parametric) commands : - G91 - G1 X%(distance)s F%(speed)s - G90 input : - default : 10 name : Distance parameter : distance - default : 3000 name : Speed parameter : speed - name : Reporting children : - name : Get Position command : M114 regex : \"X:([-+]?[0-9.]+) Y:([-+]?[0-9.]+) Z:([-+]?[0-9.]+) E:([-+]?[0-9.]+)\" template : \"Position: X={0}, Y={1}, Z={2}, E={3}\" - name : Fun stuff children : - name : Dance script : custom/dance.gco input : - name : Go arounds parameter : repetitions slider : max : 10 min : 1 step : 1 devel # The following settings are only relevant to you if you want to do OctoPrint development. Defaults # devel : stylesheet : css cache : enabled : true preemptive : true webassets : bundle : true clean_on_startup : true minify : true minify_plugins : false useFrozenDictForPrinterState : true showLoadingAnimation : true sockJsConnectTimeout : 30 pluginTimings : false Data model # Name Type Description Default stylesheet str Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. Valid values: css , less . 'css' cache.* Settings for OctoPrint's internal caching. cache.enabled bool True cache.preemptive bool True webassets.* Settings for OctoPrint's web asset merging and minifying. webassets.bundle bool If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting. True webassets.clean_on_startup bool Whether to delete generated web assets on server startup (forcing a regeneration). True webassets.minify bool If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either. True webassets.minify_plugins bool If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either. False useFrozenDictForPrinterState bool True showLoadingAnimation bool Enable or disable the loading animation. True sockJsConnectTimeout float 30 pluginTimings bool False estimation # Defaults # estimation : printTime : statsWeighingUntil : 0.5 validityRange : 0.15 forceDumbFromPercent : 0.3 forceDumbAfterMin : 30.0 stableThreshold : 60 Data model # Name Type Description Default printTime.* Parameters for the print time estimation during an ongoing print job. printTime.statsWeighingUntil float Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. 0.5 printTime.validityRange float Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used. 0.15 printTime.forceDumbFromPercent float If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. 0.3 printTime.forceDumbAfterMin float If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. 30.0 printTime.stableThreshold int Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. 60 events # Use the following settings to add shell/gcode commands to be executed on certain events : Defaults # events : enabled : true subscriptions : [] Data model # Name Type Description Default enabled bool Whether event subscriptions should be enabled or not. True subscriptions[] A list of event subscriptions. subscriptions[].event str The event to subscribe to. required subscriptions[].command str The command to execute when the event is triggered, either a GCODE or a system command. required subscriptions[].type str The type of the command. Valid values: gcode , system . required subscriptions[].enabled bool Whether the event subscription should be enabled. True subscriptions[].debug bool If set to true , OctoPrint will log the command after performing all placeholder replacements. False Example # events : subscriptions : # example event consumer that prints a message to the system log if the printer is disconnected - event : Disconnected command : \"logger 'Printer got disconnected'\" type : system # example event consumer that queries printer information from the firmware, prints a \"Connected\" # message to the LCD and homes the print head upon established printer connection, disabled though - event : Connected command : M115,M117 printer connected!,G28 type : gcode enabled : False Hint For debugging purposes, you can set the debug property on your event subscription definition to true . That will make the event handler print a log line with your subscription's command after performing all placeholder replacements. Example: events : subscriptions : - event : Startup command : \"logger 'OctoPrint started up'\" type : system debug : true This will be logged in OctoPrint's logfile as Executing System Command: logger 'OctoPrint started up' feature # Defaults # feature : temperatureGraph : true sdSupport : true keyboardControl : true pollWatched : false modelSizeDetection : true rememberFileFolder : false printStartConfirmation : false printCancelConfirmation : true uploadOverwriteConfirmation : true autoUppercaseBlacklist : - M117 - M118 g90InfluencesExtruder : false enforceReallyUniversalFilenames : false Data model # Name Type Description Default temperatureGraph bool Whether to enable the temperature graph in the UI or not. True sdSupport bool Specifies whether support for SD printing and file management should be enabled. True keyboardControl bool Whether to enable the keyboard control feature in the control tab. True pollWatched bool Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). False modelSizeDetection bool Whether to enable model size detection and warning (true) or not (false). True rememberFileFolder bool Whether to remember the selected folder on the file manager. False printStartConfirmation bool Whether to show a confirmation on print start (true) or not (false) False printCancelConfirmation bool Whether to show a confirmation on print cancelling (true) or not (false) True uploadOverwriteConfirmation bool True autoUppercaseBlacklist List[str] Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. ['M117', 'M118'] g90InfluencesExtruder bool Whether G90 / G91 also influence absolute/relative mode of extruders. False enforceReallyUniversalFilenames bool Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. False folder # Defaults # folder : uploads : timelapse : timelapse_tmp : logs : virtualSd : watched : plugins : slicingProfiles : printerProfiles : scripts : translations : generated : data : Data model # Name Type Description Default uploads Optional[str] Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder. unset timelapse Optional[str] Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder. unset timelapse_tmp Optional[str] Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder. unset logs Optional[str] Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder. unset virtualSd Optional[str] Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder. unset watched Optional[str] Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder. unset plugins Optional[str] Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder. unset slicingProfiles Optional[str] Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder. unset printerProfiles Optional[str] Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder. unset scripts Optional[str] Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder. unset translations Optional[str] Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder. unset generated Optional[str] Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder. unset data Optional[str] Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder. unset gcodeAnalysis # Defaults # gcodeAnalysis : maxExtruders : 10 throttle_normalprio : 0.01 throttle_highprio : 0.0 throttle_lines : 100 runAt : idle bedZ : 0.0 Data model # Name Type Description Default maxExtruders int Maximum number of extruders to support/to sanity check for. 10 throttle_normalprio float Pause between each processed GCODE line batch in normal priority mode, seconds. 0.01 throttle_highprio float Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. 0.0 throttle_lines int GCODE line batch size. 100 runAt str Whether to run the analysis only when idle (not printing), regardless of printing state or never. Valid values: always , idle , never . 'idle' bedZ float Z position considered the location of the bed. 0.0 plugins # The plugins section is where plugins can store their specific settings. It is also where the installed but disabled plugins are tracked. Defaults # plugins : _disabled : [] _forcedCompatible : [] _sortingOrder : {} Data model # Name Type Description Default _disabled None Identifiers of installed but disabled plugins. [] _forcedCompatible None Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. [] _sortingOrder None Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name. {} Additionally to the fields listed here, plugins will contain further keys for each plugin that is storing settings itself. The keys will be the plugin's identifier. Example # plugins : _disabled : - some_plugin _forcedCompatible : - some_other_plugin _sortingOrder : yet_another_plugin : octoprint.plugin.ordertest.callback : 1 StartupPlugin.on_startup : 10 virtual_printer : _config_version : 1 enabled : true printerParameters # Defaults # printerParameters : pauseTriggers : [] Data model # Name Type Description Default pauseTriggers List[str] [] printerProfiles # Defaults # printerProfiles : default : Data model # Name Type Description Default default Optional[str] Name of the printer profile to default to. unset scripts # Default scripts and snippets. You'd usually not edit the config.yaml file to adjust those but instead create the corresponding files in ~/.octoprint/scripts/ . See GCODE Scripts . Defaults # scripts : gcode : afterPrinterConnected : beforePrinterDisconnected : beforePrintStarted : afterPrintCancelled : \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet\\ \\ 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" afterPrintDone : beforePrintPaused : afterPrintResumed : beforeToolChange : afterToolChange : snippets : disable_hotends : \"{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n\\ {% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{\\ \\ tool }} S0\\n{% endfor %}{% endif %}\" disable_bed : \"{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}\" Data model # Name Type Description Default gcode.* gcode.afterPrinterConnected Optional[str] unset gcode.beforePrinterDisconnected Optional[str] unset gcode.beforePrintStarted Optional[str] unset gcode.afterPrintCancelled Optional[str] \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" gcode.afterPrintDone Optional[str] unset gcode.beforePrintPaused Optional[str] unset gcode.afterPrintResumed Optional[str] unset gcode.beforeToolChange Optional[str] unset gcode.afterToolChange Optional[str] unset gcode.snippets Dict[str, str] {'disable_hotends': '{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{ tool }} S0\\n{% endfor %}{% endif %}', 'disable_bed': '{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}'} serial # Defaults # serial : port : baudrate : exclusive : true lowLatency : false autoconnect : false log : false timeout : detectionFirst : 10.0 detectionConsecutive : 2.0 connection : 10.0 communication : 30.0 communicationBusy : 3.0 temperature : 5.0 temperatureTargetSet : 2.0 temperatureAutoreport : 2.0 sdStatus : 1.0 sdStatusAutoreport : 1.0 posAutoreport : 5.0 resendOk : 0.5 baudrateDetectionPause : 1.0 positionLogWait : 10.0 maxCommunicationTimeouts : idle : 2 printing : 5 long : 5 maxWritePasses : 5 additionalPorts : [] additionalBaudrates : [] blacklistedPorts : [] blacklistedBaudrates : [] longRunningCommands : - G4 - G28 - G29 - G30 - G32 - M400 - M226 - M600 blockedCommands : - M0 - M1 ignoredCommands : [] pausingCommands : - M0 - M1 - M25 emergencyCommands : - M112 - M108 - M410 checksumRequiringCommands : - M110 helloCommand : M110 N0 disconnectOnErrors : true ignoreErrorsFromFirmware : false terminalLogSize : 20 lastLineBufferSize : 50 logResends : true supportResendsWithoutOk : detect logPositionOnPause : true logPositionOnCancel : false abortHeatupOnCancel : true waitForStartOnConnect : false alwaysSendChecksum : false neverSendChecksum : false sendChecksumWithUnknownCommands : false unknownCommandsNeedAck : false sdRelativePath : false sdAlwaysAvailable : false sdLowerCase : false sdCancelCommand : M25 maxNotSdPrinting : 2 swallowOkAfterResend : true repetierTargetTemp : false externalHeatupDetection : true supportWait : true ignoreIdenticalResends : false identicalResendsCountdown : 7 supportFAsCommand : false firmwareDetection : true blockWhileDwelling : false useParityWorkaround : detect maxConsecutiveResends : 10 sendM112OnError : true disableSdPrintingDetection : false ackMax : 1 sanityCheckTools : true notifySuppressedCommands : warn capabilities : autoreport_temp : true autoreport_sdstatus : true autoreport_pos : true busy_protocol : true emergency_parser : true extended_m20 : true resendRatioThreshold : 10 resendRatioStart : 100 ignoreEmptyPorts : false encoding : ascii enableShutdownActionCommand : false triggerOkForM29 : true Data model # Name Type Description Default port Optional[str] The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected. unset baudrate Optional[int] The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. unset exclusive bool Whether to request the serial port exclusively or not True lowLatency bool Whether to request low latency mode on the serial port or not False autoconnect bool Whether to try to automatically connect to the printer on startup or not False log bool Whether to log whole communication to serial.log (warning: might decrease performance) False timeout.* Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems timeout.detectionFirst float 10.0 timeout.detectionConsecutive float 2.0 timeout.connection float Timeout for waiting to establish a connection with the selected port, in seconds 10.0 timeout.communication float Timeout during serial communication, in seconds 30.0 timeout.communicationBusy float Timeout during serial communication when busy protocol support is detected, in seconds 3.0 timeout.temperature float Timeout after which to query temperature when no target is set 5.0 timeout.temperatureTargetSet float Timeout after which to query temperature when a target is set 2.0 timeout.temperatureAutoreport float 2.0 timeout.sdStatus float Timeout after which to query the SD status while SD printing 1.0 timeout.sdStatusAutoreport float 1.0 timeout.posAutoreport float 5.0 timeout.resendOk float 0.5 timeout.baudrateDetectionPause float 1.0 timeout.positionLogWait float 10.0 maxCommunicationTimeouts.* maxCommunicationTimeouts.idle int Max. timeouts when the printer is idle 2 maxCommunicationTimeouts.printing int Max. timeouts when the printer is printing 5 maxCommunicationTimeouts.long int Max. timeouts when a long running command is active 5 maxWritePasses int Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error 5 additionalPorts List[str] Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern [] additionalBaudrates List[int] Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer [] blacklistedPorts List[str] [] blacklistedBaudrates List[int] [] longRunningCommands List[str] ['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600'] blockedCommands List[str] Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. ['M0', 'M1'] ignoredCommands List[str] Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. [] pausingCommands List[str] Commands which should cause OctoPrint to pause any ongoing prints. ['M0', 'M1', 'M25'] emergencyCommands List[str] ['M112', 'M108', 'M410'] checksumRequiringCommands List[str] Commands which need to always be send with a checksum. ['M110'] helloCommand str Command to send in order to initiate a handshake with the printer. 'M110 N0' disconnectOnErrors bool Whether to disconnect from the printer on errors or not. True ignoreErrorsFromFirmware bool Whether to completely ignore errors from the firmware or not. False terminalLogSize int 20 lastLineBufferSize int 50 logResends bool Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. True supportResendsWithoutOk str Whether to support resends without follow-up ok or not. Valid values: always , detect , never . 'detect' logPositionOnPause bool True logPositionOnCancel bool False abortHeatupOnCancel bool True waitForStartOnConnect bool Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect. False alwaysSendChecksum bool Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. False neverSendChecksum bool False sendChecksumWithUnknownCommands bool Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False unknownCommandsNeedAck bool Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False sdRelativePath bool Specifies whether firmware expects relative paths for selecting SD files. False sdAlwaysAvailable bool Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. False sdLowerCase bool False sdCancelCommand str 'M25' maxNotSdPrinting int 2 swallowOkAfterResend bool True repetierTargetTemp bool Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses. False externalHeatupDetection bool Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. True supportWait bool True ignoreIdenticalResends bool Whether to ignore identical resends from the printer (true, repetier) or not (false). False identicalResendsCountdown int If ignoreIdenticalResends is true, how many consecutive identical resends to ignore. 7 supportFAsCommand bool Whether to support F on its own as a valid GCODE command (true) or not (false). False firmwareDetection bool Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). True blockWhileDwelling bool Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). False useParityWorkaround str Valid values: always , detect , never . 'detect' maxConsecutiveResends int 10 sendM112OnError bool True disableSdPrintingDetection bool False ackMax int 1 sanityCheckTools bool True notifySuppressedCommands str Valid values: info , never , warn . 'warn' capabilities.* capabilities.autoreport_temp bool Whether to enable temperature autoreport in the firmware if its support is detected True capabilities.autoreport_sdstatus bool True capabilities.autoreport_pos bool True capabilities.busy_protocol bool Whether to shorten the communication timeout if the firmware seems to support the busy protocol True capabilities.emergency_parser bool True capabilities.extended_m20 bool True resendRatioThreshold int Percentage of resend requests among all sent lines that should be considered critical. 10 resendRatioStart int 100 ignoreEmptyPorts bool False encoding str Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings . 'ascii' enableShutdownActionCommand bool Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. False triggerOkForM29 bool Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok). True server # Defaults # server : host : port : 5000 firstRun : true startOnceInSafeMode : false ignoreIncompleteStartup : false incompleteStartup : false seenWizards : {} secretKey : heartbeat : 900 reverseProxy : prefixHeader : schemeHeader : hostHeader : serverHeader : portHeader : prefixFallback : schemeFallback : hostFallback : serverFallback : portFallback : trustedDownstream : [] uploads : maxSize : 1073741824 nameSuffix : name pathSuffix : path maxSize : 102400 commands : systemShutdownCommand : systemRestartCommand : serverRestartCommand : localPipCommand : onlineCheck : enabled : interval : 900 host : 1.1.1.1 port : 53 name : octoprint.org pluginBlacklist : enabled : url : https://plugins.octoprint.org/blacklist.json ttl : 900 diskspace : warning : 524288000 critical : 209715200 preemptiveCache : exceptions : [] until : 7 ipCheck : enabled : true trustedSubnets : [] allowFraming : false cookies : secure : false samesite : Data model # Name Type Description Default host Optional[str] Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. unset port int Use this option to define the port to which to bind the server. 5000 firstRun bool If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. True startOnceInSafeMode bool If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false False ignoreIncompleteStartup bool Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. False incompleteStartup bool Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode. False seenWizards Dict[str, str] {} secretKey Optional[str] Secret key for encrypting cookies and such, randomly generated on first run. unset heartbeat int 900 reverseProxy.* Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. reverseProxy.prefixHeader Optional[str] The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. unset reverseProxy.schemeHeader Optional[str] The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. unset reverseProxy.hostHeader Optional[str] The request header from which to determine the host under which OctoPrint is served by the reverse proxy. unset reverseProxy.serverHeader Optional[str] unset reverseProxy.portHeader Optional[str] unset reverseProxy.prefixFallback Optional[str] Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. unset reverseProxy.schemeFallback Optional[str] Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. unset reverseProxy.hostFallback Optional[str] Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. unset reverseProxy.serverFallback Optional[str] unset reverseProxy.portFallback Optional[str] unset reverseProxy.trustedDownstream List[str] List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. [] uploads.* Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. uploads.maxSize int Maximum size of uploaded files in bytes, defaults to 1GB. 1073741824 uploads.nameSuffix str Suffix used for storing the filename in the file upload headers when streaming uploads. 'name' uploads.pathSuffix str Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads. 'path' maxSize int Maximum size of requests other than file uploads in bytes, defaults to 100KB. 102400 commands.* Commands to restart/shutdown octoprint or the system it's running on. commands.systemShutdownCommand Optional[str] Command to shut down the system OctoPrint is running on. unset commands.systemRestartCommand Optional[str] Command to restart the system OctoPrint is running on. unset commands.serverRestartCommand Optional[str] Command to restart OctoPrint. unset commands.localPipCommand Optional[str] pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. unset onlineCheck.* Configuration of the regular online connectivity check. onlineCheck.enabled Optional[bool] Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. unset onlineCheck.interval int Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. 900 onlineCheck.host str DNS host against which to check, defaults to Cloudflare's DNS. '1.1.1.1' onlineCheck.port int DNS port against which to check, defaults to the standard DNS port. 53 onlineCheck.name str Host name for which to check name resolution, defaults to OctoPrint's main domain. 'octoprint.org' pluginBlacklist.* Configuration of the plugin blacklist. pluginBlacklist.enabled Optional[bool] Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. unset pluginBlacklist.url str The URL from which to fetch the blacklist. 'https://plugins.octoprint.org/blacklist.json' pluginBlacklist.ttl int Time to live of the cached blacklist, in seconds (default: 15 minutes). 900 diskspace.* Settings of when to display what disk space warning. diskspace.warning int Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. 524288000 diskspace.critical int Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. 209715200 preemptiveCache.* Configuration of the preemptive cache. preemptiveCache.exceptions List[str] Which server paths to exclude from the preemptive cache, e.g. /some/path . [] preemptiveCache.until int How many days to leave unused entries in the preemptive cache config. 7 ipCheck.* Configuration of the client IP check to warn about connections from external networks. ipCheck.enabled bool Whether to enable the check. True ipCheck.trustedSubnets List[str] Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 . [] allowFraming bool Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. False cookies.* Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). cookies.secure bool Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. False cookies.samesite Optional[octoprint.schema.config.server.SameSiteEnum] SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to unset. Be advised that many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 . unset slicing # Defaults # slicing : enabled : true defaultSlicer : defaultProfiles : {} Data model # Name Type Description Default enabled bool Whether to enable slicing support or not. True defaultSlicer Optional[str] Default slicer to use. unset defaultProfiles Dict[str, str] Default slicing profiles per slicer, maps slicer identifier to profile identifier. {} system # Defaults # system : actions : [] Data model # Name Type Description Default actions[] A list of system actions to show in the UI. actions[].action str The identifier used internally to identify the action. Set to divider to generate a divider in the menu. required actions[].name Optional[str] The name of the action that will be shown on the menu. Must be set if the action is not a divider. unset actions[].command Optional[str] The command to execute when the action is selected. Must be set if the action is not a divider. unset actions[].async None Whether to run the command asynchronously. False actions[].confirm Optional[str] An optional confirmation message to show before executing the command. unset temperature # Defaults # temperature : profiles : - name : ABS extruder : 210 bed : 100 - name : PLA extruder : 180 bed : 60 cutoff : 30 sendAutomatically : false sendAutomaticallyAfter : 1 Data model # Name Type Description Default profiles[] profiles[].name str Name of the profile. required profiles[].extruder int Hotend temperature to set with the profile. required profiles[].bed int Bed temperature to set with the profile. required cutoff int Cut off time for the temperature data, in minutes. 30 sendAutomatically bool Whether to send new temperature settings made in the UI automatically. False sendAutomaticallyAfter int After what time to send the new temperature settings automatically, in seconds. 1 terminalFilters # Use the following settings to define a list of terminal filters to display in the terminal tab for filtering certain lines from the display terminal log. Defaults # terminal_filters : - name : Suppress temperature messages regex : '(Send: (N\\d+\\s+)?M105)|(Recv:\\s+(ok\\s+([PBN]\\d+\\s+)*)?([BCLPR]|T\\d*):-?\\d+)' - name : Suppress SD status messages regex : '(Send: (N\\d+\\s+)?M27)|(Recv: SD printing byte)|(Recv: Not SD printing)' - name : Suppress position messages regex : (Send:\\s+(N\\d+\\s+)?M114)|(Recv:\\s+(ok\\s+)?X:[+-]?([0-9]*[.])?[0-9]+\\s+Y:[+-]?([0-9]*[.])?[0-9]+\\s+Z:[+-]?([0-9]*[.])?[0-9]+\\s+E\\d*:[+-]?([0-9]*[.])?[0-9]+).* - name : Suppress wait responses regex : 'Recv: wait' - name : Suppress processing responses regex : 'Recv: (echo:\\s*)?busy:\\s*processing' Data model # Each filter entry in the list is a dictionary with the following keys: Name Type Description Default name str The name of the filter. required regex str The regular expression to match. Use JavaScript regular expressions . required webcam # Defaults # webcam : webcamEnabled : true timelapseEnabled : true stream : streamRatio : 16:9 streamTimeout : 5 streamWebrtcIceServers : - stun:stun.l.google.com:19302 snapshot : snapshotTimeout : 5 snapshotSslValidation : true ffmpeg : ffmpegThreads : 1 ffmpegVideoCodec : libx264 bitrate : 10000k watermark : true flipH : false flipV : false rotate90 : false ffmpegCommandline : '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline : '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse : type : off fps : 25 postRoll : 0 options : interval : capturePostRoll : retractionZHop : cleanTmpAfterDays : 7 cacheBuster : false Data model # Name Type Description Default webcamEnabled bool Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set. True timelapseEnabled bool Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. True stream Optional[str] unset streamRatio str Valid values: 4:3 , 16:9 . '16:9' streamTimeout int 5 streamWebrtcIceServers List[str] ['stun:stun.l.google.com:19302'] snapshot Optional[str] unset snapshotTimeout int 5 snapshotSslValidation bool True ffmpeg Optional[str] Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. unset ffmpegThreads int Number of how many threads to instruct ffmpeg to use for encoding. 1 ffmpegVideoCodec str Videocodec to be used for encoding. 'libx264' bitrate str The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. '10000k' watermark bool Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. True flipH bool Whether to flip the webcam horizontally. False flipV bool Whether to flip the webcam vertically. False rotate90 bool Whether to rotate the webcam 90\u00b0 counter clockwise. False ffmpegCommandline str '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline str '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse.* The default timelapse settings. timelapse.type str The timelapse type. Valid values: off , timed , zchange . 'off' timelapse.fps int The framerate at which to render the movie. 25 timelapse.postRoll int The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode. 0 timelapse.options.* Additional options depending on the timelapse type. timelapse.options.interval Optional[int] timed timelapses only: The interval which to leave between images in seconds. unset timelapse.options.capturePostRoll Optional[bool] timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). unset timelapse.options.retractionZHop Optional[float] zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots. unset cleanTmpAfterDays int After how many days unrendered timelapses will be deleted. 7 cacheBuster bool False","title":"config.yaml"},{"location":"user-guide/configuration/config.yaml/#configyaml","text":"If not specified via the command line, the main configuration file config.yaml for OctoPrint is expected in its settings folder, which unless defined differently via the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. If the file is not there, you can just create it - it will only get created by OctoPrint once you save settings that deviate from the default settings. Note that many of these settings are available from the Settings in OctoPrint itself. They can also be configured via config command line interface. The configuration is a YAML file with a top-level dictionary. The keys of this dictionary are as follows: accessControl : # ... api : # ... appearance : # ... controls : # ... devel : # ... estimation : # ... events : # ... feature : # ... folder : # ... gcodeAnalysis : # ... plugins : # ... printerParameters : # ... printerProfiles : # ... scripts : # ... serial : # ... server : # ... slicing : # ... system : # ... temperature : # ... terminalFilters : # ... webcam : # ... Their content is described in the following sections.","title":"config.yaml"},{"location":"user-guide/configuration/config.yaml/#accesscontrol","text":"","title":"accessControl"},{"location":"user-guide/configuration/config.yaml/#defaults","text":"accessControl : salt : userManager : octoprint.access.users.FilebasedUserManager groupManager : octoprint.access.groups.FilebasedGroupManager permissionManager : octoprint.access.permissions.PermissionManager userfile : groupfile : autologinLocal : false localNetworks : - 127.0.0.0/8 - ::1/128 autologinAs : trustBasicAuthentication : false checkBasicAuthenticationPassword : true trustRemoteUser : false remoteUserHeader : REMOTE_USER addRemoteUsers : false","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model","text":"Name Type Description Default salt Optional[str] Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. unset userManager str The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder). 'octoprint.access.users.FilebasedUserManager' groupManager str The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder). 'octoprint.access.groups.FilebasedGroupManager' permissionManager str The permission manager implementation to use. 'octoprint.access.permissions.PermissionManager' userfile Optional[str] The YAML user file to use. If left out defaults to users.yaml in the default configuration folder. unset groupfile Optional[str] The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder. unset autologinLocal bool If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs . False localNetworks List[str] A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost. ['127.0.0.0/8', '::1/128'] autologinAs Optional[str] The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users. unset trustBasicAuthentication bool Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! False checkBasicAuthenticationPassword bool Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. True trustRemoteUser bool Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! False remoteUserHeader str Header used by the reverse proxy to convey the authenticated user. 'REMOTE_USER' addRemoteUsers bool If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. False","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#api","text":"","title":"api"},{"location":"user-guide/configuration/config.yaml/#defaults_1","text":"api : key : apps : {} allowCrossOrigin : false","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_1","text":"Name Type Description Default key str Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run. unset apps Dict[str, str] {} allowCrossOrigin bool Whether to allow cross origin access to the API or not. False","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#appearance","text":"Using the appearance settings you can tweak OctoPrint's appearance a bit to better distinguish multiple instances/printers appearance or to modify the order and presence of the various UI components","title":"appearance"},{"location":"user-guide/configuration/config.yaml/#defaults_2","text":"appearance : name : '' color : default colorTransparent : false colorIcon : true defaultLanguage : _default showFahrenheitAlso : false fuzzyTimes : true closeModalsWithClick : true showInternalFilename : true components : order : navbar : - settings - systemmenu - plugin_announcements - plugin_logging_seriallog - plugin_logging_plugintimingslog - plugin_pi_support - login sidebar : - plugin_firmware_check_warning - plugin_firmware_check_info - connection - state - files tab : - temperature - control - plugin_gcodeviewer - terminal - timelapse settings : - section_printer - serial - printerprofiles - temperatures - terminalfilters - gcodescripts - section_features - features - webcam - accesscontrol - plugin_gcodeviewer - api - plugin_appkeys - section_octoprint - server - folders - appearance - plugin_logging - plugin_pluginmanager - plugin_softwareupdate - plugin_announcements - plugin_eventmanager - plugin_backup - plugin_tracking - plugin_errortracking - plugin_pi_support usersettings : - access - interface wizard : - plugin_softwareupdate_update - plugin_backup - plugin_corewizard_acl - plugin_corewizard_onlinecheck about : - about - plugin_pi_support - supporters - authors - changelog - license - thirdparty - plugin_pluginmanager generic : [] disabled : navbar : [] sidebar : [] tab : [] settings : [] usersettings : [] wizard : [] about : [] generic : []","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_2","text":"Name Type Description Default name str Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\") '' color str Use this to color the navigation bar. Valid values: blue , default , green , orange , red , violet , yellow . 'default' colorTransparent bool Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. False colorIcon bool True defaultLanguage str Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. '_default' showFahrenheitAlso bool False fuzzyTimes bool True closeModalsWithClick bool True showInternalFilename bool Show the internal filename in the files sidebar, if necessary. True components.* Configures the order and availability of the UI components. components.order.* Defines the order of the components within their respective containers. components.order.navbar List[str] ['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login'] components.order.sidebar List[str] ['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files'] components.order.tab List[str] ['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse'] components.order.settings List[str] ['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support'] components.order.usersettings List[str] Order of user settings. ['access', 'interface'] components.order.wizard List[str] ['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck'] components.order.about List[str] ['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager'] components.order.generic List[str] Order of generic items. [] components.disabled.* Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. components.disabled.navbar List[str] Disabled navbar items. [] components.disabled.sidebar List[str] Disabled sidebar items. [] components.disabled.tab List[str] Disabled tabs. [] components.disabled.settings List[str] Disabled settings. [] components.disabled.usersettings List[str] Disabled user settings. [] components.disabled.wizard List[str] Disabled wizards. [] components.disabled.about List[str] Disabled about dialog items. [] components.disabled.generic List[str] Disabled generic items. [] Hint By modifying the components.order lists you may reorder OctoPrint's UI components as you like. You can also inject Plugins at another than their default location in their respective container by adding the entry plugin_<plugin identifier> where you want them to appear. When you override this setting, the resulting order for display will be calculated as follows: first all components as defined by the components.order list then all enabled core components as defined in the default order Components not contained within the default order (e.g. from third party plugins) will be either prepended or appended to that result, depending on the component type. Example: If you want the tab of the Hello World Plugin to appear as the first tab in OctoPrint, you'd need to redefine components.order.tab by including something like this in your config.yaml : appearance : components : order : tab : - plugin_helloworld OctoPrint will then display the Hello World tab first, followed by the default tabs and then any other not explicitely ordered tabs.","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#controls","text":"Use the controls section to add custom controls to the \"Controls\" tab within OctoPrint.","title":"controls"},{"location":"user-guide/configuration/config.yaml/#defaults_3","text":"controls : []","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_3","text":"controls is a list, with each entry in the list being a dictionary describing either a control or a container.","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#control-model","text":"Name Type Description Default name str The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. required command Optional[str] A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset commands Optional[typing.List[str]] A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset script Optional[str] The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available. unset javascript Optional[str] A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset additionalClasses Optional[str] Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red. unset enabled Optional[str] A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset regex Optional[str] A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI. unset template Optional[str] A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ). unset confirm Optional[str] A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. unset","title":"Control model"},{"location":"user-guide/configuration/config.yaml/#container-model","text":"Name Type Description Default children List[typing.Union[octoprint.schema.config.controls.ControlConfig, octoprint.schema.config.controls.ContainerConfig]] A list of children controls or containers contained within this container. [] name Optional[str] A name to display above the container, basically a section header. unset layout str The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ). Valid values: horizontal , vertical . 'vertical'","title":"Container model"},{"location":"user-guide/configuration/config.yaml/#example","text":"controls : - name : Fan layout : horizontal children : - name : Enable Fan command : M106 S%(speed)s input : - name : Speed (0-255) parameter : speed default : 255 slider : min : 0 max : 255 - name : Disable Fan command : M107 - name : Example for multiple commands children : - name : Move X (static) confirm : You are about to move the X axis right by 10mm with 3000mm/min. commands : - G91 - G1 X10 F3000 - G90 - name : Move X (parametric) commands : - G91 - G1 X%(distance)s F%(speed)s - G90 input : - default : 10 name : Distance parameter : distance - default : 3000 name : Speed parameter : speed - name : Reporting children : - name : Get Position command : M114 regex : \"X:([-+]?[0-9.]+) Y:([-+]?[0-9.]+) Z:([-+]?[0-9.]+) E:([-+]?[0-9.]+)\" template : \"Position: X={0}, Y={1}, Z={2}, E={3}\" - name : Fun stuff children : - name : Dance script : custom/dance.gco input : - name : Go arounds parameter : repetitions slider : max : 10 min : 1 step : 1","title":"Example"},{"location":"user-guide/configuration/config.yaml/#devel","text":"The following settings are only relevant to you if you want to do OctoPrint development.","title":"devel"},{"location":"user-guide/configuration/config.yaml/#defaults_4","text":"devel : stylesheet : css cache : enabled : true preemptive : true webassets : bundle : true clean_on_startup : true minify : true minify_plugins : false useFrozenDictForPrinterState : true showLoadingAnimation : true sockJsConnectTimeout : 30 pluginTimings : false","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_4","text":"Name Type Description Default stylesheet str Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. Valid values: css , less . 'css' cache.* Settings for OctoPrint's internal caching. cache.enabled bool True cache.preemptive bool True webassets.* Settings for OctoPrint's web asset merging and minifying. webassets.bundle bool If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting. True webassets.clean_on_startup bool Whether to delete generated web assets on server startup (forcing a regeneration). True webassets.minify bool If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either. True webassets.minify_plugins bool If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either. False useFrozenDictForPrinterState bool True showLoadingAnimation bool Enable or disable the loading animation. True sockJsConnectTimeout float 30 pluginTimings bool False","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#estimation","text":"","title":"estimation"},{"location":"user-guide/configuration/config.yaml/#defaults_5","text":"estimation : printTime : statsWeighingUntil : 0.5 validityRange : 0.15 forceDumbFromPercent : 0.3 forceDumbAfterMin : 30.0 stableThreshold : 60","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_5","text":"Name Type Description Default printTime.* Parameters for the print time estimation during an ongoing print job. printTime.statsWeighingUntil float Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. 0.5 printTime.validityRange float Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used. 0.15 printTime.forceDumbFromPercent float If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. 0.3 printTime.forceDumbAfterMin float If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. 30.0 printTime.stableThreshold int Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. 60","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#events","text":"Use the following settings to add shell/gcode commands to be executed on certain events :","title":"events"},{"location":"user-guide/configuration/config.yaml/#defaults_6","text":"events : enabled : true subscriptions : []","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_6","text":"Name Type Description Default enabled bool Whether event subscriptions should be enabled or not. True subscriptions[] A list of event subscriptions. subscriptions[].event str The event to subscribe to. required subscriptions[].command str The command to execute when the event is triggered, either a GCODE or a system command. required subscriptions[].type str The type of the command. Valid values: gcode , system . required subscriptions[].enabled bool Whether the event subscription should be enabled. True subscriptions[].debug bool If set to true , OctoPrint will log the command after performing all placeholder replacements. False","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#example_1","text":"events : subscriptions : # example event consumer that prints a message to the system log if the printer is disconnected - event : Disconnected command : \"logger 'Printer got disconnected'\" type : system # example event consumer that queries printer information from the firmware, prints a \"Connected\" # message to the LCD and homes the print head upon established printer connection, disabled though - event : Connected command : M115,M117 printer connected!,G28 type : gcode enabled : False Hint For debugging purposes, you can set the debug property on your event subscription definition to true . That will make the event handler print a log line with your subscription's command after performing all placeholder replacements. Example: events : subscriptions : - event : Startup command : \"logger 'OctoPrint started up'\" type : system debug : true This will be logged in OctoPrint's logfile as Executing System Command: logger 'OctoPrint started up'","title":"Example"},{"location":"user-guide/configuration/config.yaml/#feature","text":"","title":"feature"},{"location":"user-guide/configuration/config.yaml/#defaults_7","text":"feature : temperatureGraph : true sdSupport : true keyboardControl : true pollWatched : false modelSizeDetection : true rememberFileFolder : false printStartConfirmation : false printCancelConfirmation : true uploadOverwriteConfirmation : true autoUppercaseBlacklist : - M117 - M118 g90InfluencesExtruder : false enforceReallyUniversalFilenames : false","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_7","text":"Name Type Description Default temperatureGraph bool Whether to enable the temperature graph in the UI or not. True sdSupport bool Specifies whether support for SD printing and file management should be enabled. True keyboardControl bool Whether to enable the keyboard control feature in the control tab. True pollWatched bool Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). False modelSizeDetection bool Whether to enable model size detection and warning (true) or not (false). True rememberFileFolder bool Whether to remember the selected folder on the file manager. False printStartConfirmation bool Whether to show a confirmation on print start (true) or not (false) False printCancelConfirmation bool Whether to show a confirmation on print cancelling (true) or not (false) True uploadOverwriteConfirmation bool True autoUppercaseBlacklist List[str] Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. ['M117', 'M118'] g90InfluencesExtruder bool Whether G90 / G91 also influence absolute/relative mode of extruders. False enforceReallyUniversalFilenames bool Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. False","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#folder","text":"","title":"folder"},{"location":"user-guide/configuration/config.yaml/#defaults_8","text":"folder : uploads : timelapse : timelapse_tmp : logs : virtualSd : watched : plugins : slicingProfiles : printerProfiles : scripts : translations : generated : data :","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_8","text":"Name Type Description Default uploads Optional[str] Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder. unset timelapse Optional[str] Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder. unset timelapse_tmp Optional[str] Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder. unset logs Optional[str] Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder. unset virtualSd Optional[str] Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder. unset watched Optional[str] Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder. unset plugins Optional[str] Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder. unset slicingProfiles Optional[str] Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder. unset printerProfiles Optional[str] Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder. unset scripts Optional[str] Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder. unset translations Optional[str] Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder. unset generated Optional[str] Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder. unset data Optional[str] Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder. unset","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#gcodeanalysis","text":"","title":"gcodeAnalysis"},{"location":"user-guide/configuration/config.yaml/#defaults_9","text":"gcodeAnalysis : maxExtruders : 10 throttle_normalprio : 0.01 throttle_highprio : 0.0 throttle_lines : 100 runAt : idle bedZ : 0.0","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_9","text":"Name Type Description Default maxExtruders int Maximum number of extruders to support/to sanity check for. 10 throttle_normalprio float Pause between each processed GCODE line batch in normal priority mode, seconds. 0.01 throttle_highprio float Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. 0.0 throttle_lines int GCODE line batch size. 100 runAt str Whether to run the analysis only when idle (not printing), regardless of printing state or never. Valid values: always , idle , never . 'idle' bedZ float Z position considered the location of the bed. 0.0","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#plugins","text":"The plugins section is where plugins can store their specific settings. It is also where the installed but disabled plugins are tracked.","title":"plugins"},{"location":"user-guide/configuration/config.yaml/#defaults_10","text":"plugins : _disabled : [] _forcedCompatible : [] _sortingOrder : {}","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_10","text":"Name Type Description Default _disabled None Identifiers of installed but disabled plugins. [] _forcedCompatible None Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. [] _sortingOrder None Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name. {} Additionally to the fields listed here, plugins will contain further keys for each plugin that is storing settings itself. The keys will be the plugin's identifier.","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#example_2","text":"plugins : _disabled : - some_plugin _forcedCompatible : - some_other_plugin _sortingOrder : yet_another_plugin : octoprint.plugin.ordertest.callback : 1 StartupPlugin.on_startup : 10 virtual_printer : _config_version : 1 enabled : true","title":"Example"},{"location":"user-guide/configuration/config.yaml/#printerparameters","text":"","title":"printerParameters"},{"location":"user-guide/configuration/config.yaml/#defaults_11","text":"printerParameters : pauseTriggers : []","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_11","text":"Name Type Description Default pauseTriggers List[str] []","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#printerprofiles","text":"","title":"printerProfiles"},{"location":"user-guide/configuration/config.yaml/#defaults_12","text":"printerProfiles : default :","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_12","text":"Name Type Description Default default Optional[str] Name of the printer profile to default to. unset","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#scripts","text":"Default scripts and snippets. You'd usually not edit the config.yaml file to adjust those but instead create the corresponding files in ~/.octoprint/scripts/ . See GCODE Scripts .","title":"scripts"},{"location":"user-guide/configuration/config.yaml/#defaults_13","text":"scripts : gcode : afterPrinterConnected : beforePrinterDisconnected : beforePrintStarted : afterPrintCancelled : \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet\\ \\ 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" afterPrintDone : beforePrintPaused : afterPrintResumed : beforeToolChange : afterToolChange : snippets : disable_hotends : \"{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n\\ {% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{\\ \\ tool }} S0\\n{% endfor %}{% endif %}\" disable_bed : \"{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}\"","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_13","text":"Name Type Description Default gcode.* gcode.afterPrinterConnected Optional[str] unset gcode.beforePrinterDisconnected Optional[str] unset gcode.beforePrintStarted Optional[str] unset gcode.afterPrintCancelled Optional[str] \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" gcode.afterPrintDone Optional[str] unset gcode.beforePrintPaused Optional[str] unset gcode.afterPrintResumed Optional[str] unset gcode.beforeToolChange Optional[str] unset gcode.afterToolChange Optional[str] unset gcode.snippets Dict[str, str] {'disable_hotends': '{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{ tool }} S0\\n{% endfor %}{% endif %}', 'disable_bed': '{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}'}","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#serial","text":"","title":"serial"},{"location":"user-guide/configuration/config.yaml/#defaults_14","text":"serial : port : baudrate : exclusive : true lowLatency : false autoconnect : false log : false timeout : detectionFirst : 10.0 detectionConsecutive : 2.0 connection : 10.0 communication : 30.0 communicationBusy : 3.0 temperature : 5.0 temperatureTargetSet : 2.0 temperatureAutoreport : 2.0 sdStatus : 1.0 sdStatusAutoreport : 1.0 posAutoreport : 5.0 resendOk : 0.5 baudrateDetectionPause : 1.0 positionLogWait : 10.0 maxCommunicationTimeouts : idle : 2 printing : 5 long : 5 maxWritePasses : 5 additionalPorts : [] additionalBaudrates : [] blacklistedPorts : [] blacklistedBaudrates : [] longRunningCommands : - G4 - G28 - G29 - G30 - G32 - M400 - M226 - M600 blockedCommands : - M0 - M1 ignoredCommands : [] pausingCommands : - M0 - M1 - M25 emergencyCommands : - M112 - M108 - M410 checksumRequiringCommands : - M110 helloCommand : M110 N0 disconnectOnErrors : true ignoreErrorsFromFirmware : false terminalLogSize : 20 lastLineBufferSize : 50 logResends : true supportResendsWithoutOk : detect logPositionOnPause : true logPositionOnCancel : false abortHeatupOnCancel : true waitForStartOnConnect : false alwaysSendChecksum : false neverSendChecksum : false sendChecksumWithUnknownCommands : false unknownCommandsNeedAck : false sdRelativePath : false sdAlwaysAvailable : false sdLowerCase : false sdCancelCommand : M25 maxNotSdPrinting : 2 swallowOkAfterResend : true repetierTargetTemp : false externalHeatupDetection : true supportWait : true ignoreIdenticalResends : false identicalResendsCountdown : 7 supportFAsCommand : false firmwareDetection : true blockWhileDwelling : false useParityWorkaround : detect maxConsecutiveResends : 10 sendM112OnError : true disableSdPrintingDetection : false ackMax : 1 sanityCheckTools : true notifySuppressedCommands : warn capabilities : autoreport_temp : true autoreport_sdstatus : true autoreport_pos : true busy_protocol : true emergency_parser : true extended_m20 : true resendRatioThreshold : 10 resendRatioStart : 100 ignoreEmptyPorts : false encoding : ascii enableShutdownActionCommand : false triggerOkForM29 : true","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_14","text":"Name Type Description Default port Optional[str] The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected. unset baudrate Optional[int] The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. unset exclusive bool Whether to request the serial port exclusively or not True lowLatency bool Whether to request low latency mode on the serial port or not False autoconnect bool Whether to try to automatically connect to the printer on startup or not False log bool Whether to log whole communication to serial.log (warning: might decrease performance) False timeout.* Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems timeout.detectionFirst float 10.0 timeout.detectionConsecutive float 2.0 timeout.connection float Timeout for waiting to establish a connection with the selected port, in seconds 10.0 timeout.communication float Timeout during serial communication, in seconds 30.0 timeout.communicationBusy float Timeout during serial communication when busy protocol support is detected, in seconds 3.0 timeout.temperature float Timeout after which to query temperature when no target is set 5.0 timeout.temperatureTargetSet float Timeout after which to query temperature when a target is set 2.0 timeout.temperatureAutoreport float 2.0 timeout.sdStatus float Timeout after which to query the SD status while SD printing 1.0 timeout.sdStatusAutoreport float 1.0 timeout.posAutoreport float 5.0 timeout.resendOk float 0.5 timeout.baudrateDetectionPause float 1.0 timeout.positionLogWait float 10.0 maxCommunicationTimeouts.* maxCommunicationTimeouts.idle int Max. timeouts when the printer is idle 2 maxCommunicationTimeouts.printing int Max. timeouts when the printer is printing 5 maxCommunicationTimeouts.long int Max. timeouts when a long running command is active 5 maxWritePasses int Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error 5 additionalPorts List[str] Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern [] additionalBaudrates List[int] Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer [] blacklistedPorts List[str] [] blacklistedBaudrates List[int] [] longRunningCommands List[str] ['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600'] blockedCommands List[str] Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. ['M0', 'M1'] ignoredCommands List[str] Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. [] pausingCommands List[str] Commands which should cause OctoPrint to pause any ongoing prints. ['M0', 'M1', 'M25'] emergencyCommands List[str] ['M112', 'M108', 'M410'] checksumRequiringCommands List[str] Commands which need to always be send with a checksum. ['M110'] helloCommand str Command to send in order to initiate a handshake with the printer. 'M110 N0' disconnectOnErrors bool Whether to disconnect from the printer on errors or not. True ignoreErrorsFromFirmware bool Whether to completely ignore errors from the firmware or not. False terminalLogSize int 20 lastLineBufferSize int 50 logResends bool Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. True supportResendsWithoutOk str Whether to support resends without follow-up ok or not. Valid values: always , detect , never . 'detect' logPositionOnPause bool True logPositionOnCancel bool False abortHeatupOnCancel bool True waitForStartOnConnect bool Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect. False alwaysSendChecksum bool Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. False neverSendChecksum bool False sendChecksumWithUnknownCommands bool Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False unknownCommandsNeedAck bool Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False sdRelativePath bool Specifies whether firmware expects relative paths for selecting SD files. False sdAlwaysAvailable bool Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. False sdLowerCase bool False sdCancelCommand str 'M25' maxNotSdPrinting int 2 swallowOkAfterResend bool True repetierTargetTemp bool Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses. False externalHeatupDetection bool Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. True supportWait bool True ignoreIdenticalResends bool Whether to ignore identical resends from the printer (true, repetier) or not (false). False identicalResendsCountdown int If ignoreIdenticalResends is true, how many consecutive identical resends to ignore. 7 supportFAsCommand bool Whether to support F on its own as a valid GCODE command (true) or not (false). False firmwareDetection bool Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). True blockWhileDwelling bool Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). False useParityWorkaround str Valid values: always , detect , never . 'detect' maxConsecutiveResends int 10 sendM112OnError bool True disableSdPrintingDetection bool False ackMax int 1 sanityCheckTools bool True notifySuppressedCommands str Valid values: info , never , warn . 'warn' capabilities.* capabilities.autoreport_temp bool Whether to enable temperature autoreport in the firmware if its support is detected True capabilities.autoreport_sdstatus bool True capabilities.autoreport_pos bool True capabilities.busy_protocol bool Whether to shorten the communication timeout if the firmware seems to support the busy protocol True capabilities.emergency_parser bool True capabilities.extended_m20 bool True resendRatioThreshold int Percentage of resend requests among all sent lines that should be considered critical. 10 resendRatioStart int 100 ignoreEmptyPorts bool False encoding str Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings . 'ascii' enableShutdownActionCommand bool Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. False triggerOkForM29 bool Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok). True","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#server","text":"","title":"server"},{"location":"user-guide/configuration/config.yaml/#defaults_15","text":"server : host : port : 5000 firstRun : true startOnceInSafeMode : false ignoreIncompleteStartup : false incompleteStartup : false seenWizards : {} secretKey : heartbeat : 900 reverseProxy : prefixHeader : schemeHeader : hostHeader : serverHeader : portHeader : prefixFallback : schemeFallback : hostFallback : serverFallback : portFallback : trustedDownstream : [] uploads : maxSize : 1073741824 nameSuffix : name pathSuffix : path maxSize : 102400 commands : systemShutdownCommand : systemRestartCommand : serverRestartCommand : localPipCommand : onlineCheck : enabled : interval : 900 host : 1.1.1.1 port : 53 name : octoprint.org pluginBlacklist : enabled : url : https://plugins.octoprint.org/blacklist.json ttl : 900 diskspace : warning : 524288000 critical : 209715200 preemptiveCache : exceptions : [] until : 7 ipCheck : enabled : true trustedSubnets : [] allowFraming : false cookies : secure : false samesite :","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_15","text":"Name Type Description Default host Optional[str] Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. unset port int Use this option to define the port to which to bind the server. 5000 firstRun bool If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. True startOnceInSafeMode bool If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false False ignoreIncompleteStartup bool Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. False incompleteStartup bool Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode. False seenWizards Dict[str, str] {} secretKey Optional[str] Secret key for encrypting cookies and such, randomly generated on first run. unset heartbeat int 900 reverseProxy.* Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. reverseProxy.prefixHeader Optional[str] The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. unset reverseProxy.schemeHeader Optional[str] The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. unset reverseProxy.hostHeader Optional[str] The request header from which to determine the host under which OctoPrint is served by the reverse proxy. unset reverseProxy.serverHeader Optional[str] unset reverseProxy.portHeader Optional[str] unset reverseProxy.prefixFallback Optional[str] Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. unset reverseProxy.schemeFallback Optional[str] Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. unset reverseProxy.hostFallback Optional[str] Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. unset reverseProxy.serverFallback Optional[str] unset reverseProxy.portFallback Optional[str] unset reverseProxy.trustedDownstream List[str] List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. [] uploads.* Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. uploads.maxSize int Maximum size of uploaded files in bytes, defaults to 1GB. 1073741824 uploads.nameSuffix str Suffix used for storing the filename in the file upload headers when streaming uploads. 'name' uploads.pathSuffix str Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads. 'path' maxSize int Maximum size of requests other than file uploads in bytes, defaults to 100KB. 102400 commands.* Commands to restart/shutdown octoprint or the system it's running on. commands.systemShutdownCommand Optional[str] Command to shut down the system OctoPrint is running on. unset commands.systemRestartCommand Optional[str] Command to restart the system OctoPrint is running on. unset commands.serverRestartCommand Optional[str] Command to restart OctoPrint. unset commands.localPipCommand Optional[str] pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. unset onlineCheck.* Configuration of the regular online connectivity check. onlineCheck.enabled Optional[bool] Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. unset onlineCheck.interval int Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. 900 onlineCheck.host str DNS host against which to check, defaults to Cloudflare's DNS. '1.1.1.1' onlineCheck.port int DNS port against which to check, defaults to the standard DNS port. 53 onlineCheck.name str Host name for which to check name resolution, defaults to OctoPrint's main domain. 'octoprint.org' pluginBlacklist.* Configuration of the plugin blacklist. pluginBlacklist.enabled Optional[bool] Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. unset pluginBlacklist.url str The URL from which to fetch the blacklist. 'https://plugins.octoprint.org/blacklist.json' pluginBlacklist.ttl int Time to live of the cached blacklist, in seconds (default: 15 minutes). 900 diskspace.* Settings of when to display what disk space warning. diskspace.warning int Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. 524288000 diskspace.critical int Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. 209715200 preemptiveCache.* Configuration of the preemptive cache. preemptiveCache.exceptions List[str] Which server paths to exclude from the preemptive cache, e.g. /some/path . [] preemptiveCache.until int How many days to leave unused entries in the preemptive cache config. 7 ipCheck.* Configuration of the client IP check to warn about connections from external networks. ipCheck.enabled bool Whether to enable the check. True ipCheck.trustedSubnets List[str] Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 . [] allowFraming bool Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. False cookies.* Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). cookies.secure bool Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. False cookies.samesite Optional[octoprint.schema.config.server.SameSiteEnum] SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to unset. Be advised that many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 . unset","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#slicing","text":"","title":"slicing"},{"location":"user-guide/configuration/config.yaml/#defaults_16","text":"slicing : enabled : true defaultSlicer : defaultProfiles : {}","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_16","text":"Name Type Description Default enabled bool Whether to enable slicing support or not. True defaultSlicer Optional[str] Default slicer to use. unset defaultProfiles Dict[str, str] Default slicing profiles per slicer, maps slicer identifier to profile identifier. {}","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#system","text":"","title":"system"},{"location":"user-guide/configuration/config.yaml/#defaults_17","text":"system : actions : []","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_17","text":"Name Type Description Default actions[] A list of system actions to show in the UI. actions[].action str The identifier used internally to identify the action. Set to divider to generate a divider in the menu. required actions[].name Optional[str] The name of the action that will be shown on the menu. Must be set if the action is not a divider. unset actions[].command Optional[str] The command to execute when the action is selected. Must be set if the action is not a divider. unset actions[].async None Whether to run the command asynchronously. False actions[].confirm Optional[str] An optional confirmation message to show before executing the command. unset","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#temperature","text":"","title":"temperature"},{"location":"user-guide/configuration/config.yaml/#defaults_18","text":"temperature : profiles : - name : ABS extruder : 210 bed : 100 - name : PLA extruder : 180 bed : 60 cutoff : 30 sendAutomatically : false sendAutomaticallyAfter : 1","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_18","text":"Name Type Description Default profiles[] profiles[].name str Name of the profile. required profiles[].extruder int Hotend temperature to set with the profile. required profiles[].bed int Bed temperature to set with the profile. required cutoff int Cut off time for the temperature data, in minutes. 30 sendAutomatically bool Whether to send new temperature settings made in the UI automatically. False sendAutomaticallyAfter int After what time to send the new temperature settings automatically, in seconds. 1","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#terminalfilters","text":"Use the following settings to define a list of terminal filters to display in the terminal tab for filtering certain lines from the display terminal log.","title":"terminalFilters"},{"location":"user-guide/configuration/config.yaml/#defaults_19","text":"terminal_filters : - name : Suppress temperature messages regex : '(Send: (N\\d+\\s+)?M105)|(Recv:\\s+(ok\\s+([PBN]\\d+\\s+)*)?([BCLPR]|T\\d*):-?\\d+)' - name : Suppress SD status messages regex : '(Send: (N\\d+\\s+)?M27)|(Recv: SD printing byte)|(Recv: Not SD printing)' - name : Suppress position messages regex : (Send:\\s+(N\\d+\\s+)?M114)|(Recv:\\s+(ok\\s+)?X:[+-]?([0-9]*[.])?[0-9]+\\s+Y:[+-]?([0-9]*[.])?[0-9]+\\s+Z:[+-]?([0-9]*[.])?[0-9]+\\s+E\\d*:[+-]?([0-9]*[.])?[0-9]+).* - name : Suppress wait responses regex : 'Recv: wait' - name : Suppress processing responses regex : 'Recv: (echo:\\s*)?busy:\\s*processing'","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_19","text":"Each filter entry in the list is a dictionary with the following keys: Name Type Description Default name str The name of the filter. required regex str The regular expression to match. Use JavaScript regular expressions . required","title":"Data model"},{"location":"user-guide/configuration/config.yaml/#webcam","text":"","title":"webcam"},{"location":"user-guide/configuration/config.yaml/#defaults_20","text":"webcam : webcamEnabled : true timelapseEnabled : true stream : streamRatio : 16:9 streamTimeout : 5 streamWebrtcIceServers : - stun:stun.l.google.com:19302 snapshot : snapshotTimeout : 5 snapshotSslValidation : true ffmpeg : ffmpegThreads : 1 ffmpegVideoCodec : libx264 bitrate : 10000k watermark : true flipH : false flipV : false rotate90 : false ffmpegCommandline : '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline : '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse : type : off fps : 25 postRoll : 0 options : interval : capturePostRoll : retractionZHop : cleanTmpAfterDays : 7 cacheBuster : false","title":"Defaults"},{"location":"user-guide/configuration/config.yaml/#data-model_20","text":"Name Type Description Default webcamEnabled bool Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set. True timelapseEnabled bool Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. True stream Optional[str] unset streamRatio str Valid values: 4:3 , 16:9 . '16:9' streamTimeout int 5 streamWebrtcIceServers List[str] ['stun:stun.l.google.com:19302'] snapshot Optional[str] unset snapshotTimeout int 5 snapshotSslValidation bool True ffmpeg Optional[str] Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. unset ffmpegThreads int Number of how many threads to instruct ffmpeg to use for encoding. 1 ffmpegVideoCodec str Videocodec to be used for encoding. 'libx264' bitrate str The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. '10000k' watermark bool Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. True flipH bool Whether to flip the webcam horizontally. False flipV bool Whether to flip the webcam vertically. False rotate90 bool Whether to rotate the webcam 90\u00b0 counter clockwise. False ffmpegCommandline str '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline str '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse.* The default timelapse settings. timelapse.type str The timelapse type. Valid values: off , timed , zchange . 'off' timelapse.fps int The framerate at which to render the movie. 25 timelapse.postRoll int The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode. 0 timelapse.options.* Additional options depending on the timelapse type. timelapse.options.interval Optional[int] timed timelapses only: The interval which to leave between images in seconds. unset timelapse.options.capturePostRoll Optional[bool] timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). unset timelapse.options.retractionZHop Optional[float] zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots. unset cleanTmpAfterDays int After how many days unrendered timelapses will be deleted. 7 cacheBuster bool False","title":"Data model"},{"location":"user-guide/configuration/logging.yaml/","text":"logging.yaml # The logging configuration file logging.yaml for OctoPrint is expected in its settings folder, which unless defined differently on the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. You can use it to change the log levels of the individual components within OctoPrint, which might be necessary to help in debugging issues you are experiencing, or to change the configuration of the logging handlers themselves, e.g. in order to change size after which to rollover the serial.log . Hint You can also configure individual logging levels for all components via UI by using the Logging options in the Settings. Changing log levels # If you need to change the default logging level within OctoPrint, create the file with a text editor of your choice (it's usually not there). The general format is this: loggers : <component> : level : <loglevel> with <component> being the internal OctoPrint component for which to change the loglevel, and <loglevel> being the new log level to set. An example for increasing the log level of the events and the file management components to DEBUG (the highest amount of logging) would be this logging.yaml : loggers : octoprint.events : level : DEBUG octoprint.filemanager : level : DEBUG A list of important components for which an increase in logging might be interesting follows: octoprint.events : the event sub system octoprint.filemanager : the file management layer octoprint.plugin : the plugin sub system octoprint.plugins.<plugin> : the plugin <plugin> to change the log level of, e.g. octoprint.plugins.discovery to change the log level of the Discovery Plugin or octoprint.plugins.backup to change the log level of the Backup plugin . octoprint.slicing : the slicing sub system This list will be expanded as deemed necessary. Changing logging handlers # You can also change the configuration of the logging handlers themselves, e.g. in order to make the serial.log larger for debugging long running communications or to change the behaviour of the octoprint.log . You can find the default configurations of the file handler used for the octoprint.log , the serialFile handler used for the serial.log and the console handler used for the output to stdout in YAML format below: handlers : # stdout console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout # octoprint.log file : class : logging.handlers.TimedRotatingFileHandler level : DEBUG formatter : simple when : D backupCount : 1 filename : /path/to/octoprints/logs/octoprint.log # serial.log serialFile : class : logging.handlers.RotatingFileHandler level : DEBUG formatter : simple maxBytes : 2097152 # 2 * 1024 * 1024 = 2 MB in bytes filename : /path/to/octoprints/logs/serial.log Todo This is currently not being synced up with the code and needs rework. You can find more information on the used logging handlers in the Python documentation on logging.handlers . Changing logging formatters # The logging formatters can be defined via logging.yaml as well. The simple formatter as referenced above is expressed in YAML as follows: formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" Todo This is currently not being synced up with the code and needs rework. The possible keys for the logging format can be found in the Python documentation on LogRecord attributes .","title":"logging.yaml"},{"location":"user-guide/configuration/logging.yaml/#loggingyaml","text":"The logging configuration file logging.yaml for OctoPrint is expected in its settings folder, which unless defined differently on the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. You can use it to change the log levels of the individual components within OctoPrint, which might be necessary to help in debugging issues you are experiencing, or to change the configuration of the logging handlers themselves, e.g. in order to change size after which to rollover the serial.log . Hint You can also configure individual logging levels for all components via UI by using the Logging options in the Settings.","title":"logging.yaml"},{"location":"user-guide/configuration/logging.yaml/#changing-log-levels","text":"If you need to change the default logging level within OctoPrint, create the file with a text editor of your choice (it's usually not there). The general format is this: loggers : <component> : level : <loglevel> with <component> being the internal OctoPrint component for which to change the loglevel, and <loglevel> being the new log level to set. An example for increasing the log level of the events and the file management components to DEBUG (the highest amount of logging) would be this logging.yaml : loggers : octoprint.events : level : DEBUG octoprint.filemanager : level : DEBUG A list of important components for which an increase in logging might be interesting follows: octoprint.events : the event sub system octoprint.filemanager : the file management layer octoprint.plugin : the plugin sub system octoprint.plugins.<plugin> : the plugin <plugin> to change the log level of, e.g. octoprint.plugins.discovery to change the log level of the Discovery Plugin or octoprint.plugins.backup to change the log level of the Backup plugin . octoprint.slicing : the slicing sub system This list will be expanded as deemed necessary.","title":"Changing log levels"},{"location":"user-guide/configuration/logging.yaml/#changing-logging-handlers","text":"You can also change the configuration of the logging handlers themselves, e.g. in order to make the serial.log larger for debugging long running communications or to change the behaviour of the octoprint.log . You can find the default configurations of the file handler used for the octoprint.log , the serialFile handler used for the serial.log and the console handler used for the output to stdout in YAML format below: handlers : # stdout console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout # octoprint.log file : class : logging.handlers.TimedRotatingFileHandler level : DEBUG formatter : simple when : D backupCount : 1 filename : /path/to/octoprints/logs/octoprint.log # serial.log serialFile : class : logging.handlers.RotatingFileHandler level : DEBUG formatter : simple maxBytes : 2097152 # 2 * 1024 * 1024 = 2 MB in bytes filename : /path/to/octoprints/logs/serial.log Todo This is currently not being synced up with the code and needs rework. You can find more information on the used logging handlers in the Python documentation on logging.handlers .","title":"Changing logging handlers"},{"location":"user-guide/configuration/logging.yaml/#changing-logging-formatters","text":"The logging formatters can be defined via logging.yaml as well. The simple formatter as referenced above is expressed in YAML as follows: formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" Todo This is currently not being synced up with the code and needs rework. The possible keys for the logging format can be found in the Python documentation on LogRecord attributes .","title":"Changing logging formatters"},{"location":"user-guide/configuration/yaml_primer/","text":"A YAML Primer # Most of OctoPrint's configuration is done under the hood through YAML files, which is why it makes sense to shed some light on the basics of this data serialization format. YAML is a text based format which excels at representing the most common of data structures in an easy and very human readable way, which is why it was chosen for OctoPrint's configuration files. A text editor is all you need in order to write YAML configuration files. Basic Rules # First of all some basic things to know about working with YAML files: Never use tabs outside of quoted strings, especially not for indentation. The tab character is illegal within YAML files. Whitespace and indentation matters and plays an important part in structuring the data, so take special care to stay consistent here. YAML's comments start with a # and go until the end of the line. Interesting data types # You will probably only come across the three most basic types of data within OctoPrint's YAML files: scalars (such as strings, integers, ...), lists and associated arrays (aka key-value-pairs, aka maps, aka dictionaries). Scalars # Scalars are the most basic of all data types and are simple string, integer, float or boolean values. For most scalars you don't need any quotes at all, but if you need to define some piece of data which contains characters that could be mistaken with YAML syntax you need to quote it in either double \" or single ' quotes for the YAML file to stay valid. As simple rule of thumb, if your data contains any of these characters :-{}[]!#|>&%@ better quote it. Also quote it if you want a string but it could be mistaken for a valid number (integer or float) or if it consists only of \"Yes\", \"No\", \"yes\", \"no\", \"true\" or \"false\", which would be converted to a boolean without quotes. In double quoted strings if you need to include a literal double quote in your string you can escape it by prefixing it with a backslash \\ (which you can in turn escape by itself). In single quoted strings the single quote character can be escaped by prefixing it with another single quote, basically doubling it. Backslashes in single quoted strings do not need to be escaped. Quoted strings can also span across multiple lines, just indent the following lines. Note that you'll need to add a completely empty line in order for force a line break, the data will not be actually wrapped across multiple lines just because you spread its representation across multiple lines. int # 23 42 float # 23.5 100.0 boolean # true false Yes No yes no string # a string \"some quoted string with a : colon and a { bracket and a quote \\\" and a backslash \\\\ - phew\" 'some single quoted string with a single quote '' and a backslash \\ - yay' \"and a multiline string - just because we can we'll make it span across not two but four YAML lines! Including this paragraph. But in fact it will only be two lines :)\" \"23\" \"42.3\" \"Yes\" \"No\" \"true\" \"false\" yes and no true or false Lists # Lists allow to \"collect\" a number of similar things into one data structure. They are created by prefixing one or more consecutive lines with a - : - item 1 - 23.42 - 57 - true Take special care to have all of your list items at the same indentation level! Dictionaries # Dictionaries (aka associative arrays aka maps) allow organizing the data in key value pairs, with the key and the value being separated through a colon : : key : value anotherkey : another value Examples # Based on the three types explained above, quite complex data structures are possible: general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes In this example we have a dictionary on the top most \"layer\" which has three keys, general , specific and the_end . general in turn is a dictionary with the keys some_setting (a string), a_list (a list with four items, a string, a float, an int and a boolean), some_flag (a boolean) and quoted_string (a -- you guessed it -- string). specific is also a dictionary, with keys setting1 (a string) and setting2 , a dictionary with two keys, one a string and the other again a list. Finally, the_end is just a boolean, since an unquoted yes evaluates as a boolean value as we saw in the section about boolean scalars above . Don't get confused by the list \"dividing\" one part of the dictionary under general from the other -- your mind is just playing a trick on you due to the list's dashes - being on the same levels as the dictionary keys. You could also just add two more spaces to your indentation and write that part like this, which makes the structure a bit clearer (whitespace again made visible to help track indentation): general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes Just make sure you follow a consistent way of indenting your files -- YAML is not as strict as Python when it comes to differing indentation variants within the same file (as long as it's still valid), but consistency will help you as a lot as a human. Ideally you'll use a text editor which highlights white space characters for you (most editors can be configured this way), this will help tremendously when editing whitespace sensitive syntax such as YAML.","title":"A YAML Primer"},{"location":"user-guide/configuration/yaml_primer/#a-yaml-primer","text":"Most of OctoPrint's configuration is done under the hood through YAML files, which is why it makes sense to shed some light on the basics of this data serialization format. YAML is a text based format which excels at representing the most common of data structures in an easy and very human readable way, which is why it was chosen for OctoPrint's configuration files. A text editor is all you need in order to write YAML configuration files.","title":"A YAML Primer"},{"location":"user-guide/configuration/yaml_primer/#basic-rules","text":"First of all some basic things to know about working with YAML files: Never use tabs outside of quoted strings, especially not for indentation. The tab character is illegal within YAML files. Whitespace and indentation matters and plays an important part in structuring the data, so take special care to stay consistent here. YAML's comments start with a # and go until the end of the line.","title":"Basic Rules"},{"location":"user-guide/configuration/yaml_primer/#interesting-data-types","text":"You will probably only come across the three most basic types of data within OctoPrint's YAML files: scalars (such as strings, integers, ...), lists and associated arrays (aka key-value-pairs, aka maps, aka dictionaries).","title":"Interesting data types"},{"location":"user-guide/configuration/yaml_primer/#scalars","text":"Scalars are the most basic of all data types and are simple string, integer, float or boolean values. For most scalars you don't need any quotes at all, but if you need to define some piece of data which contains characters that could be mistaken with YAML syntax you need to quote it in either double \" or single ' quotes for the YAML file to stay valid. As simple rule of thumb, if your data contains any of these characters :-{}[]!#|>&%@ better quote it. Also quote it if you want a string but it could be mistaken for a valid number (integer or float) or if it consists only of \"Yes\", \"No\", \"yes\", \"no\", \"true\" or \"false\", which would be converted to a boolean without quotes. In double quoted strings if you need to include a literal double quote in your string you can escape it by prefixing it with a backslash \\ (which you can in turn escape by itself). In single quoted strings the single quote character can be escaped by prefixing it with another single quote, basically doubling it. Backslashes in single quoted strings do not need to be escaped. Quoted strings can also span across multiple lines, just indent the following lines. Note that you'll need to add a completely empty line in order for force a line break, the data will not be actually wrapped across multiple lines just because you spread its representation across multiple lines.","title":"Scalars"},{"location":"user-guide/configuration/yaml_primer/#int","text":"23 42","title":"int"},{"location":"user-guide/configuration/yaml_primer/#float","text":"23.5 100.0","title":"float"},{"location":"user-guide/configuration/yaml_primer/#boolean","text":"true false Yes No yes no","title":"boolean"},{"location":"user-guide/configuration/yaml_primer/#string","text":"a string \"some quoted string with a : colon and a { bracket and a quote \\\" and a backslash \\\\ - phew\" 'some single quoted string with a single quote '' and a backslash \\ - yay' \"and a multiline string - just because we can we'll make it span across not two but four YAML lines! Including this paragraph. But in fact it will only be two lines :)\" \"23\" \"42.3\" \"Yes\" \"No\" \"true\" \"false\" yes and no true or false","title":"string"},{"location":"user-guide/configuration/yaml_primer/#lists","text":"Lists allow to \"collect\" a number of similar things into one data structure. They are created by prefixing one or more consecutive lines with a - : - item 1 - 23.42 - 57 - true Take special care to have all of your list items at the same indentation level!","title":"Lists"},{"location":"user-guide/configuration/yaml_primer/#dictionaries","text":"Dictionaries (aka associative arrays aka maps) allow organizing the data in key value pairs, with the key and the value being separated through a colon : : key : value anotherkey : another value","title":"Dictionaries"},{"location":"user-guide/configuration/yaml_primer/#examples","text":"Based on the three types explained above, quite complex data structures are possible: general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes In this example we have a dictionary on the top most \"layer\" which has three keys, general , specific and the_end . general in turn is a dictionary with the keys some_setting (a string), a_list (a list with four items, a string, a float, an int and a boolean), some_flag (a boolean) and quoted_string (a -- you guessed it -- string). specific is also a dictionary, with keys setting1 (a string) and setting2 , a dictionary with two keys, one a string and the other again a list. Finally, the_end is just a boolean, since an unquoted yes evaluates as a boolean value as we saw in the section about boolean scalars above . Don't get confused by the list \"dividing\" one part of the dictionary under general from the other -- your mind is just playing a trick on you due to the list's dashes - being on the same levels as the dictionary keys. You could also just add two more spaces to your indentation and write that part like this, which makes the structure a bit clearer (whitespace again made visible to help track indentation): general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes Just make sure you follow a consistent way of indenting your files -- YAML is not as strict as Python when it comes to differing indentation variants within the same file (as long as it's still valid), but consistency will help you as a lot as a human. Ideally you'll use a text editor which highlights white space characters for you (most editors can be configured this way), this will help tremendously when editing whitespace sensitive syntax such as YAML.","title":"Examples"},{"location":"user-guide/features/access_control/","text":"","title":"Access control"},{"location":"user-guide/features/action_commands/","text":"","title":"Action commands"},{"location":"user-guide/features/at_commands/","text":"","title":"At commands"},{"location":"user-guide/features/custom_controls/","text":"","title":"Custom controls"},{"location":"user-guide/features/gcode_scripts/","text":"","title":"Gcode scripts"},{"location":"user-guide/features/plugins/","text":"","title":"Plugins"},{"location":"user-guide/features/safe_mode/","text":"Safe mode # New in version 1.3.0. Changed in version 1.3.13. With the advent of support for plugins in OctoPrint, it quickly became apparent that some of the bugs reported on OctoPrint's bug tracker were actually bugs with installed third party plugins or language packs instead of OctoPrint itself. To allow an easier identification of these cases, OctoPrint 1.3.0 introduced safe mode. Starting OctoPrint in safe mode disables all plugins (and starting with 1.3.13 also all language packs) that are not bundled with OctoPrint, allowing to easier identify most cases where a third party plugin or language pack is the culprit of an observed issue. Additionally, OctoPrint allows uninstalling plugins and language packs in this mode, allowing recovery from cases where a third party addition causes the server to not start up or the web interface to not render or function correctly anymore. Whenever reporting an issue with OctoPrint, please always attempt to reproduce it in safe mode as well to ensure it really is an issue in OctoPrint itself and now caused by one of your installed third party additions. How to start OctoPrint in safe mode # There exist three ways to start OctoPrint in safe mode. Via the \"Restart OctoPrint in safe mode\" system menu entry # New in version 1.3.2. You can select \"Restart OctoPrint in safe mode\" from the \"System\" menu, if the \"Restart OctoPrint\" server command has been correctly configured. \"Restart OctoPrint in safe mode\" in the \"System\" menu Via the server.startOnceInSafeMode config flag # You can set the flag server.startOnceInSafeMode in config.yaml to true and restart. This will make OctoPrint start up in safe mode. The flag will clear automatically. To set this flag you have the following options: from command line run octoprint safemode 1 (since OctoPrint 1.3.6) from command line run octoprint config set --bool server.startOnceInSafeMode true 1 edit config.yaml manually with a text editor, locate the server block if it already exists or create it if it doesn't and add startOnceInSafeMode: true to it: server : startOnceInSafeMode : true Please also refer to the YAML primer . Via the --safe command line flag # You can start OctoPrint in safe mode with the command line parameter --safe , e.g. octoprint serve --safe 1 . Don't forget to shutdown OctoPrint first before doing this. Differences of safe mode vs normal operation mode # When OctoPrint is running in safe mode the following changes to its normal operation mode apply: OctoPrint will not enable any of the installed third party plugins. OctoPrint considers all plugins third party plugins that do not ship with OctoPrint's sources, so any plugins installed either via pip or into OctoPrint's plugin folder 2 . OctoPrint will not enable any of the installed third party language packs. OctoPrint considers all language packs third party language packs that do not ship with OctoPrint's sources, so any language plugins installed through the language pack manager within settings and/or stored in the language pack folder 3 . OctoPrint will still allow to uninstall third party plugins through the built-in Plugin Manager. OctoPrint will still allow to disable (bundled) plugins that are still enabled. OctoPrint will not allow to enable third party plugins. OctoPrint will still allow to manage language packs. OctoPrint's web interface will display a notification to remind you that it is running in safe mode. Safe mode notification OctoPi users : For you that's ~/oprint/bin/octoprint wherever it says just octoprint . \u21a9 \u21a9 \u21a9 ~/.octoprint/plugins (Linux), %APPDATA%/OctoPrint/plugins (Windows) or ~/Library/Application Support/OctoPrint/plugins (macOS) \u21a9 ~/.octoprint/translations (Linux), %APPDATA%/OctoPrint/translations (Windows) or ~/Library/Application Support/OctoPrint/translations (macOS) \u21a9","title":"Safe mode"},{"location":"user-guide/features/safe_mode/#safe-mode","text":"New in version 1.3.0. Changed in version 1.3.13. With the advent of support for plugins in OctoPrint, it quickly became apparent that some of the bugs reported on OctoPrint's bug tracker were actually bugs with installed third party plugins or language packs instead of OctoPrint itself. To allow an easier identification of these cases, OctoPrint 1.3.0 introduced safe mode. Starting OctoPrint in safe mode disables all plugins (and starting with 1.3.13 also all language packs) that are not bundled with OctoPrint, allowing to easier identify most cases where a third party plugin or language pack is the culprit of an observed issue. Additionally, OctoPrint allows uninstalling plugins and language packs in this mode, allowing recovery from cases where a third party addition causes the server to not start up or the web interface to not render or function correctly anymore. Whenever reporting an issue with OctoPrint, please always attempt to reproduce it in safe mode as well to ensure it really is an issue in OctoPrint itself and now caused by one of your installed third party additions.","title":"Safe mode"},{"location":"user-guide/features/safe_mode/#how-to-start-octoprint-in-safe-mode","text":"There exist three ways to start OctoPrint in safe mode.","title":"How to start OctoPrint in safe mode"},{"location":"user-guide/features/safe_mode/#via-the-restart-octoprint-in-safe-mode-system-menu-entry","text":"New in version 1.3.2. You can select \"Restart OctoPrint in safe mode\" from the \"System\" menu, if the \"Restart OctoPrint\" server command has been correctly configured. \"Restart OctoPrint in safe mode\" in the \"System\" menu","title":"Via the \"Restart OctoPrint in safe mode\" system menu entry"},{"location":"user-guide/features/safe_mode/#via-the-serverstartonceinsafemode-config-flag","text":"You can set the flag server.startOnceInSafeMode in config.yaml to true and restart. This will make OctoPrint start up in safe mode. The flag will clear automatically. To set this flag you have the following options: from command line run octoprint safemode 1 (since OctoPrint 1.3.6) from command line run octoprint config set --bool server.startOnceInSafeMode true 1 edit config.yaml manually with a text editor, locate the server block if it already exists or create it if it doesn't and add startOnceInSafeMode: true to it: server : startOnceInSafeMode : true Please also refer to the YAML primer .","title":"Via the server.startOnceInSafeMode config flag"},{"location":"user-guide/features/safe_mode/#via-the-safe-command-line-flag","text":"You can start OctoPrint in safe mode with the command line parameter --safe , e.g. octoprint serve --safe 1 . Don't forget to shutdown OctoPrint first before doing this.","title":"Via the --safe command line flag"},{"location":"user-guide/features/safe_mode/#differences-of-safe-mode-vs-normal-operation-mode","text":"When OctoPrint is running in safe mode the following changes to its normal operation mode apply: OctoPrint will not enable any of the installed third party plugins. OctoPrint considers all plugins third party plugins that do not ship with OctoPrint's sources, so any plugins installed either via pip or into OctoPrint's plugin folder 2 . OctoPrint will not enable any of the installed third party language packs. OctoPrint considers all language packs third party language packs that do not ship with OctoPrint's sources, so any language plugins installed through the language pack manager within settings and/or stored in the language pack folder 3 . OctoPrint will still allow to uninstall third party plugins through the built-in Plugin Manager. OctoPrint will still allow to disable (bundled) plugins that are still enabled. OctoPrint will not allow to enable third party plugins. OctoPrint will still allow to manage language packs. OctoPrint's web interface will display a notification to remind you that it is running in safe mode. Safe mode notification OctoPi users : For you that's ~/oprint/bin/octoprint wherever it says just octoprint . \u21a9 \u21a9 \u21a9 ~/.octoprint/plugins (Linux), %APPDATA%/OctoPrint/plugins (Windows) or ~/Library/Application Support/OctoPrint/plugins (macOS) \u21a9 ~/.octoprint/translations (Linux), %APPDATA%/OctoPrint/translations (Windows) or ~/Library/Application Support/OctoPrint/translations (macOS) \u21a9","title":"Differences of safe mode vs normal operation mode"}]}