{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OctoPrint OctoPrint provides a snappy web interface for controlling consumer 3D printers. It is Free Software and released under the GNU Affero General Public License V3 . Its website can be found at octoprint.org . The community forum is available at community.octoprint.org . It also serves as central knowledge base. An invite to the Discord server can be found at discord.octoprint.org . The FAQ can be accessed by following faq.octoprint.org . The documentation is located at docs.octoprint.org . The official plugin repository can be reached at plugins.octoprint.org . OctoPrint's development wouldn't be possible without the financial support by its community . If you enjoy OctoPrint, please consider becoming a regular supporter! Note This documentation currently focuses primarily on developers and less on end users. If you are interested in helping to change this, please get in touch on the forum ! Contributing # Contributions of all kinds are welcome, not only in the form of code but also with regards to the official documentation , debugging help in the bug tracker , support of other users on the community forum at community.octoprint.org or the official discord at discord.octoprint.org and also financially . If you think something is bad about OctoPrint or its documentation the way it is, please help in any way to make it better instead of just complaining about it -- this is an Open Source Project after all :) For information about how to go about submitting bug reports or pull requests, please see the project's Contribution Guidelines . Installation # Installation instructions for installing from source for different operating systems can be found on the forum . If you want to run OctoPrint on a Raspberry Pi, you really should take a look at OctoPi which is a custom SD card image that includes OctoPrint plus dependencies. The generic steps that should basically be done regardless of operating system and runtime environment are the following (as regular user , please keep your hands off of the sudo command here!) - this assumes you already have Python 3.7+, pip and virtualenv and their dependencies set up on your system: Create a user-owned virtual environment therein: virtualenv venv . If you want to specify a specific python to use instead of whatever version your system defaults to, you can also explicitly require that via the --python parameter, e.g. virtualenv --python=python3 venv . Install OctoPrint into that virtual environment : ./venv/bin/pip install OctoPrint You may then start the OctoPrint server via /path/to/OctoPrint/venv/bin/octoprint , see Usage for details. After installation, please make sure you follow the first-run wizard and set up access control as necessary. Dependencies # OctoPrint depends on a few python modules to do its job. Those are automatically installed when installing OctoPrint via pip . OctoPrint currently supports Python 3.7, 3.8, 3.9 and 3.10. Usage # Running the pip install via pip install OctoPrint installs the octoprint script in your Python installation's scripts folder (which, depending on whether you installed OctoPrint globally or into a virtual env, will be in your PATH or not). The following usage examples assume that the octoprint script is on your PATH . You can start the server via octoprint serve By default it binds to all interfaces on port 5000 (so pointing your browser to http://127.0.0.1:5000 will do the trick). If you want to change that, use the additional command line parameters host and port , which accept the host ip to bind to and the numeric port number respectively. If for example you want the server to only listen on the local interface on port 8080, the command line would be octoprint serve --host=127.0.0.1 --port=8080 Alternatively, the host and port on which to bind can be defined via the config file. If you want to run OctoPrint as a daemon (only supported on Linux), use octoprint daemon {start|stop|restart} [--pid PIDFILE] If you do not supply a custom pidfile location via --pid PIDFILE , it will be created at /tmp/octoprint.pid . You can also specify the config file or the base directory (for basing off the uploads , timelapse and logs folders), e.g.: octoprint serve --config /path/to/another/config.yaml --basedir /path/to/my/basedir To start OctoPrint in safe mode - which disables all third party plugins that do not come bundled with OctoPrint - use the --safe flag: octoprint serve --safe See octoprint --help for more information on the available command line parameters. OctoPrint also ships with a run script in its source directory. You can invoke it to start the server. It takes the same command line arguments as the octoprint script. Configuration # If not specified via the command line, the config file config.yaml for OctoPrint is expected in the settings folder, which is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on MacOS. A comprehensive overview of all available configuration settings can be found in the docs . Please note that the most commonly used configuration settings can also easily be edited from OctoPrint's settings dialog. Special Thanks # Cross-browser testing services are kindly provided by BrowserStack . Profiling is done with the help of PyVmMonitor . Error tracking is powered and sponsored by Sentry .","title":"Home"},{"location":"#contributing","text":"Contributions of all kinds are welcome, not only in the form of code but also with regards to the official documentation , debugging help in the bug tracker , support of other users on the community forum at community.octoprint.org or the official discord at discord.octoprint.org and also financially . If you think something is bad about OctoPrint or its documentation the way it is, please help in any way to make it better instead of just complaining about it -- this is an Open Source Project after all :) For information about how to go about submitting bug reports or pull requests, please see the project's Contribution Guidelines .","title":"Contributing"},{"location":"#installation","text":"Installation instructions for installing from source for different operating systems can be found on the forum . If you want to run OctoPrint on a Raspberry Pi, you really should take a look at OctoPi which is a custom SD card image that includes OctoPrint plus dependencies. The generic steps that should basically be done regardless of operating system and runtime environment are the following (as regular user , please keep your hands off of the sudo command here!) - this assumes you already have Python 3.7+, pip and virtualenv and their dependencies set up on your system: Create a user-owned virtual environment therein: virtualenv venv . If you want to specify a specific python to use instead of whatever version your system defaults to, you can also explicitly require that via the --python parameter, e.g. virtualenv --python=python3 venv . Install OctoPrint into that virtual environment : ./venv/bin/pip install OctoPrint You may then start the OctoPrint server via /path/to/OctoPrint/venv/bin/octoprint , see Usage for details. After installation, please make sure you follow the first-run wizard and set up access control as necessary.","title":"Installation"},{"location":"#dependencies","text":"OctoPrint depends on a few python modules to do its job. Those are automatically installed when installing OctoPrint via pip . OctoPrint currently supports Python 3.7, 3.8, 3.9 and 3.10.","title":"Dependencies"},{"location":"#usage","text":"Running the pip install via pip install OctoPrint installs the octoprint script in your Python installation's scripts folder (which, depending on whether you installed OctoPrint globally or into a virtual env, will be in your PATH or not). The following usage examples assume that the octoprint script is on your PATH . You can start the server via octoprint serve By default it binds to all interfaces on port 5000 (so pointing your browser to http://127.0.0.1:5000 will do the trick). If you want to change that, use the additional command line parameters host and port , which accept the host ip to bind to and the numeric port number respectively. If for example you want the server to only listen on the local interface on port 8080, the command line would be octoprint serve --host=127.0.0.1 --port=8080 Alternatively, the host and port on which to bind can be defined via the config file. If you want to run OctoPrint as a daemon (only supported on Linux), use octoprint daemon {start|stop|restart} [--pid PIDFILE] If you do not supply a custom pidfile location via --pid PIDFILE , it will be created at /tmp/octoprint.pid . You can also specify the config file or the base directory (for basing off the uploads , timelapse and logs folders), e.g.: octoprint serve --config /path/to/another/config.yaml --basedir /path/to/my/basedir To start OctoPrint in safe mode - which disables all third party plugins that do not come bundled with OctoPrint - use the --safe flag: octoprint serve --safe See octoprint --help for more information on the available command line parameters. OctoPrint also ships with a run script in its source directory. You can invoke it to start the server. It takes the same command line arguments as the octoprint script.","title":"Usage"},{"location":"#configuration","text":"If not specified via the command line, the config file config.yaml for OctoPrint is expected in the settings folder, which is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on MacOS. A comprehensive overview of all available configuration settings can be found in the docs . Please note that the most commonly used configuration settings can also easily be edited from OctoPrint's settings dialog.","title":"Configuration"},{"location":"#special-thanks","text":"Cross-browser testing services are kindly provided by BrowserStack . Profiling is done with the help of PyVmMonitor . Error tracking is powered and sponsored by Sentry .","title":"Special Thanks"},{"location":"dev-guide/","text":"Core Development Guide #","title":"Core Development Guide"},{"location":"dev-guide/#core-development-guide","text":"","title":"Core Development Guide"},{"location":"dev-guide/events/","text":"","title":"Events"},{"location":"plugin-guide/","text":"Plugin Development Guide # Todo Write an introduction to the plugin development guide","title":"Plugin Development Guide"},{"location":"plugin-guide/#plugin-guide","text":"Todo Write an introduction to the plugin development guide","title":"Plugin Development Guide"},{"location":"plugin-guide/tutorial/","text":"Tutorial # Todo Migrate me","title":"Tutorial"},{"location":"plugin-guide/tutorial/#plugin-guide.tutorial","text":"Todo Migrate me","title":"Tutorial"},{"location":"plugin-guide/concepts/","text":"Plugin concepts # OctoPrint's plugins are Python Packages which in their top-level module define a bunch of control properties defining metadata (like name, version etc of the plugin) as well as information on how to initialize the plugin and into what parts of the system the plugin will actually plug in to perform its job. There are three types of ways a plugin might attach itself to the system, through so called mixin implementations, by attaching itself to specified hooks , by offering helper functionality to be used by other plugins or by providing settings overlays . Plugin mixin implementations will get a bunch of properties injected by OctoPrint's plugin subsystem to help them work. The plugin subsystem will also manage plugin's general lifecycle and register declared hook handlers and helpers .","title":"Plugin concepts"},{"location":"plugin-guide/concepts/#plugin-guide.concepts","text":"OctoPrint's plugins are Python Packages which in their top-level module define a bunch of control properties defining metadata (like name, version etc of the plugin) as well as information on how to initialize the plugin and into what parts of the system the plugin will actually plug in to perform its job. There are three types of ways a plugin might attach itself to the system, through so called mixin implementations, by attaching itself to specified hooks , by offering helper functionality to be used by other plugins or by providing settings overlays . Plugin mixin implementations will get a bunch of properties injected by OctoPrint's plugin subsystem to help them work. The plugin subsystem will also manage plugin's general lifecycle and register declared hook handlers and helpers .","title":"Plugin concepts"},{"location":"plugin-guide/concepts/control-properties/","text":"Control properties # As already mentioned in the introduction, plugins are Python packages which provide certain pieces of metadata to tell OctoPrint's plugin subsystem about themselves. These are simple package attributes defined in the top most package file, e.g.: import octoprint.plugin # ... __plugin_name__ = \"My Plugin\" __plugin_pythoncompat__ = \">=3.7,<4\" def __plugin_load__ (): # whatever you need to do to load your plugin, if anything at all pass The following properties are recognized: __plugin_name__ # Name of your plugin, optional, overrides the name specified in setup.py if provided. If neither this property nor a name from setup.py is available to the plugin subsystem, the plugin's identifier (= package name) will be used instead. __plugin_version__ # Version of your plugin, optional, overrides the version specified in setup.py if provided. __plugin_description__ # Description of your plugin, optional, overrides the description specified in setup.py if provided. __plugin_author__ # Author of your plugin, optional, overrides the author specified in setup.py if provided. __plugin_url__ # URL of the webpage of your plugin, e.g. the Github repository, optional, overrides the URL specified in setup.py if provided. __plugin_license__ # License of your plugin, optional, overrides the license specified in setup.py if provided. __plugin_pythoncompat__ # Python compatibility string of your plugin, optional, defaults to >=2.7,<3 if not set and thus Python 2 but no Python 3 compatibility. This is used as a precaution against issues with some of the Python 2 only plugins that are still out there, as OctoPrint will not even attempt to load plugins whose Python compatibility information doesn't match its current environment. If your plugin is compatible to Python 3 only, you should set this to >=3.7,<4 . If your plugin is compatible to Python 2 and Python 3, you should set this to >=2.7,<4 . __plugin_pythoncompat__ = \">=3.7,<4\" __plugin_implementation__ # Instance of an implementation of one or more plugin mixins . E.g. __plugin_implementation__ = MyPlugin () __plugin_hooks__ # Handlers for one or more of the various plugin hooks . E.g. def handle_gcode_sent ( comm_instance , phase , cmd , cmd_type , gcode , * args , ** kwargs ): if gcode in ( \"M106\" , \"M107\" ): import logging logging . getLogger ( __name__ ) . info ( \"We just sent a fan command to the printer!\" ) __plugin_hooks__ = { \"octoprint.comm.protocol.gcode.sent\" : handle_gcode_sent } __plugin_helpers # Helpers registered by this plugin and made available to other plugins. E.g. def my_helper ( * args , ** kwargs ): print ( \"Hello world!\" ) return 42 __plugin_helpers__ = { \"my_helper\" : my_helper } __plugin_check__ # Method called upon discovery of the plugin by the plugin subsystem, should return True if the plugin can be instantiated later on, False if there are reasons why not, e.g. if dependencies are missing. An example: def __plugin_check__ (): # Make sure we only run our plugin if some_dependency is available try : import some_dependency except ImportError : return False return True __plugin_load__ # Method called upon loading of the plugin by the plugin subsystem, can be used to instantiate plugin implementations, connecting them to hooks etc. An example: def __plugin_load__ (): global __plugin_implementation__ __plugin_implementation__ = MyPlugin () global __plugin_hooks__ __plugin_hooks__ = { \"octoprint.plugin.softwareupdate.check_config\" : __plugin_implementation__ . get_update_information } __plugin_unload__ # Method called upon unloading of the plugin by the plugin subsystem, can be used to do any final clean ups. __plugin_enable__ # Method called upon enabling of the plugin by the plugin subsystem. Also see octoprint.plugin.core.Plugin.on_plugin_enabled . __plugin_disable__ # Method called upon disabling of the plugin by the plugin subsystem. Also see octoprint.plugin.core.Plugin.on_plugin_disabled . __plugin_settings_overlay__ # An optional dict providing an overlay over the application's default settings. Plugins can use that to modify the default settings of OctoPrint and its plugins that apply when there's no different configuration present in config.yaml . Note that config.yaml has the final say - it is not possible to override what is in there through an overlay. Plugin authors should use this sparingly - it's supposed to be utilized when creating specific customization of the core application that necessitate changes in things like e.g. standard naming, UI ordering or API endpoints. Example: __plugin_settings_overlay__ = dict ( api = dict ( enabled = False ), server = dict ( host = \"127.0.0.1\" , port = 5001 ) )","title":"Control properties"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties","text":"As already mentioned in the introduction, plugins are Python packages which provide certain pieces of metadata to tell OctoPrint's plugin subsystem about themselves. These are simple package attributes defined in the top most package file, e.g.: import octoprint.plugin # ... __plugin_name__ = \"My Plugin\" __plugin_pythoncompat__ = \">=3.7,<4\" def __plugin_load__ (): # whatever you need to do to load your plugin, if anything at all pass The following properties are recognized:","title":"Control properties"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-name","text":"Name of your plugin, optional, overrides the name specified in setup.py if provided. If neither this property nor a name from setup.py is available to the plugin subsystem, the plugin's identifier (= package name) will be used instead.","title":"__plugin_name__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-version","text":"Version of your plugin, optional, overrides the version specified in setup.py if provided.","title":"__plugin_version__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-description","text":"Description of your plugin, optional, overrides the description specified in setup.py if provided.","title":"__plugin_description__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-author","text":"Author of your plugin, optional, overrides the author specified in setup.py if provided.","title":"__plugin_author__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-url","text":"URL of the webpage of your plugin, e.g. the Github repository, optional, overrides the URL specified in setup.py if provided.","title":"__plugin_url__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-license","text":"License of your plugin, optional, overrides the license specified in setup.py if provided.","title":"__plugin_license__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-pythoncompat","text":"Python compatibility string of your plugin, optional, defaults to >=2.7,<3 if not set and thus Python 2 but no Python 3 compatibility. This is used as a precaution against issues with some of the Python 2 only plugins that are still out there, as OctoPrint will not even attempt to load plugins whose Python compatibility information doesn't match its current environment. If your plugin is compatible to Python 3 only, you should set this to >=3.7,<4 . If your plugin is compatible to Python 2 and Python 3, you should set this to >=2.7,<4 . __plugin_pythoncompat__ = \">=3.7,<4\"","title":"__plugin_pythoncompat__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-implementation","text":"Instance of an implementation of one or more plugin mixins . E.g. __plugin_implementation__ = MyPlugin ()","title":"__plugin_implementation__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-hooks","text":"Handlers for one or more of the various plugin hooks . E.g. def handle_gcode_sent ( comm_instance , phase , cmd , cmd_type , gcode , * args , ** kwargs ): if gcode in ( \"M106\" , \"M107\" ): import logging logging . getLogger ( __name__ ) . info ( \"We just sent a fan command to the printer!\" ) __plugin_hooks__ = { \"octoprint.comm.protocol.gcode.sent\" : handle_gcode_sent }","title":"__plugin_hooks__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-helpers","text":"Helpers registered by this plugin and made available to other plugins. E.g. def my_helper ( * args , ** kwargs ): print ( \"Hello world!\" ) return 42 __plugin_helpers__ = { \"my_helper\" : my_helper }","title":"__plugin_helpers"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-check","text":"Method called upon discovery of the plugin by the plugin subsystem, should return True if the plugin can be instantiated later on, False if there are reasons why not, e.g. if dependencies are missing. An example: def __plugin_check__ (): # Make sure we only run our plugin if some_dependency is available try : import some_dependency except ImportError : return False return True","title":"__plugin_check__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-load","text":"Method called upon loading of the plugin by the plugin subsystem, can be used to instantiate plugin implementations, connecting them to hooks etc. An example: def __plugin_load__ (): global __plugin_implementation__ __plugin_implementation__ = MyPlugin () global __plugin_hooks__ __plugin_hooks__ = { \"octoprint.plugin.softwareupdate.check_config\" : __plugin_implementation__ . get_update_information }","title":"__plugin_load__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-unload","text":"Method called upon unloading of the plugin by the plugin subsystem, can be used to do any final clean ups.","title":"__plugin_unload__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-enable","text":"Method called upon enabling of the plugin by the plugin subsystem. Also see octoprint.plugin.core.Plugin.on_plugin_enabled .","title":"__plugin_enable__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-disable","text":"Method called upon disabling of the plugin by the plugin subsystem. Also see octoprint.plugin.core.Plugin.on_plugin_disabled .","title":"__plugin_disable__"},{"location":"plugin-guide/concepts/control-properties/#plugin-guide.concepts.control-properties.plugin-settings-overlay","text":"An optional dict providing an overlay over the application's default settings. Plugins can use that to modify the default settings of OctoPrint and its plugins that apply when there's no different configuration present in config.yaml . Note that config.yaml has the final say - it is not possible to override what is in there through an overlay. Plugin authors should use this sparingly - it's supposed to be utilized when creating specific customization of the core application that necessitate changes in things like e.g. standard naming, UI ordering or API endpoints. Example: __plugin_settings_overlay__ = dict ( api = dict ( enabled = False ), server = dict ( host = \"127.0.0.1\" , port = 5001 ) )","title":"__plugin_settings_overlay__"},{"location":"plugin-guide/concepts/helpers/","text":"Helpers # Helpers are methods that plugins can expose to other plugins in order to make common functionality available on the system. They are registered with the OctoPrint plugin system through the use of the control property __plugin_helpers__ . An example for providing some helper functions to the system can be found in the bundled Discovery Plugin which provides its SSDP browsing and Zeroconf browsing and publishing functions as helper methods. src/octoprint/plugins/discovery/__init__.py def __plugin_load__ (): plugin = DiscoveryPlugin () global __plugin_implementation__ __plugin_implementation__ = plugin global __plugin_helpers__ __plugin_helpers__ = { \"ssdp_browse\" : plugin . ssdp_browse , \"zeroconf_browse\" : plugin . zeroconf_browse , \"zeroconf_register\" : plugin . zeroconf_register , \"zeroconf_unregister\" : plugin . zeroconf_unregister , } An example of how to use helpers can be found in the (unmaintained) Growl Plugin . Using octoprint.plugin.core.PluginManager.get_helpers plugins can retrieve exported helper methods and call them as (hopefully) documented. def on_after_startup ( self ): host = self . _settings . get ([ \"hostname\" ]) port = self . _settings . getInt ([ \"port\" ]) password = self . _settings . get ([ \"password\" ]) helpers = self . _plugin_manager . get_helpers ( \"discovery\" , \"zeroconf_browse\" ) if helpers and \"zeroconf_browse\" in helpers : self . zeroconf_browse = helpers [ \"zeroconf_browse\" ] self . growl , _ = self . _register_growl ( host , port , password = password ) # [...] def on_api_get ( self , request ): if not self . zeroconf_browse : return flask . jsonify ( dict ( browsing_enabled = False )) browse_results = self . zeroconf_browse ( \"_gntp._tcp\" , block = True ) growl_instances = [ dict ( name = v [ \"name\" ], host = v [ \"host\" ], port = v [ \"port\" ]) for v in browse_results ] return flask . jsonify ( dict ( browsing_enabled = True , growl_instances = growl_instances ))","title":"Helpers"},{"location":"plugin-guide/concepts/helpers/#plugin-guide.concepts.helpers","text":"Helpers are methods that plugins can expose to other plugins in order to make common functionality available on the system. They are registered with the OctoPrint plugin system through the use of the control property __plugin_helpers__ . An example for providing some helper functions to the system can be found in the bundled Discovery Plugin which provides its SSDP browsing and Zeroconf browsing and publishing functions as helper methods. src/octoprint/plugins/discovery/__init__.py def __plugin_load__ (): plugin = DiscoveryPlugin () global __plugin_implementation__ __plugin_implementation__ = plugin global __plugin_helpers__ __plugin_helpers__ = { \"ssdp_browse\" : plugin . ssdp_browse , \"zeroconf_browse\" : plugin . zeroconf_browse , \"zeroconf_register\" : plugin . zeroconf_register , \"zeroconf_unregister\" : plugin . zeroconf_unregister , } An example of how to use helpers can be found in the (unmaintained) Growl Plugin . Using octoprint.plugin.core.PluginManager.get_helpers plugins can retrieve exported helper methods and call them as (hopefully) documented. def on_after_startup ( self ): host = self . _settings . get ([ \"hostname\" ]) port = self . _settings . getInt ([ \"port\" ]) password = self . _settings . get ([ \"password\" ]) helpers = self . _plugin_manager . get_helpers ( \"discovery\" , \"zeroconf_browse\" ) if helpers and \"zeroconf_browse\" in helpers : self . zeroconf_browse = helpers [ \"zeroconf_browse\" ] self . growl , _ = self . _register_growl ( host , port , password = password ) # [...] def on_api_get ( self , request ): if not self . zeroconf_browse : return flask . jsonify ( dict ( browsing_enabled = False )) browse_results = self . zeroconf_browse ( \"_gntp._tcp\" , block = True ) growl_instances = [ dict ( name = v [ \"name\" ], host = v [ \"host\" ], port = v [ \"port\" ]) for v in browse_results ] return flask . jsonify ( dict ( browsing_enabled = True , growl_instances = growl_instances ))","title":"Helpers"},{"location":"plugin-guide/concepts/hooks/","text":"Hooks # Todo Migrate me","title":"Hooks"},{"location":"plugin-guide/concepts/hooks/#plugin-guide.concepts.hooks","text":"Todo Migrate me","title":"Hooks"},{"location":"plugin-guide/concepts/lifecycle/","text":"Lifecycle # There are three sources of installed plugins that OctoPrint will check during start up: its own octoprint/plugins folder (this is where the bundled plugins reside), the plugins folder in its configuration directory (e.g. ~/.octoprint/plugins on Linux), any Python packages registered for the entry point octoprint.plugin . Each plugin that OctoPrint finds it will first load, then enable. On enabling a plugin, OctoPrint will register its declared hook handlers and helpers , apply any settings overlays , inject the required properties into its declared mixin implementation and register those as well. On disabling a plugin, its hook handlers, helpers, mixin implementations and settings overlays will be de-registered again. When a plugin gets enabled, OctoPrint will also call the on_plugin_enabled callback on its implementation (if it exists). Likewise, when a plugin gets disabled OctoPrint will call the on_plugin_disabled callback on its implementation (again, if it exists). Some plugin types require a reload of the frontend or a restart of OctoPrint for enabling/disabling them. You can recognize such plugins by their implementations implementing octoprint.plugin.types.ReloadNeedingPlugin or octoprint.plugin.types.RestartNeedingPlugin , or providing handlers for one of the hooks marked correspondingly. For these plugins, disabling them will not trigger the respective callback at runtime as they will not actually be disabled right away but only marked as such so that they won't even load during the required restart. Note that uninstalling a plugin through the bundled Plugin Manager will make a plugin first get disabled and then unloaded, but only if it doesn't require a restart. Plugins wishing to react to an uninstall through the Plugin Manager may implement on_plugin_pending_uninstall (added in OctoPrint 1.8.0) which will always be called by the Plugin Manager, regardless of whether the plugin requires a restart of OctoPrint to be fully uninstalled or not. Please be aware that the Plugin Manager is not the only way to uninstall a plugin from the system, a user may also uninstall it manually through the command line, circumventing Plugin Manager completely.","title":"Lifecycle"},{"location":"plugin-guide/concepts/lifecycle/#plugin-guide.concepts.lifecycle","text":"There are three sources of installed plugins that OctoPrint will check during start up: its own octoprint/plugins folder (this is where the bundled plugins reside), the plugins folder in its configuration directory (e.g. ~/.octoprint/plugins on Linux), any Python packages registered for the entry point octoprint.plugin . Each plugin that OctoPrint finds it will first load, then enable. On enabling a plugin, OctoPrint will register its declared hook handlers and helpers , apply any settings overlays , inject the required properties into its declared mixin implementation and register those as well. On disabling a plugin, its hook handlers, helpers, mixin implementations and settings overlays will be de-registered again. When a plugin gets enabled, OctoPrint will also call the on_plugin_enabled callback on its implementation (if it exists). Likewise, when a plugin gets disabled OctoPrint will call the on_plugin_disabled callback on its implementation (again, if it exists). Some plugin types require a reload of the frontend or a restart of OctoPrint for enabling/disabling them. You can recognize such plugins by their implementations implementing octoprint.plugin.types.ReloadNeedingPlugin or octoprint.plugin.types.RestartNeedingPlugin , or providing handlers for one of the hooks marked correspondingly. For these plugins, disabling them will not trigger the respective callback at runtime as they will not actually be disabled right away but only marked as such so that they won't even load during the required restart. Note that uninstalling a plugin through the bundled Plugin Manager will make a plugin first get disabled and then unloaded, but only if it doesn't require a restart. Plugins wishing to react to an uninstall through the Plugin Manager may implement on_plugin_pending_uninstall (added in OctoPrint 1.8.0) which will always be called by the Plugin Manager, regardless of whether the plugin requires a restart of OctoPrint to be fully uninstalled or not. Please be aware that the Plugin Manager is not the only way to uninstall a plugin from the system, a user may also uninstall it manually through the command line, circumventing Plugin Manager completely.","title":"Lifecycle"},{"location":"plugin-guide/concepts/mixins/","text":"Mixins # Plugin mixins are the heart of OctoPrint's plugin system. They are special base classes which are to be subclassed and extended to add functionality to OctoPrint. Plugins declare their instances that implement one or multiple mixins using the __plugin_implementation__ control property. OctoPrint's plugin core collects those from the plugins and offers methods to access them based on the mixin type, which get used at multiple locations within OctoPrint. Using mixins always follows the pattern of retrieving the matching implementations from the plugin subsystem, then calling the specific mixin's methods as defined and necessary. The following snippet taken from OctoPrint's code for example shows how all AssetPlugin implementations are collected and then all assets they return via their get_assets methods are retrieved and merged into one big asset map (differing between javascripts and stylesheets of various types) for use during rendition of the UI. asset_plugins = pluginManager . get_implementations ( octoprint . plugin . AssetPlugin ) for name , implementation in asset_plugins . items (): all_assets = implementation . get_assets () if \"js\" in all_assets : for asset in all_assets [ \"js\" ]: assets [ \"js\" ] . append ( url_for ( 'plugin_assets' , name = name , filename = asset )) if preferred_stylesheet in all_assets : for asset in all_assets [ preferred_stylesheet ]: assets [ \"stylesheets\" ] . append (( preferred_stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) else : for stylesheet in supported_stylesheets : if not stylesheet in all_assets : continue for asset in all_assets [ stylesheet ]: assets [ \"stylesheets\" ] . append (( stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) break See also The Plugin Tutorial Tutorial on how to write a simple OctoPrint module utilizing mixins for various types of extension. Execution Order # Some mixin types, such as StartupPlugin , ShutdownPlugin and UiPlugin , support influencing the execution order for various execution contexts by also implementing the SortablePlugin mixin. If a method is to be called on a plugin implementation for which a sorting context is defined (see the mixin documentation for information on this), OctoPrint's plugin subsystem will ensure that the order in which the implementation calls are done is as follows: Plugins with a return value that is not None for get_sorting_key for the provided sorting context will be ordered among each other first. If the returned order number is equal for two or more implementations, they will be sorted first by whether they come bundled with OctoPrint or not, then by their identifier. After that follow plugins which returned None (the default). They are first sorted by whether they come bundled with OctoPrint or not, then by their identifier. Example Consider four plugin implementations implementing the StartupPlugin mixin, called plugin_a , plugin_b , plugin_c and plugin_d , the latter coming bundled with OctoPrint. plugin_a and plugin_d don't override get_sorting_key . plugin_b and plugin_c both return 1 for the sorting context StartupPlugin.on_startup , None otherwise: plugin_a.py import octoprint.plugin class PluginA ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA started up\" ) __plugin_implementation__ = PluginA () plugin_b.py import octoprint.plugin class PluginB ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB started up\" ) __plugin_implementation__ = PluginB () plugin_c.py import octoprint.plugin class PluginC ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC started up\" ) __plugin_implementation__ = PluginC () plugin_d.py # in this example this is bundled with OctoPrint import octoprint.plugin class PluginD ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD started up\" ) __plugin_implementation__ = PluginD () OctoPrint will detect that plugin_b and plugin_c define a order number, and since it's identical for both, namely 1 , will order both plugins based first on their bundling status and then on their plugin identifier. plugin_a and plugin_d don't define a sort key and hence will be put after the other two, with plugin_d coming before plugin_a since it comes bundled with OctoPrint. The execution order of the on_startup method will hence be plugin_b , plugin_c , plugin_d , plugin_a . Now, the execution order of the on_after_startup method will be determined based on another sorting context, StartupPlugin.on_after_startup for which all of the plugins return None . Hence, the execution order of the on_after_startup method will be ordered first by bundle status, then by plugin identifier: plugin_d , plugin_a , plugin_b , plugin_c . This will result in the following messages to be generated: Plugin B starting up Plugin C starting up Plugin D starting up Plugin A starting up Plugin D started up Plugin A started up Plugin B started up Plugin C started up Injected Properties # OctoPrint's plugin subsystem will inject a bunch of properties into each mixin implementation . An overview of these properties follows. self._identifier # The plugin's identifier. self._plugin_name # The plugin's name, as taken from either the __plugin_name__ control property or the package info. self._plugin_version # The plugin's version, as taken from either the __plugin_version__ control property or the package info. self._plugin_info # The octoprint.plugin.core.PluginInfo object associated with the plugin. self._basefolder # The plugin's base folder where it's installed. Can be used to refer to files relative to the plugin's installation location, e.g. included scripts, templates or assets. self._datafolder # The plugin's additional data folder path. Can be used to store additional files needed for the plugin's operation (cache, data files etc). Plugins should not access this property directly but instead utilize self.get_plugin_data_folder which will make sure the path actually does exist and if not create it before returning it. self._logger # A logging.Logger instance logging to the log target octoprint.plugin.<plugin identifier> . self._settings # The plugin's personalized settings manager, injected only into plugins that include the octoprint.plugin.types.SettingsPlugin mixin. An instance of octoprint.plugin.PluginSettings . self._plugin_manager # OctoPrint's plugin manager object, an instance of octoprint.plugin.core.PluginManager . self._printer_profile_manager # OctoPrint's printer profile manager, an instance of octoprint.printer.profile.PrinterProfileManager . self._event_bus # OctoPrint's event bus, an instance of octoprint.events.EventManager . self._analysis_queue # OctoPrint's analysis queue for analyzing GCODEs or other files, an instance of octoprint.filemanager.analysis.AnalysisQueue . self._slicing_manager # OctoPrint's slicing manager, an instance of octoprint.slicing.SlicingManager . self._file_manager # OctoPrint's file manager, an instance of octoprint.filemanager.FileManager . self._printer # OctoPrint's printer management object, an instance of octoprint.printer.PrinterInterface . self._user_manager # OctoPrint's user manager, an instance of octoprint.access.users.UserManager . self._connectivity_checker # OctoPrint's connectivity checker, an instance of octoprint.util.ConnectivityChecker . See also octoprint.plugin.core.Plugin and octoprint.plugin.types.OctoPrintPlugin Class documentation also containing the properties shared among all mixin implementations. Available plugin mixins # Please note that all plugin mixins inherit from Plugin and OctoPrintPlugin , which also provide attributes of interest to plugin developers. AssetPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. BlueprintPlugin The BlueprintPlugin mixin allows plugins to define their own full fledged endpoints for whatever purpose, be it a more sophisticated API than what is possible via the SimpleApiPlugin or a custom web frontend. EnvironmentDetectionPlugin The EnvironmentDetectionPlugin mixin allows enrichting OctoPrint's environmental information collections with additional data, and to react to successfully collected environmental information. EventHandlerPlugin The EventHandlerPlugin mixin allows OctoPrint plugins to react to any of OctoPrint's events . OctoPrint will call the on_event method for any event fired on its internal event bus, supplying the event type and the associated payload. ProgressPlugin Via the ProgressPlugin mixin plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps. SettingsPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. ShutdownPlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the StartupPlugin mixin, to cleanly shut down additional services again that where started by the StartupPlugin part of the plugin. SimpleApiPlugin Utilizing the SimpleApiPlugin mixin plugins may implement a simple API based around one GET resource and one resource accepting JSON commands POSTed to it. SlicerPlugin Via the SlicerPlugin mixin plugins can add support for slicing engines to be used by OctoPrint. StartupPlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. TemplatePlugin Using the TemplatePlugin mixin plugins may inject their own components into the OctoPrint web interface. UiPlugin The UiPlugin mixin allows plugins to completely replace the UI served by OctoPrint. WizardPlugin The WizardPlugin mixin allows plugins to report to OctoPrint whether the wizard templates they define via the TemplatePlugin should be displayed to the user, what details to provide to their respective wizard frontend components and what to do when the wizard is finished by the user. For more detailed information on each of the available plugin mixins, please click on their respective links.","title":"Mixins"},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins","text":"Plugin mixins are the heart of OctoPrint's plugin system. They are special base classes which are to be subclassed and extended to add functionality to OctoPrint. Plugins declare their instances that implement one or multiple mixins using the __plugin_implementation__ control property. OctoPrint's plugin core collects those from the plugins and offers methods to access them based on the mixin type, which get used at multiple locations within OctoPrint. Using mixins always follows the pattern of retrieving the matching implementations from the plugin subsystem, then calling the specific mixin's methods as defined and necessary. The following snippet taken from OctoPrint's code for example shows how all AssetPlugin implementations are collected and then all assets they return via their get_assets methods are retrieved and merged into one big asset map (differing between javascripts and stylesheets of various types) for use during rendition of the UI. asset_plugins = pluginManager . get_implementations ( octoprint . plugin . AssetPlugin ) for name , implementation in asset_plugins . items (): all_assets = implementation . get_assets () if \"js\" in all_assets : for asset in all_assets [ \"js\" ]: assets [ \"js\" ] . append ( url_for ( 'plugin_assets' , name = name , filename = asset )) if preferred_stylesheet in all_assets : for asset in all_assets [ preferred_stylesheet ]: assets [ \"stylesheets\" ] . append (( preferred_stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) else : for stylesheet in supported_stylesheets : if not stylesheet in all_assets : continue for asset in all_assets [ stylesheet ]: assets [ \"stylesheets\" ] . append (( stylesheet , url_for ( 'plugin_assets' , name = name , filename = asset ))) break See also The Plugin Tutorial Tutorial on how to write a simple OctoPrint module utilizing mixins for various types of extension.","title":"Mixins"},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.execution-order","text":"Some mixin types, such as StartupPlugin , ShutdownPlugin and UiPlugin , support influencing the execution order for various execution contexts by also implementing the SortablePlugin mixin. If a method is to be called on a plugin implementation for which a sorting context is defined (see the mixin documentation for information on this), OctoPrint's plugin subsystem will ensure that the order in which the implementation calls are done is as follows: Plugins with a return value that is not None for get_sorting_key for the provided sorting context will be ordered among each other first. If the returned order number is equal for two or more implementations, they will be sorted first by whether they come bundled with OctoPrint or not, then by their identifier. After that follow plugins which returned None (the default). They are first sorted by whether they come bundled with OctoPrint or not, then by their identifier. Example Consider four plugin implementations implementing the StartupPlugin mixin, called plugin_a , plugin_b , plugin_c and plugin_d , the latter coming bundled with OctoPrint. plugin_a and plugin_d don't override get_sorting_key . plugin_b and plugin_c both return 1 for the sorting context StartupPlugin.on_startup , None otherwise: plugin_a.py import octoprint.plugin class PluginA ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginA started up\" ) __plugin_implementation__ = PluginA () plugin_b.py import octoprint.plugin class PluginB ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginB started up\" ) __plugin_implementation__ = PluginB () plugin_c.py import octoprint.plugin class PluginC ( octoprint . plugin . StartupPlugin ): def get_sorting_key ( self , context ): if context == \"StartupPlugin.on_startup\" : return 1 return None def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginC started up\" ) __plugin_implementation__ = PluginC () plugin_d.py # in this example this is bundled with OctoPrint import octoprint.plugin class PluginD ( octoprint . plugin . StartupPlugin ): def on_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD starting up\" ) def on_after_startup ( self , * args , ** kwargs ): self . _logger . info ( \"PluginD started up\" ) __plugin_implementation__ = PluginD () OctoPrint will detect that plugin_b and plugin_c define a order number, and since it's identical for both, namely 1 , will order both plugins based first on their bundling status and then on their plugin identifier. plugin_a and plugin_d don't define a sort key and hence will be put after the other two, with plugin_d coming before plugin_a since it comes bundled with OctoPrint. The execution order of the on_startup method will hence be plugin_b , plugin_c , plugin_d , plugin_a . Now, the execution order of the on_after_startup method will be determined based on another sorting context, StartupPlugin.on_after_startup for which all of the plugins return None . Hence, the execution order of the on_after_startup method will be ordered first by bundle status, then by plugin identifier: plugin_d , plugin_a , plugin_b , plugin_c . This will result in the following messages to be generated: Plugin B starting up Plugin C starting up Plugin D starting up Plugin A starting up Plugin D started up Plugin A started up Plugin B started up Plugin C started up","title":"Execution Order"},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.injected-properties","text":"OctoPrint's plugin subsystem will inject a bunch of properties into each mixin implementation . An overview of these properties follows.","title":"Injected Properties"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.identifier","text":"The plugin's identifier.","title":"self._identifier"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-name","text":"The plugin's name, as taken from either the __plugin_name__ control property or the package info.","title":"self._plugin_name"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-version","text":"The plugin's version, as taken from either the __plugin_version__ control property or the package info.","title":"self._plugin_version"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-info","text":"The octoprint.plugin.core.PluginInfo object associated with the plugin.","title":"self._plugin_info"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.basefolder","text":"The plugin's base folder where it's installed. Can be used to refer to files relative to the plugin's installation location, e.g. included scripts, templates or assets.","title":"self._basefolder"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.datafolder","text":"The plugin's additional data folder path. Can be used to store additional files needed for the plugin's operation (cache, data files etc). Plugins should not access this property directly but instead utilize self.get_plugin_data_folder which will make sure the path actually does exist and if not create it before returning it.","title":"self._datafolder"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.logger","text":"A logging.Logger instance logging to the log target octoprint.plugin.<plugin identifier> .","title":"self._logger"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.settings","text":"The plugin's personalized settings manager, injected only into plugins that include the octoprint.plugin.types.SettingsPlugin mixin. An instance of octoprint.plugin.PluginSettings .","title":"self._settings"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.plugin-manager","text":"OctoPrint's plugin manager object, an instance of octoprint.plugin.core.PluginManager .","title":"self._plugin_manager"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.printer-profile-manager","text":"OctoPrint's printer profile manager, an instance of octoprint.printer.profile.PrinterProfileManager .","title":"self._printer_profile_manager"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.event-bus","text":"OctoPrint's event bus, an instance of octoprint.events.EventManager .","title":"self._event_bus"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.analysis-queue","text":"OctoPrint's analysis queue for analyzing GCODEs or other files, an instance of octoprint.filemanager.analysis.AnalysisQueue .","title":"self._analysis_queue"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.slicing-manager","text":"OctoPrint's slicing manager, an instance of octoprint.slicing.SlicingManager .","title":"self._slicing_manager"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.file-manager","text":"OctoPrint's file manager, an instance of octoprint.filemanager.FileManager .","title":"self._file_manager"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.printer","text":"OctoPrint's printer management object, an instance of octoprint.printer.PrinterInterface .","title":"self._printer"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.user-manager","text":"OctoPrint's user manager, an instance of octoprint.access.users.UserManager .","title":"self._user_manager"},{"location":"plugin-guide/concepts/mixins/#plugin_guide.mixins.injected-properties.connectivity-checker","text":"OctoPrint's connectivity checker, an instance of octoprint.util.ConnectivityChecker . See also octoprint.plugin.core.Plugin and octoprint.plugin.types.OctoPrintPlugin Class documentation also containing the properties shared among all mixin implementations.","title":"self._connectivity_checker"},{"location":"plugin-guide/concepts/mixins/#plugin-guide.concepts.mixins.available-plugin-mixins","text":"Please note that all plugin mixins inherit from Plugin and OctoPrintPlugin , which also provide attributes of interest to plugin developers. AssetPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. BlueprintPlugin The BlueprintPlugin mixin allows plugins to define their own full fledged endpoints for whatever purpose, be it a more sophisticated API than what is possible via the SimpleApiPlugin or a custom web frontend. EnvironmentDetectionPlugin The EnvironmentDetectionPlugin mixin allows enrichting OctoPrint's environmental information collections with additional data, and to react to successfully collected environmental information. EventHandlerPlugin The EventHandlerPlugin mixin allows OctoPrint plugins to react to any of OctoPrint's events . OctoPrint will call the on_event method for any event fired on its internal event bus, supplying the event type and the associated payload. ProgressPlugin Via the ProgressPlugin mixin plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps. SettingsPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. ShutdownPlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the StartupPlugin mixin, to cleanly shut down additional services again that where started by the StartupPlugin part of the plugin. SimpleApiPlugin Utilizing the SimpleApiPlugin mixin plugins may implement a simple API based around one GET resource and one resource accepting JSON commands POSTed to it. SlicerPlugin Via the SlicerPlugin mixin plugins can add support for slicing engines to be used by OctoPrint. StartupPlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. TemplatePlugin Using the TemplatePlugin mixin plugins may inject their own components into the OctoPrint web interface. UiPlugin The UiPlugin mixin allows plugins to completely replace the UI served by OctoPrint. WizardPlugin The WizardPlugin mixin allows plugins to report to OctoPrint whether the wizard templates they define via the TemplatePlugin should be displayed to the user, what details to provide to their respective wizard frontend components and what to do when the wizard is finished by the user. For more detailed information on each of the available plugin mixins, please click on their respective links.","title":"Available plugin mixins"},{"location":"reference/","text":"Code Reference #","title":"Code Reference"},{"location":"reference/#code-reference","text":"","title":"Code Reference"},{"location":"reference/SUMMARY/","text":"octoprint _version access groups permissions users cli analysis client common config dev plugins server systeminfo timelapse user daemon environment events filemanager analysis destinations storage util logging filters handlers plugin core types plugins action_command_notification action_command_prompt announcements appkeys backup corewizard subwizards discovery errortracking eventmanager gcodeviewer logging pluginmanager exceptions softwareupdate cli exceptions scripts update-octoprint updaters pip python_updater single_file_plugin sleep_a_bit update_script util version_checks always_current bitbucket_commit commandline git_commit github_commit github_release httpheader jsondata never_current pypi_release python_checker tracking virtual_printer virtual printer estimation profile standard schema config access_control api appearance controls devel estimation events feature folder gcode_analysis plugins printer_parameters printer_profiles scripts serial server slicing system temperature terminalfilters webcam server api access connection files job languages printer printer_profiles settings slicing system timelapse users util csrf flask sockjs tornado watchdog webassets views settings slicing exceptions systemcommands timelapse users util comm commandline connectivity dev files fixes gcodeInterpreter jinja json encoding serializing net paths pip piptestballoon setup platform text tz version yaml vendor awesome_slugify alt_translates main flask_principal imp sockjs tornado basehandler conn migrate periodic proto router session sessioncontainer static stats transports base eventsource htmlfile jsonp pollingbase rawwebsocket streamingbase websocket xhr xhrstreaming util websocket with_attrs_docs octoprint_client octoprint_setuptools","title":"SUMMARY"},{"location":"reference/octoprint/","text":"octoprint # urllib3_ssl = True module-attribute # Whether requests/urllib3 and urllib3 (if installed) should be able to establish a sound SSL environment or not. init_logging ( settings , use_logging_file = True , logging_file = None , default_config = None , debug = False , verbosity = 0 , uncaught_logger = None , uncaught_handler = None , disable_color = True ) # Sets up logging. init_pluginsystem ( settings , safe_mode = False , ignore_blacklist = True , connectivity_checker = None ) # Initializes the plugin manager based on the settings. init_settings ( basedir , configfile , overlays = None ) # Inits the settings instance based on basedir and configfile to use.","title":"octoprint"},{"location":"reference/octoprint/#octoprint_1","text":"","title":"octoprint"},{"location":"reference/octoprint/#octoprint.urllib3_ssl","text":"Whether requests/urllib3 and urllib3 (if installed) should be able to establish a sound SSL environment or not.","title":"urllib3_ssl"},{"location":"reference/octoprint/#octoprint.init_logging","text":"Sets up logging.","title":"init_logging()"},{"location":"reference/octoprint/#octoprint.init_pluginsystem","text":"Initializes the plugin manager based on the settings.","title":"init_pluginsystem()"},{"location":"reference/octoprint/#octoprint.init_settings","text":"Inits the settings instance based on basedir and configfile to use.","title":"init_settings()"},{"location":"reference/octoprint/_version/","text":"","title":"_version"},{"location":"reference/octoprint/daemon/","text":"octoprint.daemon # Generic linux daemon base class Originally from http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/#c35 Daemon # A generic daemon class. Usage: subclass the daemon class and override the run() method. If you want to log the output to someplace different that stdout and stderr, also override the echo() and error() methods. get_pid () # Get the pid from the pidfile. is_running () # Check if a process is running under the specified pid. remove_pidfile () # Removes the pidfile. restart () # Restart the daemon. run () # You should override this method when you subclass Daemon. It will be called after the process has been daemonized by start() or restart(). set_pid ( pid ) # Write the pid to the pidfile. start () # Start the daemon. status () # Prints the daemon status. stop ( check_running = True ) # Stop the daemon.","title":"daemon"},{"location":"reference/octoprint/daemon/#octoprintdaemon","text":"Generic linux daemon base class Originally from http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/#c35","title":"octoprint.daemon"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon","text":"A generic daemon class. Usage: subclass the daemon class and override the run() method. If you want to log the output to someplace different that stdout and stderr, also override the echo() and error() methods.","title":"Daemon"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.get_pid","text":"Get the pid from the pidfile.","title":"get_pid()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.is_running","text":"Check if a process is running under the specified pid.","title":"is_running()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.remove_pidfile","text":"Removes the pidfile.","title":"remove_pidfile()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.restart","text":"Restart the daemon.","title":"restart()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.run","text":"You should override this method when you subclass Daemon. It will be called after the process has been daemonized by start() or restart().","title":"run()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.set_pid","text":"Write the pid to the pidfile.","title":"set_pid()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.start","text":"Start the daemon.","title":"start()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.status","text":"Prints the daemon status.","title":"status()"},{"location":"reference/octoprint/daemon/#octoprint.daemon.Daemon.stop","text":"Stop the daemon.","title":"stop()"},{"location":"reference/octoprint/environment/","text":"octoprint.environment #","title":"environment"},{"location":"reference/octoprint/environment/#octoprintenvironment","text":"","title":"octoprint.environment"},{"location":"reference/octoprint/events/","text":"octoprint.events # CommandTrigger # Bases: GenericEventListener eventCallback ( event , payload ) # Event callback, iterates over all subscribed commands for the given event, processes the command string and then executes the command via the abstract executeCommand method. EventManager # Handles receiving events and dispatching them to subscribers fire ( event , payload = None ) # Fire an event to anyone subscribed to it Any object can generate an event and any object can subscribe to the event's name as a string (arbitrary, but case sensitive) and any extra payload data that may pertain to the event. Callbacks must implement the signature \"callback(event, payload)\", with \"event\" being the event's name and payload being a payload object specific to the event. subscribe ( event , callback ) # Subscribe a listener to an event -- pass in the event name (as a string) and the callback object unsubscribe ( event , callback ) # Unsubscribe a listener from an event -- pass in the event name (as string) and the callback object GenericEventListener # The GenericEventListener can be subclassed to easily create custom event listeners. eventCallback ( event , payload ) # Actual event callback called with name of event and optional payload. Not implemented here, override in child classes. subscribe ( events ) # Subscribes the eventCallback method for all events in the given list. unsubscribe ( events ) # Unsubscribes the eventCallback method for all events in the given list","title":"events"},{"location":"reference/octoprint/events/#octoprintevents","text":"","title":"octoprint.events"},{"location":"reference/octoprint/events/#octoprint.events.CommandTrigger","text":"Bases: GenericEventListener","title":"CommandTrigger"},{"location":"reference/octoprint/events/#octoprint.events.CommandTrigger.eventCallback","text":"Event callback, iterates over all subscribed commands for the given event, processes the command string and then executes the command via the abstract executeCommand method.","title":"eventCallback()"},{"location":"reference/octoprint/events/#octoprint.events.EventManager","text":"Handles receiving events and dispatching them to subscribers","title":"EventManager"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.fire","text":"Fire an event to anyone subscribed to it Any object can generate an event and any object can subscribe to the event's name as a string (arbitrary, but case sensitive) and any extra payload data that may pertain to the event. Callbacks must implement the signature \"callback(event, payload)\", with \"event\" being the event's name and payload being a payload object specific to the event.","title":"fire()"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.subscribe","text":"Subscribe a listener to an event -- pass in the event name (as a string) and the callback object","title":"subscribe()"},{"location":"reference/octoprint/events/#octoprint.events.EventManager.unsubscribe","text":"Unsubscribe a listener from an event -- pass in the event name (as string) and the callback object","title":"unsubscribe()"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener","text":"The GenericEventListener can be subclassed to easily create custom event listeners.","title":"GenericEventListener"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.eventCallback","text":"Actual event callback called with name of event and optional payload. Not implemented here, override in child classes.","title":"eventCallback()"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.subscribe","text":"Subscribes the eventCallback method for all events in the given list.","title":"subscribe()"},{"location":"reference/octoprint/events/#octoprint.events.GenericEventListener.unsubscribe","text":"Unsubscribes the eventCallback method for all events in the given list","title":"unsubscribe()"},{"location":"reference/octoprint/timelapse/","text":"octoprint.timelapse # Timelapse # config_data () # Override this method to return the current timelapse configuration data. The data should have the following form event_subscriptions () # Override this method to subscribe to additional events by returning an array of (event, callback) tuples. Events that are already subscribed PrintStarted - self.onPrintStarted PrintResumed - self.onPrintResumed PrintFailed - self.onPrintDone PrintDone - self.onPrintDone on_print_done ( event , payload ) # Override this to perform additional actions upon the stop of a print job. on_print_resumed ( event , payload ) # Override this to perform additional actions upon the pausing of a print job. on_print_started ( event , payload ) # Override this to perform additional actions upon start of a print job. TimelapseRenderJob # process () # Processes the job.","title":"timelapse"},{"location":"reference/octoprint/timelapse/#octoprinttimelapse","text":"","title":"octoprint.timelapse"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse","text":"","title":"Timelapse"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.config_data","text":"Override this method to return the current timelapse configuration data. The data should have the following form","title":"config_data()"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.event_subscriptions","text":"Override this method to subscribe to additional events by returning an array of (event, callback) tuples. Events that are already subscribed PrintStarted - self.onPrintStarted PrintResumed - self.onPrintResumed PrintFailed - self.onPrintDone PrintDone - self.onPrintDone","title":"event_subscriptions()"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_done","text":"Override this to perform additional actions upon the stop of a print job.","title":"on_print_done()"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_resumed","text":"Override this to perform additional actions upon the pausing of a print job.","title":"on_print_resumed()"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.Timelapse.on_print_started","text":"Override this to perform additional actions upon start of a print job.","title":"on_print_started()"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.TimelapseRenderJob","text":"","title":"TimelapseRenderJob"},{"location":"reference/octoprint/timelapse/#octoprint.timelapse.TimelapseRenderJob.process","text":"Processes the job.","title":"process()"},{"location":"reference/octoprint/users/","text":"octoprint.users #","title":"users"},{"location":"reference/octoprint/users/#octoprintusers","text":"","title":"octoprint.users"},{"location":"reference/octoprint/access/","text":"octoprint.access #","title":"octoprint.access"},{"location":"reference/octoprint/access/#octoprintaccess","text":"","title":"octoprint.access"},{"location":"reference/octoprint/access/groups/","text":"octoprint.access.groups # FilebasedGroupManager # Bases: GroupManager remove_group ( key , save = True , notify = True ) # Removes a Group by key Group # add_permissions_to_group ( permissions ) # Adds a list of permissions to a group add_subgroups_to_group ( subgroups ) # Adds a list of subgroups to a group change_default ( default ) # Changes the default flag of a Group change_description ( description ) # Changes the description of a group remove_permissions_from_group ( permissions ) # Removes a list of permissions from a group remove_subgroups_from_group ( subgroups ) # Removes a list of subgroups from a group","title":"groups"},{"location":"reference/octoprint/access/groups/#octoprintaccessgroups","text":"","title":"octoprint.access.groups"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.FilebasedGroupManager","text":"Bases: GroupManager","title":"FilebasedGroupManager"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.FilebasedGroupManager.remove_group","text":"Removes a Group by key","title":"remove_group()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group","text":"","title":"Group"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.add_permissions_to_group","text":"Adds a list of permissions to a group","title":"add_permissions_to_group()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.add_subgroups_to_group","text":"Adds a list of subgroups to a group","title":"add_subgroups_to_group()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.change_default","text":"Changes the default flag of a Group","title":"change_default()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.change_description","text":"Changes the description of a group","title":"change_description()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.remove_permissions_from_group","text":"Removes a list of permissions from a group","title":"remove_permissions_from_group()"},{"location":"reference/octoprint/access/groups/#octoprint.access.groups.Group.remove_subgroups_from_group","text":"Removes a list of subgroups from a group","title":"remove_subgroups_from_group()"},{"location":"reference/octoprint/access/permissions/","text":"octoprint.access.permissions # OctoPrintPermission # Bases: Permission allows ( identity ) # Whether the identity can access this permission. Overridden from Permission.allows to make sure the Identity provides ALL required needs instead of ANY required need. :param identity: The identity difference ( other ) # Create a new OctoPrintPermission consisting of requirements in this permission and not in the other. union ( other ) # Create a new OctoPrintPermission with the requirements of the union of this and other. :param other: The other permission PluginIdentityContext # Identity context for not initialized Permissions Needed to support @Permissions.PLUGIN_X_Y.require() Will search the permission when needed http_exception = http_exception instance-attribute # The permission of this principal can () # Whether the identity has access to the permission identity () property # The identity of this principal PluginPermissionDecorator # Bases: Permission Decorator Class for not initialized Permissions Needed to support @Permissions.PLUGIN_X_Y.require()","title":"permissions"},{"location":"reference/octoprint/access/permissions/#octoprintaccesspermissions","text":"","title":"octoprint.access.permissions"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission","text":"Bases: Permission","title":"OctoPrintPermission"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.allows","text":"Whether the identity can access this permission. Overridden from Permission.allows to make sure the Identity provides ALL required needs instead of ANY required need. :param identity: The identity","title":"allows()"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.difference","text":"Create a new OctoPrintPermission consisting of requirements in this permission and not in the other.","title":"difference()"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.OctoPrintPermission.union","text":"Create a new OctoPrintPermission with the requirements of the union of this and other. :param other: The other permission","title":"union()"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext","text":"Identity context for not initialized Permissions Needed to support @Permissions.PLUGIN_X_Y.require() Will search the permission when needed","title":"PluginIdentityContext"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.http_exception","text":"The permission of this principal","title":"http_exception"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.can","text":"Whether the identity has access to the permission","title":"can()"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginIdentityContext.identity","text":"The identity of this principal","title":"identity()"},{"location":"reference/octoprint/access/permissions/#octoprint.access.permissions.PluginPermissionDecorator","text":"Bases: Permission Decorator Class for not initialized Permissions Needed to support @Permissions.PLUGIN_X_Y.require()","title":"PluginPermissionDecorator"},{"location":"reference/octoprint/access/users/","text":"octoprint.access.users # User # Bases: UserMixin","title":"users"},{"location":"reference/octoprint/access/users/#octoprintaccessusers","text":"","title":"octoprint.access.users"},{"location":"reference/octoprint/access/users/#octoprint.access.users.User","text":"Bases: UserMixin","title":"User"},{"location":"reference/octoprint/cli/","text":"octoprint.cli # legacy_options = bulk_options ([ hidden_option ( '--host' , type = click . STRING , callback = set_ctx_obj_option ), hidden_option ( '--port' , type = click . INT , callback = set_ctx_obj_option ), hidden_option ( '--logging' , type = click . Path (), callback = set_ctx_obj_option ), hidden_option ( '--debug' , '-d' , is_flag = True , callback = set_ctx_obj_option ), hidden_option ( '--daemon' , type = click . Choice ([ 'start' , 'stop' , 'restart' ]), callback = set_ctx_obj_option ), hidden_option ( '--pid' , type = click . Path (), default = '/tmp/octoprint.pid' , callback = set_ctx_obj_option ), hidden_option ( '--iknowwhatimdoing' , 'allow_root' , is_flag = True , callback = set_ctx_obj_option ), hidden_option ( '--ignore-blacklist' , 'ignore_blacklist' , is_flag = True , callback = set_ctx_obj_option )]) module-attribute # Legacy options available directly on the \"octoprint\" command in earlier versions. Kept available for reasons of backwards compatibility, but hidden from the generated help pages. pass_octoprint_ctx = click . make_pass_decorator ( OctoPrintContext , ensure = True ) module-attribute # Decorator to pass in the :class: OctoPrintContext instance. HiddenOption # Bases: click . Option Custom option sub class with empty help. OctoPrintContext # Custom context wrapping the standard options. bulk_options ( options ) # Utility decorator to decorate a function with a list of click decorators. The provided list of options will be reversed to ensure correct processing order (inverse from what would be intuitive). hidden_option ( * param_decls , ** attrs ) # Attaches a hidden option to the command. All positional arguments are passed as parameter declarations to :class: Option ; all keyword arguments are forwarded unchanged. This is equivalent to creating an :class: Option instance manually and attaching it to the :attr: Command.params list. init_platform_for_cli ( ctx ) # Performs a basic platform initialization for the CLI. Plugin implementations will be initialized, but only with a subset of the usual property injections _identifier and everything else parsed from metadata _logger _connectivity_checker _environment_detector _event_bus _plugin_manager _settings set_ctx_obj_option ( ctx , param , value ) # Helper for setting eager options on the context. standard_options ( hidden = False ) # Decorator to add the standard options shared among all \"octoprint\" commands. If hidden is set to True , the options will be available on the command but not listed in its help page.","title":"octoprint.cli"},{"location":"reference/octoprint/cli/#octoprintcli","text":"","title":"octoprint.cli"},{"location":"reference/octoprint/cli/#octoprint.cli.legacy_options","text":"Legacy options available directly on the \"octoprint\" command in earlier versions. Kept available for reasons of backwards compatibility, but hidden from the generated help pages.","title":"legacy_options"},{"location":"reference/octoprint/cli/#octoprint.cli.pass_octoprint_ctx","text":"Decorator to pass in the :class: OctoPrintContext instance.","title":"pass_octoprint_ctx"},{"location":"reference/octoprint/cli/#octoprint.cli.HiddenOption","text":"Bases: click . Option Custom option sub class with empty help.","title":"HiddenOption"},{"location":"reference/octoprint/cli/#octoprint.cli.OctoPrintContext","text":"Custom context wrapping the standard options.","title":"OctoPrintContext"},{"location":"reference/octoprint/cli/#octoprint.cli.bulk_options","text":"Utility decorator to decorate a function with a list of click decorators. The provided list of options will be reversed to ensure correct processing order (inverse from what would be intuitive).","title":"bulk_options()"},{"location":"reference/octoprint/cli/#octoprint.cli.hidden_option","text":"Attaches a hidden option to the command. All positional arguments are passed as parameter declarations to :class: Option ; all keyword arguments are forwarded unchanged. This is equivalent to creating an :class: Option instance manually and attaching it to the :attr: Command.params list.","title":"hidden_option()"},{"location":"reference/octoprint/cli/#octoprint.cli.init_platform_for_cli","text":"Performs a basic platform initialization for the CLI. Plugin implementations will be initialized, but only with a subset of the usual property injections _identifier and everything else parsed from metadata _logger _connectivity_checker _environment_detector _event_bus _plugin_manager _settings","title":"init_platform_for_cli()"},{"location":"reference/octoprint/cli/#octoprint.cli.set_ctx_obj_option","text":"Helper for setting eager options on the context.","title":"set_ctx_obj_option()"},{"location":"reference/octoprint/cli/#octoprint.cli.standard_options","text":"Decorator to add the standard options shared among all \"octoprint\" commands. If hidden is set to True , the options will be available on the command but not listed in its help page.","title":"standard_options()"},{"location":"reference/octoprint/cli/analysis/","text":"octoprint.cli.analysis # cli () # Analysis tools. gcode_command ( path , speedx , speedy , speedz , offset , maxt , throttle , throttle_lines , g90_extruder , bedz , progress , layers ) # Runs a GCODE file analysis.","title":"analysis"},{"location":"reference/octoprint/cli/analysis/#octoprintclianalysis","text":"","title":"octoprint.cli.analysis"},{"location":"reference/octoprint/cli/analysis/#octoprint.cli.analysis.cli","text":"Analysis tools.","title":"cli()"},{"location":"reference/octoprint/cli/analysis/#octoprint.cli.analysis.gcode_command","text":"Runs a GCODE file analysis.","title":"gcode_command()"},{"location":"reference/octoprint/cli/client/","text":"octoprint.cli.client # client_options = bulk_options ([ click . option ( '--apikey' , '-a' , type = click . STRING ), click . option ( '--host' , '-h' , type = click . STRING ), click . option ( '--port' , '-p' , type = click . INT ), click . option ( '--httpuser' , type = click . STRING ), click . option ( '--httppass' , type = click . STRING ), click . option ( '--https' , is_flag = True ), click . option ( '--prefix' , type = click . STRING )]) module-attribute # Common options to configure an API client. cli ( ctx , apikey , host , port , httpuser , httppass , https , prefix ) # Basic API client. command ( ctx , path , command , str_params , int_params , float_params , bool_params , timeout ) # Sends a JSON command to the specified server path. delete ( ctx , path , timeout ) # Sends a DELETE request to the specified server path. get ( ctx , path , timeout ) # Performs a GET request against the specified server path. patch_json ( ctx , path , data , timeout ) # PATCHes JSON data to the specified server path. post_from_file ( ctx , path , file_path , json_flag , yaml_flag , timeout ) # POSTs JSON data to the specified server path, taking the data from the specified file. post_json ( ctx , path , data , timeout ) # POSTs JSON data to the specified server path. upload ( ctx , path , file_path , params , file_name , content_type , timeout ) # Uploads the specified file to the specified server path.","title":"client"},{"location":"reference/octoprint/cli/client/#octoprintcliclient","text":"","title":"octoprint.cli.client"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.client_options","text":"Common options to configure an API client.","title":"client_options"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.cli","text":"Basic API client.","title":"cli()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.command","text":"Sends a JSON command to the specified server path.","title":"command()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.delete","text":"Sends a DELETE request to the specified server path.","title":"delete()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.get","text":"Performs a GET request against the specified server path.","title":"get()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.patch_json","text":"PATCHes JSON data to the specified server path.","title":"patch_json()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.post_from_file","text":"POSTs JSON data to the specified server path, taking the data from the specified file.","title":"post_from_file()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.post_json","text":"POSTs JSON data to the specified server path.","title":"post_json()"},{"location":"reference/octoprint/cli/client/#octoprint.cli.client.upload","text":"Uploads the specified file to the specified server path.","title":"upload()"},{"location":"reference/octoprint/cli/common/","text":"octoprint.cli.common # LazyGroup # Bases: click . Group A click Group that imports the actual implementation only when needed. This allows for more resilient CLIs where the top-level command does not fail when a subcommand is broken enough to fail at import time.","title":"common"},{"location":"reference/octoprint/cli/common/#octoprintclicommon","text":"","title":"octoprint.cli.common"},{"location":"reference/octoprint/cli/common/#octoprint.cli.common.LazyGroup","text":"Bases: click . Group A click Group that imports the actual implementation only when needed. This allows for more resilient CLIs where the top-level command does not fail when a subcommand is broken enough to fail at import time.","title":"LazyGroup"},{"location":"reference/octoprint/cli/config/","text":"octoprint.cli.config # append_value_command ( ctx , path , value , as_json = False ) # Appends value to list behind config path. cli ( ctx ) # Basic config manipulation. effective_command ( ctx , as_json = False , as_yaml = False , as_raw = False ) # Retrieves the full effective config. get_command ( ctx , path , as_json = False , as_yaml = False , as_raw = False ) # Retrieves value from config path. insert_value_command ( ctx , path , index , value , as_json = False ) # Inserts value at index of list behind config key. remove_command ( ctx , path ) # Removes a config path. remove_value_command ( ctx , path , value , as_json = False ) # Removes value from list at config path. set_command ( ctx , path , value , as_bool , as_float , as_int , as_json ) # Sets a config path to the provided value.","title":"config"},{"location":"reference/octoprint/cli/config/#octoprintcliconfig","text":"","title":"octoprint.cli.config"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.append_value_command","text":"Appends value to list behind config path.","title":"append_value_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.cli","text":"Basic config manipulation.","title":"cli()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.effective_command","text":"Retrieves the full effective config.","title":"effective_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.get_command","text":"Retrieves value from config path.","title":"get_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.insert_value_command","text":"Inserts value at index of list behind config key.","title":"insert_value_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.remove_command","text":"Removes a config path.","title":"remove_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.remove_value_command","text":"Removes value from list at config path.","title":"remove_value_command()"},{"location":"reference/octoprint/cli/config/#octoprint.cli.config.set_command","text":"Sets a config path to the provided value.","title":"set_command()"},{"location":"reference/octoprint/cli/dev/","text":"octoprint.cli.dev # OctoPrintDevelCommands # Bases: click . MultiCommand Custom click.MultiCommand <http://click.pocoo.org/5/api/#click.MultiCommand> _ implementation that provides commands relevant for (plugin) development based on availability of development dependencies. cli () # Additional commands for development tasks.","title":"dev"},{"location":"reference/octoprint/cli/dev/#octoprintclidev","text":"","title":"octoprint.cli.dev"},{"location":"reference/octoprint/cli/dev/#octoprint.cli.dev.OctoPrintDevelCommands","text":"Bases: click . MultiCommand Custom click.MultiCommand <http://click.pocoo.org/5/api/#click.MultiCommand> _ implementation that provides commands relevant for (plugin) development based on availability of development dependencies.","title":"OctoPrintDevelCommands"},{"location":"reference/octoprint/cli/dev/#octoprint.cli.dev.cli","text":"Additional commands for development tasks.","title":"cli()"},{"location":"reference/octoprint/cli/plugins/","text":"octoprint.cli.plugins # OctoPrintPluginCommands # Bases: click . MultiCommand Custom click.MultiCommand <http://click.pocoo.org/5/api/#click.MultiCommand> _ implementation that collects commands from the plugin hook :ref: octoprint.cli.commands <sec-plugins-hook-cli-commands> . .. attribute:: settings The global :class: ~octoprint.settings.Settings instance. .. attribute:: plugin_manager The :class: ~octoprint.plugin.core.PluginManager instance. cli ( obj ) # Additional commands provided by plugins.","title":"plugins"},{"location":"reference/octoprint/cli/plugins/#octoprintcliplugins","text":"","title":"octoprint.cli.plugins"},{"location":"reference/octoprint/cli/plugins/#octoprint.cli.plugins.OctoPrintPluginCommands","text":"Bases: click . MultiCommand Custom click.MultiCommand <http://click.pocoo.org/5/api/#click.MultiCommand> _ implementation that collects commands from the plugin hook :ref: octoprint.cli.commands <sec-plugins-hook-cli-commands> . .. attribute:: settings The global :class: ~octoprint.settings.Settings instance. .. attribute:: plugin_manager The :class: ~octoprint.plugin.core.PluginManager instance.","title":"OctoPrintPluginCommands"},{"location":"reference/octoprint/cli/plugins/#octoprint.cli.plugins.cli","text":"Additional commands provided by plugins.","title":"cli()"},{"location":"reference/octoprint/cli/server/","text":"octoprint.cli.server # daemon_options = bulk_options ([ click . option ( '--pid' , type = click . Path (), default = '/tmp/octoprint.pid' , callback = set_ctx_obj_option , help = 'Pidfile to use for daemonizing.' )]) module-attribute # Decorator to add the options for the daemon subcommand: --pid . server_options = bulk_options ([ click . option ( '--host' , type = click . STRING , callback = set_ctx_obj_option , help = 'Specify the host address on which to bind the server.' ), click . option ( '--port' , type = click . INT , callback = set_ctx_obj_option , help = 'Specify the port on which to bind the server.' ), click . option ( '-4' , '--ipv4' , 'v4' , is_flag = True , callback = set_ctx_obj_option , help = \"Bind to IPv4 addresses only. Implies '--host 0.0.0.0'. Silently ignored if -6 is present.\" ), click . option ( '-6' , '--ipv6' , 'v6' , is_flag = True , callback = set_ctx_obj_option , help = 'Bind to IPv6 addresses only. Disables dual stack when binding to any v6 addresses. Silently ignored if -4 is present.' ), click . option ( '--logging' , type = click . Path (), callback = set_ctx_obj_option , help = 'Specify the config file to use for configuring logging.' ), click . option ( '--iknowwhatimdoing' , 'allow_root' , is_flag = True , callback = set_ctx_obj_option , help = 'Allow OctoPrint to run as user root.' ), click . option ( '--debug' , is_flag = True , callback = set_ctx_obj_option , help = 'Enable debug mode.' ), click . option ( '--ignore-blacklist' , 'ignore_blacklist' , is_flag = True , callback = set_ctx_obj_option , help = 'Disable processing of the plugin blacklist.' )]) module-attribute # Decorator to add the options shared among the server commands: --host , --port , -4 , -6 --logging , --iknowwhatimdoing and --debug . daemon_command ( ctx , command , ** kwargs ) # Starts, stops or restarts in daemon mode. Please note that daemon mode is not supported under Windows and MacOSX right now. enable_safemode ( ctx , ** kwargs ) # Sets the safe mode flag for the next start. run_server ( basedir , configfile , host , port , v6_only , debug , allow_root , logging_config , verbosity , safe_mode , ignore_blacklist , octoprint_daemon = None , overlays = None , disable_color = False ) # Initializes the environment and starts up the server. serve_command ( ctx , ** kwargs ) # Starts the OctoPrint server.","title":"server"},{"location":"reference/octoprint/cli/server/#octoprintcliserver","text":"","title":"octoprint.cli.server"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.daemon_options","text":"Decorator to add the options for the daemon subcommand: --pid .","title":"daemon_options"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.server_options","text":"Decorator to add the options shared among the server commands: --host , --port , -4 , -6 --logging , --iknowwhatimdoing and --debug .","title":"server_options"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.daemon_command","text":"Starts, stops or restarts in daemon mode. Please note that daemon mode is not supported under Windows and MacOSX right now.","title":"daemon_command()"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.enable_safemode","text":"Sets the safe mode flag for the next start.","title":"enable_safemode()"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.run_server","text":"Initializes the environment and starts up the server.","title":"run_server()"},{"location":"reference/octoprint/cli/server/#octoprint.cli.server.serve_command","text":"Starts the OctoPrint server.","title":"serve_command()"},{"location":"reference/octoprint/cli/systeminfo/","text":"octoprint.cli.systeminfo # systeminfo_command ( ctx , path , ** kwargs ) # Retrieves and prints the system info.","title":"systeminfo"},{"location":"reference/octoprint/cli/systeminfo/#octoprintclisysteminfo","text":"","title":"octoprint.cli.systeminfo"},{"location":"reference/octoprint/cli/systeminfo/#octoprint.cli.systeminfo.systeminfo_command","text":"Retrieves and prints the system info.","title":"systeminfo_command()"},{"location":"reference/octoprint/cli/timelapse/","text":"octoprint.cli.timelapse # cli ( ctx ) # Basic config manipulation. extract_thumbnails ( ctx , missing , processes , paths ) # Extract missing thumbnails from timelapses.","title":"timelapse"},{"location":"reference/octoprint/cli/timelapse/#octoprintclitimelapse","text":"","title":"octoprint.cli.timelapse"},{"location":"reference/octoprint/cli/timelapse/#octoprint.cli.timelapse.cli","text":"Basic config manipulation.","title":"cli()"},{"location":"reference/octoprint/cli/timelapse/#octoprint.cli.timelapse.extract_thumbnails","text":"Extract missing thumbnails from timelapses.","title":"extract_thumbnails()"},{"location":"reference/octoprint/cli/user/","text":"octoprint.cli.user # activate_command ( ctx , username ) # Activate a user account. add_user_command ( ctx , username , password , groups , permissions , is_admin ) # Add a new user. change_password_command ( ctx , username , password ) # Change an existing user's password. cli ( ctx ) # User management. Note that this currently only supports managing user accounts stored in the configured user manager, not any user managers added through plugins and the \"octoprint.users.factory\" hook. deactivate_command ( ctx , username ) # Activate a user account. list_users_command ( ctx ) # Lists user information remove_user_command ( ctx , username ) # Remove an existing user.","title":"user"},{"location":"reference/octoprint/cli/user/#octoprintcliuser","text":"","title":"octoprint.cli.user"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.activate_command","text":"Activate a user account.","title":"activate_command()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.add_user_command","text":"Add a new user.","title":"add_user_command()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.change_password_command","text":"Change an existing user's password.","title":"change_password_command()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.cli","text":"User management. Note that this currently only supports managing user accounts stored in the configured user manager, not any user managers added through plugins and the \"octoprint.users.factory\" hook.","title":"cli()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.deactivate_command","text":"Activate a user account.","title":"deactivate_command()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.list_users_command","text":"Lists user information","title":"list_users_command()"},{"location":"reference/octoprint/cli/user/#octoprint.cli.user.remove_user_command","text":"Remove an existing user.","title":"remove_user_command()"},{"location":"reference/octoprint/filemanager/","text":"octoprint.filemanager #","title":"octoprint.filemanager"},{"location":"reference/octoprint/filemanager/#octoprintfilemanager","text":"","title":"octoprint.filemanager"},{"location":"reference/octoprint/filemanager/analysis/","text":"octoprint.filemanager.analysis # AbstractAnalysisQueue # The :class: AbstractAnalysisQueue is the parent class of all specific analysis queues such as the :class: GcodeAnalysisQueue . It offers methods to enqueue new entries to analyze and pausing and resuming analysis processing. Parameters: Name Type Description Default finished_callback callable Callback that will be called upon finishing analysis of an entry in the queue. The callback will be called with the analyzed entry as the first argument and the analysis result as returned from the queue implementation as the second parameter. required .. automethod:: _do_analysis .. automethod:: _do_abort enqueue ( entry , high_priority = False ) # Enqueues an entry for analysis by the queue. If high_priority is True (defaults to False), the entry will be prioritized and hence processed before other entries in the queue with normal priority. Parameters: Name Type Description Default entry QueueEntry The :class: QueueEntry to analyze. required high_priority boolean Whether to process the provided entry with high priority (True) or not (False, default) False pause () # Pauses processing of the queue, e.g. when a print is active. resume () # Resumes processing of the queue, e.g. when a print has finished. AnalysisQueue # OctoPrint's :class: AnalysisQueue can manage various :class: AbstractAnalysisQueue implementations, mapped by their machine code type. By invoking :meth: register_finish_callback it is possible to register oneself as a callback to be invoked each time the analysis of a queue entry finishes. The call parameters will be the finished queue entry as the first and the analysis result as the second parameter. It is also possible to remove the registration again by invoking :meth: unregister_finish_callback . :meth: enqueue allows enqueuing :class: QueueEntry instances to analyze. If the :attr: QueueEntry.type is unknown (no specific child class of :class: AbstractAnalysisQueue is registered for it), nothing will happen. Otherwise the entry will be enqueued with the type specific analysis queue. GcodeAnalysisQueue # Bases: AbstractAnalysisQueue A queue to analyze GCODE files. Analysis results are :class: dict instances structured as follows: .. list-table:: :widths: 25 70 Key Description estimatedPrintTime Estimated time the file take to print, in seconds filament Substructure describing estimated filament usage. Keys are tool0 for the first extruder, tool1 for the second and so on. For each tool extruded length and volume (based on diameter) are provided. filament.toolX.length The extruded length in mm filament.toolX.volume The extruded volume in cm\u00b3 printingArea Bounding box of the printed object in the print volume (minimum and maximum coordinates) printingArea.minX Minimum X coordinate of the printed object printingArea.maxX Maximum X coordinate of the printed object printingArea.minY Minimum Y coordinate of the printed object printingArea.maxY Maximum Y coordinate of the printed object printingArea.minZ Minimum Z coordinate of the printed object printingArea.maxZ Maximum Z coordinate of the printed object dimensions Dimensions of the printed object in X, Y, Z dimensions.width Width of the printed model along the X axis, in mm dimensions.depth Depth of the printed model along the Y axis, in mm dimensions.height Height of the printed model along the Z axis, in mm travelArea Bounding box of all machine movements (minimum and maximum coordinates) travelArea.minX Minimum X coordinate of the machine movement travelArea.maxX Maximum X coordinate of the machine movement travelArea.minY Minimum Y coordinate of the machine movement travelArea.maxY Maximum Y coordinate of the machine movement travelArea.minZ Minimum Z coordinate of the machine movement travelArea.maxZ Maximum Z coordinate of the machine movement travelDimensions Dimensions of the travel area in X, Y, Z travelDimensions.width Width of the travel area along the X axis, in mm travelDimensions.depth Depth of the travel area along the Y axis, in mm travelDimensions.height Height of the travel area along the Z axis, in mm QueueEntry # Bases: collections . namedtuple ('QueueEntry', 'name, path, type, location, absolute_path, printer_profile, analysis') A :class: QueueEntry for processing through the :class: AnalysisQueue . Wraps the entry's properties necessary for processing. Parameters: Name Type Description Default name str Name of the file to analyze. required path str Storage location specific path to the file to analyze. required type str Type of file to analyze, necessary to map to the correct :class: AbstractAnalysisQueue sub class. At the moment, only gcode is supported here. required location str Location the file is located on. required absolute_path str Absolute path on disk through which to access the file. required printer_profile PrinterProfile :class: PrinterProfile which to use for analysis. required analysis dict :class: GcodeAnalysisQueue results from prior analysis, or None if there is none. required","title":"analysis"},{"location":"reference/octoprint/filemanager/analysis/#octoprintfilemanageranalysis","text":"","title":"octoprint.filemanager.analysis"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue","text":"The :class: AbstractAnalysisQueue is the parent class of all specific analysis queues such as the :class: GcodeAnalysisQueue . It offers methods to enqueue new entries to analyze and pausing and resuming analysis processing. Parameters: Name Type Description Default finished_callback callable Callback that will be called upon finishing analysis of an entry in the queue. The callback will be called with the analyzed entry as the first argument and the analysis result as returned from the queue implementation as the second parameter. required .. automethod:: _do_analysis .. automethod:: _do_abort","title":"AbstractAnalysisQueue"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.enqueue","text":"Enqueues an entry for analysis by the queue. If high_priority is True (defaults to False), the entry will be prioritized and hence processed before other entries in the queue with normal priority. Parameters: Name Type Description Default entry QueueEntry The :class: QueueEntry to analyze. required high_priority boolean Whether to process the provided entry with high priority (True) or not (False, default) False","title":"enqueue()"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.pause","text":"Pauses processing of the queue, e.g. when a print is active.","title":"pause()"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AbstractAnalysisQueue.resume","text":"Resumes processing of the queue, e.g. when a print has finished.","title":"resume()"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.AnalysisQueue","text":"OctoPrint's :class: AnalysisQueue can manage various :class: AbstractAnalysisQueue implementations, mapped by their machine code type. By invoking :meth: register_finish_callback it is possible to register oneself as a callback to be invoked each time the analysis of a queue entry finishes. The call parameters will be the finished queue entry as the first and the analysis result as the second parameter. It is also possible to remove the registration again by invoking :meth: unregister_finish_callback . :meth: enqueue allows enqueuing :class: QueueEntry instances to analyze. If the :attr: QueueEntry.type is unknown (no specific child class of :class: AbstractAnalysisQueue is registered for it), nothing will happen. Otherwise the entry will be enqueued with the type specific analysis queue.","title":"AnalysisQueue"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.GcodeAnalysisQueue","text":"Bases: AbstractAnalysisQueue A queue to analyze GCODE files. Analysis results are :class: dict instances structured as follows: .. list-table:: :widths: 25 70 Key Description estimatedPrintTime Estimated time the file take to print, in seconds filament Substructure describing estimated filament usage. Keys are tool0 for the first extruder, tool1 for the second and so on. For each tool extruded length and volume (based on diameter) are provided. filament.toolX.length The extruded length in mm filament.toolX.volume The extruded volume in cm\u00b3 printingArea Bounding box of the printed object in the print volume (minimum and maximum coordinates) printingArea.minX Minimum X coordinate of the printed object printingArea.maxX Maximum X coordinate of the printed object printingArea.minY Minimum Y coordinate of the printed object printingArea.maxY Maximum Y coordinate of the printed object printingArea.minZ Minimum Z coordinate of the printed object printingArea.maxZ Maximum Z coordinate of the printed object dimensions Dimensions of the printed object in X, Y, Z dimensions.width Width of the printed model along the X axis, in mm dimensions.depth Depth of the printed model along the Y axis, in mm dimensions.height Height of the printed model along the Z axis, in mm travelArea Bounding box of all machine movements (minimum and maximum coordinates) travelArea.minX Minimum X coordinate of the machine movement travelArea.maxX Maximum X coordinate of the machine movement travelArea.minY Minimum Y coordinate of the machine movement travelArea.maxY Maximum Y coordinate of the machine movement travelArea.minZ Minimum Z coordinate of the machine movement travelArea.maxZ Maximum Z coordinate of the machine movement travelDimensions Dimensions of the travel area in X, Y, Z travelDimensions.width Width of the travel area along the X axis, in mm travelDimensions.depth Depth of the travel area along the Y axis, in mm travelDimensions.height Height of the travel area along the Z axis, in mm","title":"GcodeAnalysisQueue"},{"location":"reference/octoprint/filemanager/analysis/#octoprint.filemanager.analysis.QueueEntry","text":"Bases: collections . namedtuple ('QueueEntry', 'name, path, type, location, absolute_path, printer_profile, analysis') A :class: QueueEntry for processing through the :class: AnalysisQueue . Wraps the entry's properties necessary for processing. Parameters: Name Type Description Default name str Name of the file to analyze. required path str Storage location specific path to the file to analyze. required type str Type of file to analyze, necessary to map to the correct :class: AbstractAnalysisQueue sub class. At the moment, only gcode is supported here. required location str Location the file is located on. required absolute_path str Absolute path on disk through which to access the file. required printer_profile PrinterProfile :class: PrinterProfile which to use for analysis. required analysis dict :class: GcodeAnalysisQueue results from prior analysis, or None if there is none. required","title":"QueueEntry"},{"location":"reference/octoprint/filemanager/destinations/","text":"octoprint.filemanager.destinations #","title":"destinations"},{"location":"reference/octoprint/filemanager/destinations/#octoprintfilemanagerdestinations","text":"","title":"octoprint.filemanager.destinations"},{"location":"reference/octoprint/filemanager/storage/","text":"octoprint.filemanager.storage # LocalFileStorage # Bases: StorageInterface The LocalFileStorage is a storage implementation which holds all files, folders and metadata on disk. Metadata is managed inside .metadata.json files in the respective folders, indexed by the sanitized filenames stored within the folder. Metadata access is managed through an LRU cache to minimize access overhead. This storage type implements :func: path_on_disk . __init__ ( basefolder , create = False , really_universal = False ) # Initializes a LocalFileStorage instance under the given basefolder , creating the necessary folder if necessary and create is set to True . :param string basefolder: the path to the folder under which to create the storage :param bool create: True if the folder should be created if it doesn't exist yet, False otherwise :param bool really_universal: True if the file names should be forced to really universal, False otherwise sanitize ( path ) # Returns a (path, name) tuple derived from the provided path . path may be: * a storage path * an absolute file system path * a tuple or list containing all individual path elements * a string representation of the path * with or without a file name Note that for a path without a trailing slash the last part will be considered a file name and hence be returned at second position. If you only need to convert a folder path, be sure to include a trailing slash for a string path or an empty last element for a list path . sanitize_name ( name ) # Raises a :class: ValueError for a name containing / or \\ . Otherwise sanitizes the given name using octoprint.files.sanitize_filename . Also strips any leading . . sanitize_path ( path ) # Ensures that the on disk representation of path is located under the configured basefolder. Resolves all relative path elements (e.g. .. ) and sanitizes folder names using :func: sanitize_name . Final path is the absolute path including leading basefolder path. StorageInterface # Interface of storage adapters for OctoPrint. add_file ( path , file_object , printer_profile = None , links = None , allow_overwrite = False , display = None ) # Adds the file file_object as path :param string path: the file's new path, will be sanitized :param object file_object: a file object that provides a save method which will be called with the destination path where the object should then store its contents :param object printer_profile: the printer profile associated with this file (if any) :param list links: any links to add with the file :param bool allow_overwrite: if set to True no error will be raised if the file already exists and the existing file and its metadata will just be silently overwritten :param str display: display name of the file :return: the sanitized name of the file to be used for future references to it add_folder ( path , ignore_existing = True , display = None ) # Adds a folder as path The path will be sanitized. :param string path: the path of the new folder :param bool ignore_existing: if set to True, no error will be raised if the folder to be added already exists :param str display: display name of the folder :return: the sanitized name of the new folder to be used for future references to the folder add_link ( path , rel , data ) # Adds a link of relation rel to file path with the given data . The following relation types are currently supported model : adds a link to a model from which the file was created/sliced, expected additional data is the name and optionally the hash of the file to link to. If the link can be resolved against another file on the current path , not only will it be added to the links of name but a reverse link of type machinecode referring to name and its hash will also be added to the linked model file machinecode : adds a link to a file containing machine code created from the current file (model), expected additional data is the name and optionally the hash of the file to link to. If the link can be resolved against another file on the current path , not only will it be added to the links of name but a reverse link of type model referring to name and its hash will also be added to the linked model file. web : adds a location on the web associated with this file (e.g. a website where to download a model), expected additional data is a href attribute holding the website's URL and optionally a retrieved attribute describing when the content was retrieved Note that adding model links to files identifying as models or machinecode links to files identifying as machine code will be refused. :param path: path of the file for which to add a link :param rel: type of relation of the link to add (currently model , machinecode and web are supported) :param data: additional data of the link to add analysis_backlog () property # Get an iterator over all items stored in the storage that need to be analysed by the :class: ~octoprint.filemanager.AnalysisQueue . The yielded elements are expected as storage specific absolute paths to the respective files. Don't forget to recurse into folders if your storage adapter supports those. :return: an iterator yielding all un-analysed files in the storage canonicalize ( path ) # Canonicalizes the given path . The path may consist of both folder and file name, the underlying implementation must separate those if necessary. By default, this calls :func: ~octoprint.filemanager.StorageInterface.sanitize , which also takes care of stripping any invalid characters. Parameters: Name Type Description Default path the path to canonicalize required Returns: Type Description a 2-tuple containing the canonicalized path and file name copy_file ( source , destination ) # Copies the file source to destination :param string source: path to the source file :param string destination: path to destination :return: the path in the storage to the copy of the file copy_folder ( source , destination ) # Copies the folder source to destination :param string source: path to the source folder :param string destination: path to destination :return: the path in the storage to the copy of the folder file_exists ( path ) # Returns whether the file indicated by path exists or not. :param string path: the path to check for existence :return: True if the file exists, False otherwise file_in_path ( path , filepath ) # Returns whether the file indicated by file is inside path or not. :param string path: the path to check :param string filepath: path to the file :return: True if the file is inside the path, False otherwise folder_exists ( path ) # Returns whether the folder indicated by path exists or not. :param string path: the path to check for existence :return: True if the folder exists, False otherwise get_additional_metadata ( path , key ) # Fetches additional metadata at key from the metadata of path . :param path: the virtual path to the file for which to fetch additional metadata :param key: key of metadata to fetch get_metadata ( path ) # Retrieves the metadata for the file path . :param path: virtual path to the file for which to retrieve the metadata :return: the metadata associated with the file has_analysis ( path ) # Returns whether the file at path has been analysed yet :param path: virtual path to the file for which to retrieve the metadata join_path ( * path ) # Join path elements together :param path: path elements to join :return: joined representation of the path to be usable as fully qualified path for further operations last_modified ( path = None , recursive = False ) # Get the last modification date of the specified path or path 's subtree. Parameters: Name Type Description Default path str or None Path for which to determine the subtree's last modification date. If left out or set to None, defatuls to storage root. None recursive bool Whether to determine only the date of the specified path (False, default) or the whole path 's subtree (True). False list_files ( path = None , filter = None , recursive = True , level = 0 , force_refresh = False ) # List all files in storage starting at path . If recursive is set to True (the default), also dives into subfolders. An optional filter function can be supplied which will be called with a file name and file data and which has to return True if the file is to be included in the result or False if not. The data structure of the returned result will be a dictionary mapping from file names to entry data. File nodes will contain their metadata here, folder nodes will contain their contained files and folders. Example:: { \"some_folder\": { \"name\": \"some_folder\", \"path\": \"some_folder\", \"type\": \"folder\", \"children\": { \"some_sub_folder\": { \"name\": \"some_sub_folder\", \"path\": \"some_folder/some_sub_folder\", \"type\": \"folder\", \"typePath\": [\"folder\"], \"children\": { ... } }, \"some_file.gcode\": { \"name\": \"some_file.gcode\", \"path\": \"some_folder/some_file.gcode\", \"type\": \"machinecode\", \"typePath\": [\"machinecode\", \"gcode\"], \"hash\": \" \", \"links\": [ ... ], ... }, ... } \"test.gcode\": { \"name\": \"test.gcode\", \"path\": \"test.gcode\", \"type\": \"machinecode\", \"typePath\": [\"machinecode\", \"gcode\"], \"hash\": \" \", \"links\": [...], ... }, \"test.stl\": { \"name\": \"test.stl\", \"path\": \"test.stl\", \"type\": \"model\", \"typePath\": [\"model\", \"stl\"], \"hash\": \" \", \"links\": [...], ... }, ... } :param string path: base path from which to recursively list all files, optional, if not supplied listing will start from root of base folder :param function filter: a filter that matches the files that are to be returned, may be left out in which case no filtering will take place :param bool recursive: will also step into sub folders for building the complete list if set to True, otherwise will only do one step down into sub folders to be able to populate the children . :return: a dictionary mapping entry names to entry data that represents the whole file list move_file ( source , destination ) # Moves the file source to destination :param string source: path to the source file :param string destination: path to destination :return: the new path in the storage to the file move_folder ( source , destination ) # Moves the folder source to destination :param string source: path to the source folder :param string destination: path to destination :return: the new path in the storage to the folder path_in_storage ( path ) # Retrieves the equivalent in the storage adapter for path . Opposite of :func: path_on_disk . :param string path: the path for which to retrieve the storage path :return: the path in storage to path path_on_disk ( path ) # Retrieves the path on disk for path . Note: if the storage is not on disk and there exists no path on disk to refer to it, this method should raise an :class: io.UnsupportedOperation Opposite of :func: path_in_storage . :param string path: the virtual path for which to retrieve the path on disk :return: the path on disk to path remove_additional_metadata ( path , key ) # Removes additional metadata under key for name on path :param path: the virtual path to the file for which to remove the metadata under key :param key: the key to remove remove_file ( path ) # Removes the file at path Will also take care of deleting the corresponding entries in the metadata and deleting all links pointing to the file. :param string path: path of the file to remove remove_folder ( path , recursive = True ) # Removes the folder at path :param string path: the path of the folder to remove :param bool recursive: if set to True, contained folders and files will also be removed, otherwise an error will be raised if the folder is not empty (apart from any metadata files) when it's to be removed remove_link ( path , rel , data ) # Removes the link consisting of rel and data from file name on path . :param path: path of the file from which to remove the link :param rel: type of relation of the link to remove (currently model , machinecode and web are supported) :param data: additional data of the link to remove, must match existing link sanitize ( path ) # Sanitizes the given path , stripping it of all invalid characters. The path may consist of both folder and file name, the underlying implementation must separate those if necessary and sanitize individually. :param string path: the path to sanitize :return: a 2-tuple containing the sanitized path and file name sanitize_name ( name ) # Sanitizes the given file name , stripping it of all invalid characters. :param string name: the file name to sanitize :return: the sanitized name sanitize_path ( path ) # Sanitizes the given folder-only path , stripping it of all invalid characters. :param string path: the path to sanitize :return: the sanitized path set_additional_metadata ( path , key , data , overwrite = False , merge = False ) # Adds additional metadata to the metadata of path . Metadata in data will be saved under key . If overwrite is set and key already exists in name 's metadata, the current value will be overwritten. If merge is set and key already exists and both data and the existing data under key are dictionaries, the two dictionaries will be merged recursively. :param path: the virtual path to the file for which to add additional metadata :param key: key of metadata to add :param data: metadata to add :param overwrite: if True and key already exists, it will be overwritten :param merge: if True and key already exists and both data and the existing data are dictionaries, they will be merged split_path ( path ) # Split path into base directory and file name. :param path: the path to split :return: a tuple (base directory, file name)","title":"storage"},{"location":"reference/octoprint/filemanager/storage/#octoprintfilemanagerstorage","text":"","title":"octoprint.filemanager.storage"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage","text":"Bases: StorageInterface The LocalFileStorage is a storage implementation which holds all files, folders and metadata on disk. Metadata is managed inside .metadata.json files in the respective folders, indexed by the sanitized filenames stored within the folder. Metadata access is managed through an LRU cache to minimize access overhead. This storage type implements :func: path_on_disk .","title":"LocalFileStorage"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.__init__","text":"Initializes a LocalFileStorage instance under the given basefolder , creating the necessary folder if necessary and create is set to True . :param string basefolder: the path to the folder under which to create the storage :param bool create: True if the folder should be created if it doesn't exist yet, False otherwise :param bool really_universal: True if the file names should be forced to really universal, False otherwise","title":"__init__()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize","text":"Returns a (path, name) tuple derived from the provided path . path may be: * a storage path * an absolute file system path * a tuple or list containing all individual path elements * a string representation of the path * with or without a file name Note that for a path without a trailing slash the last part will be considered a file name and hence be returned at second position. If you only need to convert a folder path, be sure to include a trailing slash for a string path or an empty last element for a list path .","title":"sanitize()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize_name","text":"Raises a :class: ValueError for a name containing / or \\ . Otherwise sanitizes the given name using octoprint.files.sanitize_filename . Also strips any leading . .","title":"sanitize_name()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.LocalFileStorage.sanitize_path","text":"Ensures that the on disk representation of path is located under the configured basefolder. Resolves all relative path elements (e.g. .. ) and sanitizes folder names using :func: sanitize_name . Final path is the absolute path including leading basefolder path.","title":"sanitize_path()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface","text":"Interface of storage adapters for OctoPrint.","title":"StorageInterface"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_file","text":"Adds the file file_object as path :param string path: the file's new path, will be sanitized :param object file_object: a file object that provides a save method which will be called with the destination path where the object should then store its contents :param object printer_profile: the printer profile associated with this file (if any) :param list links: any links to add with the file :param bool allow_overwrite: if set to True no error will be raised if the file already exists and the existing file and its metadata will just be silently overwritten :param str display: display name of the file :return: the sanitized name of the file to be used for future references to it","title":"add_file()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_folder","text":"Adds a folder as path The path will be sanitized. :param string path: the path of the new folder :param bool ignore_existing: if set to True, no error will be raised if the folder to be added already exists :param str display: display name of the folder :return: the sanitized name of the new folder to be used for future references to the folder","title":"add_folder()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.add_link","text":"Adds a link of relation rel to file path with the given data . The following relation types are currently supported model : adds a link to a model from which the file was created/sliced, expected additional data is the name and optionally the hash of the file to link to. If the link can be resolved against another file on the current path , not only will it be added to the links of name but a reverse link of type machinecode referring to name and its hash will also be added to the linked model file machinecode : adds a link to a file containing machine code created from the current file (model), expected additional data is the name and optionally the hash of the file to link to. If the link can be resolved against another file on the current path , not only will it be added to the links of name but a reverse link of type model referring to name and its hash will also be added to the linked model file. web : adds a location on the web associated with this file (e.g. a website where to download a model), expected additional data is a href attribute holding the website's URL and optionally a retrieved attribute describing when the content was retrieved Note that adding model links to files identifying as models or machinecode links to files identifying as machine code will be refused. :param path: path of the file for which to add a link :param rel: type of relation of the link to add (currently model , machinecode and web are supported) :param data: additional data of the link to add","title":"add_link()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.analysis_backlog","text":"Get an iterator over all items stored in the storage that need to be analysed by the :class: ~octoprint.filemanager.AnalysisQueue . The yielded elements are expected as storage specific absolute paths to the respective files. Don't forget to recurse into folders if your storage adapter supports those. :return: an iterator yielding all un-analysed files in the storage","title":"analysis_backlog()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.canonicalize","text":"Canonicalizes the given path . The path may consist of both folder and file name, the underlying implementation must separate those if necessary. By default, this calls :func: ~octoprint.filemanager.StorageInterface.sanitize , which also takes care of stripping any invalid characters. Parameters: Name Type Description Default path the path to canonicalize required Returns: Type Description a 2-tuple containing the canonicalized path and file name","title":"canonicalize()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.copy_file","text":"Copies the file source to destination :param string source: path to the source file :param string destination: path to destination :return: the path in the storage to the copy of the file","title":"copy_file()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.copy_folder","text":"Copies the folder source to destination :param string source: path to the source folder :param string destination: path to destination :return: the path in the storage to the copy of the folder","title":"copy_folder()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.file_exists","text":"Returns whether the file indicated by path exists or not. :param string path: the path to check for existence :return: True if the file exists, False otherwise","title":"file_exists()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.file_in_path","text":"Returns whether the file indicated by file is inside path or not. :param string path: the path to check :param string filepath: path to the file :return: True if the file is inside the path, False otherwise","title":"file_in_path()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.folder_exists","text":"Returns whether the folder indicated by path exists or not. :param string path: the path to check for existence :return: True if the folder exists, False otherwise","title":"folder_exists()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.get_additional_metadata","text":"Fetches additional metadata at key from the metadata of path . :param path: the virtual path to the file for which to fetch additional metadata :param key: key of metadata to fetch","title":"get_additional_metadata()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.get_metadata","text":"Retrieves the metadata for the file path . :param path: virtual path to the file for which to retrieve the metadata :return: the metadata associated with the file","title":"get_metadata()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.has_analysis","text":"Returns whether the file at path has been analysed yet :param path: virtual path to the file for which to retrieve the metadata","title":"has_analysis()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.join_path","text":"Join path elements together :param path: path elements to join :return: joined representation of the path to be usable as fully qualified path for further operations","title":"join_path()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.last_modified","text":"Get the last modification date of the specified path or path 's subtree. Parameters: Name Type Description Default path str or None Path for which to determine the subtree's last modification date. If left out or set to None, defatuls to storage root. None recursive bool Whether to determine only the date of the specified path (False, default) or the whole path 's subtree (True). False","title":"last_modified()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.list_files","text":"List all files in storage starting at path . If recursive is set to True (the default), also dives into subfolders. An optional filter function can be supplied which will be called with a file name and file data and which has to return True if the file is to be included in the result or False if not. The data structure of the returned result will be a dictionary mapping from file names to entry data. File nodes will contain their metadata here, folder nodes will contain their contained files and folders. Example:: { \"some_folder\": { \"name\": \"some_folder\", \"path\": \"some_folder\", \"type\": \"folder\", \"children\": { \"some_sub_folder\": { \"name\": \"some_sub_folder\", \"path\": \"some_folder/some_sub_folder\", \"type\": \"folder\", \"typePath\": [\"folder\"], \"children\": { ... } }, \"some_file.gcode\": { \"name\": \"some_file.gcode\", \"path\": \"some_folder/some_file.gcode\", \"type\": \"machinecode\", \"typePath\": [\"machinecode\", \"gcode\"], \"hash\": \" \", \"links\": [ ... ], ... }, ... } \"test.gcode\": { \"name\": \"test.gcode\", \"path\": \"test.gcode\", \"type\": \"machinecode\", \"typePath\": [\"machinecode\", \"gcode\"], \"hash\": \" \", \"links\": [...], ... }, \"test.stl\": { \"name\": \"test.stl\", \"path\": \"test.stl\", \"type\": \"model\", \"typePath\": [\"model\", \"stl\"], \"hash\": \" \", \"links\": [...], ... }, ... } :param string path: base path from which to recursively list all files, optional, if not supplied listing will start from root of base folder :param function filter: a filter that matches the files that are to be returned, may be left out in which case no filtering will take place :param bool recursive: will also step into sub folders for building the complete list if set to True, otherwise will only do one step down into sub folders to be able to populate the children . :return: a dictionary mapping entry names to entry data that represents the whole file list","title":"list_files()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.move_file","text":"Moves the file source to destination :param string source: path to the source file :param string destination: path to destination :return: the new path in the storage to the file","title":"move_file()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.move_folder","text":"Moves the folder source to destination :param string source: path to the source folder :param string destination: path to destination :return: the new path in the storage to the folder","title":"move_folder()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.path_in_storage","text":"Retrieves the equivalent in the storage adapter for path . Opposite of :func: path_on_disk . :param string path: the path for which to retrieve the storage path :return: the path in storage to path","title":"path_in_storage()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.path_on_disk","text":"Retrieves the path on disk for path . Note: if the storage is not on disk and there exists no path on disk to refer to it, this method should raise an :class: io.UnsupportedOperation Opposite of :func: path_in_storage . :param string path: the virtual path for which to retrieve the path on disk :return: the path on disk to path","title":"path_on_disk()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_additional_metadata","text":"Removes additional metadata under key for name on path :param path: the virtual path to the file for which to remove the metadata under key :param key: the key to remove","title":"remove_additional_metadata()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_file","text":"Removes the file at path Will also take care of deleting the corresponding entries in the metadata and deleting all links pointing to the file. :param string path: path of the file to remove","title":"remove_file()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_folder","text":"Removes the folder at path :param string path: the path of the folder to remove :param bool recursive: if set to True, contained folders and files will also be removed, otherwise an error will be raised if the folder is not empty (apart from any metadata files) when it's to be removed","title":"remove_folder()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.remove_link","text":"Removes the link consisting of rel and data from file name on path . :param path: path of the file from which to remove the link :param rel: type of relation of the link to remove (currently model , machinecode and web are supported) :param data: additional data of the link to remove, must match existing link","title":"remove_link()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize","text":"Sanitizes the given path , stripping it of all invalid characters. The path may consist of both folder and file name, the underlying implementation must separate those if necessary and sanitize individually. :param string path: the path to sanitize :return: a 2-tuple containing the sanitized path and file name","title":"sanitize()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize_name","text":"Sanitizes the given file name , stripping it of all invalid characters. :param string name: the file name to sanitize :return: the sanitized name","title":"sanitize_name()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.sanitize_path","text":"Sanitizes the given folder-only path , stripping it of all invalid characters. :param string path: the path to sanitize :return: the sanitized path","title":"sanitize_path()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.set_additional_metadata","text":"Adds additional metadata to the metadata of path . Metadata in data will be saved under key . If overwrite is set and key already exists in name 's metadata, the current value will be overwritten. If merge is set and key already exists and both data and the existing data under key are dictionaries, the two dictionaries will be merged recursively. :param path: the virtual path to the file for which to add additional metadata :param key: key of metadata to add :param data: metadata to add :param overwrite: if True and key already exists, it will be overwritten :param merge: if True and key already exists and both data and the existing data are dictionaries, they will be merged","title":"set_additional_metadata()"},{"location":"reference/octoprint/filemanager/storage/#octoprint.filemanager.storage.StorageInterface.split_path","text":"Split path into base directory and file name. :param path: the path to split :return: a tuple (base directory, file name)","title":"split_path()"},{"location":"reference/octoprint/filemanager/util/","text":"octoprint.filemanager.util # AbstractFileWrapper # Wrapper for file representations to save to storages. Parameters: Name Type Description Default filename str The file's name required save ( path , permissions = None ) # Saves the file's content to the given absolute path. Parameters: Name Type Description Default path str The absolute path to where to save the file required permissions int The permissions to set on the file None stream () # Returns a Python stream object (subclass of io.IOBase) representing the file's contents. Returns: Type Description io.IOBase: The file's contents as a stream. DiskFileWrapper # Bases: AbstractFileWrapper An implementation of :class: .AbstractFileWrapper that wraps an actual file on disk. The save implementations will either copy the file to the new path (preserving file attributes) or -- if move is True (the default) -- move the file. Parameters: Name Type Description Default filename str The file's name required path str The file's absolute path required move boolean Whether to move the file upon saving (True, default) or copying. True LineProcessorStream # Bases: io . RawIOBase While reading from this stream the provided input_stream is read line by line, calling the (overridable) method :meth: .process_line for each read line. Sub classes can thus modify the contents of the input_stream in line, while it is being read. Keep in mind that process_line will receive the line as a byte stream - if underlying code needs to operate on unicode you'll need to do the decoding yourself. Parameters: Name Type Description Default input_stream io . RawIOBase The stream to process on the fly. required process_line ( line ) # Called from the read Method of this stream with each line read from self.input_stream . By returning None the line will not be returned from the read stream, effectively being stripped from the wrapper input_stream . Parameters: Name Type Description Default line bytes The line as read from self.input_stream in byte representation required Returns: Type Description bytes or None: The processed version of the line (might also be multiple lines), or None if the line is to be stripped from the processed stream. MultiStream # Bases: io . RawIOBase A stream implementation which when read reads from multiple streams, one after the other, basically concatenating their contents in the order they are provided to the constructor. Parameters: Name Type Description Default *streams One or more class: io.IOBase streams to concatenate. () StreamWrapper # Bases: AbstractFileWrapper A wrapper allowing processing of one or more consecutive streams. Parameters: Name Type Description Default *streams One or more class: io.IOBase streams to process one after another to save to storage. () save ( path , permissions = None ) # Will dump the contents of all streams provided during construction into the target file, in the order they were provided. stream () # If more than one stream was provided to the constructor, will return a :class: .MultiStream wrapping all provided streams in the order they were provided, else the first and only stream is returned directly.","title":"util"},{"location":"reference/octoprint/filemanager/util/#octoprintfilemanagerutil","text":"","title":"octoprint.filemanager.util"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper","text":"Wrapper for file representations to save to storages. Parameters: Name Type Description Default filename str The file's name required","title":"AbstractFileWrapper"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper.save","text":"Saves the file's content to the given absolute path. Parameters: Name Type Description Default path str The absolute path to where to save the file required permissions int The permissions to set on the file None","title":"save()"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.AbstractFileWrapper.stream","text":"Returns a Python stream object (subclass of io.IOBase) representing the file's contents. Returns: Type Description io.IOBase: The file's contents as a stream.","title":"stream()"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.DiskFileWrapper","text":"Bases: AbstractFileWrapper An implementation of :class: .AbstractFileWrapper that wraps an actual file on disk. The save implementations will either copy the file to the new path (preserving file attributes) or -- if move is True (the default) -- move the file. Parameters: Name Type Description Default filename str The file's name required path str The file's absolute path required move boolean Whether to move the file upon saving (True, default) or copying. True","title":"DiskFileWrapper"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.LineProcessorStream","text":"Bases: io . RawIOBase While reading from this stream the provided input_stream is read line by line, calling the (overridable) method :meth: .process_line for each read line. Sub classes can thus modify the contents of the input_stream in line, while it is being read. Keep in mind that process_line will receive the line as a byte stream - if underlying code needs to operate on unicode you'll need to do the decoding yourself. Parameters: Name Type Description Default input_stream io . RawIOBase The stream to process on the fly. required","title":"LineProcessorStream"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.LineProcessorStream.process_line","text":"Called from the read Method of this stream with each line read from self.input_stream . By returning None the line will not be returned from the read stream, effectively being stripped from the wrapper input_stream . Parameters: Name Type Description Default line bytes The line as read from self.input_stream in byte representation required Returns: Type Description bytes or None: The processed version of the line (might also be multiple lines), or None if the line is to be stripped from the processed stream.","title":"process_line()"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.MultiStream","text":"Bases: io . RawIOBase A stream implementation which when read reads from multiple streams, one after the other, basically concatenating their contents in the order they are provided to the constructor. Parameters: Name Type Description Default *streams One or more class: io.IOBase streams to concatenate. ()","title":"MultiStream"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper","text":"Bases: AbstractFileWrapper A wrapper allowing processing of one or more consecutive streams. Parameters: Name Type Description Default *streams One or more class: io.IOBase streams to process one after another to save to storage. ()","title":"StreamWrapper"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper.save","text":"Will dump the contents of all streams provided during construction into the target file, in the order they were provided.","title":"save()"},{"location":"reference/octoprint/filemanager/util/#octoprint.filemanager.util.StreamWrapper.stream","text":"If more than one stream was provided to the constructor, will return a :class: .MultiStream wrapping all provided streams in the order they were provided, else the first and only stream is returned directly.","title":"stream()"},{"location":"reference/octoprint/logging/","text":"octoprint.logging # get_divider_line ( c , message = None , length = 78 , indent = 3 ) # Generate a divider line for logging, optionally with included message. Examples: >>> get_divider_line ( \"-\" ) '------------------------------------------------------------------------------' >>> get_divider_line ( \"=\" , length = 10 ) '==========' >>> get_divider_line ( \"-\" , message = \"Hi\" , length = 10 ) '--- Hi ---' >>> get_divider_line ( \"-\" , message = \"A slightly longer text\" ) '--- A slightly longer text ---------------------------------------------------' >>> get_divider_line ( \"-\" , message = \"A slightly longer text\" , indent = 5 ) '----- A slightly longer text -------------------------------------------------' >>> get_divider_line ( \"-\" , message = \"Hello World!\" , length = 10 ) '--- Hello World!' >>> get_divider_line ( None ) Traceback (most recent call last): ... AssertionError : c is not text >>> get_divider_line ( \"\u00b4`\" ) Traceback (most recent call last): ... AssertionError : c is not a single character >>> get_divider_line ( \"-\" , message = 3 ) Traceback (most recent call last): ... AssertionError : message is not text >>> get_divider_line ( \"-\" , length = \"hello\" ) Traceback (most recent call last): ... AssertionError : length is not an int >>> get_divider_line ( \"-\" , indent = \"hi\" ) Traceback (most recent call last): ... AssertionError : indent is not an int Parameters: Name Type Description Default c character to use for the line required message message to print in the line None length length of the line 78 indent indentation of message in line 3 Returns: Type Description formatted divider line get_handler ( name , logger = None ) # Retrieves the handler named name . If optional logger is provided, search will be limited to that logger, otherwise the root logger will be searched. Parameters: Name Type Description Default name the name of the handler to look for required logger (optional) the logger to search in, root logger if not provided None Returns: Type Description the handler if it could be found, None otherwise log_to_handler ( logger , handler , level , msg , exc_info = None , extra = None , * args ) # Logs to the provided handler only. Parameters: Name Type Description Default logger logger to log to required handler handler to restrict logging to required level level to log at required msg message to log required exc_info optional exception info None extra optional extra data None *args log args ()","title":"octoprint.logging"},{"location":"reference/octoprint/logging/#octoprintlogging","text":"","title":"octoprint.logging"},{"location":"reference/octoprint/logging/#octoprint.logging.get_divider_line","text":"Generate a divider line for logging, optionally with included message. Examples: >>> get_divider_line ( \"-\" ) '------------------------------------------------------------------------------' >>> get_divider_line ( \"=\" , length = 10 ) '==========' >>> get_divider_line ( \"-\" , message = \"Hi\" , length = 10 ) '--- Hi ---' >>> get_divider_line ( \"-\" , message = \"A slightly longer text\" ) '--- A slightly longer text ---------------------------------------------------' >>> get_divider_line ( \"-\" , message = \"A slightly longer text\" , indent = 5 ) '----- A slightly longer text -------------------------------------------------' >>> get_divider_line ( \"-\" , message = \"Hello World!\" , length = 10 ) '--- Hello World!' >>> get_divider_line ( None ) Traceback (most recent call last): ... AssertionError : c is not text >>> get_divider_line ( \"\u00b4`\" ) Traceback (most recent call last): ... AssertionError : c is not a single character >>> get_divider_line ( \"-\" , message = 3 ) Traceback (most recent call last): ... AssertionError : message is not text >>> get_divider_line ( \"-\" , length = \"hello\" ) Traceback (most recent call last): ... AssertionError : length is not an int >>> get_divider_line ( \"-\" , indent = \"hi\" ) Traceback (most recent call last): ... AssertionError : indent is not an int Parameters: Name Type Description Default c character to use for the line required message message to print in the line None length length of the line 78 indent indentation of message in line 3 Returns: Type Description formatted divider line","title":"get_divider_line()"},{"location":"reference/octoprint/logging/#octoprint.logging.get_handler","text":"Retrieves the handler named name . If optional logger is provided, search will be limited to that logger, otherwise the root logger will be searched. Parameters: Name Type Description Default name the name of the handler to look for required logger (optional) the logger to search in, root logger if not provided None Returns: Type Description the handler if it could be found, None otherwise","title":"get_handler()"},{"location":"reference/octoprint/logging/#octoprint.logging.log_to_handler","text":"Logs to the provided handler only. Parameters: Name Type Description Default logger logger to log to required handler handler to restrict logging to required level level to log at required msg message to log required exc_info optional exception info None extra optional extra data None *args log args ()","title":"log_to_handler()"},{"location":"reference/octoprint/logging/filters/","text":"octoprint.logging.filters #","title":"filters"},{"location":"reference/octoprint/logging/filters/#octoprintloggingfilters","text":"","title":"octoprint.logging.filters"},{"location":"reference/octoprint/logging/handlers/","text":"octoprint.logging.handlers # TriggeredRolloverLogHandler # Bases: AsyncLogHandlerMixin , logging . handlers . RotatingFileHandler getFilesToDelete () # Determine the files to delete when rolling over.","title":"handlers"},{"location":"reference/octoprint/logging/handlers/#octoprintlogginghandlers","text":"","title":"octoprint.logging.handlers"},{"location":"reference/octoprint/logging/handlers/#octoprint.logging.handlers.TriggeredRolloverLogHandler","text":"Bases: AsyncLogHandlerMixin , logging . handlers . RotatingFileHandler","title":"TriggeredRolloverLogHandler"},{"location":"reference/octoprint/logging/handlers/#octoprint.logging.handlers.TriggeredRolloverLogHandler.getFilesToDelete","text":"Determine the files to delete when rolling over.","title":"getFilesToDelete()"},{"location":"reference/octoprint/plugin/","text":"octoprint.plugin # This module represents OctoPrint's plugin subsystem. This includes management and helper methods as well as the registered plugin types. .. autofunction:: plugin_manager .. autofunction:: plugin_settings .. autofunction:: call_plugin .. autoclass:: PluginSettings :members: PluginSettings # The :class: PluginSettings class is the interface for plugins to their own or globally defined settings. It provides some convenience methods for directly accessing plugin settings via the regular :class: octoprint.settings.Settings interfaces as well as means to access plugin specific folder locations. All getter and setter methods will ensure that plugin settings are stored in their correct location within the settings structure by modifying the supplied paths accordingly. Parameters: Name Type Description Default settings Settings The :class: ~octoprint.settings.Settings instance on which to operate. required plugin_key str The plugin identifier of the plugin for which to create this instance. required defaults dict The plugin's defaults settings, will be used to determine valid paths within the plugin's settings structure None .. method:: get(path, merged=False, asdict=False) Retrieves a raw value from the settings for path , optionally merging the raw value with the default settings if merged is set to True. :param path: The path for which to retrieve the value. :type path: list, tuple :param boolean merged: Whether to merge the returned result with the default settings (True) or not (False, default). :returns: The retrieved settings value. :rtype: object .. method:: get_int(path, min=None, max=None) Like :func: get but tries to convert the retrieved value to int . If min is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for max - it will be returned if the value is greater than it. .. method:: get_float(path, min=None, max=None) Like :func: get but tries to convert the retrieved value to float . If min is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for max - it will be returned if the value is greater than it. .. method:: get_boolean(path) Like :func: get but tries to convert the retrieved value to boolean . .. method:: set(path, value, force=False) Sets the raw value on the settings for path . :param path: The path for which to retrieve the value. :type path: list, tuple :param object value: The value to set. :param boolean force: If set to True, the modified configuration will even be written back to disk if the value didn't change. .. method:: set_int(path, value, force=False, min=None, max=None) Like :func: set but ensures the value is an int through attempted conversion before setting it. If min and/or max are provided, it will also be ensured that the value is greater than or equal to min and less than or equal to max . If that is not the case, the limit value ( min if less than that, max if greater than that) will be set instead. .. method:: set_float(path, value, force=False, min=None, max=None) Like :func: set but ensures the value is an float through attempted conversion before setting it. If min and/or max are provided, it will also be ensured that the value is greater than or equal to min and less than or equal to max . If that is not the case, the limit value ( min if less than that, max if greater than that) will be set instead. .. method:: set_boolean(path, value, force=False) Like :func: set but ensures the value is an boolean through attempted conversion before setting it. .. method:: save(force=False, trigger_event=False) Saves the settings to config.yaml if there are active changes. If force is set to True the settings will be saved even if there are no changes. Settings trigger_event to True will cause a SettingsUpdated :ref: event <sec-events-available_events-settings> to get triggered. :param force: Force saving to config.yaml even if there are no changes. :type force: boolean :param trigger_event: Trigger the SettingsUpdated :ref: event <sec-events-available_events-settings> on save. :type trigger_event: boolean .. method:: add_overlay(overlay, at_end=False, key=None) Adds a new config overlay for the plugin's settings. Will return the overlay's key in the map. :param overlay: Overlay dict to add :type overlay: dict :param at_end: Whether to add overlay at end or start (default) of config hierarchy :type at_end: boolean :param key: Key to use to identify overlay. If not set one will be built based on the overlay's hash :type key: str :rtype: str .. method:: remove_overlay(key) Removes an overlay from the settings based on its key. Return True if the overlay could be found and was removed, False otherwise. :param key: The key of the overlay to remove :type key: str :rtype: boolean get_plugin_logfile_path ( postfix = None ) # Retrieves the path to a logfile specifically for the plugin. If postfix is not supplied, the logfile will be named plugin_<plugin identifier>.log and located within the configured logs folder. If a postfix is supplied, the name will be plugin_<plugin identifier>_<postfix>.log at the same location. Plugins may use this for specific logging tasks. For example, a :class: ~octoprint.plugin.SlicingPlugin might want to create a log file for logging the output of the slicing engine itself if some debug flag is set. Parameters: Name Type Description Default postfix str Postfix of the logfile for which to create the path. If set, the file name of the log file will be plugin_<plugin identifier>_<postfix>.log , if not it will be plugin_<plugin identifier>.log . None Returns: Name Type Description str Absolute path to the log file, directly usable by the plugin. global_get ( path , ** kwargs ) # Getter for retrieving settings not managed by the plugin itself from the core settings structure. Use this to access global settings outside of your plugin. Directly forwards to :func: octoprint.settings.Settings.get . global_get_basefolder ( folder_type , ** kwargs ) # Retrieves a globally defined basefolder of the given folder_type . Directly forwards to :func: octoprint.settings.Settings.getBaseFolder . global_get_boolean ( path , ** kwargs ) # Like :func: global_get but directly orwards to :func: octoprint.settings.Settings.getBoolean . global_get_float ( path , ** kwargs ) # Like :func: global_get but directly forwards to :func: octoprint.settings.Settings.getFloat . global_get_int ( path , ** kwargs ) # Like :func: global_get but directly forwards to :func: octoprint.settings.Settings.getInt . global_set ( path , value , ** kwargs ) # Setter for modifying settings not managed by the plugin itself on the core settings structure. Use this to modify global settings outside of your plugin. Directly forwards to :func: octoprint.settings.Settings.set . global_set_boolean ( path , value , ** kwargs ) # Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setBoolean . global_set_float ( path , value , ** kwargs ) # Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setFloat . global_set_int ( path , value , ** kwargs ) # Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setInt . call_plugin ( types , method , args = None , kwargs = None , callback = None , error_callback = None , sorting_context = None , initialized = True ) # Helper method to invoke the indicated method on all registered plugin implementations implementing the indicated types . Allows providing method arguments and registering callbacks to call in case of success and/or failure of each call which can be used to return individual results to the calling code. Example: .. sourcecode:: python def my_success_callback(name, plugin, result): print(\"{name} was called successfully and returned {result!r}\".format(**locals())) def my_error_callback(name, plugin, exc): print(\"{name} raised an exception: {exc!s}\".format(**locals())) octoprint.plugin.call_plugin( [octoprint.plugin.StartupPlugin], \"on_startup\", args=(my_host, my_port), callback=my_success_callback, error_callback=my_error_callback ) Parameters: Name Type Description Default types list A list of plugin implementation types to match against. required method string Name of the method to call on all matching implementations. required args tuple A tuple containing the arguments to supply to the called method . Optional. None kwargs dict A dictionary containing the keyword arguments to supply to the called method . Optional. None callback function A callback to invoke after an implementation has been called successfully. Will be called with the three arguments name , plugin and result . name will be the plugin identifier, plugin the plugin implementation instance itself and result the result returned from the method invocation. None error_callback function A callback to invoke after the call of an implementation resulted in an exception. Will be called with the three arguments name , plugin and exc . name will be the plugin identifier, plugin the plugin implementation instance itself and exc the caught exception. None initialized boolean Ignored. True plugin_manager ( init = False , plugin_folders = None , plugin_bases = None , plugin_entry_points = None , plugin_disabled_list = None , plugin_sorting_order = None , plugin_blacklist = None , plugin_restart_needing_hooks = None , plugin_obsolete_hooks = None , plugin_considered_bundled = None , plugin_validators = None , compatibility_ignored_list = None ) # Factory method for initially constructing and consecutively retrieving the :class: ~octoprint.plugin.core.PluginManager singleton. Parameters: Name Type Description Default init boolean A flag indicating whether this is the initial call to construct the singleton (True) or not (False, default). If this is set to True and the plugin manager has already been initialized, a :class: ValueError will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False. False plugin_folders list A list of folders (as strings containing the absolute path to them) in which to look for potential plugin modules. If not provided this defaults to the configured plugins base folder and src/plugins within OctoPrint's code base. None plugin_bases list A list of recognized plugin base classes for which to look for provided implementations. If not provided this defaults to :class: ~octoprint.plugin.OctoPrintPlugin . None plugin_entry_points list A list of entry points pointing to modules which to load as plugins. If not provided this defaults to the entry point octoprint.plugin . None plugin_disabled_list list A list of plugin identifiers that are currently disabled. If not provided this defaults to all plugins for which enabled is set to False in the settings. None plugin_sorting_order dict A dict containing a custom sorting orders for plugins. The keys are plugin identifiers, mapped to dictionaries containing the sorting contexts as key and the custom sorting value as value. None plugin_blacklist list A list of plugin identifiers/identifier-requirement tuples that are currently blacklisted. None plugin_restart_needing_hooks list A list of hook namespaces which cause a plugin to need a restart in order be enabled/disabled. Does not have to contain full hook identifiers, will be matched with startswith similar to logging handlers None plugin_obsolete_hooks list A list of hooks that have been declared obsolete. Plugins implementing them will not be enabled since they might depend on functionality that is no longer available. None plugin_considered_bundled list A list of plugin identifiers that are considered bundled plugins even if installed separately. None plugin_validators list A list of additional plugin validators through which to process each plugin. None compatibility_ignored_list list A list of plugin keys for which it will be ignored if they are flagged as incompatible. This is for development purposes only and should not be used in production. None Returns: Name Type Description PluginManager A fully initialized :class: ~octoprint.plugin.core.PluginManager instance to be used for plugin management tasks. Raises: Type Description ValueError init was True although the plugin manager was already initialized, or it was False although the plugin manager was not yet initialized. plugin_settings ( plugin_key , defaults = None , get_preprocessors = None , set_preprocessors = None , settings = None ) # Factory method for creating a :class: PluginSettings instance. Parameters: Name Type Description Default plugin_key string The plugin identifier for which to create the settings instance. required defaults dict The default settings for the plugin, if different from get_settings_defaults. None get_preprocessors dict The getter preprocessors for the plugin. None set_preprocessors dict The setter preprocessors for the plugin. None settings octoprint . settings . Settings The settings instance to use. None Returns: Name Type Description PluginSettings A fully initialized :class: PluginSettings instance to be used to access the plugin's settings plugin_settings_for_settings_plugin ( plugin_key , instance , settings = None ) # Factory method for creating a :class: PluginSettings instance for a given :class: SettingsPlugin instance. Will return None if the provided instance is not a :class: SettingsPlugin instance. Parameters: Name Type Description Default plugin_key string The plugin identifier for which to create the settings instance. required implementation octoprint . plugin . SettingsPlugin The :class: SettingsPlugin instance. required settings octoprint . settings . Settings The settings instance to use. Defaults to the global OctoPrint settings. None Returns: Type Description PluginSettings or None: A fully initialized :class: PluginSettings instance to be used to access the plugin's settings, or None if the provided instance was not a class: SettingsPlugin","title":"octoprint.plugin"},{"location":"reference/octoprint/plugin/#octoprintplugin","text":"This module represents OctoPrint's plugin subsystem. This includes management and helper methods as well as the registered plugin types. .. autofunction:: plugin_manager .. autofunction:: plugin_settings .. autofunction:: call_plugin .. autoclass:: PluginSettings :members:","title":"octoprint.plugin"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings","text":"The :class: PluginSettings class is the interface for plugins to their own or globally defined settings. It provides some convenience methods for directly accessing plugin settings via the regular :class: octoprint.settings.Settings interfaces as well as means to access plugin specific folder locations. All getter and setter methods will ensure that plugin settings are stored in their correct location within the settings structure by modifying the supplied paths accordingly. Parameters: Name Type Description Default settings Settings The :class: ~octoprint.settings.Settings instance on which to operate. required plugin_key str The plugin identifier of the plugin for which to create this instance. required defaults dict The plugin's defaults settings, will be used to determine valid paths within the plugin's settings structure None .. method:: get(path, merged=False, asdict=False) Retrieves a raw value from the settings for path , optionally merging the raw value with the default settings if merged is set to True. :param path: The path for which to retrieve the value. :type path: list, tuple :param boolean merged: Whether to merge the returned result with the default settings (True) or not (False, default). :returns: The retrieved settings value. :rtype: object .. method:: get_int(path, min=None, max=None) Like :func: get but tries to convert the retrieved value to int . If min is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for max - it will be returned if the value is greater than it. .. method:: get_float(path, min=None, max=None) Like :func: get but tries to convert the retrieved value to float . If min is provided and the retrieved value is less than it, it will be returned instead of the value. Likewise for max - it will be returned if the value is greater than it. .. method:: get_boolean(path) Like :func: get but tries to convert the retrieved value to boolean . .. method:: set(path, value, force=False) Sets the raw value on the settings for path . :param path: The path for which to retrieve the value. :type path: list, tuple :param object value: The value to set. :param boolean force: If set to True, the modified configuration will even be written back to disk if the value didn't change. .. method:: set_int(path, value, force=False, min=None, max=None) Like :func: set but ensures the value is an int through attempted conversion before setting it. If min and/or max are provided, it will also be ensured that the value is greater than or equal to min and less than or equal to max . If that is not the case, the limit value ( min if less than that, max if greater than that) will be set instead. .. method:: set_float(path, value, force=False, min=None, max=None) Like :func: set but ensures the value is an float through attempted conversion before setting it. If min and/or max are provided, it will also be ensured that the value is greater than or equal to min and less than or equal to max . If that is not the case, the limit value ( min if less than that, max if greater than that) will be set instead. .. method:: set_boolean(path, value, force=False) Like :func: set but ensures the value is an boolean through attempted conversion before setting it. .. method:: save(force=False, trigger_event=False) Saves the settings to config.yaml if there are active changes. If force is set to True the settings will be saved even if there are no changes. Settings trigger_event to True will cause a SettingsUpdated :ref: event <sec-events-available_events-settings> to get triggered. :param force: Force saving to config.yaml even if there are no changes. :type force: boolean :param trigger_event: Trigger the SettingsUpdated :ref: event <sec-events-available_events-settings> on save. :type trigger_event: boolean .. method:: add_overlay(overlay, at_end=False, key=None) Adds a new config overlay for the plugin's settings. Will return the overlay's key in the map. :param overlay: Overlay dict to add :type overlay: dict :param at_end: Whether to add overlay at end or start (default) of config hierarchy :type at_end: boolean :param key: Key to use to identify overlay. If not set one will be built based on the overlay's hash :type key: str :rtype: str .. method:: remove_overlay(key) Removes an overlay from the settings based on its key. Return True if the overlay could be found and was removed, False otherwise. :param key: The key of the overlay to remove :type key: str :rtype: boolean","title":"PluginSettings"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.get_plugin_logfile_path","text":"Retrieves the path to a logfile specifically for the plugin. If postfix is not supplied, the logfile will be named plugin_<plugin identifier>.log and located within the configured logs folder. If a postfix is supplied, the name will be plugin_<plugin identifier>_<postfix>.log at the same location. Plugins may use this for specific logging tasks. For example, a :class: ~octoprint.plugin.SlicingPlugin might want to create a log file for logging the output of the slicing engine itself if some debug flag is set. Parameters: Name Type Description Default postfix str Postfix of the logfile for which to create the path. If set, the file name of the log file will be plugin_<plugin identifier>_<postfix>.log , if not it will be plugin_<plugin identifier>.log . None Returns: Name Type Description str Absolute path to the log file, directly usable by the plugin.","title":"get_plugin_logfile_path()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get","text":"Getter for retrieving settings not managed by the plugin itself from the core settings structure. Use this to access global settings outside of your plugin. Directly forwards to :func: octoprint.settings.Settings.get .","title":"global_get()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_basefolder","text":"Retrieves a globally defined basefolder of the given folder_type . Directly forwards to :func: octoprint.settings.Settings.getBaseFolder .","title":"global_get_basefolder()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_boolean","text":"Like :func: global_get but directly orwards to :func: octoprint.settings.Settings.getBoolean .","title":"global_get_boolean()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_float","text":"Like :func: global_get but directly forwards to :func: octoprint.settings.Settings.getFloat .","title":"global_get_float()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_get_int","text":"Like :func: global_get but directly forwards to :func: octoprint.settings.Settings.getInt .","title":"global_get_int()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set","text":"Setter for modifying settings not managed by the plugin itself on the core settings structure. Use this to modify global settings outside of your plugin. Directly forwards to :func: octoprint.settings.Settings.set .","title":"global_set()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_boolean","text":"Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setBoolean .","title":"global_set_boolean()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_float","text":"Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setFloat .","title":"global_set_float()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.PluginSettings.global_set_int","text":"Like :func: global_set but directly forwards to :func: octoprint.settings.Settings.setInt .","title":"global_set_int()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.call_plugin","text":"Helper method to invoke the indicated method on all registered plugin implementations implementing the indicated types . Allows providing method arguments and registering callbacks to call in case of success and/or failure of each call which can be used to return individual results to the calling code. Example: .. sourcecode:: python def my_success_callback(name, plugin, result): print(\"{name} was called successfully and returned {result!r}\".format(**locals())) def my_error_callback(name, plugin, exc): print(\"{name} raised an exception: {exc!s}\".format(**locals())) octoprint.plugin.call_plugin( [octoprint.plugin.StartupPlugin], \"on_startup\", args=(my_host, my_port), callback=my_success_callback, error_callback=my_error_callback ) Parameters: Name Type Description Default types list A list of plugin implementation types to match against. required method string Name of the method to call on all matching implementations. required args tuple A tuple containing the arguments to supply to the called method . Optional. None kwargs dict A dictionary containing the keyword arguments to supply to the called method . Optional. None callback function A callback to invoke after an implementation has been called successfully. Will be called with the three arguments name , plugin and result . name will be the plugin identifier, plugin the plugin implementation instance itself and result the result returned from the method invocation. None error_callback function A callback to invoke after the call of an implementation resulted in an exception. Will be called with the three arguments name , plugin and exc . name will be the plugin identifier, plugin the plugin implementation instance itself and exc the caught exception. None initialized boolean Ignored. True","title":"call_plugin()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_manager","text":"Factory method for initially constructing and consecutively retrieving the :class: ~octoprint.plugin.core.PluginManager singleton. Parameters: Name Type Description Default init boolean A flag indicating whether this is the initial call to construct the singleton (True) or not (False, default). If this is set to True and the plugin manager has already been initialized, a :class: ValueError will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False. False plugin_folders list A list of folders (as strings containing the absolute path to them) in which to look for potential plugin modules. If not provided this defaults to the configured plugins base folder and src/plugins within OctoPrint's code base. None plugin_bases list A list of recognized plugin base classes for which to look for provided implementations. If not provided this defaults to :class: ~octoprint.plugin.OctoPrintPlugin . None plugin_entry_points list A list of entry points pointing to modules which to load as plugins. If not provided this defaults to the entry point octoprint.plugin . None plugin_disabled_list list A list of plugin identifiers that are currently disabled. If not provided this defaults to all plugins for which enabled is set to False in the settings. None plugin_sorting_order dict A dict containing a custom sorting orders for plugins. The keys are plugin identifiers, mapped to dictionaries containing the sorting contexts as key and the custom sorting value as value. None plugin_blacklist list A list of plugin identifiers/identifier-requirement tuples that are currently blacklisted. None plugin_restart_needing_hooks list A list of hook namespaces which cause a plugin to need a restart in order be enabled/disabled. Does not have to contain full hook identifiers, will be matched with startswith similar to logging handlers None plugin_obsolete_hooks list A list of hooks that have been declared obsolete. Plugins implementing them will not be enabled since they might depend on functionality that is no longer available. None plugin_considered_bundled list A list of plugin identifiers that are considered bundled plugins even if installed separately. None plugin_validators list A list of additional plugin validators through which to process each plugin. None compatibility_ignored_list list A list of plugin keys for which it will be ignored if they are flagged as incompatible. This is for development purposes only and should not be used in production. None Returns: Name Type Description PluginManager A fully initialized :class: ~octoprint.plugin.core.PluginManager instance to be used for plugin management tasks. Raises: Type Description ValueError init was True although the plugin manager was already initialized, or it was False although the plugin manager was not yet initialized.","title":"plugin_manager()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_settings","text":"Factory method for creating a :class: PluginSettings instance. Parameters: Name Type Description Default plugin_key string The plugin identifier for which to create the settings instance. required defaults dict The default settings for the plugin, if different from get_settings_defaults. None get_preprocessors dict The getter preprocessors for the plugin. None set_preprocessors dict The setter preprocessors for the plugin. None settings octoprint . settings . Settings The settings instance to use. None Returns: Name Type Description PluginSettings A fully initialized :class: PluginSettings instance to be used to access the plugin's settings","title":"plugin_settings()"},{"location":"reference/octoprint/plugin/#octoprint.plugin.plugin_settings_for_settings_plugin","text":"Factory method for creating a :class: PluginSettings instance for a given :class: SettingsPlugin instance. Will return None if the provided instance is not a :class: SettingsPlugin instance. Parameters: Name Type Description Default plugin_key string The plugin identifier for which to create the settings instance. required implementation octoprint . plugin . SettingsPlugin The :class: SettingsPlugin instance. required settings octoprint . settings . Settings The settings instance to use. Defaults to the global OctoPrint settings. None Returns: Type Description PluginSettings or None: A fully initialized :class: PluginSettings instance to be used to access the plugin's settings, or None if the provided instance was not a class: SettingsPlugin","title":"plugin_settings_for_settings_plugin()"},{"location":"reference/octoprint/plugin/core/","text":"octoprint.plugin.core # In this module resides the core data structures and logic of the plugin system. ControlProperties # attr_author = '__plugin_author__' class-attribute # Module attribute from which to retrieve the plugin's author. attr_check = '__plugin_check__' class-attribute # Module attribute which to call to determine if the plugin can be loaded. attr_description = '__plugin_description__' class-attribute # Module attribute from which to retrieve the plugin's description. attr_disable = '__plugin_disable__' class-attribute # Module attribute which to call when disabling the plugin. attr_disabling_discouraged = '__plugin_disabling_discouraged__' class-attribute # Module attribute from which to retrieve the reason why disabling the plugin is discouraged. Only effective if self.bundled is True. attr_enable = '__plugin_enable__' class-attribute # Module attribute which to call when enabling the plugin. attr_helpers = '__plugin_helpers__' class-attribute # Module attribute from which to retrieve the plugin's provided helpers. attr_hidden = '__plugin_hidden__' class-attribute # Module attribute from which to determine if the plugin's hidden or not. Only evaluated for bundled plugins, in order to hide them from the Plugin Manager and similar places. attr_hooks = '__plugin_hooks__' class-attribute # Module attribute from which to retrieve the plugin's provided hooks. attr_implementation = '__plugin_implementation__' class-attribute # Module attribute from which to retrieve the plugin's provided mixin implementation. attr_license = '__plugin_license__' class-attribute # Module attribute from which to retrieve the plugin's license. attr_load = '__plugin_load__' class-attribute # Module attribute which to call when loading the plugin. attr_name = '__plugin_name__' class-attribute # Module attribute from which to retrieve the plugin's human readable name. attr_privacypolicy = '__plugin_privacypolicy__' class-attribute # Module attribute from which to retrieve the plugin's privacy policy URL, if any. attr_pythoncompat = '__plugin_pythoncompat__' class-attribute # Module attribute from which to retrieve the plugin's python compatibility string. If unset a default of >=2.7,<3 will be assumed, meaning that the plugin will be considered compatible to Python 2 but not Python 3. To mark a plugin as Python 3 compatible, a string of >=2.7,<4 is recommended. Bundled plugins will automatically be assumed to be compatible. attr_unload = '__plugin_unload__' class-attribute # Module attribute which to call when unloading the plugin. attr_url = '__plugin_url__' class-attribute # Module attribute from which to retrieve the plugin's website URL. attr_version = '__plugin_version__' class-attribute # Module attribute from which to retrieve the plugin's version. EntryPointOrigin # Bases: _EntryPointOrigin Origin of a plugin registered via an entry point. Attributes: Name Type Description type str Always entry_point . entry_point str Name of the entry point, usually octoprint.plugin . module_name str Module registered to the entry point. package_name str Python package containing the entry point. package_version str Version of the Python package containing the entry point. FolderOrigin # Bases: _FolderOrigin Origin of a (single file) plugin loaded from a plugin folder. Attributes: Name Type Description type str Always folder . ModuleOrigin # Bases: _ModuleOrigin Origin of a (single file) plugin loaded from a plugin folder. Attributes: Name Type Description type str Always module . module_name str Name of the module from which the plugin was loaded. folder str Folder path from which the plugin was loaded. Plugin # The parent class of all plugin implementations. Attributes: Name Type Description _identifier str The identifier of the plugin. Injected by the plugin core system upon initialization of the implementation. _plugin_name str The name of the plugin. Injected by the plugin core system upon initialization of the implementation. _plugin_version str The version of the plugin. Injected by the plugin core system upon initialization of the implementation. _basefolder str The base folder of the plugin. Injected by the plugin core system upon initialization of the implementation. _logger logging . Logger The logger instance to use, with the logging name set to the logging_prefix of the PluginManager concatenated with the value of _identifier . Injected by the plugin core system upon initialization of the implementation. initialize () # Called by the plugin core after performing all injections. Override this to initialize your implementation. on_plugin_disabled () # Called by the plugin core when the plugin was disabled. Override this to react to the event. on_plugin_enabled () # Called by the plugin core when the plugin was enabled. Override this to react to the event. PluginInfo # The PluginInfo class wraps all available information about a registered plugin. This includes its meta data (like name, description, version, etc) as well as the actual plugin extensions like implementations, hooks and helpers. It works on Python module objects and extracts the relevant data from those via accessing the control properties . Parameters: Name Type Description Default key str Identifier of the plugin required location str Installation folder of the plugin required instance module Plugin module instance - this may be None if the plugin has been blacklisted! required name str Human readable name of the plugin None version str Version of the plugin None description str Description of the plugin None author str Author of the plugin None url str URL of the website of the plugin None license str License of the plugin None blacklisted = False instance-attribute # Whether the plugin is blacklisted. bundled = False instance-attribute # Whether this plugin is bundled with OctoPrint. enabled = True instance-attribute # Whether the plugin is enabled. forced_disabled = False instance-attribute # Whether the plugin has been force disabled by the system, e.g. due to safe mode blacklisting. incompatible = False instance-attribute # Whether this plugin has been detected as incompatible. invalid_syntax = False instance-attribute # Whether invalid syntax was encountered while trying to load this plugin. loaded = False instance-attribute # Whether this plugin has been loaded. managable = True instance-attribute # Whether this plugin can be managed by OctoPrint. needs_restart = False instance-attribute # Whether this plugin needs a restart of OctoPrint after enabling/disabling. origin = None instance-attribute # The origin from which this plugin was loaded, either a :class: EntryPointOrigin , :class: FolderOrigin or :class: ModuleOrigin instance. Set during loading, initially None . author () property # Author of the plugin. Will be taken from the author attribute of the plugin module as defined in :attr: attr_author if available, otherwise from the author supplied during construction. May be None. Returns: Type Description Optional [ str ] Author of the plugin. check () property # Method for pre-load check of plugin. Will be taken from the check attribute of the plugin module as defined in attr_check if available, otherwise a lambda always returning True is returned. Returns: Type Description callable Check method for the plugin module which should return True if the plugin can be loaded, False otherwise. description () property # Description of the plugin. Will be taken from the description attribute of the plugin module as defined in :attr: attr_description if available, otherwise from the description supplied during construction. May be None. Returns: Type Description Optional [ str ] Description of the plugin. disable () property # Method for disabling the plugin module. Will be taken from the disable attribute of the plugin module as defined in :attr: attr_disable if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Disable method for the plugin module. disabling_discouraged () property # Reason why disabling of this plugin is discouraged. Only evaluated for bundled plugins! Will be taken from the disabling_discouraged attribute of the plugin module as defined in :attr: attr_disabling_discouraged if available. False if unset or plugin not bundled. Returns: Type Description Optional [ str ] Reason why disabling this plugin is discouraged (only for bundled plugins) enable () property # Method for enabling the plugin module. Will be taken from the enable attribute of the plugin module as defined in attr_enable if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Enable method for the plugin module. get_hook ( hook ) # Parameters: Name Type Description Default hook str Hook to return. required Returns: Type Description Optional [ Callable ] Handler for the requested hook get_implementation ( * types ) # Parameters: Name Type Description Default types list List of :class: Plugin sub classes the implementation needs to implement. required Returns: Type Description object The plugin's implementation if it matches all of the requested types , None otherwise. helpers () property # Helpers provided by the plugin. Will be taken from the helpers attribute of the plugin module as defined in attr_helpers if available, otherwise an empty list is returned. Returns: Type Description dict Helpers provided by the plugin. hidden () property # Hidden flag. Returns: Type Description bool Whether the plugin should be flagged as hidden or not hooks () property # Hooks provided by the plugin. Will be taken from the hooks attribute of the plugin module as defined in attr_hooks if available, otherwise an empty dictionary is returned. Returns: Type Description dict Hooks provided by the plugin. implementation () property # Implementation provided by the plugin. Will be taken from the implementation attribute of the plugin module as defined in attr_implementation if available, otherwise None is returned. Returns: Type Description object Implementation provided by the plugin. license () property # License of the plugin. Will be taken from the license attribute of the plugin module as defined in attr_license if available, otherwise from the license supplied during construction. May be None. Returns: Type Description Optional [ str ] License of the plugin. load () property # Method for loading the plugin module. Will be taken from the load attribute of the plugin module as defined in attr_load if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Load method for the plugin module. long_str ( show_bundled = False , bundled_strs = ( ' [B]' , '' ), show_location = False , location_str = ' - {location} ' , show_enabled = False , enabled_strs = ( '* ' , ' ' , 'X ' , 'C ' )) # Long string representation of the plugin's information. Will return a string of the format <enabled><str(self)><bundled><location> . enabled , bundled and location will only be displayed if the corresponding flags are set to True . The will be filled from enabled_str , bundled_str and location_str as follows: enabled_str a 4-tuple, the first entry being the string to insert when the plugin is enabled, the second entry the string to insert when it is not, the third entry the string when it is blacklisted and the fourth when it is incompatible. bundled_str a 2-tuple, the first entry being the string to insert when the plugin is bundled, the second entry the string to insert when it is not. location_str a format string (to be parsed with str.format ), the {location} placeholder will be replaced with the plugin's installation folder on disk. Parameters: Name Type Description Default show_enabled boolean whether to show the enabled part False enabled_strs tuple the 2-tuple containing the two possible strings to use for displaying the enabled state ('* ', ' ', 'X ', 'C ') show_bundled boolean whether to show the bundled part False bundled_strs(tuple) the 2-tuple containing the two possible strings to use for displaying the bundled state required show_location boolean whether to show the location part False location_str str the format string to use for displaying the plugin's installation location ' - {location}' Returns: Type Description str The long string representation of the plugin as described above looks_like_plugin () property # Returns whether the plugin actually looks like a plugin (has control properties) or not. name () property # Human readable name of the plugin. Will be taken from name attribute of the plugin module if available, otherwise from the name supplied during construction with a fallback to key . Returns: Type Description str Name of the plugin, fallback is the plugin's identifier. parsed_metadata () property # The plugin metadata parsed from the plugin's AST. privacypolicy () property # Privacy Policy URL of the plugin. Will be taken from the privacy policy attribute of the plugin module as defined in :attr: attr_privacypolicy if available. May be None. Returns: Type Description str or None: Privacy Policy URL of the plugin. pythoncompat () property # Python compatibility string of the plugin module as defined in attr_pythoncompat if available, otherwise defaults to >=2.7,<3 . Returns: Type Description str Python compatibility string of the plugin unload () property # Method for unloading the plugin module. Will be taken from the unload attribute of the plugin module as defined in attr_unload if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Unload method for the plugin module. url () property # Website URL for the plugin. Will be taken from the url attribute of the plugin module as defined in :attr: attr_url if available, otherwise from the url supplied during construction. May be None. Returns: Type Description Optional [ str ] Website URL for the plugin. validate ( phase , additional_validators = None ) # Validates the plugin for various validation phases. phase can be one of before_import , before_load , after_load . Used by PluginManager , should not be used elsewhere. version () property # Version of the plugin. Will be taken from the version attribute of the plugin module as defined in :attr: attr_version if available, otherwise from the version supplied during construction. May be None. Returns: Type Description Optional [ str ] Version of the plugin. PluginManager # The PluginManager is the central component for finding, loading and accessing plugins provided to the system. It is able to discover plugins both through possible file system locations as well as customizable entry points. disable_plugin ( name , plugin = None ) # Disables a plugin enable_plugin ( name , plugin = None , initialize_implementation = True , startup = False ) # Enables a plugin get_filtered_implementations ( f , * types , ** kwargs ) # Get all mixin implementations that implement all of the provided types and match the provided filter f . Parameters: Name Type Description Default f callable A filter function returning True for implementations to return and False for those to exclude. required types one or more type The types a mixin implementation needs to implement in order to be returned. required Returns: Type Description list A list of all found and matching implementations. get_helpers ( name , * helpers ) # Retrieves the named helpers for the plugin with identifier name . If the plugin is not available, returns None. Otherwise returns a :class: dict with the requested plugin helper names mapped to the method - if a helper could not be resolved, it will be missing from the dict. Parameters: Name Type Description Default name str Identifier of the plugin for which to look up the helpers . required helpers one or more str Identifiers of the helpers of plugin name to return. required Returns: Type Description dict A dictionary of all resolved helpers, mapped by their identifiers, or None if the plugin was not registered with the system. get_hooks ( hook ) # Retrieves all registered handlers for the specified hook. Parameters: Name Type Description Default hook str The hook for which to retrieve the handlers. required Returns: Type Description dict A dict containing all registered handlers mapped by their plugin's identifier. get_implementations ( * types , ** kwargs ) # Get all mixin implementations that implement all of the provided types . Parameters: Name Type Description Default types List [ Type ] The types a mixin implementation needs to implement in order to be returned. required Returns: Type Description list A list of all found implementations get_plugin ( identifier , require_enabled = True ) # Retrieves the module of the plugin identified by identifier . If the plugin is not registered or disabled and required_enabled is True (the default) None will be returned. Parameters: Name Type Description Default identifier str The identifier of the plugin to retrieve. required require_enabled boolean Whether to only return the plugin if is enabled (True, default) or also if it's disabled. True Returns: Type Description module The requested plugin module if it could be found None The plugin module could not be found get_plugin_info ( identifier , require_enabled = True ) # Retrieves the PluginInfo instance identified by identifier . If the plugin is not registered or disabled and required_enabled is True (the default) None will be returned. Parameters: Name Type Description Default identifier str The identifier of the plugin to retrieve. required require_enabled boolean Whether to only return the plugin if is enabled (True, default) or also if it's disabled. True Returns: Type Description octoprint . plugin . core . PluginInfo The requested PluginInfo if it could be found None The requested plugin could not be found has_any_of_hooks ( plugin , * hooks ) staticmethod # Tests if the plugin contains any of the provided hooks . Uses :func: octoprint.plugin.core.PluginManager.hook_matches_hooks . Parameters: Name Type Description Default plugin plugin to test hooks for required hooks hooks to test against required Returns: Type Description bool True if any of the plugin's hooks match the provided hooks, False otherwise. has_any_of_mixins ( plugin , * mixins ) staticmethod # Tests if the plugin has an implementation implementing any of the provided mixins . Parameters: Name Type Description Default plugin plugin for which to check the implementation required mixins mixins to test against required Returns: Type Description bool True if the plugin's implementation implements any of the provided mixins, False otherwise. has_obsolete_hooks ( plugin ) # Checks whether the plugin uses any obsolete hooks has_restart_needing_hooks ( plugin ) # Checks whether the plugin has any hooks that need a restart on changes has_restart_needing_implementation ( plugin ) # Checks whether the plugin's implementation needs a restart on changes hook_matches_hooks ( hook , * hooks ) staticmethod # Tests if hook matches any of the provided hooks to test for. hook is expected to be an exact hook name. hooks is expected to be a list containing one or more hook names or patterns. That can be either an exact hook name or an :func: fnmatch.fnmatch pattern. Parameters: Name Type Description Default hook the hook to test required hooks the hook name patterns to test against required Returns: Type Description bool True if the hook matches any of the hooks , False otherwise. is_obsolete_hook ( hook ) # Checks whether a hook is obsolete is_plugin_marked ( name , flag ) # Checks whether a plugin has been marked with a certain flag. Parameters: Name Type Description Default name str the plugin's identifier required flag str the flag to check required Returns: Type Description bool True if the plugin has been flagged, False otherwise is_restart_needing_hook ( hook ) # Checks whether a hook needs a restart on changes is_restart_needing_plugin ( plugin ) # Checks whether the plugin needs a restart on changes mark_plugin ( name , ** flags ) # Mark plugin name with an arbitrary number of flags. Parameters: Name Type Description Default name str plugin identifier required flags dict dictionary of flag names and values required plugin_hooks () property # Returns: Type Description (dict) dictionary of registered hooks and their handlers plugins () property # Returns: Type Description (list) list of enabled and disabled registered plugins register_message_receiver ( client ) # Registers a client for receiving plugin messages. The client needs to be a callable accepting two input arguments, plugin (the sending plugin's identifier) and data (the message itself), and one optional keyword argument, permissions (an optional list of permissions to test against). reload_plugins ( startup = False , initialize_implementations = True , force_reload = None ) # Reloads plugins, detecting newly added ones in the process. Parameters: Name Type Description Default startup bool whether this is called during startup of the platform False initialize_implementations bool whether plugin implementations should be initialized True force_reload list list of plugin identifiers which should be force reloaded None send_plugin_message ( plugin , data , permissions = None ) # Sends data in the name of plugin to all currently registered message receivers by invoking them with the three arguments. Parameters: Name Type Description Default plugin str The sending plugin's identifier. required data object The message. required permissions list A list of permissions to test against in the client. None unregister_message_receiver ( client ) # Unregisters a client for receiving plugin messages. RestartNeedingPlugin # Bases: Plugin Mixin for plugin types that need a restart after enabling/disabling them. SortablePlugin # Bases: Plugin Mixin for plugin types that are sortable. get_sorting_key ( context = None ) # Returns the sorting key to use for the implementation in the specified context . May return None if order is irrelevant. Implementations returning None will be ordered by plugin identifier after all implementations which did return a sorting key value that was not None sorted by that. Parameters: Name Type Description Default context str The sorting context for which to provide the sorting key value. None Returns: Type Description Optional [ int ] An integer signifying the sorting key value of the plugin (sorting will be done ascending), or None if the implementation doesn't care about calling order. is_sub_path_of ( path , parent ) # Tests if path is a sub path of (or identical to) parent . Parameters: Name Type Description Default path str The path to test. required parent str The parent path to test against. required Example >>> is_sub_path_of ( \"/a/b/c\" , \"/a/b\" ) True >>> is_sub_path_of ( \"/a/b/c\" , \"/a/b2\" ) False >>> is_sub_path_of ( \"/a/b/c\" , \"/b/c\" ) False >>> is_sub_path_of ( \"/foo/bar/../../a/b/c\" , \"/a/b\" ) True >>> is_sub_path_of ( \"/a/b\" , \"/a/b\" ) True","title":"core"},{"location":"reference/octoprint/plugin/core/#octoprintplugincore","text":"In this module resides the core data structures and logic of the plugin system.","title":"octoprint.plugin.core"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties","text":"","title":"ControlProperties"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_author","text":"Module attribute from which to retrieve the plugin's author.","title":"attr_author"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_check","text":"Module attribute which to call to determine if the plugin can be loaded.","title":"attr_check"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_description","text":"Module attribute from which to retrieve the plugin's description.","title":"attr_description"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_disable","text":"Module attribute which to call when disabling the plugin.","title":"attr_disable"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_disabling_discouraged","text":"Module attribute from which to retrieve the reason why disabling the plugin is discouraged. Only effective if self.bundled is True.","title":"attr_disabling_discouraged"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_enable","text":"Module attribute which to call when enabling the plugin.","title":"attr_enable"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_helpers","text":"Module attribute from which to retrieve the plugin's provided helpers.","title":"attr_helpers"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_hidden","text":"Module attribute from which to determine if the plugin's hidden or not. Only evaluated for bundled plugins, in order to hide them from the Plugin Manager and similar places.","title":"attr_hidden"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_hooks","text":"Module attribute from which to retrieve the plugin's provided hooks.","title":"attr_hooks"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_implementation","text":"Module attribute from which to retrieve the plugin's provided mixin implementation.","title":"attr_implementation"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_license","text":"Module attribute from which to retrieve the plugin's license.","title":"attr_license"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_load","text":"Module attribute which to call when loading the plugin.","title":"attr_load"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_name","text":"Module attribute from which to retrieve the plugin's human readable name.","title":"attr_name"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_privacypolicy","text":"Module attribute from which to retrieve the plugin's privacy policy URL, if any.","title":"attr_privacypolicy"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_pythoncompat","text":"Module attribute from which to retrieve the plugin's python compatibility string. If unset a default of >=2.7,<3 will be assumed, meaning that the plugin will be considered compatible to Python 2 but not Python 3. To mark a plugin as Python 3 compatible, a string of >=2.7,<4 is recommended. Bundled plugins will automatically be assumed to be compatible.","title":"attr_pythoncompat"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_unload","text":"Module attribute which to call when unloading the plugin.","title":"attr_unload"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_url","text":"Module attribute from which to retrieve the plugin's website URL.","title":"attr_url"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ControlProperties.attr_version","text":"Module attribute from which to retrieve the plugin's version.","title":"attr_version"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.EntryPointOrigin","text":"Bases: _EntryPointOrigin Origin of a plugin registered via an entry point. Attributes: Name Type Description type str Always entry_point . entry_point str Name of the entry point, usually octoprint.plugin . module_name str Module registered to the entry point. package_name str Python package containing the entry point. package_version str Version of the Python package containing the entry point.","title":"EntryPointOrigin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.FolderOrigin","text":"Bases: _FolderOrigin Origin of a (single file) plugin loaded from a plugin folder. Attributes: Name Type Description type str Always folder .","title":"FolderOrigin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.ModuleOrigin","text":"Bases: _ModuleOrigin Origin of a (single file) plugin loaded from a plugin folder. Attributes: Name Type Description type str Always module . module_name str Name of the module from which the plugin was loaded. folder str Folder path from which the plugin was loaded.","title":"ModuleOrigin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin","text":"The parent class of all plugin implementations. Attributes: Name Type Description _identifier str The identifier of the plugin. Injected by the plugin core system upon initialization of the implementation. _plugin_name str The name of the plugin. Injected by the plugin core system upon initialization of the implementation. _plugin_version str The version of the plugin. Injected by the plugin core system upon initialization of the implementation. _basefolder str The base folder of the plugin. Injected by the plugin core system upon initialization of the implementation. _logger logging . Logger The logger instance to use, with the logging name set to the logging_prefix of the PluginManager concatenated with the value of _identifier . Injected by the plugin core system upon initialization of the implementation.","title":"Plugin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.initialize","text":"Called by the plugin core after performing all injections. Override this to initialize your implementation.","title":"initialize()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.on_plugin_disabled","text":"Called by the plugin core when the plugin was disabled. Override this to react to the event.","title":"on_plugin_disabled()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.Plugin.on_plugin_enabled","text":"Called by the plugin core when the plugin was enabled. Override this to react to the event.","title":"on_plugin_enabled()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo","text":"The PluginInfo class wraps all available information about a registered plugin. This includes its meta data (like name, description, version, etc) as well as the actual plugin extensions like implementations, hooks and helpers. It works on Python module objects and extracts the relevant data from those via accessing the control properties . Parameters: Name Type Description Default key str Identifier of the plugin required location str Installation folder of the plugin required instance module Plugin module instance - this may be None if the plugin has been blacklisted! required name str Human readable name of the plugin None version str Version of the plugin None description str Description of the plugin None author str Author of the plugin None url str URL of the website of the plugin None license str License of the plugin None","title":"PluginInfo"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.blacklisted","text":"Whether the plugin is blacklisted.","title":"blacklisted"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.bundled","text":"Whether this plugin is bundled with OctoPrint.","title":"bundled"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.enabled","text":"Whether the plugin is enabled.","title":"enabled"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.forced_disabled","text":"Whether the plugin has been force disabled by the system, e.g. due to safe mode blacklisting.","title":"forced_disabled"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.incompatible","text":"Whether this plugin has been detected as incompatible.","title":"incompatible"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.invalid_syntax","text":"Whether invalid syntax was encountered while trying to load this plugin.","title":"invalid_syntax"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.loaded","text":"Whether this plugin has been loaded.","title":"loaded"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.managable","text":"Whether this plugin can be managed by OctoPrint.","title":"managable"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.needs_restart","text":"Whether this plugin needs a restart of OctoPrint after enabling/disabling.","title":"needs_restart"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.origin","text":"The origin from which this plugin was loaded, either a :class: EntryPointOrigin , :class: FolderOrigin or :class: ModuleOrigin instance. Set during loading, initially None .","title":"origin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.author","text":"Author of the plugin. Will be taken from the author attribute of the plugin module as defined in :attr: attr_author if available, otherwise from the author supplied during construction. May be None. Returns: Type Description Optional [ str ] Author of the plugin.","title":"author()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.check","text":"Method for pre-load check of plugin. Will be taken from the check attribute of the plugin module as defined in attr_check if available, otherwise a lambda always returning True is returned. Returns: Type Description callable Check method for the plugin module which should return True if the plugin can be loaded, False otherwise.","title":"check()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.description","text":"Description of the plugin. Will be taken from the description attribute of the plugin module as defined in :attr: attr_description if available, otherwise from the description supplied during construction. May be None. Returns: Type Description Optional [ str ] Description of the plugin.","title":"description()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.disable","text":"Method for disabling the plugin module. Will be taken from the disable attribute of the plugin module as defined in :attr: attr_disable if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Disable method for the plugin module.","title":"disable()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.disabling_discouraged","text":"Reason why disabling of this plugin is discouraged. Only evaluated for bundled plugins! Will be taken from the disabling_discouraged attribute of the plugin module as defined in :attr: attr_disabling_discouraged if available. False if unset or plugin not bundled. Returns: Type Description Optional [ str ] Reason why disabling this plugin is discouraged (only for bundled plugins)","title":"disabling_discouraged()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.enable","text":"Method for enabling the plugin module. Will be taken from the enable attribute of the plugin module as defined in attr_enable if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Enable method for the plugin module.","title":"enable()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.get_hook","text":"Parameters: Name Type Description Default hook str Hook to return. required Returns: Type Description Optional [ Callable ] Handler for the requested hook","title":"get_hook()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.get_implementation","text":"Parameters: Name Type Description Default types list List of :class: Plugin sub classes the implementation needs to implement. required Returns: Type Description object The plugin's implementation if it matches all of the requested types , None otherwise.","title":"get_implementation()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.helpers","text":"Helpers provided by the plugin. Will be taken from the helpers attribute of the plugin module as defined in attr_helpers if available, otherwise an empty list is returned. Returns: Type Description dict Helpers provided by the plugin.","title":"helpers()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.hidden","text":"Hidden flag. Returns: Type Description bool Whether the plugin should be flagged as hidden or not","title":"hidden()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.hooks","text":"Hooks provided by the plugin. Will be taken from the hooks attribute of the plugin module as defined in attr_hooks if available, otherwise an empty dictionary is returned. Returns: Type Description dict Hooks provided by the plugin.","title":"hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.implementation","text":"Implementation provided by the plugin. Will be taken from the implementation attribute of the plugin module as defined in attr_implementation if available, otherwise None is returned. Returns: Type Description object Implementation provided by the plugin.","title":"implementation()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.license","text":"License of the plugin. Will be taken from the license attribute of the plugin module as defined in attr_license if available, otherwise from the license supplied during construction. May be None. Returns: Type Description Optional [ str ] License of the plugin.","title":"license()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.load","text":"Method for loading the plugin module. Will be taken from the load attribute of the plugin module as defined in attr_load if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Load method for the plugin module.","title":"load()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.long_str","text":"Long string representation of the plugin's information. Will return a string of the format <enabled><str(self)><bundled><location> . enabled , bundled and location will only be displayed if the corresponding flags are set to True . The will be filled from enabled_str , bundled_str and location_str as follows: enabled_str a 4-tuple, the first entry being the string to insert when the plugin is enabled, the second entry the string to insert when it is not, the third entry the string when it is blacklisted and the fourth when it is incompatible. bundled_str a 2-tuple, the first entry being the string to insert when the plugin is bundled, the second entry the string to insert when it is not. location_str a format string (to be parsed with str.format ), the {location} placeholder will be replaced with the plugin's installation folder on disk. Parameters: Name Type Description Default show_enabled boolean whether to show the enabled part False enabled_strs tuple the 2-tuple containing the two possible strings to use for displaying the enabled state ('* ', ' ', 'X ', 'C ') show_bundled boolean whether to show the bundled part False bundled_strs(tuple) the 2-tuple containing the two possible strings to use for displaying the bundled state required show_location boolean whether to show the location part False location_str str the format string to use for displaying the plugin's installation location ' - {location}' Returns: Type Description str The long string representation of the plugin as described above","title":"long_str()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.looks_like_plugin","text":"Returns whether the plugin actually looks like a plugin (has control properties) or not.","title":"looks_like_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.name","text":"Human readable name of the plugin. Will be taken from name attribute of the plugin module if available, otherwise from the name supplied during construction with a fallback to key . Returns: Type Description str Name of the plugin, fallback is the plugin's identifier.","title":"name()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.parsed_metadata","text":"The plugin metadata parsed from the plugin's AST.","title":"parsed_metadata()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.privacypolicy","text":"Privacy Policy URL of the plugin. Will be taken from the privacy policy attribute of the plugin module as defined in :attr: attr_privacypolicy if available. May be None. Returns: Type Description str or None: Privacy Policy URL of the plugin.","title":"privacypolicy()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.pythoncompat","text":"Python compatibility string of the plugin module as defined in attr_pythoncompat if available, otherwise defaults to >=2.7,<3 . Returns: Type Description str Python compatibility string of the plugin","title":"pythoncompat()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.unload","text":"Method for unloading the plugin module. Will be taken from the unload attribute of the plugin module as defined in attr_unload if available, otherwise a no-operation lambda will be returned. Returns: Type Description callable Unload method for the plugin module.","title":"unload()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.url","text":"Website URL for the plugin. Will be taken from the url attribute of the plugin module as defined in :attr: attr_url if available, otherwise from the url supplied during construction. May be None. Returns: Type Description Optional [ str ] Website URL for the plugin.","title":"url()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.validate","text":"Validates the plugin for various validation phases. phase can be one of before_import , before_load , after_load . Used by PluginManager , should not be used elsewhere.","title":"validate()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginInfo.version","text":"Version of the plugin. Will be taken from the version attribute of the plugin module as defined in :attr: attr_version if available, otherwise from the version supplied during construction. May be None. Returns: Type Description Optional [ str ] Version of the plugin.","title":"version()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager","text":"The PluginManager is the central component for finding, loading and accessing plugins provided to the system. It is able to discover plugins both through possible file system locations as well as customizable entry points.","title":"PluginManager"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.disable_plugin","text":"Disables a plugin","title":"disable_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.enable_plugin","text":"Enables a plugin","title":"enable_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_filtered_implementations","text":"Get all mixin implementations that implement all of the provided types and match the provided filter f . Parameters: Name Type Description Default f callable A filter function returning True for implementations to return and False for those to exclude. required types one or more type The types a mixin implementation needs to implement in order to be returned. required Returns: Type Description list A list of all found and matching implementations.","title":"get_filtered_implementations()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_helpers","text":"Retrieves the named helpers for the plugin with identifier name . If the plugin is not available, returns None. Otherwise returns a :class: dict with the requested plugin helper names mapped to the method - if a helper could not be resolved, it will be missing from the dict. Parameters: Name Type Description Default name str Identifier of the plugin for which to look up the helpers . required helpers one or more str Identifiers of the helpers of plugin name to return. required Returns: Type Description dict A dictionary of all resolved helpers, mapped by their identifiers, or None if the plugin was not registered with the system.","title":"get_helpers()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_hooks","text":"Retrieves all registered handlers for the specified hook. Parameters: Name Type Description Default hook str The hook for which to retrieve the handlers. required Returns: Type Description dict A dict containing all registered handlers mapped by their plugin's identifier.","title":"get_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_implementations","text":"Get all mixin implementations that implement all of the provided types . Parameters: Name Type Description Default types List [ Type ] The types a mixin implementation needs to implement in order to be returned. required Returns: Type Description list A list of all found implementations","title":"get_implementations()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_plugin","text":"Retrieves the module of the plugin identified by identifier . If the plugin is not registered or disabled and required_enabled is True (the default) None will be returned. Parameters: Name Type Description Default identifier str The identifier of the plugin to retrieve. required require_enabled boolean Whether to only return the plugin if is enabled (True, default) or also if it's disabled. True Returns: Type Description module The requested plugin module if it could be found None The plugin module could not be found","title":"get_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.get_plugin_info","text":"Retrieves the PluginInfo instance identified by identifier . If the plugin is not registered or disabled and required_enabled is True (the default) None will be returned. Parameters: Name Type Description Default identifier str The identifier of the plugin to retrieve. required require_enabled boolean Whether to only return the plugin if is enabled (True, default) or also if it's disabled. True Returns: Type Description octoprint . plugin . core . PluginInfo The requested PluginInfo if it could be found None The requested plugin could not be found","title":"get_plugin_info()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_any_of_hooks","text":"Tests if the plugin contains any of the provided hooks . Uses :func: octoprint.plugin.core.PluginManager.hook_matches_hooks . Parameters: Name Type Description Default plugin plugin to test hooks for required hooks hooks to test against required Returns: Type Description bool True if any of the plugin's hooks match the provided hooks, False otherwise.","title":"has_any_of_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_any_of_mixins","text":"Tests if the plugin has an implementation implementing any of the provided mixins . Parameters: Name Type Description Default plugin plugin for which to check the implementation required mixins mixins to test against required Returns: Type Description bool True if the plugin's implementation implements any of the provided mixins, False otherwise.","title":"has_any_of_mixins()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_obsolete_hooks","text":"Checks whether the plugin uses any obsolete hooks","title":"has_obsolete_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_restart_needing_hooks","text":"Checks whether the plugin has any hooks that need a restart on changes","title":"has_restart_needing_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.has_restart_needing_implementation","text":"Checks whether the plugin's implementation needs a restart on changes","title":"has_restart_needing_implementation()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.hook_matches_hooks","text":"Tests if hook matches any of the provided hooks to test for. hook is expected to be an exact hook name. hooks is expected to be a list containing one or more hook names or patterns. That can be either an exact hook name or an :func: fnmatch.fnmatch pattern. Parameters: Name Type Description Default hook the hook to test required hooks the hook name patterns to test against required Returns: Type Description bool True if the hook matches any of the hooks , False otherwise.","title":"hook_matches_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_obsolete_hook","text":"Checks whether a hook is obsolete","title":"is_obsolete_hook()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_plugin_marked","text":"Checks whether a plugin has been marked with a certain flag. Parameters: Name Type Description Default name str the plugin's identifier required flag str the flag to check required Returns: Type Description bool True if the plugin has been flagged, False otherwise","title":"is_plugin_marked()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_restart_needing_hook","text":"Checks whether a hook needs a restart on changes","title":"is_restart_needing_hook()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.is_restart_needing_plugin","text":"Checks whether the plugin needs a restart on changes","title":"is_restart_needing_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.mark_plugin","text":"Mark plugin name with an arbitrary number of flags. Parameters: Name Type Description Default name str plugin identifier required flags dict dictionary of flag names and values required","title":"mark_plugin()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugin_hooks","text":"Returns: Type Description (dict) dictionary of registered hooks and their handlers","title":"plugin_hooks()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.plugins","text":"Returns: Type Description (list) list of enabled and disabled registered plugins","title":"plugins()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.register_message_receiver","text":"Registers a client for receiving plugin messages. The client needs to be a callable accepting two input arguments, plugin (the sending plugin's identifier) and data (the message itself), and one optional keyword argument, permissions (an optional list of permissions to test against).","title":"register_message_receiver()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.reload_plugins","text":"Reloads plugins, detecting newly added ones in the process. Parameters: Name Type Description Default startup bool whether this is called during startup of the platform False initialize_implementations bool whether plugin implementations should be initialized True force_reload list list of plugin identifiers which should be force reloaded None","title":"reload_plugins()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.send_plugin_message","text":"Sends data in the name of plugin to all currently registered message receivers by invoking them with the three arguments. Parameters: Name Type Description Default plugin str The sending plugin's identifier. required data object The message. required permissions list A list of permissions to test against in the client. None","title":"send_plugin_message()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.PluginManager.unregister_message_receiver","text":"Unregisters a client for receiving plugin messages.","title":"unregister_message_receiver()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.RestartNeedingPlugin","text":"Bases: Plugin Mixin for plugin types that need a restart after enabling/disabling them.","title":"RestartNeedingPlugin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.SortablePlugin","text":"Bases: Plugin Mixin for plugin types that are sortable.","title":"SortablePlugin"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.SortablePlugin.get_sorting_key","text":"Returns the sorting key to use for the implementation in the specified context . May return None if order is irrelevant. Implementations returning None will be ordered by plugin identifier after all implementations which did return a sorting key value that was not None sorted by that. Parameters: Name Type Description Default context str The sorting context for which to provide the sorting key value. None Returns: Type Description Optional [ int ] An integer signifying the sorting key value of the plugin (sorting will be done ascending), or None if the implementation doesn't care about calling order.","title":"get_sorting_key()"},{"location":"reference/octoprint/plugin/core/#octoprint.plugin.core.is_sub_path_of","text":"Tests if path is a sub path of (or identical to) parent . Parameters: Name Type Description Default path str The path to test. required parent str The parent path to test against. required Example >>> is_sub_path_of ( \"/a/b/c\" , \"/a/b\" ) True >>> is_sub_path_of ( \"/a/b/c\" , \"/a/b2\" ) False >>> is_sub_path_of ( \"/a/b/c\" , \"/b/c\" ) False >>> is_sub_path_of ( \"/foo/bar/../../a/b/c\" , \"/a/b\" ) True >>> is_sub_path_of ( \"/a/b\" , \"/a/b\" ) True","title":"is_sub_path_of()"},{"location":"reference/octoprint/plugin/types/","text":"octoprint.plugin.types # This module bundles all of OctoPrint's supported plugin implementation types as well as their common parent class, OctoPrintPlugin . Please note that the plugin implementation types are documented in the section Available plugin mixins . AssetPlugin # Bases: OctoPrintPlugin , RestartNeedingPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. A typical usage of the AssetPlugin functionality is to embed a custom view model to be used by templates injected through a TemplatePlugin . get_asset_folder () # Defines the folder where the plugin stores its static assets as defined in get_assets . Override this if your plugin stores its assets at some other place than the static sub folder in the plugin base directory. Returns: Type Description str The absolute path to the folder where the plugin stores its static assets get_assets () # Defines the static assets the plugin offers. The following asset types are recognized and automatically imported at the appropriate places to be available: js JavaScript files, such as additional view models jsclient JavaScript files containing additional parts for the JS Client Library (since 1.3.10) css CSS files with additional styles, will be embedded into delivered pages when not running in LESS mode. less LESS files with additional styles, will be embedded into delivered pages when running in LESS mode. The expected format to be returned is a dictionary mapping one or more of these keys to a list of files of that type, the files being represented as relative paths from the asset folder as defined via get_asset_folder . Example def get_assets ( self ): return dict ( js = [ 'js/my_file.js' , 'js/my_other_file.js' ], clientjs = [ 'clientjs/my_file.js' ], css = [ 'css/my_styles.css' ], less = [ 'less/my_styles.less' ] ) The assets will be made available by OctoPrint under the URL /plugin/<plugin identifier>/static/<path> , with plugin identifier being the plugin's identifier and path being the path as defined in the asset dictionary. Assets of the types js , css and less will be automatically bundled by OctoPrint using Flask-Assets . Returns: Type Description dict A dictionary describing the static assets to publish for the plugin. BlueprintPlugin # Bases: OctoPrintPlugin , RestartNeedingPlugin The BlueprintPlugin mixin allows plugins to define their own full fledged endpoints for whatever purpose, be it a more sophisticated API than what is possible via the SimpleApiPlugin or a custom web frontend. The mechanism at work here is Flask's own Blueprint mechanism . The mixin automatically creates a blueprint for you that will be registered under /plugin/<plugin identifier>/ . All you need to do is decorate all of your view functions with the route decorator, which behaves exactly the same like Flask's regular route decorators. Example import octoprint.plugin import flask class MyBlueprintPlugin ( octoprint . plugin . BlueprintPlugin ): @octoprint . plugin . BlueprintPlugin . route ( \"/echo\" , methods = [ \"GET\" ]) def myEcho ( self ): if not \"text\" in flask . request . values : abort ( 400 , description = \"Expected a text to echo back.\" ) return flask . request . values [ \"text\" ] __plugin_implementation__ = MyBlueprintPlugin () Your blueprint will be published by OctoPrint under the base URL /plugin/<plugin identifier>/ , so the above example of a plugin with the identifier myblueprintplugin would be reachable under /plugin/myblueprintplugin/echo . Just like with regular blueprints you'll be able to create URLs via url_for , just use the prefix plugin.<plugin identifier>.<method_name> , e.g.: flask . url_for ( \"plugin.myblueprintplugin.myEcho\" ) # will return \"/plugin/myblueprintplugin/echo\" Warning As of OctoPrint 1.8.3, endpoints provided through a BlueprintPlugin do not automatically fall under OctoPrint's CSRF protection , for reasons of backwards compatibility. There will be a short grace period before this changes. You can and should however already opt into CSRF protection for your endpoints by implementing is_blueprint_csrf_protected and returning True from it. You can exempt certain endpoints from CSRF protection by decorating them with @octoprint.plugin.BlueprintPlugin.csrf_exempt . class MyPlugin ( octoprint . plugin . BlueprintPlugin ): @octoprint . plugin . BlueprintPlugin . route ( \"/hello_world\" , methods = [ \"GET\" ]) def hello_world ( self ): # This is a GET request and thus not subject to CSRF protection return \"Hello world!\" @octoprint . plugin . BlueprintPlugin . route ( \"/hello_you\" , methods = [ \"POST\" ]) def hello_you ( self ): # This is a POST request and thus subject to CSRF protection. It is not exempt. return \"Hello you!\" @octoprint . plugin . BlueprintPlugin . route ( \"/hello_me\" , methods = [ \"POST\" ]) @octoprint . plugin . BlueprintPlugin . csrf_exempt () def hello_me ( self ): # This is a POST request and thus subject to CSRF protection, but this one is exempt. return \"Hello me!\" def is_blueprint_csrf_protected ( self ): return True BlueprintPlugin implements :class: ~octoprint.plugins.core.RestartNeedingPlugin . {{ version_changed(\"1.8.3\") }} csrf_exempt () staticmethod # A decorator to mark a view method in your BlueprintPlugin as exempt from :ref: CSRF protection <sec-api-general-csrf> . This makes sense if you offer an authenticated API for a certain workflow (see e.g. the bundled appkeys plugin) but in most cases should not be needed. .. versionadded:: 1.8.3 errorhandler ( code_or_exception ) staticmethod # A decorator to mark errorhandlings methods in your BlueprintPlugin subclass. Works just the same as Flask's own errorhandler decorator available on blueprints. See the documentation for flask.Blueprint.errorhandler and the documentation for flask.Flask.errorhandler for more information. {{ version_added('1.3.0') }} get_blueprint () # Creates and returns the blueprint for your plugin. Override this if you want to define and handle your blueprint yourself. This method will only be called once during server initialization. Returns (flask.Blueprint) the blueprint ready to be registered with Flask get_blueprint_api_prefixes () # Return all prefixes of your endpoint that are an API that should be containing JSON only. Anything that matches this will generate JSON error messages in case of flask.abort calls, instead of the default HTML ones. Defaults to all endpoints under the blueprint. Limit this further as needed. E.g., if you only want your endpoints /foo , /foo/1 and /bar to be declared as API, return [\"/foo\", \"/bar\"] . A match will be determined via startswith. get_blueprint_kwargs () # Override this if you want your blueprint constructed with additional options such as static_folder , template_folder , etc. Defaults to the blueprint's static_folder and template_folder to be set to the plugin's basefolder plus /static or respectively /templates , or - if the plugin also implements AssetPlugin and/or TemplatePlugin - the paths provided by get_asset_folder and get_template_folder respectively. is_blueprint_csrf_protected () # Whether a blueprint's endpoints are CSRF protected . For now, this defaults to False to leave it up to plugins to decide which endpoints should be protected. Long term, this will default to True and hence enforce protection unless a plugin opts out by returning False here. If you do not override this method in your mixin implementation, a warning will be logged to the console to alert you of the requirement to make a decision here and to not rely on the default implementation, due to the forthcoming change in implemented default behaviour. {{ version_added(\"1.8.3\") }} is_blueprint_protected () # Whether a login session by a registered user is needed to access the blueprint's endpoints. Requiring a session is the default. Note that this only restricts access to the blueprint's dynamic methods, static files are always accessible. If you want your blueprint's endpoints to have specific permissions, return False for this and do your permissions checks explicitly. route ( rule , ** options ) staticmethod # A decorator to mark view methods in your BlueprintPlugin subclass. Works just the same as Flask's own route decorator available on blueprints. See the documentation for flask.Blueprint.route and the documentation for flask.Flask.route for more information. EnvironmentDetectionPlugin # Bases: OctoPrintPlugin , RestartNeedingPlugin The EnvironmentDetectionPlugin mixin allows enrichting OctoPrint's environmental information collections with additional data, and to react to successfully collected environmental information. {{ version_added('1.3.6') }} EventHandlerPlugin # Bases: OctoPrintPlugin The EventHandlerPlugin mixin allows OctoPrint plugins to react to any of OctoPrint's events . OctoPrint will call the on_event method for any event fired on its internal event bus, supplying the event type and the associated payload. Please note that until your plugin returns from that method, further event processing within OctoPrint will block - the event queue itself is run asynchronously from the rest of OctoPrint, but the processing of the events within the queue itself happens consecutively. This mixin is especially interesting for plugins which want to react on things like print jobs finishing, timelapse videos rendering etc. on_event ( event , payload ) # Called by OctoPrint upon processing of a fired event on the platform. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. Parameters: Name Type Description Default event str The type of event that got fired, see :ref: the list of events <sec-events-available_events> for possible values required payload dict The payload as provided with the event required OctoPrintPlugin # Bases: Plugin The parent class of all OctoPrint plugin mixins. Attributes: Name Type Description _plugin_manager octoprint . plugin . core . PluginManager The octoprint.plugin.core.PluginManager instance. Injected by the plugin core system upon initialization of the implementation. _printer_profile_manager octoprint . printer . profile . PrinterProfileManager The octoprint.printer.profile.PrinterProfileManager instance. Injected by the plugin core system upon initialization of the implementation. _event_bus octoprint . events . Events The Events instance. Injected by the plugin core system upon initialization of the implementation. _analysis_queue octoprint . filemanager . analysis . AnalysisQueue The AnalysisQueue instance. Injected by the plugin core system upon initialization of the implementation. _slicing_manager octoprint . slicing . SlicingManager The SlicingManager instance. Injected by the plugin core system upon initialization of the implementation. _file_manager octoprint . filemanager . FileManager The FileManager instance. Injected by the plugin core system upon initialization of the implementation. _printer octoprint . printer . Printer The Printer instance. Injected by the plugin core system upon initialization of the implementation. _app_session_manager octoprint . server . app . AppSessionManager The AppSessionManager instance. Injected by the plugin core system upon initialization of the implementation. _plugin_lifecycle_manager octoprint . plugin . LifecycleManager The LifecycleManager instance. Injected by the plugin core system upon initialization of the implementation. _user_manager octoprint . users . UserManager The UserManager instance. Injected by the plugin core system upon initialization of the implementation. _connectivity_checker octoprint . util . connectivity . ConnectivityChecker The ConnectivityChecker instance. Injected by the plugin core system upon initialization of the implementation. _data_folder str The path to the data folder of the plugin, to use for any data it might have to persist. Should always be accessed through get_plugin_data_folder , since that function will also ensure that the data folder actually exists and if not create it before returning it. Injected by the plugin core system upon initialization of the implementation. get_plugin_data_folder () # Retrieves the path to a data folder specifically for the plugin, ensuring it exists and if not creating it before returning it. Plugins may use this folder for storing additional data they need for their operation. on_plugin_pending_uninstall () # Called by the plugin manager when the plugin is pending uninstall. Override this to react to the event. Warning This is not called during plugin uninstalls triggered outside of OctoPrint! ProgressPlugin # Bases: OctoPrintPlugin Via the ProgressPlugin mixin plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps. on_print_progress ( storage , path , progress ) # Called by OctoPrint on minimally 1% increments during a running print job. Parameters: Name Type Description Default storage str Location of the file. required path str Path of the file in the storage. required progress int Current progress as a value between 0 and 100. required on_slicing_progress ( slicer , source_location , source_path , destination_location , destination_path , progress ) # Called by OctoPrint on minimally 1% increments during a running slicing job. Parameters: Name Type Description Default slicer str Key of the slicer reporting the progress. required source_location str Location of the source file. required source_path str Path of the source file in the source location. required destination_location str Location of the destination file. required destination_path str Path of the destination file in the destination location. required progress int Current progress as a value between 0 and 100. required ReloadNeedingPlugin # Bases: Plugin Mixin for plugin types that need a reload of the UI after enabling/disabling them. SettingsPlugin # Bases: OctoPrintPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. Plugins including the mixing will get injected an additional property self._settings which is an instance of PluginSettingsManager already properly initialized for use by the plugin. In order for the manager to know about the available settings structure and default values upon initialization, implementing plugins will need to provide a dictionary with the plugin's default settings through overriding the method get_settings_defaults . The defined structure will then be available to access through the settings manager available as self._settings . If your plugin needs to react to the change of specific configuration values on the fly, e.g. to adjust the log level of a logger when the user changes a corresponding flag via the settings dialog, you can override the on_settings_save method and wrap the call to the implementation from the parent class with retrieval of the old and the new value and react accordingly. Example import octoprint.plugin class MySettingsPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . StartupPlugin ): def get_settings_defaults ( self ): return dict ( some_setting = \"foo\" , some_value = 23 , sub = dict ( some_flag = True ) ) def on_settings_save ( self , data ): old_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) octoprint . plugin . SettingsPlugin . on_settings_save ( self , data ) new_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) if old_flag != new_flag : self . _logger . info ( \"sub.some_flag changed from {old_flag} to {new_flag} \" . format ( ** locals ())) def on_after_startup ( self ): some_setting = self . _settings . get ([ \"some_setting\" ]) some_value = self . _settings . get_int ([ \"some_value\" ]) some_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) self . _logger . info ( \"some_setting = {some_setting} , some_value = {some_value} , sub.some_flag = {some_flag} \" . format ( ** locals ()) __plugin_implementation__ = MySettingsPlugin () Of course, you are always free to completely override both on_settings_load and on_settings_save if the default implementations do not fit your requirements. Warning Make sure to protect sensitive information stored by your plugin that only logged in administrators (or users) should have access to via get_settings_restricted_paths . OctoPrint will return its settings on the REST API even to anonymous clients, but will filter out fields it knows are restricted, therefore you must make sure that you specify sensitive information accordingly to limit access as required! config_version_key = '_config_version' class-attribute # Key of the field in the settings that holds the configuration format version. get_settings_defaults () # Retrieves the plugin's default settings with which the plugin's settings manager will be initialized. Override this in your plugin's implementation and return a dictionary defining your settings data structure with included default values. get_settings_preprocessors () # Retrieves the plugin's preprocessors to use for preprocessing returned or set values prior to returning/setting them. The preprocessors should be provided as a dictionary mapping the path of the values to preprocess (hierarchically) to a transform function which will get the value to transform as only input and should return the transformed value. Example def get_settings_defaults ( self ): return dict ( some_key = \"Some_Value\" , some_other_key = \"Some_Value\" ) def get_settings_preprocessors ( self ): return dict ( some_key = lambda x : x . upper ()), # getter preprocessors dict ( some_other_key = lambda x : x . lower ()) # setter preprocessors def some_method ( self ): # getting the value for \"some_key\" should turn it to upper case assert self . _settings . get ([ \"some_key\" ]) == \"SOME_VALUE\" # the value for \"some_other_key\" should be left alone assert self . _settings . get ([ \"some_other_key\" ] = \"Some_Value\" # setting a value for \"some_other_key\" should cause the value to first be turned to lower case self . _settings . set ([ \"some_other_key\" ], \"SOME_OTHER_VALUE\" ) assert self . _settings . get ([ \"some_other_key\" ]) == \"some_other_value\" Returns: Type Description Tuple [ dict , dict ] A tuple consisting of two dictionaries, the first being the plugin's preprocessors for getters, the second the preprocessors for setters get_settings_restricted_paths () # Retrieves the list of paths in the plugin's settings which be restricted on the REST API. Override this in your plugin's implementation to restrict whether a path should only be returned to users with certain permissions, or never on the REST API. Return a dict with one of the following keys, mapping to a list of paths (as tuples or lists of the path elements) for which to restrict access via the REST API accordingly. An OctoPrintPermission instance: Paths will only be available on the REST API for users with the permission admin : Paths will only be available on the REST API for users with admin rights (any user with the SETTINGS permission) user : Paths will only be available on the REST API when accessed as a logged in user never : Paths will never be returned on the API Example def get_settings_defaults ( self ): return dict ( some = dict ( admin_only = dict ( path = \"path\" , foo = \"foo\" ), user_only = dict ( path = \"path\" , bar = \"bar\" )), another = dict ( admin_only = dict ( path = \"path\" ), field = \"field\" ), path = dict ( to = dict ( never = dict ( return = \"return\" ))), the = dict ( webcam = dict ( data = \"webcam\" ))) def get_settings_restricted_paths ( self ): from octoprint.access.permissions import Permissions return { 'admin' :[[ \"some\" , \"admin_only\" , \"path\" ], [ \"another\" , \"admin_only\" , \"path\" ],], 'user' :[[ \"some\" , \"user_only\" , \"path\" ],], 'never' :[[ \"path\" , \"to\" , \"never\" , \"return\" ],], Permissions . WEBCAM :[[ \"the\" , \"webcam\" , \"data\" ],]} # this will make the plugin return settings on the REST API like this for an anonymous user # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=None, bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user without the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user with the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) # # and like this for an admin user # # dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=\"path\"), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) {{ version_added(\"1.2.17\") }} get_settings_version () # Retrieves the settings format version of the plugin. Use this to have OctoPrint trigger your migration function if it detects an outdated settings version in config.yaml. Returns: Type Description Optional [ int ] an int signifying the current settings format, should be incremented by plugins whenever there are backwards incompatible changes. Returning None here disables the version tracking for the plugin's configuration. on_settings_cleanup () # Called after migration and initialization but before call to on_settings_initialized . Plugins may overwrite this method to perform additional clean up tasks. The default implementation just minimizes the data persisted on disk to only contain the differences to the defaults (in case the current data was persisted with an older version of OctoPrint that still duplicated default data). {{ version_added(\"1.3.0\") }} on_settings_initialized () # Called after the settings have been initialized and -- if necessary -- also been migrated through a call to on_settings_migrate . This method will always be called after the initialize method. on_settings_load () # Loads the settings for the plugin, called by the Settings API view in order to retrieve all settings from all plugins. Override this if you want to inject additional settings properties that are not stored within OctoPrint's configuration. Note The default implementation will return your plugin's settings as is, so just in the structure and in the types that are currently stored in OctoPrint's configuration. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, using the proper retriever methods on the settings manager to retrieve the data in the correct format. The default implementation will also replace any paths that have been restricted by your plugin through get_settings_restricted_paths with either the provided default value (if one was provided), an empty dictionary (as fallback for restricted dictionaries), an empty list (as fallback for restricted lists) or None values where necessary. Make sure to do your own restriction if you decide to fully overload this method. Returns: Type Description dict The current settings of the plugin, as a dictionary. on_settings_migrate ( target , current ) # Called by OctoPrint if it detects that the installed version of the plugin necessitates a higher settings version than the one currently stored in _config.yaml. Will also be called if the settings data stored in config.yaml doesn't have version information, in which case the current parameter will be None. Your plugin's implementation should take care of migrating any data by utilizing self._settings. OctoPrint will take care of saving any changes to disk by calling self._settings.save() after returning from this method. This method will be called before your plugin's on_settings_initialized method, with all injections already having taken place. You can therefore depend on the configuration having been migrated by the time on_settings_initialized is called. Parameters: Name Type Description Default target int The settings format version the plugin requires, this should always be the same value as returned by get_settings_version . required current Optional [ int ] The settings format version as currently stored in config.yaml . May be None if no version information can be found. required on_settings_save ( data ) # Saves the settings for the plugin, called by the Settings API view in order to persist all settings from all plugins. Override this if you need to directly react to settings changes or want to extract additional settings properties that are not stored within OctoPrint's configuration. Note The default implementation will persist your plugin's settings as is, so just in the structure and in the types that were received by the Settings API view. Values identical to the default settings values will not be persisted. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, retrieving them (if set) from the supplied received data and using the proper setter methods on the settings manager to persist the data in the correct format. Parameters: Name Type Description Default data dict The settings dictionary to be saved for the plugin required Returns: Type Description dict The settings that differed from the defaults and were actually saved. ShutdownPlugin # Bases: OctoPrintPlugin , SortablePlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the StartupPlugin mixin, to cleanly shut down additional services again that where started by the StartupPlugin part of the plugin. ShutdownPlugin is a SortablePlugin and provides a sorting context for ShutdownPlugin.on_shutdown . on_shutdown () # Called upon the imminent shutdown of OctoPrint. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is ShutdownPlugin.on_shutdown . SimpleApiPlugin # Bases: OctoPrintPlugin Utilizing the SimpleApiPlugin mixin plugins may implement a simple API based around one GET resource and one resource accepting JSON commands POSTed to it. This is the easy alternative for plugin's which don't need the full power of a Flask Blueprint that the BlueprintPlugin mixin offers. Use this mixin if all you need to do is return some kind of dynamic data to your plugin from the backend and/or want to react to simple commands which boil down to a type of command and a few flat parameters supplied with it. The simple API constructed by OctoPrint for you will be made available under /api/plugin/<plugin identifier>/ . OctoPrint will do some preliminary request validation for your defined commands, making sure the request body is in the correct format (content type must be JSON) and contains all obligatory parameters for your command. Let's take a look at a small example for such a simple API and how you would go about calling it. Take this example of a plugin registered under plugin identifier mysimpleapiplugin : import octoprint.plugin import flask class MySimpleApiPlugin ( octoprint . plugin . SimpleApiPlugin ): def get_api_commands ( self ): return dict ( command1 = [], command2 = [ \"some_parameter\" ] ) def on_api_command ( self , command , data ): import flask if command == \"command1\" : parameter = \"unset\" if \"parameter\" in data : parameter = \"set\" self . _logger . info ( \"command1 called, parameter is {parameter} \" . format ( ** locals ())) elif command == \"command2\" : self . _logger . info ( \"command2 called, some_parameter is {some_parameter} \" . format ( ** data )) def on_api_get ( self , request ): return flask . jsonify ( foo = \"bar\" ) __plugin_implementation__ = MySimpleApiPlugin () Our plugin defines two commands, command1 with no mandatory parameters and command2 with one mandatory parameter some_parameter . command1 can also accept an optional parameter parameter , and will log whether that parameter was set or unset. command2 will log the content of the mandatory some_parameter parameter. A valid POST request for command2 sent to /api/plugin/mysimpleapiplugin would look like this: POST /api/plugin/mysimpleapiplugin HTTP / 1.1 Host : example.com Content-Type : application/json X-Api-Key : abcdef... { \"command\" : \"command2\" , \"some_parameter\" : \"some_value\" , \"some_optional_parameter\" : 2342 } which would produce a response like this: HTTP / 1.1 204 No Content and print something like this line to octoprint.log : 2022-02-12 17:40:21,140 - octoprint.plugins.mysimpleapiplugin - INFO - command2 called, some_parameter is some_value A GET request on our plugin's simple API resource will only return a JSON document like this: HTTP / 1.1 200 Ok Content-Type : application/json { \"foo\" : \"bar\" } get_api_commands () # Return a dictionary here with the keys representing the accepted commands and the values being lists of mandatory parameter names. Returns: Type Description Optional [ dict ] a dictionary descripting the accepted commands and their mandatory parameters is_api_adminonly () # Return True if the API is only available to users having the admin role. Returns: Type Description bool True if the API is only available to users having the admin permission on_api_command ( command , data ) # Called by OctoPrint upon a POST request to /api/plugin/<plugin identifier> . command will contain one of the commands as specified via get_api_commands , data will contain the full request body parsed from JSON into a Python dictionary. Note that this will also contain the command attribute itself. For the example given above, for the command2 request the data received by the plugin would be equal to dict(command=\"command2\", some_parameter=\"some_value\") . If your plugin returns nothing here, OctoPrint will return an empty response with return code 204 No content for you. You may also return regular responses as you would return from any Flask view here though, e.g. return flask.jsonify(result=\"some json result\") or flask.abort(404) . Parameters: Name Type Description Default command str the command with which the resource was called required data dict the full request body of the POST request parsed from JSON into a Python dictionary required Returns: Type Description Optional [ flask . Response ] a response to be returned to the client, either None in which case OctoPrint will generate a 204 No content response with empty body, or optionally a proper Flask response. on_api_get ( request ) # Called by OctoPrint upon a GET request to /api/plugin/<plugin identifier> . request will contain the received Flask request object which you may evaluate for additional arguments supplied with the request. If your plugin returns nothing here, OctoPrint will return an empty response with return code 204 No content for you. You may also return regular responses as you would return from any Flask view here though, e.g. return flask . jsonify ( result = \"some json result\" ) or return flask . abort ( 404 ) Parameters: Name Type Description Default request flask . Request the Flask request object required Returns: Type Description Optional [ flask . Response ] a response to be returned to the client, either None in which case OctoPrint will generate a 204 No content response with empty body, or optionally a proper Flask response. SlicerPlugin # Bases: OctoPrintPlugin Via the SlicerPlugin mixin plugins can add support for slicing engines to be used by OctoPrint. cancel_slicing ( machinecode_path ) # Cancels the slicing to the indicated file. Parameters: Name Type Description Default machinecode_path str The absolute path to the machine code file to which to stop slicing to. required do_slice ( model_path , printer_profile , machinecode_path = None , profile_path = None , position = None , on_progress = None , on_progress_args = None , on_progress_kwargs = None ) # Called by OctoPrint to slice model_path for the indicated printer_profile . If the machinecode_path is None , slicer implementations should generate it from the provided model_path . If provided, the profile_path is guaranteed by OctoPrint to be a serialized slicing profile created through the slicing plugin's own save_slicer_profile method. If provided, position will be a dict containing and x and a y key, indicating the position the center of the model on the print bed should have in the final sliced machine code. If not provided, slicer implementations should place the model in the center of the print bed. on_progress will be a callback which expects an additional keyword argument _progress with the current slicing progress which - if progress reporting is supported - the slicing plugin should call like the following: if on_progress is not None : if on_progress_args is None : on_progress_args = () if on_progress_kwargs is None : on_progress_kwargs = dict () on_progress_kwargs [ \"_progress\" ] = your_plugins_slicing_progress on_progress ( * on_progress_args , ** on_progress_kwargs ) Please note that both on_progress_args and on_progress_kwargs as supplied by OctoPrint might be None , so always make sure to initialize those values to sane defaults like depicted above before invoking the callback. In order to support external cancellation of an ongoing slicing job via cancel_slicing , implementations should make sure to track the started jobs via the machinecode_path , if provided. The method should return a 2-tuple consisting of a boolean flag indicating whether the slicing job was finished successfully (True) or not (False) and a result depending on the success of the slicing job. For jobs that finished successfully, result should be a dict containing additional information about the slicing job under the following keys: analysis Analysis result of the generated machine code as returned by the slicer itself. This should match the data structure described for the analysis queue of the matching machine code format, e.g. octoprint.filemanager.analysis.GcodeAnalysisQueue for GCODE files. For jobs that did not finish successfully (but not due to being cancelled!), result should be a :class: str containing a human readable reason for the error. If the job gets cancelled, a octoprint.slicing.SlicingCancelled exception should be raised. Returns: Type Description tuple A 2-tuple (boolean, object) as outlined above. Raises: Type Description SlicingCancelled The slicing job was cancelled (via cancel_slicing ). get_slicer_default_profile () # Should return a octoprint.slicing.SlicingProfile containing the default slicing profile to use with this slicer if no other profile has been selected. Returns: Type Description SlicingProfile The octoprint.slicing.SlicingProfile containing the default slicing profile for this slicer. get_slicer_extension_tree () # Fetch additional entries to put into the extension tree for accepted files By default, a subtree for model files with stl extension is returned. Slicers who want to support additional/other file types will want to override this. For the extension tree format, take a look at the docs of the octoprint.filemanager.extension_tree hook . Returns: Type Description (dict) a dictionary containing a valid extension subtree. {{ version_added(\"1.3.11\") }} get_slicer_profile ( path ) # Should return a octoprint.slicing.SlicingProfile parsed from the slicing profile stored at the indicated path . Parameters: Name Type Description Default path str The absolute path from which to read the slicing profile. required Returns: Type Description SlicingProfile The specified slicing profile. get_slicer_profiles ( profile_path ) # Fetch all octoprint.slicing.SlicingProfile stored for this slicer. For compatibility reasons with existing slicing plugins this method defaults to returning profiles parsed from .profile files in the plugin's profile_path , utilizing the SlicingPlugin.get_slicer_profile method of the plugin implementation. Parameters: Name Type Description Default profile_path str The base folder where OctoPrint stores this slicer plugin's profiles required {{ version_added(\"1.3.7\") }} get_slicer_profiles_lastmodified ( profile_path ) # {{ version_added(\"1.3.0\") }} get_slicer_properties () # Plugins should override this method to return a dict containing a bunch of meta data about the implemented slicer. The expected keys in the returned dict have the following meaning: type The type identifier to use for the slicer. This should be a short unique lower case string which will be used to store slicer profiles under or refer to the slicer programmatically or from the API. name The human readable name of the slicer. This will be displayed to the user during slicer selection. same_device True if the slicer runs on the same device as OctoPrint, False otherwise. Slicers running on the same device will not be allowed to slice on systems with less than two CPU cores (or an unknown number) while a print is running due to performance reasons. Slice requests against slicers running on the same device and less than two cores will result in an error. progress_report True if the slicer can report back slicing progress to OctoPrint False otherwise. source_file_types A list of file types this slicer supports as valid origin file types. These are file types as found in the paths within the extension tree. Plugins may add additional file types through the :ref: sec-plugins-hook-filemanager-extensiontree hook. The system will test source files contains in incoming slicing requests via :meth: octoprint.filemanager.valid_file_type against the targeted slicer's source_file_types . destination_extension The possible extensions of slicing result files. Returns: Type Description dict A dict describing the slicer as outlined above. is_slicer_configured () # Unless the return value of this method is True , OctoPrint will not register the slicer within the slicing sub system upon startup. Plugins may use this to do some start up checks to verify that e.g. the path to a slicing binary as set and the binary is executable, or credentials of a cloud slicing platform are properly entered etc. Returns: Type Description bool True if the slicer is configured and ready to be used, False otherwise. save_slicer_profile ( path , profile , allow_overwrite = True , overrides = None ) # Should save the provided octoprint.slicing.SlicingProfile to the indicated path , after applying any supplied overrides . If a profile is already saved under the indicated path and allow_overwrite is set to False (defaults to True ), an IOError should be raised. Parameters: Name Type Description Default path str The absolute path to which to save the profile. required profile SlicingProfile The profile to save. required allow_overwrite boolean Whether to allow to overwrite an existing profile at the indicated path ( True , default) or not ( False ). If a profile already exists on the path and this is False an IOError should be raised. True overrides dict Profile overrides to apply to the profile before saving it None StartupPlugin # Bases: OctoPrintPlugin , SortablePlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. StartupPlugin is a SortablePlugin and provides sorting contexts for on_startup as well as on_after_startup . on_after_startup () # Called just after launch of the server, so when the listen loop is actually running already. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_after_startup . on_startup ( host , port ) # Called just before the server is actually launched. Plugins get supplied with the host and port the server will listen on. Note that the host may be 0.0.0.0 if it will listen on all interfaces, so you can't just blindly use this for constructing publicly reachable URLs. Also note that when this method is called, the server is not actually up yet and none of your plugin's APIs or blueprints will be reachable yet. If you need to be externally reachable, use on_after_startup instead or additionally. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_startup . Parameters: Name Type Description Default host string the host the server will listen on, may be 0.0.0.0 required port int the port the server will listen on required TemplatePlugin # Bases: OctoPrintPlugin , ReloadNeedingPlugin Using the TemplatePlugin mixin plugins may inject their own components into the OctoPrint web interface. Currently OctoPrint supports the following types of injections out of the box: Navbar The right part of the navigation bar located at the top of the UI can be enriched with additional links. Note that with the current implementation, plugins will always be located to the left of the existing links. The included template must be called <plugin identifier>_navbar.jinja2 (e.g. myplugin_navbar.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper structure will have all additional classes and styles applied as specified via the configuration supplied through get_template_configs . Sidebar The left side bar containing Connection, State and Files sections can be enriched with additional sections. Note that with the current implementations, plugins will always be located beneath the existing sections. The included template must be called <plugin identifier>_sidebar.jinja2 (e.g. myplugin_sidebar.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper divs for both the whole box as well as the content pane will have all additional classes and styles applied as specified via the configuration supplied through get_template_configs . Tabs The available tabs of the main part of the interface may be extended with additional tabs originating from within plugins. Note that with the current implementation, plugins will always be located to the right of the existing tabs. The included template must be called <plugin identifier>_tab.jinja2 (e.g. myplugin_tab.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as specified via the configuration supplied through get_template_configs . Settings Plugins may inject a dialog into the existing settings view. Note that with the current implementation, plugins will always be listed beneath the \"Plugins\" header in the settings link list, ordered alphabetically after their displayed name. The included template must be called <plugin identifier>_settings.jinja2 (e.g. myplugin_settings.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as defined via the configuration through get_template_configs . Wizards Plugins may define wizard dialogs to display to the user if necessary (e.g. in case of missing information that needs to be queried from the user to make the plugin work). Note that with the current implementation, all wizard dialogs will always be sorted by their mandatory attribute (which defaults to False ) and then alphabetically by their name . Hence, mandatory wizard steps will come first, sorted alphabetically, then the optional steps will follow, also alphabetically. A wizard dialog provided through a plugin will only be displayed if the plugin reports the wizard as being required through is_wizard_required . Please also refer to the WizardPlugin mixin for further details on this. The included template must be called <plugin identifier>_wizard.jinja2 (e.g. myplugin_wizard.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the wizard navigation will have the additional classes and styles applied as defined via the configuration supplied through get_template_configs . Note A note about mandatory wizard steps: In the current implementation, marking a wizard step as mandatory will only make it styled accordingly. It is the task of the view model to actually prevent the user from skipping the dialog by implementing the onWizardTabChange callback and returning false there if it is detected that the user hasn't yet filled in the wizard step. {{ version_added(\"1.3.0\") }} About Plugins may define additional panels into OctoPrint's \"About\" dialog. Note that with the current implementation further about dialog panels will be sorted alphabetically by their name and sorted after the predefined ones. The included template must be called <plugin identifier>_about.jinja2 (e.g. myplugin_about.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapped div and the link in the navigation will have the additional classes and styles applied as defined via the configuration supplied through get_template_configs . {{ version_added(\"1.3.0\") }} Generic Plugins may also inject arbitrary templates into the page of the web interface itself, e.g. in order to add overlays or dialogs to be called from within the plugin's JavaScript code. Template injection types in the main part of the interface Template injection types in the settings You can find an example for a simple plugin which injects navbar, tab and settings content into the interface in the \"helloworld\" plugin in OctoPrint's Plugin Tutorial . Plugins may replace existing components, see the replaces keyword in the template configurations returned by get_template_configs below. Note that if a plugin replaces a core component, it is the plugin's responsibility to ensure that all core functionality is still maintained. Plugins can also add additional template types by implementing the octoprint.ui.web.templatetypes hook . TemplatePlugin is a ReloadNeedingPlugin . get_template_configs () # Allows configuration of injected navbar, sidebar, tab and settings templates (and also additional templates of types specified by plugins through the octoprint.ui.web.templatetypes hook ). Should be a list containing one configuration object per template to inject. Each configuration object is represented by a dictionary which may contain the following keys: type The template type the configuration is targeting. Possible values here are navbar , sidebar , tab , settings and generic . Mandatory. name The name of the component, if not set the name of the plugin will be used. The name will be visible at a location depending on the type : navbar : unused sidebar : sidebar heading tab : tab heading settings : settings link wizard : wizard link about : about link generic : unused template Name of the template to inject, default value depends on the type : navbar : <plugin identifier>_navbar.jinja2 sidebar : <plugin identifier>_sidebar.jinja2 tab : <plugin identifier>_tab.jinja2 settings : <plugin identifier>_settings.jinja2 wizard : <plugin identifier>_wizard.jinja2 about : <plugin identifier>_about.jinja2 generic : <plugin identifier>.jinja2 suffix Suffix to attach to the component identifier and the div identifier of the injected template. Will be _<index> if not provided and not the first template of the type, with index counting from 1 and increasing for each template of the same type. Example If your plugin with identifier myplugin defines two tab components like this: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_first_tab.jinja2\" }, { \"type\" = \"tab\" , \"template\" = \"myplugin_second_tab.jinja2\" } ] then the first tab will have the component identifier plugin_myplugin and the second one will have the component identifier plugin_myplugin_2 (the generated divs will be tab_plugin_myplugin and tab_plugin_myplugin_2 accordingly). Notice that the first tab is not called plugin_myplugin_1 -- as stated above while the index used as default suffix starts counting at 1, it will not be applied for the first component of a given type. If on the other hand your plugin's definition looks like this: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_first_tab.jinja2\" , \"suffix\" = \"_1st\" }, { \"type\" = \"tab\" , \"template\" = \"myplugin_second_tab.jinja2\" , \"suffix\" = \"_2nd\" } ] then the generated component identifier will be plugin_myplugin_1st and plugin_myplugin_2nd (and the divs will be tab_plugin_myplugin_1st and tab_plugin_myplugin_2nd ). div Id for the div containing the component. If not provided, defaults to <type>_plugin_<plugin identifier> plus the suffix if provided or required. replaces Id of the component this one replaces, might be either one of the core components or a component provided by another plugin. A list of the core component identifiers can be found in the configuration documentation . The identifiers of other plugin components always follow the format described above. custom_bindings A boolean value indicating whether the default view model should be bound to the component ( false ) or if a custom binding will be used by the plugin ( true , default). data_bind Additional knockout data bindings to apply to the component, can be used to add further behaviour to the container based on internal state if necessary. classes Additional classes to apply to the component, as a list of individual classes (e.g. classes=[\"myclass\", \"myotherclass\"] ) which will be joined into the correct format by the template engine. styles Additional CSS styles to apply to the component, as a list of individual declarations (e.g. styles=[\"color: red\", \"display: block\"] ) which will be joined into the correct format by the template engine. Further keys to be included in the dictionary depend on the type: sidebar type icon Icon to use for the sidebar header, should be the full name of a Font Awesome icon including the fas / far / fab prefix, eg. fas fa-plus . template_header Additional template to include in the head section of the sidebar item. For an example of this, see the additional options included in the \"Files\" section. classes_wrapper Like classes but only applied to the whole wrapper around the sidebar box. classes_content Like classes but only applied to the content pane itself. styles_wrapper Like styles but only applied to the whole wrapper around the sidebar box. styles_content Like styles but only applied to the content pane itself tab type and settings type classes_link Like classes but only applied to the link in the navigation. classes_content Like classes but only applied to the content pane itself. styles_link Like styles but only applied to the link in the navigation. styles_content Like styles but only applied to the content pane itself. wizard type mandatory Whether the wizard step is mandatory (True) or not (False). Optional, defaults to False. If set to True, OctoPrint will sort visually mark the step as mandatory in the UI (bold in the navigation and a little alert) and also sort it into the first half. Note As already outlined above, each template type has a default template name (i.e. the default navbar template of a plugin is called <plugin identifier>_navbar.jinja2 ), which may be overridden using the template configuration. If a plugin needs to include more than one template of a given type, it needs to provide an entry for each of those, since the implicit default template will only be included automatically if no other templates of that type are defined. Example: If you have a plugin that injects two tab components, one defined in the template file myplugin_tab.jinja2 (the default template) and one in the template myplugin_othertab.jinja2 , you might be tempted to just return the following configuration since one your templates is named by the default template name: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_othertab.jinja2\" } ] This will only include the tab defined in myplugin_othertab.jinja2 though, myplugin_tab.jinja2 will not be included automatically since the presence of a definition for the tab type overrides the automatic injection of the default template. You'll have to include it explicitly: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_tab.jinja2\" } { \"type\" = \"tab\" , \"template\" = \"myplugin_othertab.jinja2\" } ] Returns: Type Description list a list containing the configuration options for the plugin's injected templates get_template_folder () # Defines the folder where the plugin stores its templates. Override this if your plugin stores its templates at some other place than the templates sub folder in the plugin base directory. Returns: Type Description str the absolute path to the folder where the plugin stores its jinja2 templates get_template_vars () # Defines additional template variables to include into the template renderer. Variable names will be prefixed with plugin_<plugin identifier>_ . Returns: Type Description dict a dictionary containing any additional template variables to include in the renderer UiPlugin # Bases: OctoPrintPlugin , SortablePlugin The UiPlugin mixin allows plugins to completely replace the UI served by OctoPrint when requesting the main page hosted at / . OctoPrint will query whether your mixin implementation will handle a provided request by calling will_handle_ui with the Flask Request object as parameter. If you plugin returns True here, OctoPrint will next call on_ui_render with a few parameters like - again - the Flask Request object and the render keyword arguments as used by the default OctoPrint web interface. For more information see below. There are two methods used in order to allow for caching of the actual response sent to the client. Whatever a plugin implementation returns from the call to its on_ui_render method will be cached server side. The cache will be emptied in case of explicit no-cache headers sent by the client, or if the _refresh query parameter on the request exists and is set to true . To prevent caching of the response altogether, a plugin may set no-cache headers on the returned response as well. UiPlugin is a SortablePlugin with a sorting context for UiPlugin.will_handle_ui . The first plugin to return True for will_handle_ui will be the one whose UI will be used, no further calls to on_ui_render will be performed. If implementations want to serve custom templates in the on_ui_render method it is recommended to also implement the TemplatePlugin mixin . Example What follows is a very simple example that renders a different (non functional and only exemplary) UI if the requesting client has a UserAgent string hinting at it being a mobile device: dummy_mobile_ui/__init__py # coding=utf-8 from __future__ import absolute_import import octoprint.plugin class DummyMobileUiPlugin ( octoprint . plugin . UiPlugin , octoprint . plugin . TemplatePlugin ): def will_handle_ui ( self , request ): # returns True if the User Agent sent by the client matches one of # the User Agent strings known for any of the platforms android, ipad # or iphone return request . user_agent and request . user_agent . platform in ( \"android\" , \"ipad\" , \"iphone\" ) def on_ui_render ( self , now , request , render_kwargs ): # if will_handle_ui returned True, we will now render our custom index # template, using the render_kwargs as provided by OctoPrint from flask import make_response , render_template return make_response ( render_template ( \"dummy_mobile_ui_index.jinja2\" , ** render_kwargs )) __plugin_name__ = \"Dummy Mobile UI\" __plugin_pythoncompat__ = \">=2.7,<4\" __plugin_implementation__ = DummyMobileUiPlugin () dummy_mobile_ui/templates/dummy_mobile_ui_index.jinja2 <html> <head> <title>Dummy Mobile OctoPrint UI</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"/> </head> <body> <h1>Dummy Mobile OctoPrint UI</h1> <p> Well hello there. Sadly, this is only a placeholder page used to demonstrate how UiPlugins work. Hence the \"Dummy\" in the name. Hope you are not too disappointed :) </p> <p> Some data from the <code>render_kwargs</code> passed to this template: </p> <ul> <!-- We can include any render keywords arguments by their name, using the regular Jinja templating functionality. --> <li>Version: {{ display_version }} </li> <li>Debug: {{ debug }} </li> <li>Template Count: {{ templates | length }} </li> <li>Installed Plugins: {{ pluginNames | join ( \", \" ) }} </li> </ul> </body> </html> Try installing the above plugin dummy_mobile_ui (also available in the plugin examples repository ) into your OctoPrint instance. If you access it from a regular desktop browser, you should still see the default UI. However if you access it from a mobile device (make sure to not have that request the desktop version of pages!) you should see the very simple dummy page defined above. Preemptive and Runtime Caching OctoPrint will also cache your custom UI for you in its server side UI cache, making sure it only gets re-rendered if the request demands that (by having no-cache headers set) or if the cache gets invalidated otherwise. In order to be able to do that, the UiPlugin offers overriding some cache specific methods used for figuring out the source files whose modification time to use for cache invalidation as well as override possibilities for ETag and LastModified calculation. Additionally there are methods to allow persisting call parameters to allow for preemptively caching your UI during server startup (basically eager caching instead of lazily waiting for the first request). See below for details on this. {{ version_added('1.3.0') }} get_ui_additional_etag ( default_additional ) # Allows to provide a list of additional fields to use for ETag generation. By default the same list will be returned that is also used in the stock UI (and injected via the parameter default_additional ). Parameters: Name Type Description Default default_additional list The list of default fields added to the ETag of the default UI required Returns: Type Description list A list of additional fields for the ETag generation, or None {{ version_added(\"1.3.0\") }} get_ui_additional_key_data_for_cache () # Allows to return additional data to use in the cache key. Returns: Type Description Union [ List , Tuple , None] A list or tuple of strings to use in the cache key. Will be joined by OctoPrint using : as separator and appended to the existing ui:<identifier>:<base url>:<locale> cache key. Ignored if None is returned. {{ version_added(\"1.3.0\") }} get_ui_additional_request_data_for_preemptive_caching () # Allows defining additional request data to persist in the preemptive cache configuration and to use for the fake request used for populating the preemptive cache. Keys and values are used as keyword arguments for creating the Werkzeug EnvironBuilder used for creating the fake request. Returns: Type Description dict Additional request data to persist in the preemptive cache configuration and to use for request environment construction. {{ version_added(\"1.3.0\") }} get_ui_additional_tracked_files () # Allows to return additional files to track for validating existing caches. By default OctoPrint will track all declared templates, assets and translation files in the system. Additional files can be added by a plugin through this callback. Returns: Type Description Optional [ List ] A list of paths to additional files whose modification to track for (in)validating the cache. Ignored if None is returned. {{ version_added(\"1.3.0\") }} get_ui_custom_etag () # Allows to use a custom way to calculate the ETag, instead of the default method (hashing OctoPrint's version, tracked file paths and LastModified value). Returns: Type Description str An alternatively calculated ETag value. Ignored if None is returned (default). {{ version_added(\"1.3.0\") }} get_ui_custom_lastmodified () # Allows to calculate the LastModified differently than using the most recent modification date of all tracked files. Returns: Type Description Optional [ Int ] An alternatively calculated LastModified value. Ignored if None is returned (default). {{ version_added(\"1.3.0\") }} get_ui_custom_template_filter ( default_template_filter ) # Allows to specify a custom template filter to use for filtering the template contained in the render_kwargs provided to the templating sub system. Only relevant for UiPlugins that actually utilize the stock templates of OctoPrint. By default simply returns the provided default_template_filter . Parameters: Name Type Description Default default_template_filter callable The default template filter used by the default UI required Returns: Type Description callable A filter function accepting the template_type and template_key of a template and returning True to keep it and False to filter it out. If None is returned, no filtering will take place. {{ version_added(\"1.3.0\") }} get_ui_custom_tracked_files () # Allows to define a complete separate set of files to track for (in)validating the cache. If this method returns something, the templates, assets and translation files won't be tracked, only the files specified in the returned list. Returns: Type Description Optional [ List ] A list of paths representing the only files whose modification to track for (in)validating the cache. Ignored if None is returned. {{ version_added(\"1.3.0\") }} get_ui_data_for_preemptive_caching () # Allows defining additional data to be persisted in the preemptive cache configuration, on top of the request path, base URL and used locale. Returns: Type Description dict Additional data to persist in the preemptive cache configuration. {{ version_added(\"1.3.0\") }} get_ui_permissions () # Determines a list of permissions that need to be on the current user session. If these requirements are not met, OctoPrint will instead redirect to a login screen. Plugins may override this with their own set of permissions. Returning an empty list will instruct OctoPrint to never show a login dialog when this UiPlugin's view renders, in which case it will fall to your plugin to implement its own login logic. Returns: Type Description list A list of permissions which to check the current user session against. May be empty to indicate that no permission checks should be made by OctoPrint. {{ version_added(\"1.5.0\") }} get_ui_preemptive_caching_additional_unless () # Allows defining additional reasons for temporarily not adding a preemptive cache record for your plugin's UI. OctoPrint will call this method when processing a UI request, to determine whether to record the access or not. If you return True here, no record will be created. Returns: Type Description bool Whether to suppress a record ( True ) or not ( False , default) {{ version_added(\"1.3.0\") }} get_ui_preemptive_caching_enabled () # Allows to control whether the view provided by the plugin should be preemptively cached on server startup (default) or not. Have this return False if you do not want your plugin's UI to ever be preemptively cached. Returns: Type Description bool Whether to enable preemptive caching ( True , default) or not ( False ) on_ui_render ( now , request , render_kwargs ) # Called by OctoPrint to retrieve the response to send to the client for the request to / . Only called if will_handle_ui returned True . render_kwargs will be a dictionary (whose contents are cached) which will contain the following key and value pairs (note that not all key value pairs contained in the dictionary are listed here, only those you should depend on as a plugin developer at the current time): Name Type Description debug bool Whether the debug mode is enabled or not. firstRun bool Whether the server is running for the first time or not. version dict OctoPrint's version information. version.number str The version number (e.g. x.y.z ). version.branch str The git branch name from which the OctoPrint instance was built (e.g. master ). version.display str The full human readable version string, including the branch information (e.g. x.y.z (master branch) ). templates dict Template data to render in the UI. Will be a dict containing entries for all known template types. templates.*.order List[str] A list of template names in the order they should be rendered. templates.*.entries Union[Tuple, Dict] The template entry definitions to render. Depending on the template type those are either 2-tuples of a name and a dict or directly dict s with information regarding the template to render. For the possible contents of the data dict s see the TemplatePlugin mixin. pluginNames List[str] A list of names of TemplatePlugin implementations that were enabled when creating the templates value. locales List[str] The locales for which there are translations available. supportedExtensions List[str] The file extensions supported for uploads. On top of that all additional template variables as provided by get_template_vars will be contained in the dictionary as well. Parameters: Name Type Description Default now datetime . datetime The datetime instance representing \"now\" for this request, in case your plugin implementation needs this information. required request flask . Request A Flask Request object. required render_kwargs dict The (cached) render keyword arguments that would usually be provided to the core UI render function. required Returns: Type Description flask . Response Should return a Flask Response object that can be served to the requesting client directly. May be created with flask.make_response combined with something like flask.render_template . will_handle_ui ( request ) # Called by OctoPrint to determine if the mixin implementation will be able to handle the request provided as a parameter. Return True here to signal that your implementation will handle the request and that the result of its on_ui_render method is what should be served to the user. The execution order of calls to this method can be influenced via the sorting context UiPlugin.will_handle_ui . Parameters: Name Type Description Default request flask . Request A Flask Request object. required Returns: Type Description bool True if the implementation will serve the request, False otherwise. WizardPlugin # Bases: OctoPrintPlugin , ReloadNeedingPlugin The WizardPlugin mixin allows plugins to report to OctoPrint whether the wizard templates they define via the TemplatePlugin should be displayed to the user, what details to provide to their respective wizard frontend components and what to do when the wizard is finished by the user. OctoPrint will only display such wizard dialogs to the user which belong to plugins that report True in their is_wizard_required method and have not yet been shown to the user in the version currently being reported by the octoprint.plugin.WizardPlugin.get_wizard_version method Example If a plugin with the identifier myplugin has a specific setting some_key it needs to have filled by the user in order to be able to work at all, it would probably test for that setting's value in the is_wizard_required method and return True if the value is unset: class MyPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . TemplatePlugin , octoprint . plugin . WizardPlugin ): def get_default_settings ( self ): return dict ( some_key = None ) def is_wizard_required ( self ): return self . _settings . get ([ \"some_key\" ]) is None OctoPrint will then display the wizard dialog provided by the plugin through the octoprint.plugin.TemplatePlugin mixin. Once the user finishes the wizard on the frontend, OctoPrint will store that it already showed the wizard of myplugin in the version reported by get_wizard_version - here None since that is the default value returned by that function and the plugin did not override it. If the plugin in a later version needs another setting from the user in order to function, it will also need to change the reported version in order to have OctoPrint reshow the dialog. E.g. class MyPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . TemplatePlugin , octoprint . plugin . WizardPlugin ): def get_default_settings ( self ): return dict ( some_key = None , some_other_key = None ) def is_wizard_required ( self ): some_key_unset = self . _settings . get ([ \"some_key\" ]) is None some_other_key_unset = self . _settings . get ([ \"some_other_key\" ]) is None return some_key_unset or some_other_key_unset def get_wizard_version ( self ): return 1 WizardPlugin is a octoprint.plugin.ReloadNeedingPlugin . get_wizard_details () # Called by OctoPrint when the wizard wrapper dialog is shown. Allows the plugin to return data that will then be made available to the view models via the view model callback onWizardDetails . Use this if your plugin's view model that handles your wizard dialog needs additional data to perform its task. Returns: Type Description dict a dictionary containing additional data to provide to the frontend. Whatever the plugin returns here will be made available on the wizard API under the plugin's identifier get_wizard_version () # The version of this plugin's wizard. OctoPrint will only display a wizard of the same plugin and wizard version once to the user. After they finish the wizard, OctoPrint will remember that it already showed this wizard in this particular version and not reshow it. If a plugin needs to show its wizard to the user again (e.g. because of changes in the required settings), increasing this value is the way to notify OctoPrint of these changes. Returns: Type Description Optional [ int ] an int signifying the current wizard version, should be incremented by plugins whenever there are changes to the plugin that might necessitate reshowing the wizard if it is required. None will also be accepted and lead to the wizard always be ignored unless it has never been finished so far is_wizard_ignored ( seen_wizards , implementation ) classmethod # Determines whether the provided implementation is ignored based on the provided information about already seen wizards and their versions or not. A wizard is ignored if the current and seen versions are identical the current version is None and the seen version is not the seen version is not None and the current version is less or equal than the seen one current N 1 2 seen N \u274c ignored \u2705 shown \u2705 shown 1 \u274c ignored \u274c ignored \u2705 shown 2 \u274c ignored \u274c ignored \u274c ignored Parameters: Name Type Description Default seen_wizards dict A dictionary with information about already seen wizards and their versions. Mappings from the identifiers of the plugin providing the wizard to the reported wizard version (int or None) that was already seen by the user. required implementation object The plugin implementation to check. required Returns: Type Description bool False if the provided implementation is either not a WizardPlugin or has not yet been seen (in this version), True otherwise is_wizard_required () # Allows the plugin to report whether it needs to display a wizard to the user or not. OctoPrint will only include those wizards from plugins which are reporting their wizards as being required through this method returning True . Still, if OctoPrint already displayed that wizard in the same version to the user once it won't be displayed again regardless whether this method returns True or not, refer to is_wizard_ignored . Returns: Type Description bool True if the plugin needs to display a wizard to the user, False otherwise (default). on_wizard_finish ( handled ) # Called by OctoPrint whenever the user finishes a wizard session. The handled parameter will indicate whether that plugin's wizard was included in the wizard dialog presented to the user (so the plugin providing it was reporting that the wizard was required and the wizard plus version was not ignored/had already been seen). Use this to do any clean up tasks necessary after wizard completion. Parameters: Name Type Description Default handled bool True if the plugin's wizard was previously reported as required, not ignored and thus presented to the user, False otherwise required","title":"types"},{"location":"reference/octoprint/plugin/types/#octoprintplugintypes","text":"This module bundles all of OctoPrint's supported plugin implementation types as well as their common parent class, OctoPrintPlugin . Please note that the plugin implementation types are documented in the section Available plugin mixins .","title":"octoprint.plugin.types"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin","text":"Bases: OctoPrintPlugin , RestartNeedingPlugin The AssetPlugin mixin allows plugins to define additional static assets such as JavaScript or CSS files to be automatically embedded into the pages delivered by the server to be used within the client sided part of the plugin. A typical usage of the AssetPlugin functionality is to embed a custom view model to be used by templates injected through a TemplatePlugin .","title":"AssetPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin.get_asset_folder","text":"Defines the folder where the plugin stores its static assets as defined in get_assets . Override this if your plugin stores its assets at some other place than the static sub folder in the plugin base directory. Returns: Type Description str The absolute path to the folder where the plugin stores its static assets","title":"get_asset_folder()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.AssetPlugin.get_assets","text":"Defines the static assets the plugin offers. The following asset types are recognized and automatically imported at the appropriate places to be available: js JavaScript files, such as additional view models jsclient JavaScript files containing additional parts for the JS Client Library (since 1.3.10) css CSS files with additional styles, will be embedded into delivered pages when not running in LESS mode. less LESS files with additional styles, will be embedded into delivered pages when running in LESS mode. The expected format to be returned is a dictionary mapping one or more of these keys to a list of files of that type, the files being represented as relative paths from the asset folder as defined via get_asset_folder . Example def get_assets ( self ): return dict ( js = [ 'js/my_file.js' , 'js/my_other_file.js' ], clientjs = [ 'clientjs/my_file.js' ], css = [ 'css/my_styles.css' ], less = [ 'less/my_styles.less' ] ) The assets will be made available by OctoPrint under the URL /plugin/<plugin identifier>/static/<path> , with plugin identifier being the plugin's identifier and path being the path as defined in the asset dictionary. Assets of the types js , css and less will be automatically bundled by OctoPrint using Flask-Assets . Returns: Type Description dict A dictionary describing the static assets to publish for the plugin.","title":"get_assets()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin","text":"Bases: OctoPrintPlugin , RestartNeedingPlugin The BlueprintPlugin mixin allows plugins to define their own full fledged endpoints for whatever purpose, be it a more sophisticated API than what is possible via the SimpleApiPlugin or a custom web frontend. The mechanism at work here is Flask's own Blueprint mechanism . The mixin automatically creates a blueprint for you that will be registered under /plugin/<plugin identifier>/ . All you need to do is decorate all of your view functions with the route decorator, which behaves exactly the same like Flask's regular route decorators. Example import octoprint.plugin import flask class MyBlueprintPlugin ( octoprint . plugin . BlueprintPlugin ): @octoprint . plugin . BlueprintPlugin . route ( \"/echo\" , methods = [ \"GET\" ]) def myEcho ( self ): if not \"text\" in flask . request . values : abort ( 400 , description = \"Expected a text to echo back.\" ) return flask . request . values [ \"text\" ] __plugin_implementation__ = MyBlueprintPlugin () Your blueprint will be published by OctoPrint under the base URL /plugin/<plugin identifier>/ , so the above example of a plugin with the identifier myblueprintplugin would be reachable under /plugin/myblueprintplugin/echo . Just like with regular blueprints you'll be able to create URLs via url_for , just use the prefix plugin.<plugin identifier>.<method_name> , e.g.: flask . url_for ( \"plugin.myblueprintplugin.myEcho\" ) # will return \"/plugin/myblueprintplugin/echo\" Warning As of OctoPrint 1.8.3, endpoints provided through a BlueprintPlugin do not automatically fall under OctoPrint's CSRF protection , for reasons of backwards compatibility. There will be a short grace period before this changes. You can and should however already opt into CSRF protection for your endpoints by implementing is_blueprint_csrf_protected and returning True from it. You can exempt certain endpoints from CSRF protection by decorating them with @octoprint.plugin.BlueprintPlugin.csrf_exempt . class MyPlugin ( octoprint . plugin . BlueprintPlugin ): @octoprint . plugin . BlueprintPlugin . route ( \"/hello_world\" , methods = [ \"GET\" ]) def hello_world ( self ): # This is a GET request and thus not subject to CSRF protection return \"Hello world!\" @octoprint . plugin . BlueprintPlugin . route ( \"/hello_you\" , methods = [ \"POST\" ]) def hello_you ( self ): # This is a POST request and thus subject to CSRF protection. It is not exempt. return \"Hello you!\" @octoprint . plugin . BlueprintPlugin . route ( \"/hello_me\" , methods = [ \"POST\" ]) @octoprint . plugin . BlueprintPlugin . csrf_exempt () def hello_me ( self ): # This is a POST request and thus subject to CSRF protection, but this one is exempt. return \"Hello me!\" def is_blueprint_csrf_protected ( self ): return True BlueprintPlugin implements :class: ~octoprint.plugins.core.RestartNeedingPlugin . {{ version_changed(\"1.8.3\") }}","title":"BlueprintPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.csrf_exempt","text":"A decorator to mark a view method in your BlueprintPlugin as exempt from :ref: CSRF protection <sec-api-general-csrf> . This makes sense if you offer an authenticated API for a certain workflow (see e.g. the bundled appkeys plugin) but in most cases should not be needed. .. versionadded:: 1.8.3","title":"csrf_exempt()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.errorhandler","text":"A decorator to mark errorhandlings methods in your BlueprintPlugin subclass. Works just the same as Flask's own errorhandler decorator available on blueprints. See the documentation for flask.Blueprint.errorhandler and the documentation for flask.Flask.errorhandler for more information. {{ version_added('1.3.0') }}","title":"errorhandler()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint","text":"Creates and returns the blueprint for your plugin. Override this if you want to define and handle your blueprint yourself. This method will only be called once during server initialization. Returns (flask.Blueprint) the blueprint ready to be registered with Flask","title":"get_blueprint()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint_api_prefixes","text":"Return all prefixes of your endpoint that are an API that should be containing JSON only. Anything that matches this will generate JSON error messages in case of flask.abort calls, instead of the default HTML ones. Defaults to all endpoints under the blueprint. Limit this further as needed. E.g., if you only want your endpoints /foo , /foo/1 and /bar to be declared as API, return [\"/foo\", \"/bar\"] . A match will be determined via startswith.","title":"get_blueprint_api_prefixes()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.get_blueprint_kwargs","text":"Override this if you want your blueprint constructed with additional options such as static_folder , template_folder , etc. Defaults to the blueprint's static_folder and template_folder to be set to the plugin's basefolder plus /static or respectively /templates , or - if the plugin also implements AssetPlugin and/or TemplatePlugin - the paths provided by get_asset_folder and get_template_folder respectively.","title":"get_blueprint_kwargs()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.is_blueprint_csrf_protected","text":"Whether a blueprint's endpoints are CSRF protected . For now, this defaults to False to leave it up to plugins to decide which endpoints should be protected. Long term, this will default to True and hence enforce protection unless a plugin opts out by returning False here. If you do not override this method in your mixin implementation, a warning will be logged to the console to alert you of the requirement to make a decision here and to not rely on the default implementation, due to the forthcoming change in implemented default behaviour. {{ version_added(\"1.8.3\") }}","title":"is_blueprint_csrf_protected()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.is_blueprint_protected","text":"Whether a login session by a registered user is needed to access the blueprint's endpoints. Requiring a session is the default. Note that this only restricts access to the blueprint's dynamic methods, static files are always accessible. If you want your blueprint's endpoints to have specific permissions, return False for this and do your permissions checks explicitly.","title":"is_blueprint_protected()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.BlueprintPlugin.route","text":"A decorator to mark view methods in your BlueprintPlugin subclass. Works just the same as Flask's own route decorator available on blueprints. See the documentation for flask.Blueprint.route and the documentation for flask.Flask.route for more information.","title":"route()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EnvironmentDetectionPlugin","text":"Bases: OctoPrintPlugin , RestartNeedingPlugin The EnvironmentDetectionPlugin mixin allows enrichting OctoPrint's environmental information collections with additional data, and to react to successfully collected environmental information. {{ version_added('1.3.6') }}","title":"EnvironmentDetectionPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EventHandlerPlugin","text":"Bases: OctoPrintPlugin The EventHandlerPlugin mixin allows OctoPrint plugins to react to any of OctoPrint's events . OctoPrint will call the on_event method for any event fired on its internal event bus, supplying the event type and the associated payload. Please note that until your plugin returns from that method, further event processing within OctoPrint will block - the event queue itself is run asynchronously from the rest of OctoPrint, but the processing of the events within the queue itself happens consecutively. This mixin is especially interesting for plugins which want to react on things like print jobs finishing, timelapse videos rendering etc.","title":"EventHandlerPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.EventHandlerPlugin.on_event","text":"Called by OctoPrint upon processing of a fired event on the platform. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. Parameters: Name Type Description Default event str The type of event that got fired, see :ref: the list of events <sec-events-available_events> for possible values required payload dict The payload as provided with the event required","title":"on_event()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin","text":"Bases: Plugin The parent class of all OctoPrint plugin mixins. Attributes: Name Type Description _plugin_manager octoprint . plugin . core . PluginManager The octoprint.plugin.core.PluginManager instance. Injected by the plugin core system upon initialization of the implementation. _printer_profile_manager octoprint . printer . profile . PrinterProfileManager The octoprint.printer.profile.PrinterProfileManager instance. Injected by the plugin core system upon initialization of the implementation. _event_bus octoprint . events . Events The Events instance. Injected by the plugin core system upon initialization of the implementation. _analysis_queue octoprint . filemanager . analysis . AnalysisQueue The AnalysisQueue instance. Injected by the plugin core system upon initialization of the implementation. _slicing_manager octoprint . slicing . SlicingManager The SlicingManager instance. Injected by the plugin core system upon initialization of the implementation. _file_manager octoprint . filemanager . FileManager The FileManager instance. Injected by the plugin core system upon initialization of the implementation. _printer octoprint . printer . Printer The Printer instance. Injected by the plugin core system upon initialization of the implementation. _app_session_manager octoprint . server . app . AppSessionManager The AppSessionManager instance. Injected by the plugin core system upon initialization of the implementation. _plugin_lifecycle_manager octoprint . plugin . LifecycleManager The LifecycleManager instance. Injected by the plugin core system upon initialization of the implementation. _user_manager octoprint . users . UserManager The UserManager instance. Injected by the plugin core system upon initialization of the implementation. _connectivity_checker octoprint . util . connectivity . ConnectivityChecker The ConnectivityChecker instance. Injected by the plugin core system upon initialization of the implementation. _data_folder str The path to the data folder of the plugin, to use for any data it might have to persist. Should always be accessed through get_plugin_data_folder , since that function will also ensure that the data folder actually exists and if not create it before returning it. Injected by the plugin core system upon initialization of the implementation.","title":"OctoPrintPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin.get_plugin_data_folder","text":"Retrieves the path to a data folder specifically for the plugin, ensuring it exists and if not creating it before returning it. Plugins may use this folder for storing additional data they need for their operation.","title":"get_plugin_data_folder()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.OctoPrintPlugin.on_plugin_pending_uninstall","text":"Called by the plugin manager when the plugin is pending uninstall. Override this to react to the event. Warning This is not called during plugin uninstalls triggered outside of OctoPrint!","title":"on_plugin_pending_uninstall()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin","text":"Bases: OctoPrintPlugin Via the ProgressPlugin mixin plugins can let themselves be called upon progress in print jobs or slicing jobs, limited to minimally 1% steps.","title":"ProgressPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin.on_print_progress","text":"Called by OctoPrint on minimally 1% increments during a running print job. Parameters: Name Type Description Default storage str Location of the file. required path str Path of the file in the storage. required progress int Current progress as a value between 0 and 100. required","title":"on_print_progress()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ProgressPlugin.on_slicing_progress","text":"Called by OctoPrint on minimally 1% increments during a running slicing job. Parameters: Name Type Description Default slicer str Key of the slicer reporting the progress. required source_location str Location of the source file. required source_path str Path of the source file in the source location. required destination_location str Location of the destination file. required destination_path str Path of the destination file in the destination location. required progress int Current progress as a value between 0 and 100. required","title":"on_slicing_progress()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ReloadNeedingPlugin","text":"Bases: Plugin Mixin for plugin types that need a reload of the UI after enabling/disabling them.","title":"ReloadNeedingPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin","text":"Bases: OctoPrintPlugin Including the SettingsPlugin mixin allows plugins to store and retrieve their own settings within OctoPrint's configuration. Plugins including the mixing will get injected an additional property self._settings which is an instance of PluginSettingsManager already properly initialized for use by the plugin. In order for the manager to know about the available settings structure and default values upon initialization, implementing plugins will need to provide a dictionary with the plugin's default settings through overriding the method get_settings_defaults . The defined structure will then be available to access through the settings manager available as self._settings . If your plugin needs to react to the change of specific configuration values on the fly, e.g. to adjust the log level of a logger when the user changes a corresponding flag via the settings dialog, you can override the on_settings_save method and wrap the call to the implementation from the parent class with retrieval of the old and the new value and react accordingly. Example import octoprint.plugin class MySettingsPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . StartupPlugin ): def get_settings_defaults ( self ): return dict ( some_setting = \"foo\" , some_value = 23 , sub = dict ( some_flag = True ) ) def on_settings_save ( self , data ): old_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) octoprint . plugin . SettingsPlugin . on_settings_save ( self , data ) new_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) if old_flag != new_flag : self . _logger . info ( \"sub.some_flag changed from {old_flag} to {new_flag} \" . format ( ** locals ())) def on_after_startup ( self ): some_setting = self . _settings . get ([ \"some_setting\" ]) some_value = self . _settings . get_int ([ \"some_value\" ]) some_flag = self . _settings . get_boolean ([ \"sub\" , \"some_flag\" ]) self . _logger . info ( \"some_setting = {some_setting} , some_value = {some_value} , sub.some_flag = {some_flag} \" . format ( ** locals ()) __plugin_implementation__ = MySettingsPlugin () Of course, you are always free to completely override both on_settings_load and on_settings_save if the default implementations do not fit your requirements. Warning Make sure to protect sensitive information stored by your plugin that only logged in administrators (or users) should have access to via get_settings_restricted_paths . OctoPrint will return its settings on the REST API even to anonymous clients, but will filter out fields it knows are restricted, therefore you must make sure that you specify sensitive information accordingly to limit access as required!","title":"SettingsPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.config_version_key","text":"Key of the field in the settings that holds the configuration format version.","title":"config_version_key"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_defaults","text":"Retrieves the plugin's default settings with which the plugin's settings manager will be initialized. Override this in your plugin's implementation and return a dictionary defining your settings data structure with included default values.","title":"get_settings_defaults()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_preprocessors","text":"Retrieves the plugin's preprocessors to use for preprocessing returned or set values prior to returning/setting them. The preprocessors should be provided as a dictionary mapping the path of the values to preprocess (hierarchically) to a transform function which will get the value to transform as only input and should return the transformed value. Example def get_settings_defaults ( self ): return dict ( some_key = \"Some_Value\" , some_other_key = \"Some_Value\" ) def get_settings_preprocessors ( self ): return dict ( some_key = lambda x : x . upper ()), # getter preprocessors dict ( some_other_key = lambda x : x . lower ()) # setter preprocessors def some_method ( self ): # getting the value for \"some_key\" should turn it to upper case assert self . _settings . get ([ \"some_key\" ]) == \"SOME_VALUE\" # the value for \"some_other_key\" should be left alone assert self . _settings . get ([ \"some_other_key\" ] = \"Some_Value\" # setting a value for \"some_other_key\" should cause the value to first be turned to lower case self . _settings . set ([ \"some_other_key\" ], \"SOME_OTHER_VALUE\" ) assert self . _settings . get ([ \"some_other_key\" ]) == \"some_other_value\" Returns: Type Description Tuple [ dict , dict ] A tuple consisting of two dictionaries, the first being the plugin's preprocessors for getters, the second the preprocessors for setters","title":"get_settings_preprocessors()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_restricted_paths","text":"Retrieves the list of paths in the plugin's settings which be restricted on the REST API. Override this in your plugin's implementation to restrict whether a path should only be returned to users with certain permissions, or never on the REST API. Return a dict with one of the following keys, mapping to a list of paths (as tuples or lists of the path elements) for which to restrict access via the REST API accordingly. An OctoPrintPermission instance: Paths will only be available on the REST API for users with the permission admin : Paths will only be available on the REST API for users with admin rights (any user with the SETTINGS permission) user : Paths will only be available on the REST API when accessed as a logged in user never : Paths will never be returned on the API Example def get_settings_defaults ( self ): return dict ( some = dict ( admin_only = dict ( path = \"path\" , foo = \"foo\" ), user_only = dict ( path = \"path\" , bar = \"bar\" )), another = dict ( admin_only = dict ( path = \"path\" ), field = \"field\" ), path = dict ( to = dict ( never = dict ( return = \"return\" ))), the = dict ( webcam = dict ( data = \"webcam\" ))) def get_settings_restricted_paths ( self ): from octoprint.access.permissions import Permissions return { 'admin' :[[ \"some\" , \"admin_only\" , \"path\" ], [ \"another\" , \"admin_only\" , \"path\" ],], 'user' :[[ \"some\" , \"user_only\" , \"path\" ],], 'never' :[[ \"path\" , \"to\" , \"never\" , \"return\" ],], Permissions . WEBCAM :[[ \"the\" , \"webcam\" , \"data\" ],]} # this will make the plugin return settings on the REST API like this for an anonymous user # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=None, bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user without the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=None))) # # like this for a logged in user with the webcam permission # # dict(some=dict(admin_only=dict(path=None, foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=None), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) # # and like this for an admin user # # dict(some=dict(admin_only=dict(path=\"path\", foo=\"foo\"), # user_only=dict(path=\"path\", bar=\"bar\")), # another=dict(admin_only=dict(path=\"path\"), # field=\"field\"), # path=dict(to=dict(never=dict(return=None))), # the=dict(webcam=dict(data=\"webcam\"))) {{ version_added(\"1.2.17\") }}","title":"get_settings_restricted_paths()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.get_settings_version","text":"Retrieves the settings format version of the plugin. Use this to have OctoPrint trigger your migration function if it detects an outdated settings version in config.yaml. Returns: Type Description Optional [ int ] an int signifying the current settings format, should be incremented by plugins whenever there are backwards incompatible changes. Returning None here disables the version tracking for the plugin's configuration.","title":"get_settings_version()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_cleanup","text":"Called after migration and initialization but before call to on_settings_initialized . Plugins may overwrite this method to perform additional clean up tasks. The default implementation just minimizes the data persisted on disk to only contain the differences to the defaults (in case the current data was persisted with an older version of OctoPrint that still duplicated default data). {{ version_added(\"1.3.0\") }}","title":"on_settings_cleanup()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_initialized","text":"Called after the settings have been initialized and -- if necessary -- also been migrated through a call to on_settings_migrate . This method will always be called after the initialize method.","title":"on_settings_initialized()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_load","text":"Loads the settings for the plugin, called by the Settings API view in order to retrieve all settings from all plugins. Override this if you want to inject additional settings properties that are not stored within OctoPrint's configuration. Note The default implementation will return your plugin's settings as is, so just in the structure and in the types that are currently stored in OctoPrint's configuration. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, using the proper retriever methods on the settings manager to retrieve the data in the correct format. The default implementation will also replace any paths that have been restricted by your plugin through get_settings_restricted_paths with either the provided default value (if one was provided), an empty dictionary (as fallback for restricted dictionaries), an empty list (as fallback for restricted lists) or None values where necessary. Make sure to do your own restriction if you decide to fully overload this method. Returns: Type Description dict The current settings of the plugin, as a dictionary.","title":"on_settings_load()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_migrate","text":"Called by OctoPrint if it detects that the installed version of the plugin necessitates a higher settings version than the one currently stored in _config.yaml. Will also be called if the settings data stored in config.yaml doesn't have version information, in which case the current parameter will be None. Your plugin's implementation should take care of migrating any data by utilizing self._settings. OctoPrint will take care of saving any changes to disk by calling self._settings.save() after returning from this method. This method will be called before your plugin's on_settings_initialized method, with all injections already having taken place. You can therefore depend on the configuration having been migrated by the time on_settings_initialized is called. Parameters: Name Type Description Default target int The settings format version the plugin requires, this should always be the same value as returned by get_settings_version . required current Optional [ int ] The settings format version as currently stored in config.yaml . May be None if no version information can be found. required","title":"on_settings_migrate()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SettingsPlugin.on_settings_save","text":"Saves the settings for the plugin, called by the Settings API view in order to persist all settings from all plugins. Override this if you need to directly react to settings changes or want to extract additional settings properties that are not stored within OctoPrint's configuration. Note The default implementation will persist your plugin's settings as is, so just in the structure and in the types that were received by the Settings API view. Values identical to the default settings values will not be persisted. If you need more granular control here, e.g. over the used data types, you'll need to override this method and iterate yourself over all your settings, retrieving them (if set) from the supplied received data and using the proper setter methods on the settings manager to persist the data in the correct format. Parameters: Name Type Description Default data dict The settings dictionary to be saved for the plugin required Returns: Type Description dict The settings that differed from the defaults and were actually saved.","title":"on_settings_save()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ShutdownPlugin","text":"Bases: OctoPrintPlugin , SortablePlugin The ShutdownPlugin allows hooking into the shutdown of OctoPrint. It's usually used in conjunction with the StartupPlugin mixin, to cleanly shut down additional services again that where started by the StartupPlugin part of the plugin. ShutdownPlugin is a SortablePlugin and provides a sorting context for ShutdownPlugin.on_shutdown .","title":"ShutdownPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.ShutdownPlugin.on_shutdown","text":"Called upon the imminent shutdown of OctoPrint. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is ShutdownPlugin.on_shutdown .","title":"on_shutdown()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin","text":"Bases: OctoPrintPlugin Utilizing the SimpleApiPlugin mixin plugins may implement a simple API based around one GET resource and one resource accepting JSON commands POSTed to it. This is the easy alternative for plugin's which don't need the full power of a Flask Blueprint that the BlueprintPlugin mixin offers. Use this mixin if all you need to do is return some kind of dynamic data to your plugin from the backend and/or want to react to simple commands which boil down to a type of command and a few flat parameters supplied with it. The simple API constructed by OctoPrint for you will be made available under /api/plugin/<plugin identifier>/ . OctoPrint will do some preliminary request validation for your defined commands, making sure the request body is in the correct format (content type must be JSON) and contains all obligatory parameters for your command. Let's take a look at a small example for such a simple API and how you would go about calling it. Take this example of a plugin registered under plugin identifier mysimpleapiplugin : import octoprint.plugin import flask class MySimpleApiPlugin ( octoprint . plugin . SimpleApiPlugin ): def get_api_commands ( self ): return dict ( command1 = [], command2 = [ \"some_parameter\" ] ) def on_api_command ( self , command , data ): import flask if command == \"command1\" : parameter = \"unset\" if \"parameter\" in data : parameter = \"set\" self . _logger . info ( \"command1 called, parameter is {parameter} \" . format ( ** locals ())) elif command == \"command2\" : self . _logger . info ( \"command2 called, some_parameter is {some_parameter} \" . format ( ** data )) def on_api_get ( self , request ): return flask . jsonify ( foo = \"bar\" ) __plugin_implementation__ = MySimpleApiPlugin () Our plugin defines two commands, command1 with no mandatory parameters and command2 with one mandatory parameter some_parameter . command1 can also accept an optional parameter parameter , and will log whether that parameter was set or unset. command2 will log the content of the mandatory some_parameter parameter. A valid POST request for command2 sent to /api/plugin/mysimpleapiplugin would look like this: POST /api/plugin/mysimpleapiplugin HTTP / 1.1 Host : example.com Content-Type : application/json X-Api-Key : abcdef... { \"command\" : \"command2\" , \"some_parameter\" : \"some_value\" , \"some_optional_parameter\" : 2342 } which would produce a response like this: HTTP / 1.1 204 No Content and print something like this line to octoprint.log : 2022-02-12 17:40:21,140 - octoprint.plugins.mysimpleapiplugin - INFO - command2 called, some_parameter is some_value A GET request on our plugin's simple API resource will only return a JSON document like this: HTTP / 1.1 200 Ok Content-Type : application/json { \"foo\" : \"bar\" }","title":"SimpleApiPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.get_api_commands","text":"Return a dictionary here with the keys representing the accepted commands and the values being lists of mandatory parameter names. Returns: Type Description Optional [ dict ] a dictionary descripting the accepted commands and their mandatory parameters","title":"get_api_commands()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.is_api_adminonly","text":"Return True if the API is only available to users having the admin role. Returns: Type Description bool True if the API is only available to users having the admin permission","title":"is_api_adminonly()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.on_api_command","text":"Called by OctoPrint upon a POST request to /api/plugin/<plugin identifier> . command will contain one of the commands as specified via get_api_commands , data will contain the full request body parsed from JSON into a Python dictionary. Note that this will also contain the command attribute itself. For the example given above, for the command2 request the data received by the plugin would be equal to dict(command=\"command2\", some_parameter=\"some_value\") . If your plugin returns nothing here, OctoPrint will return an empty response with return code 204 No content for you. You may also return regular responses as you would return from any Flask view here though, e.g. return flask.jsonify(result=\"some json result\") or flask.abort(404) . Parameters: Name Type Description Default command str the command with which the resource was called required data dict the full request body of the POST request parsed from JSON into a Python dictionary required Returns: Type Description Optional [ flask . Response ] a response to be returned to the client, either None in which case OctoPrint will generate a 204 No content response with empty body, or optionally a proper Flask response.","title":"on_api_command()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SimpleApiPlugin.on_api_get","text":"Called by OctoPrint upon a GET request to /api/plugin/<plugin identifier> . request will contain the received Flask request object which you may evaluate for additional arguments supplied with the request. If your plugin returns nothing here, OctoPrint will return an empty response with return code 204 No content for you. You may also return regular responses as you would return from any Flask view here though, e.g. return flask . jsonify ( result = \"some json result\" ) or return flask . abort ( 404 ) Parameters: Name Type Description Default request flask . Request the Flask request object required Returns: Type Description Optional [ flask . Response ] a response to be returned to the client, either None in which case OctoPrint will generate a 204 No content response with empty body, or optionally a proper Flask response.","title":"on_api_get()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin","text":"Bases: OctoPrintPlugin Via the SlicerPlugin mixin plugins can add support for slicing engines to be used by OctoPrint.","title":"SlicerPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.cancel_slicing","text":"Cancels the slicing to the indicated file. Parameters: Name Type Description Default machinecode_path str The absolute path to the machine code file to which to stop slicing to. required","title":"cancel_slicing()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.do_slice","text":"Called by OctoPrint to slice model_path for the indicated printer_profile . If the machinecode_path is None , slicer implementations should generate it from the provided model_path . If provided, the profile_path is guaranteed by OctoPrint to be a serialized slicing profile created through the slicing plugin's own save_slicer_profile method. If provided, position will be a dict containing and x and a y key, indicating the position the center of the model on the print bed should have in the final sliced machine code. If not provided, slicer implementations should place the model in the center of the print bed. on_progress will be a callback which expects an additional keyword argument _progress with the current slicing progress which - if progress reporting is supported - the slicing plugin should call like the following: if on_progress is not None : if on_progress_args is None : on_progress_args = () if on_progress_kwargs is None : on_progress_kwargs = dict () on_progress_kwargs [ \"_progress\" ] = your_plugins_slicing_progress on_progress ( * on_progress_args , ** on_progress_kwargs ) Please note that both on_progress_args and on_progress_kwargs as supplied by OctoPrint might be None , so always make sure to initialize those values to sane defaults like depicted above before invoking the callback. In order to support external cancellation of an ongoing slicing job via cancel_slicing , implementations should make sure to track the started jobs via the machinecode_path , if provided. The method should return a 2-tuple consisting of a boolean flag indicating whether the slicing job was finished successfully (True) or not (False) and a result depending on the success of the slicing job. For jobs that finished successfully, result should be a dict containing additional information about the slicing job under the following keys: analysis Analysis result of the generated machine code as returned by the slicer itself. This should match the data structure described for the analysis queue of the matching machine code format, e.g. octoprint.filemanager.analysis.GcodeAnalysisQueue for GCODE files. For jobs that did not finish successfully (but not due to being cancelled!), result should be a :class: str containing a human readable reason for the error. If the job gets cancelled, a octoprint.slicing.SlicingCancelled exception should be raised. Returns: Type Description tuple A 2-tuple (boolean, object) as outlined above. Raises: Type Description SlicingCancelled The slicing job was cancelled (via cancel_slicing ).","title":"do_slice()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_default_profile","text":"Should return a octoprint.slicing.SlicingProfile containing the default slicing profile to use with this slicer if no other profile has been selected. Returns: Type Description SlicingProfile The octoprint.slicing.SlicingProfile containing the default slicing profile for this slicer.","title":"get_slicer_default_profile()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_extension_tree","text":"Fetch additional entries to put into the extension tree for accepted files By default, a subtree for model files with stl extension is returned. Slicers who want to support additional/other file types will want to override this. For the extension tree format, take a look at the docs of the octoprint.filemanager.extension_tree hook . Returns: Type Description (dict) a dictionary containing a valid extension subtree. {{ version_added(\"1.3.11\") }}","title":"get_slicer_extension_tree()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profile","text":"Should return a octoprint.slicing.SlicingProfile parsed from the slicing profile stored at the indicated path . Parameters: Name Type Description Default path str The absolute path from which to read the slicing profile. required Returns: Type Description SlicingProfile The specified slicing profile.","title":"get_slicer_profile()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profiles","text":"Fetch all octoprint.slicing.SlicingProfile stored for this slicer. For compatibility reasons with existing slicing plugins this method defaults to returning profiles parsed from .profile files in the plugin's profile_path , utilizing the SlicingPlugin.get_slicer_profile method of the plugin implementation. Parameters: Name Type Description Default profile_path str The base folder where OctoPrint stores this slicer plugin's profiles required {{ version_added(\"1.3.7\") }}","title":"get_slicer_profiles()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_profiles_lastmodified","text":"{{ version_added(\"1.3.0\") }}","title":"get_slicer_profiles_lastmodified()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.get_slicer_properties","text":"Plugins should override this method to return a dict containing a bunch of meta data about the implemented slicer. The expected keys in the returned dict have the following meaning: type The type identifier to use for the slicer. This should be a short unique lower case string which will be used to store slicer profiles under or refer to the slicer programmatically or from the API. name The human readable name of the slicer. This will be displayed to the user during slicer selection. same_device True if the slicer runs on the same device as OctoPrint, False otherwise. Slicers running on the same device will not be allowed to slice on systems with less than two CPU cores (or an unknown number) while a print is running due to performance reasons. Slice requests against slicers running on the same device and less than two cores will result in an error. progress_report True if the slicer can report back slicing progress to OctoPrint False otherwise. source_file_types A list of file types this slicer supports as valid origin file types. These are file types as found in the paths within the extension tree. Plugins may add additional file types through the :ref: sec-plugins-hook-filemanager-extensiontree hook. The system will test source files contains in incoming slicing requests via :meth: octoprint.filemanager.valid_file_type against the targeted slicer's source_file_types . destination_extension The possible extensions of slicing result files. Returns: Type Description dict A dict describing the slicer as outlined above.","title":"get_slicer_properties()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.is_slicer_configured","text":"Unless the return value of this method is True , OctoPrint will not register the slicer within the slicing sub system upon startup. Plugins may use this to do some start up checks to verify that e.g. the path to a slicing binary as set and the binary is executable, or credentials of a cloud slicing platform are properly entered etc. Returns: Type Description bool True if the slicer is configured and ready to be used, False otherwise.","title":"is_slicer_configured()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.SlicerPlugin.save_slicer_profile","text":"Should save the provided octoprint.slicing.SlicingProfile to the indicated path , after applying any supplied overrides . If a profile is already saved under the indicated path and allow_overwrite is set to False (defaults to True ), an IOError should be raised. Parameters: Name Type Description Default path str The absolute path to which to save the profile. required profile SlicingProfile The profile to save. required allow_overwrite boolean Whether to allow to overwrite an existing profile at the indicated path ( True , default) or not ( False ). If a profile already exists on the path and this is False an IOError should be raised. True overrides dict Profile overrides to apply to the profile before saving it None","title":"save_slicer_profile()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin","text":"Bases: OctoPrintPlugin , SortablePlugin The StartupPlugin allows hooking into the startup of OctoPrint. It can be used to start up additional services on or just after the startup of the server. StartupPlugin is a SortablePlugin and provides sorting contexts for on_startup as well as on_after_startup .","title":"StartupPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin.on_after_startup","text":"Called just after launch of the server, so when the listen loop is actually running already. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_after_startup .","title":"on_after_startup()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.StartupPlugin.on_startup","text":"Called just before the server is actually launched. Plugins get supplied with the host and port the server will listen on. Note that the host may be 0.0.0.0 if it will listen on all interfaces, so you can't just blindly use this for constructing publicly reachable URLs. Also note that when this method is called, the server is not actually up yet and none of your plugin's APIs or blueprints will be reachable yet. If you need to be externally reachable, use on_after_startup instead or additionally. Warning Do not perform long-running or even blocking operations in your implementation or you will block and break the server. The relevant sorting context is StartupPlugin.on_startup . Parameters: Name Type Description Default host string the host the server will listen on, may be 0.0.0.0 required port int the port the server will listen on required","title":"on_startup()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin","text":"Bases: OctoPrintPlugin , ReloadNeedingPlugin Using the TemplatePlugin mixin plugins may inject their own components into the OctoPrint web interface. Currently OctoPrint supports the following types of injections out of the box: Navbar The right part of the navigation bar located at the top of the UI can be enriched with additional links. Note that with the current implementation, plugins will always be located to the left of the existing links. The included template must be called <plugin identifier>_navbar.jinja2 (e.g. myplugin_navbar.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper structure will have all additional classes and styles applied as specified via the configuration supplied through get_template_configs . Sidebar The left side bar containing Connection, State and Files sections can be enriched with additional sections. Note that with the current implementations, plugins will always be located beneath the existing sections. The included template must be called <plugin identifier>_sidebar.jinja2 (e.g. myplugin_sidebar.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper divs for both the whole box as well as the content pane will have all additional classes and styles applied as specified via the configuration supplied through get_template_configs . Tabs The available tabs of the main part of the interface may be extended with additional tabs originating from within plugins. Note that with the current implementation, plugins will always be located to the right of the existing tabs. The included template must be called <plugin identifier>_tab.jinja2 (e.g. myplugin_tab.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as specified via the configuration supplied through get_template_configs . Settings Plugins may inject a dialog into the existing settings view. Note that with the current implementation, plugins will always be listed beneath the \"Plugins\" header in the settings link list, ordered alphabetically after their displayed name. The included template must be called <plugin identifier>_settings.jinja2 (e.g. myplugin_settings.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the navigation will have the additional classes and styles applied as defined via the configuration through get_template_configs . Wizards Plugins may define wizard dialogs to display to the user if necessary (e.g. in case of missing information that needs to be queried from the user to make the plugin work). Note that with the current implementation, all wizard dialogs will always be sorted by their mandatory attribute (which defaults to False ) and then alphabetically by their name . Hence, mandatory wizard steps will come first, sorted alphabetically, then the optional steps will follow, also alphabetically. A wizard dialog provided through a plugin will only be displayed if the plugin reports the wizard as being required through is_wizard_required . Please also refer to the WizardPlugin mixin for further details on this. The included template must be called <plugin identifier>_wizard.jinja2 (e.g. myplugin_wizard.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapper div and the link in the wizard navigation will have the additional classes and styles applied as defined via the configuration supplied through get_template_configs . Note A note about mandatory wizard steps: In the current implementation, marking a wizard step as mandatory will only make it styled accordingly. It is the task of the view model to actually prevent the user from skipping the dialog by implementing the onWizardTabChange callback and returning false there if it is detected that the user hasn't yet filled in the wizard step. {{ version_added(\"1.3.0\") }} About Plugins may define additional panels into OctoPrint's \"About\" dialog. Note that with the current implementation further about dialog panels will be sorted alphabetically by their name and sorted after the predefined ones. The included template must be called <plugin identifier>_about.jinja2 (e.g. myplugin_about.jinja2 ) unless overridden by the configuration supplied through get_template_configs . The template will be already wrapped into the necessary structure, plugins just need to supply the pure content. The wrapped div and the link in the navigation will have the additional classes and styles applied as defined via the configuration supplied through get_template_configs . {{ version_added(\"1.3.0\") }} Generic Plugins may also inject arbitrary templates into the page of the web interface itself, e.g. in order to add overlays or dialogs to be called from within the plugin's JavaScript code. Template injection types in the main part of the interface Template injection types in the settings You can find an example for a simple plugin which injects navbar, tab and settings content into the interface in the \"helloworld\" plugin in OctoPrint's Plugin Tutorial . Plugins may replace existing components, see the replaces keyword in the template configurations returned by get_template_configs below. Note that if a plugin replaces a core component, it is the plugin's responsibility to ensure that all core functionality is still maintained. Plugins can also add additional template types by implementing the octoprint.ui.web.templatetypes hook . TemplatePlugin is a ReloadNeedingPlugin .","title":"TemplatePlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_configs","text":"Allows configuration of injected navbar, sidebar, tab and settings templates (and also additional templates of types specified by plugins through the octoprint.ui.web.templatetypes hook ). Should be a list containing one configuration object per template to inject. Each configuration object is represented by a dictionary which may contain the following keys: type The template type the configuration is targeting. Possible values here are navbar , sidebar , tab , settings and generic . Mandatory. name The name of the component, if not set the name of the plugin will be used. The name will be visible at a location depending on the type : navbar : unused sidebar : sidebar heading tab : tab heading settings : settings link wizard : wizard link about : about link generic : unused template Name of the template to inject, default value depends on the type : navbar : <plugin identifier>_navbar.jinja2 sidebar : <plugin identifier>_sidebar.jinja2 tab : <plugin identifier>_tab.jinja2 settings : <plugin identifier>_settings.jinja2 wizard : <plugin identifier>_wizard.jinja2 about : <plugin identifier>_about.jinja2 generic : <plugin identifier>.jinja2 suffix Suffix to attach to the component identifier and the div identifier of the injected template. Will be _<index> if not provided and not the first template of the type, with index counting from 1 and increasing for each template of the same type. Example If your plugin with identifier myplugin defines two tab components like this: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_first_tab.jinja2\" }, { \"type\" = \"tab\" , \"template\" = \"myplugin_second_tab.jinja2\" } ] then the first tab will have the component identifier plugin_myplugin and the second one will have the component identifier plugin_myplugin_2 (the generated divs will be tab_plugin_myplugin and tab_plugin_myplugin_2 accordingly). Notice that the first tab is not called plugin_myplugin_1 -- as stated above while the index used as default suffix starts counting at 1, it will not be applied for the first component of a given type. If on the other hand your plugin's definition looks like this: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_first_tab.jinja2\" , \"suffix\" = \"_1st\" }, { \"type\" = \"tab\" , \"template\" = \"myplugin_second_tab.jinja2\" , \"suffix\" = \"_2nd\" } ] then the generated component identifier will be plugin_myplugin_1st and plugin_myplugin_2nd (and the divs will be tab_plugin_myplugin_1st and tab_plugin_myplugin_2nd ). div Id for the div containing the component. If not provided, defaults to <type>_plugin_<plugin identifier> plus the suffix if provided or required. replaces Id of the component this one replaces, might be either one of the core components or a component provided by another plugin. A list of the core component identifiers can be found in the configuration documentation . The identifiers of other plugin components always follow the format described above. custom_bindings A boolean value indicating whether the default view model should be bound to the component ( false ) or if a custom binding will be used by the plugin ( true , default). data_bind Additional knockout data bindings to apply to the component, can be used to add further behaviour to the container based on internal state if necessary. classes Additional classes to apply to the component, as a list of individual classes (e.g. classes=[\"myclass\", \"myotherclass\"] ) which will be joined into the correct format by the template engine. styles Additional CSS styles to apply to the component, as a list of individual declarations (e.g. styles=[\"color: red\", \"display: block\"] ) which will be joined into the correct format by the template engine. Further keys to be included in the dictionary depend on the type: sidebar type icon Icon to use for the sidebar header, should be the full name of a Font Awesome icon including the fas / far / fab prefix, eg. fas fa-plus . template_header Additional template to include in the head section of the sidebar item. For an example of this, see the additional options included in the \"Files\" section. classes_wrapper Like classes but only applied to the whole wrapper around the sidebar box. classes_content Like classes but only applied to the content pane itself. styles_wrapper Like styles but only applied to the whole wrapper around the sidebar box. styles_content Like styles but only applied to the content pane itself tab type and settings type classes_link Like classes but only applied to the link in the navigation. classes_content Like classes but only applied to the content pane itself. styles_link Like styles but only applied to the link in the navigation. styles_content Like styles but only applied to the content pane itself. wizard type mandatory Whether the wizard step is mandatory (True) or not (False). Optional, defaults to False. If set to True, OctoPrint will sort visually mark the step as mandatory in the UI (bold in the navigation and a little alert) and also sort it into the first half. Note As already outlined above, each template type has a default template name (i.e. the default navbar template of a plugin is called <plugin identifier>_navbar.jinja2 ), which may be overridden using the template configuration. If a plugin needs to include more than one template of a given type, it needs to provide an entry for each of those, since the implicit default template will only be included automatically if no other templates of that type are defined. Example: If you have a plugin that injects two tab components, one defined in the template file myplugin_tab.jinja2 (the default template) and one in the template myplugin_othertab.jinja2 , you might be tempted to just return the following configuration since one your templates is named by the default template name: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_othertab.jinja2\" } ] This will only include the tab defined in myplugin_othertab.jinja2 though, myplugin_tab.jinja2 will not be included automatically since the presence of a definition for the tab type overrides the automatic injection of the default template. You'll have to include it explicitly: return [ { \"type\" = \"tab\" , \"template\" = \"myplugin_tab.jinja2\" } { \"type\" = \"tab\" , \"template\" = \"myplugin_othertab.jinja2\" } ] Returns: Type Description list a list containing the configuration options for the plugin's injected templates","title":"get_template_configs()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_folder","text":"Defines the folder where the plugin stores its templates. Override this if your plugin stores its templates at some other place than the templates sub folder in the plugin base directory. Returns: Type Description str the absolute path to the folder where the plugin stores its jinja2 templates","title":"get_template_folder()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.TemplatePlugin.get_template_vars","text":"Defines additional template variables to include into the template renderer. Variable names will be prefixed with plugin_<plugin identifier>_ . Returns: Type Description dict a dictionary containing any additional template variables to include in the renderer","title":"get_template_vars()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin","text":"Bases: OctoPrintPlugin , SortablePlugin The UiPlugin mixin allows plugins to completely replace the UI served by OctoPrint when requesting the main page hosted at / . OctoPrint will query whether your mixin implementation will handle a provided request by calling will_handle_ui with the Flask Request object as parameter. If you plugin returns True here, OctoPrint will next call on_ui_render with a few parameters like - again - the Flask Request object and the render keyword arguments as used by the default OctoPrint web interface. For more information see below. There are two methods used in order to allow for caching of the actual response sent to the client. Whatever a plugin implementation returns from the call to its on_ui_render method will be cached server side. The cache will be emptied in case of explicit no-cache headers sent by the client, or if the _refresh query parameter on the request exists and is set to true . To prevent caching of the response altogether, a plugin may set no-cache headers on the returned response as well. UiPlugin is a SortablePlugin with a sorting context for UiPlugin.will_handle_ui . The first plugin to return True for will_handle_ui will be the one whose UI will be used, no further calls to on_ui_render will be performed. If implementations want to serve custom templates in the on_ui_render method it is recommended to also implement the TemplatePlugin mixin . Example What follows is a very simple example that renders a different (non functional and only exemplary) UI if the requesting client has a UserAgent string hinting at it being a mobile device: dummy_mobile_ui/__init__py # coding=utf-8 from __future__ import absolute_import import octoprint.plugin class DummyMobileUiPlugin ( octoprint . plugin . UiPlugin , octoprint . plugin . TemplatePlugin ): def will_handle_ui ( self , request ): # returns True if the User Agent sent by the client matches one of # the User Agent strings known for any of the platforms android, ipad # or iphone return request . user_agent and request . user_agent . platform in ( \"android\" , \"ipad\" , \"iphone\" ) def on_ui_render ( self , now , request , render_kwargs ): # if will_handle_ui returned True, we will now render our custom index # template, using the render_kwargs as provided by OctoPrint from flask import make_response , render_template return make_response ( render_template ( \"dummy_mobile_ui_index.jinja2\" , ** render_kwargs )) __plugin_name__ = \"Dummy Mobile UI\" __plugin_pythoncompat__ = \">=2.7,<4\" __plugin_implementation__ = DummyMobileUiPlugin () dummy_mobile_ui/templates/dummy_mobile_ui_index.jinja2 <html> <head> <title>Dummy Mobile OctoPrint UI</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"/> </head> <body> <h1>Dummy Mobile OctoPrint UI</h1> <p> Well hello there. Sadly, this is only a placeholder page used to demonstrate how UiPlugins work. Hence the \"Dummy\" in the name. Hope you are not too disappointed :) </p> <p> Some data from the <code>render_kwargs</code> passed to this template: </p> <ul> <!-- We can include any render keywords arguments by their name, using the regular Jinja templating functionality. --> <li>Version: {{ display_version }} </li> <li>Debug: {{ debug }} </li> <li>Template Count: {{ templates | length }} </li> <li>Installed Plugins: {{ pluginNames | join ( \", \" ) }} </li> </ul> </body> </html> Try installing the above plugin dummy_mobile_ui (also available in the plugin examples repository ) into your OctoPrint instance. If you access it from a regular desktop browser, you should still see the default UI. However if you access it from a mobile device (make sure to not have that request the desktop version of pages!) you should see the very simple dummy page defined above. Preemptive and Runtime Caching OctoPrint will also cache your custom UI for you in its server side UI cache, making sure it only gets re-rendered if the request demands that (by having no-cache headers set) or if the cache gets invalidated otherwise. In order to be able to do that, the UiPlugin offers overriding some cache specific methods used for figuring out the source files whose modification time to use for cache invalidation as well as override possibilities for ETag and LastModified calculation. Additionally there are methods to allow persisting call parameters to allow for preemptively caching your UI during server startup (basically eager caching instead of lazily waiting for the first request). See below for details on this. {{ version_added('1.3.0') }}","title":"UiPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_etag","text":"Allows to provide a list of additional fields to use for ETag generation. By default the same list will be returned that is also used in the stock UI (and injected via the parameter default_additional ). Parameters: Name Type Description Default default_additional list The list of default fields added to the ETag of the default UI required Returns: Type Description list A list of additional fields for the ETag generation, or None {{ version_added(\"1.3.0\") }}","title":"get_ui_additional_etag()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_key_data_for_cache","text":"Allows to return additional data to use in the cache key. Returns: Type Description Union [ List , Tuple , None] A list or tuple of strings to use in the cache key. Will be joined by OctoPrint using : as separator and appended to the existing ui:<identifier>:<base url>:<locale> cache key. Ignored if None is returned. {{ version_added(\"1.3.0\") }}","title":"get_ui_additional_key_data_for_cache()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_request_data_for_preemptive_caching","text":"Allows defining additional request data to persist in the preemptive cache configuration and to use for the fake request used for populating the preemptive cache. Keys and values are used as keyword arguments for creating the Werkzeug EnvironBuilder used for creating the fake request. Returns: Type Description dict Additional request data to persist in the preemptive cache configuration and to use for request environment construction. {{ version_added(\"1.3.0\") }}","title":"get_ui_additional_request_data_for_preemptive_caching()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_additional_tracked_files","text":"Allows to return additional files to track for validating existing caches. By default OctoPrint will track all declared templates, assets and translation files in the system. Additional files can be added by a plugin through this callback. Returns: Type Description Optional [ List ] A list of paths to additional files whose modification to track for (in)validating the cache. Ignored if None is returned. {{ version_added(\"1.3.0\") }}","title":"get_ui_additional_tracked_files()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_etag","text":"Allows to use a custom way to calculate the ETag, instead of the default method (hashing OctoPrint's version, tracked file paths and LastModified value). Returns: Type Description str An alternatively calculated ETag value. Ignored if None is returned (default). {{ version_added(\"1.3.0\") }}","title":"get_ui_custom_etag()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_lastmodified","text":"Allows to calculate the LastModified differently than using the most recent modification date of all tracked files. Returns: Type Description Optional [ Int ] An alternatively calculated LastModified value. Ignored if None is returned (default). {{ version_added(\"1.3.0\") }}","title":"get_ui_custom_lastmodified()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_template_filter","text":"Allows to specify a custom template filter to use for filtering the template contained in the render_kwargs provided to the templating sub system. Only relevant for UiPlugins that actually utilize the stock templates of OctoPrint. By default simply returns the provided default_template_filter . Parameters: Name Type Description Default default_template_filter callable The default template filter used by the default UI required Returns: Type Description callable A filter function accepting the template_type and template_key of a template and returning True to keep it and False to filter it out. If None is returned, no filtering will take place. {{ version_added(\"1.3.0\") }}","title":"get_ui_custom_template_filter()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_custom_tracked_files","text":"Allows to define a complete separate set of files to track for (in)validating the cache. If this method returns something, the templates, assets and translation files won't be tracked, only the files specified in the returned list. Returns: Type Description Optional [ List ] A list of paths representing the only files whose modification to track for (in)validating the cache. Ignored if None is returned. {{ version_added(\"1.3.0\") }}","title":"get_ui_custom_tracked_files()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_data_for_preemptive_caching","text":"Allows defining additional data to be persisted in the preemptive cache configuration, on top of the request path, base URL and used locale. Returns: Type Description dict Additional data to persist in the preemptive cache configuration. {{ version_added(\"1.3.0\") }}","title":"get_ui_data_for_preemptive_caching()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_permissions","text":"Determines a list of permissions that need to be on the current user session. If these requirements are not met, OctoPrint will instead redirect to a login screen. Plugins may override this with their own set of permissions. Returning an empty list will instruct OctoPrint to never show a login dialog when this UiPlugin's view renders, in which case it will fall to your plugin to implement its own login logic. Returns: Type Description list A list of permissions which to check the current user session against. May be empty to indicate that no permission checks should be made by OctoPrint. {{ version_added(\"1.5.0\") }}","title":"get_ui_permissions()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_preemptive_caching_additional_unless","text":"Allows defining additional reasons for temporarily not adding a preemptive cache record for your plugin's UI. OctoPrint will call this method when processing a UI request, to determine whether to record the access or not. If you return True here, no record will be created. Returns: Type Description bool Whether to suppress a record ( True ) or not ( False , default) {{ version_added(\"1.3.0\") }}","title":"get_ui_preemptive_caching_additional_unless()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.get_ui_preemptive_caching_enabled","text":"Allows to control whether the view provided by the plugin should be preemptively cached on server startup (default) or not. Have this return False if you do not want your plugin's UI to ever be preemptively cached. Returns: Type Description bool Whether to enable preemptive caching ( True , default) or not ( False )","title":"get_ui_preemptive_caching_enabled()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.on_ui_render","text":"Called by OctoPrint to retrieve the response to send to the client for the request to / . Only called if will_handle_ui returned True . render_kwargs will be a dictionary (whose contents are cached) which will contain the following key and value pairs (note that not all key value pairs contained in the dictionary are listed here, only those you should depend on as a plugin developer at the current time): Name Type Description debug bool Whether the debug mode is enabled or not. firstRun bool Whether the server is running for the first time or not. version dict OctoPrint's version information. version.number str The version number (e.g. x.y.z ). version.branch str The git branch name from which the OctoPrint instance was built (e.g. master ). version.display str The full human readable version string, including the branch information (e.g. x.y.z (master branch) ). templates dict Template data to render in the UI. Will be a dict containing entries for all known template types. templates.*.order List[str] A list of template names in the order they should be rendered. templates.*.entries Union[Tuple, Dict] The template entry definitions to render. Depending on the template type those are either 2-tuples of a name and a dict or directly dict s with information regarding the template to render. For the possible contents of the data dict s see the TemplatePlugin mixin. pluginNames List[str] A list of names of TemplatePlugin implementations that were enabled when creating the templates value. locales List[str] The locales for which there are translations available. supportedExtensions List[str] The file extensions supported for uploads. On top of that all additional template variables as provided by get_template_vars will be contained in the dictionary as well. Parameters: Name Type Description Default now datetime . datetime The datetime instance representing \"now\" for this request, in case your plugin implementation needs this information. required request flask . Request A Flask Request object. required render_kwargs dict The (cached) render keyword arguments that would usually be provided to the core UI render function. required Returns: Type Description flask . Response Should return a Flask Response object that can be served to the requesting client directly. May be created with flask.make_response combined with something like flask.render_template .","title":"on_ui_render()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.UiPlugin.will_handle_ui","text":"Called by OctoPrint to determine if the mixin implementation will be able to handle the request provided as a parameter. Return True here to signal that your implementation will handle the request and that the result of its on_ui_render method is what should be served to the user. The execution order of calls to this method can be influenced via the sorting context UiPlugin.will_handle_ui . Parameters: Name Type Description Default request flask . Request A Flask Request object. required Returns: Type Description bool True if the implementation will serve the request, False otherwise.","title":"will_handle_ui()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin","text":"Bases: OctoPrintPlugin , ReloadNeedingPlugin The WizardPlugin mixin allows plugins to report to OctoPrint whether the wizard templates they define via the TemplatePlugin should be displayed to the user, what details to provide to their respective wizard frontend components and what to do when the wizard is finished by the user. OctoPrint will only display such wizard dialogs to the user which belong to plugins that report True in their is_wizard_required method and have not yet been shown to the user in the version currently being reported by the octoprint.plugin.WizardPlugin.get_wizard_version method Example If a plugin with the identifier myplugin has a specific setting some_key it needs to have filled by the user in order to be able to work at all, it would probably test for that setting's value in the is_wizard_required method and return True if the value is unset: class MyPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . TemplatePlugin , octoprint . plugin . WizardPlugin ): def get_default_settings ( self ): return dict ( some_key = None ) def is_wizard_required ( self ): return self . _settings . get ([ \"some_key\" ]) is None OctoPrint will then display the wizard dialog provided by the plugin through the octoprint.plugin.TemplatePlugin mixin. Once the user finishes the wizard on the frontend, OctoPrint will store that it already showed the wizard of myplugin in the version reported by get_wizard_version - here None since that is the default value returned by that function and the plugin did not override it. If the plugin in a later version needs another setting from the user in order to function, it will also need to change the reported version in order to have OctoPrint reshow the dialog. E.g. class MyPlugin ( octoprint . plugin . SettingsPlugin , octoprint . plugin . TemplatePlugin , octoprint . plugin . WizardPlugin ): def get_default_settings ( self ): return dict ( some_key = None , some_other_key = None ) def is_wizard_required ( self ): some_key_unset = self . _settings . get ([ \"some_key\" ]) is None some_other_key_unset = self . _settings . get ([ \"some_other_key\" ]) is None return some_key_unset or some_other_key_unset def get_wizard_version ( self ): return 1 WizardPlugin is a octoprint.plugin.ReloadNeedingPlugin .","title":"WizardPlugin"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.get_wizard_details","text":"Called by OctoPrint when the wizard wrapper dialog is shown. Allows the plugin to return data that will then be made available to the view models via the view model callback onWizardDetails . Use this if your plugin's view model that handles your wizard dialog needs additional data to perform its task. Returns: Type Description dict a dictionary containing additional data to provide to the frontend. Whatever the plugin returns here will be made available on the wizard API under the plugin's identifier","title":"get_wizard_details()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.get_wizard_version","text":"The version of this plugin's wizard. OctoPrint will only display a wizard of the same plugin and wizard version once to the user. After they finish the wizard, OctoPrint will remember that it already showed this wizard in this particular version and not reshow it. If a plugin needs to show its wizard to the user again (e.g. because of changes in the required settings), increasing this value is the way to notify OctoPrint of these changes. Returns: Type Description Optional [ int ] an int signifying the current wizard version, should be incremented by plugins whenever there are changes to the plugin that might necessitate reshowing the wizard if it is required. None will also be accepted and lead to the wizard always be ignored unless it has never been finished so far","title":"get_wizard_version()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.is_wizard_ignored","text":"Determines whether the provided implementation is ignored based on the provided information about already seen wizards and their versions or not. A wizard is ignored if the current and seen versions are identical the current version is None and the seen version is not the seen version is not None and the current version is less or equal than the seen one current N 1 2 seen N \u274c ignored \u2705 shown \u2705 shown 1 \u274c ignored \u274c ignored \u2705 shown 2 \u274c ignored \u274c ignored \u274c ignored Parameters: Name Type Description Default seen_wizards dict A dictionary with information about already seen wizards and their versions. Mappings from the identifiers of the plugin providing the wizard to the reported wizard version (int or None) that was already seen by the user. required implementation object The plugin implementation to check. required Returns: Type Description bool False if the provided implementation is either not a WizardPlugin or has not yet been seen (in this version), True otherwise","title":"is_wizard_ignored()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.is_wizard_required","text":"Allows the plugin to report whether it needs to display a wizard to the user or not. OctoPrint will only include those wizards from plugins which are reporting their wizards as being required through this method returning True . Still, if OctoPrint already displayed that wizard in the same version to the user once it won't be displayed again regardless whether this method returns True or not, refer to is_wizard_ignored . Returns: Type Description bool True if the plugin needs to display a wizard to the user, False otherwise (default).","title":"is_wizard_required()"},{"location":"reference/octoprint/plugin/types/#octoprint.plugin.types.WizardPlugin.on_wizard_finish","text":"Called by OctoPrint whenever the user finishes a wizard session. The handled parameter will indicate whether that plugin's wizard was included in the wizard dialog presented to the user (so the plugin providing it was reporting that the wizard was required and the wizard plus version was not ignored/had already been seen). Use this to do any clean up tasks necessary after wizard completion. Parameters: Name Type Description Default handled bool True if the plugin's wizard was previously reported as required, not ignored and thus presented to the user, False otherwise required","title":"on_wizard_finish()"},{"location":"reference/octoprint/plugins/","text":"octoprint.plugins #","title":"octoprint.plugins"},{"location":"reference/octoprint/plugins/#octoprintplugins","text":"","title":"octoprint.plugins"},{"location":"reference/octoprint/plugins/action_command_notification/","text":"","title":"action_command_notification"},{"location":"reference/octoprint/plugins/action_command_prompt/","text":"","title":"action_command_prompt"},{"location":"reference/octoprint/plugins/announcements/","text":"","title":"announcements"},{"location":"reference/octoprint/plugins/appkeys/","text":"","title":"appkeys"},{"location":"reference/octoprint/plugins/backup/","text":"","title":"backup"},{"location":"reference/octoprint/plugins/corewizard/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/corewizard/subwizards/","text":"","title":"subwizards"},{"location":"reference/octoprint/plugins/discovery/","text":"","title":"discovery"},{"location":"reference/octoprint/plugins/errortracking/","text":"","title":"errortracking"},{"location":"reference/octoprint/plugins/eventmanager/","text":"","title":"eventmanager"},{"location":"reference/octoprint/plugins/gcodeviewer/","text":"","title":"gcodeviewer"},{"location":"reference/octoprint/plugins/logging/","text":"","title":"logging"},{"location":"reference/octoprint/plugins/pluginmanager/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/pluginmanager/exceptions/","text":"","title":"exceptions"},{"location":"reference/octoprint/plugins/softwareupdate/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/softwareupdate/cli/","text":"","title":"cli"},{"location":"reference/octoprint/plugins/softwareupdate/exceptions/","text":"","title":"exceptions"},{"location":"reference/octoprint/plugins/softwareupdate/util/","text":"","title":"util"},{"location":"reference/octoprint/plugins/softwareupdate/scripts/update-octoprint/","text":"","title":"update-octoprint"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/pip/","text":"","title":"pip"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/python_updater/","text":"","title":"python_updater"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/single_file_plugin/","text":"","title":"single_file_plugin"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/sleep_a_bit/","text":"","title":"sleep_a_bit"},{"location":"reference/octoprint/plugins/softwareupdate/updaters/update_script/","text":"","title":"update_script"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/always_current/","text":"","title":"always_current"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/bitbucket_commit/","text":"","title":"bitbucket_commit"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/commandline/","text":"","title":"commandline"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/git_commit/","text":"","title":"git_commit"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/github_commit/","text":"","title":"github_commit"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/github_release/","text":"","title":"github_release"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/httpheader/","text":"","title":"httpheader"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/jsondata/","text":"","title":"jsondata"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/never_current/","text":"","title":"never_current"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/pypi_release/","text":"","title":"pypi_release"},{"location":"reference/octoprint/plugins/softwareupdate/version_checks/python_checker/","text":"","title":"python_checker"},{"location":"reference/octoprint/plugins/tracking/","text":"","title":"tracking"},{"location":"reference/octoprint/plugins/virtual_printer/","text":"","title":"Index"},{"location":"reference/octoprint/plugins/virtual_printer/virtual/","text":"","title":"virtual"},{"location":"reference/octoprint/printer/","text":"octoprint.printer # This module defines the interface for communicating with a connected printer. The communication is in fact divided in two components, the :class: PrinterInterface and a deeper lying communication layer. However, plugins should only ever need to use the :class: PrinterInterface as the abstracted version of the actual printer communication. .. autofunction:: get_connection_options .. autoclass:: PrinterInterface :members: .. autoclass:: PrinterCallback :members: PrinterCallback # on_printer_add_log ( data ) # Called when the :class: PrinterInterface receives a new communication log entry from the communication layer. Parameters: Name Type Description Default data str The received log line. required on_printer_add_message ( data ) # Called when the :class: PrinterInterface receives a new message from the communication layer. Parameters: Name Type Description Default data str The received message. required on_printer_add_temperature ( data ) # Called when the :class: PrinterInterface receives a new temperature data set from the communication layer. data is a dict of the following structure:: tool0: actual: <temperature of the first hotend, in degC> target: <target temperature of the first hotend, in degC> ... bed: actual: <temperature of the bed, in degC> target: <target temperature of the bed, in degC> chamber: actual: <temperature of the chamber, in degC> target: <target temperature of the chamber, in degC> Parameters: Name Type Description Default data dict A dict of all current temperatures in the format as specified above required on_printer_received_registered_message ( name , output ) # Called when the :class: PrinterInterface received a registered message, e.g. from a feedback command. Parameters: Name Type Description Default name str Name of the registered message (e.g. the feedback command) required output str Output for the registered message required on_printer_send_current_data ( data ) # Called when the internal state of the :class: PrinterInterface changes, due to changes in the printer state, temperatures, log lines, job progress etc. Updates via this method are guaranteed to be throttled to a maximum of 2 calls per second. data is a dict of the following structure:: state: text: <current state string> flags: operational: <whether the printer is currently connected and responding> printing: <whether the printer is currently printing> closedOrError: <whether the printer is currently disconnected and/or in an error state> error: <whether the printer is currently in an error state> paused: <whether the printer is currently paused> ready: <whether the printer is operational and ready for jobs> sdReady: <whether an SD card is present> job: file: name: <name of the file>, size: <size of the file in bytes>, origin: <origin of the file, \"local\" or \"sdcard\">, date: <last modification date of the file> estimatedPrintTime: <estimated print time of the file in seconds> lastPrintTime: <last print time of the file in seconds> filament: length: <estimated length of filament needed for this file, in mm> volume: <estimated volume of filament needed for this file, in ccm> progress: completion: <progress of the print job in percent (0-100)> filepos: <current position in the file in bytes> printTime: <current time elapsed for printing, in seconds> printTimeLeft: <estimated time left to finish printing, in seconds> currentZ: <current position of the z axis, in mm> offsets: <current configured temperature offsets, keys are \"bed\" or \"tool[0-9]+\", values the offset in degC> Parameters: Name Type Description Default data dict The current data in the format as specified above. required on_printer_send_initial_data ( data ) # Called when registering as a callback with the :class: PrinterInterface to receive the initial data (state, log and temperature history etc) from the printer. data is a dict of the following structure:: temps: - time: <timestamp of the temperature data point> tool0: actual: <temperature of the first hotend, in degC> target: <target temperature of the first hotend, in degC> ... bed: actual: <temperature of the bed, in degC> target: <target temperature of the bed, in degC> - ... logs: <list of current communication log lines> messages: <list of current messages from the firmware> Parameters: Name Type Description Default data dict The initial data in the format as specified above. required PrinterInterface # The :class: PrinterInterface represents the developer interface to the :class: ~octoprint.printer.standard.Printer instance. valid_axes = ( 'x' , 'y' , 'z' , 'e' ) class-attribute # Valid axes identifiers. valid_heater_regex = re . compile ( '^(tool \\\\ d+|bed|chamber)$' ) class-attribute # Regex for valid heater identifiers. valid_tool_regex = re . compile ( '^(tool \\\\ d+)$' ) class-attribute # Regex for valid tool identifiers. can_modify_file ( path , sd , * args , ** kwargs ) # Determines whether the path (on the printer's SD if sd is True) may be modified (updated or deleted) or not. A file that is currently being printed is not allowed to be modified. Any other file or the current file when it is not being printed is fine though. :since: 1.3.2 .. warning:: This was introduced in 1.3.2 to work around an issue when updating a file that is already selected. I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide to depend on this particular method in this interface, be advised that it might vanish in future versions! Parameters: Name Type Description Default path str path in storage of the file to check required sd bool True if to check against SD storage, False otherwise required Returns: Type Description (bool) True if the file may be modified, False otherwise cancel_print ( tags = None , * args , ** kwargs ) # Cancels the current print job. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None change_tool ( tool , tags = None , * args , ** kwargs ) # Switch the currently active tool (for which extrude commands will apply). Parameters: Name Type Description Default tool str The tool to switch to, matching the regex \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...) required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None commands ( commands , tags = None , force = False , * args , ** kwargs ) # Sends the provided commands to the printer. Parameters: Name Type Description Default commands str , list The commands to send. Might be a single command provided just as a string or a list of multiple commands to send in order. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None force bool Whether to force sending of the command right away or allow queuing while printing False connect ( port = None , baudrate = None , profile = None , * args , ** kwargs ) # Connects to the printer, using the specified serial port , baudrate and printer profile . If a connection is already established, that connection will be closed prior to connecting anew with the provided parameters. Parameters: Name Type Description Default port str Name of the serial port to connect to. If not provided, an auto detection will be attempted. None baudrate int Baudrate to connect with. If not provided, an auto detection will be attempted. None profile str Name of the printer profile to use for this connection. If not provided, the default will be retrieved from the :class: PrinterProfileManager . None disconnect ( * args , ** kwargs ) # Disconnects from the printer. Does nothing if no connection is currently established. extrude ( amount , speed = None , tags = None , * args , ** kwargs ) # Extrude amount millimeters of material from the tool. Parameters: Name Type Description Default amount int , float The amount of material to extrude in mm required speed int , None Speed at which to extrude (F parameter). If set to None (or left out) None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None fake_ack ( * args , ** kwargs ) # Fakes an acknowledgment for the communication layer. If the communication between OctoPrint and the printer gets stuck due to lost \"ok\" responses from the server due to communication issues, this can be used to get things going again. feed_rate ( factor , tags = None , * args , ** kwargs ) # Sets the factor for the printer's feed rate. Parameters: Name Type Description Default factor int , float The factor for the feed rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None flow_rate ( factor , tags = None , * args , ** kwargs ) # Sets the factor for the printer's flow rate. Parameters: Name Type Description Default factor int , float The factor for the flow rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None get_connection_options ( * args , ** kwargs ) classmethod # Retrieves the available ports, baudrates, preferred port and baudrate for connecting to the printer. Returned dict has the following structure:: ports: <list of available serial ports> baudrates: <list of available baudrates> portPreference: <configured default serial port> baudratePreference: <configured default baudrate> autoconnect: <whether autoconnect upon server startup is enabled or not> Returns: Type Description dict A dictionary holding the connection options in the structure specified above get_current_connection ( * args , ** kwargs ) # Returns: Type Description (tuple) The current connection information as a 4-tuple (connection_string, port, baudrate, printer_profile) . If the printer is currently not connected, the tuple will be (\"Closed\", None, None, None) . get_current_data ( * args , ** kwargs ) # Returns: Type Description (dict) The current state data. get_current_job ( * args , ** kwargs ) # Returns: Type Description (dict) The data of the current job. get_current_temperatures ( * args , ** kwargs ) # Returns: Type Description (dict) The current temperatures. get_state_id ( * args , ** kwargs ) # Identifier of the current communication state. Possible values are OPEN_SERIAL DETECT_SERIAL DETECT_BAUDRATE CONNECTING OPERATIONAL PRINTING PAUSED CLOSED ERROR CLOSED_WITH_ERROR TRANSFERING_FILE OFFLINE UNKNOWN NONE Returns: Type Description (str) A unique identifier corresponding to the current communication state. get_state_string ( * args , ** kwargs ) # Returns: Type Description (str) A human readable string corresponding to the current communication state. get_temperature_history ( * args , ** kwargs ) # Returns: Type Description (list) The temperature history. get_transport ( * args , ** kwargs ) # Returns the communication layer's transport object, if a connection is currently established. Note that this doesn't have to necessarily be a :class: serial.Serial instance, it might also be something different, so take care to do instance checks before attempting to access any properties or methods. Returns: Name Type Description object The communication layer's transport object home ( axes , tags = None , * args , ** kwargs ) # Homes the specified printer axes . Parameters: Name Type Description Default axes str , list The axis or axes to home, each of which must converted to lower case must match one of \"x\", \"y\", \"z\" and \"e\" required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None is_cancelling ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently cancelling a print. is_closed_or_error ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently disconnected and/or in an error state. is_current_file ( path , sd , * args , ** kwargs ) # Returns whether the provided path (on the printer's SD if sd is True) is the currently selected file for printing. :since: 1.3.2 .. warning:: This was introduced in 1.3.2 to work around an issue when updating a file that is already selected. I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide to depend on this particular method in this interface, be advised that it might vanish in future versions! Parameters: Name Type Description Default path str path in storage of the file to check required sd bool True if to check against SD storage, False otherwise required Returns: Type Description (bool) True if the file is currently selected, False otherwise is_error ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently in an error state. is_operational ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently connected and available. is_paused ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently paused. is_pausing ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently pausing a print. is_printing ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently printing. is_ready ( * args , ** kwargs ) # Returns: Type Description (boolean) Whether the printer is currently operational and ready for new print jobs (not printing). job_on_hold ( blocking = True , * args , ** kwargs ) # Contextmanager that allows executing code while printing while making sure that no commands from the file being printed are continued to be sent to the printer. Note that this will only work for local files, NOT SD files. Example: .. code-block:: python with printer.job_on_hold(): park_printhead() take_snapshot() send_printhead_back() It should be used sparingly and only for very specific situations (such as parking the print head somewhere, taking a snapshot from the webcam, then continuing). If you abuse this, you WILL cause print quality issues! A lock is in place that ensures that the context can only actually be held by one thread at a time. If you don't want to block on acquire, be sure to set blocking to False and catch the RuntimeException thrown if the lock can't be acquired. Parameters: Name Type Description Default blocking bool Whether to block while attempting to acquire the lock (default) or not True jog ( axes , relative = True , speed = None , tags = None , * args , ** kwargs ) # Jogs the specified printer axis by the specified amount in mm. Parameters: Name Type Description Default axes dict Axes and distances to jog, keys are axes (\"x\", \"y\", \"z\"), values are distances in mm required relative bool Whether to interpret the distance values as relative (true, default) or absolute (false) coordinates True speed int, bool or None Speed at which to jog (F parameter). If set to False no speed will be set specifically. If set to None (or left out) the minimum of all involved axes speeds from the printer profile will be used. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None log_lines ( * lines ) # Logs the provided lines to the printer log and serial.log Parameters: Name Type Description Default *lines the lines to log () pause_print ( tags = None , * args , ** kwargs ) # Pauses the current print job if it is currently running, does nothing otherwise. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None register_callback ( callback , * args , ** kwargs ) # Registers a :class: PrinterCallback with the instance. Parameters: Name Type Description Default callback PrinterCallback The callback object to register. required resume_print ( tags = None , * args , ** kwargs ) # Resumes the current print job if it is currently paused, does nothing otherwise. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None script ( name , context = None , tags = None , * args , ** kwargs ) # Sends the GCODE script name to the printer. The script will be run through the template engine, the rendering context can be extended by providing a context with additional template variables to use. If the script is unknown, an :class: UnknownScriptException will be raised. Parameters: Name Type Description Default name str The name of the GCODE script to render. required context dict An optional context of additional template variables to provide to the renderer. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None Raises: Type Description UnknownScriptException There is no GCODE script with name name select_file ( path , sd , printAfterSelect = False , pos = None , tags = None , * args , ** kwargs ) # Selects the specified path for printing, specifying if the file is to be found on the sd or not. Optionally can also directly start the print after selecting the file. Parameters: Name Type Description Default path str The path to select for printing. Either an absolute path or relative path to a local file in the uploads folder or a filename on the printer's SD card. required sd boolean Indicates whether the file is on the printer's SD card or not. required printAfterSelect boolean Indicates whether a print should be started after the file is selected. False tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None Raises: Type Description InvalidFileType if the file is not a machinecode file and hence cannot be printed InvalidFileLocation if an absolute path was provided and not contained within local storage or doesn't exist send_initial_callback ( callback ) # Sends the initial printer update to :class: PrinterCallback . Parameters: Name Type Description Default callback PrinterCallback The callback object to send initial data to. required set_job_on_hold ( value , blocking = True , * args , ** kwargs ) # Setter for finer control over putting jobs on hold. Set to True to ensure that no commands from the file being printed are continued to be sent to the printer. Set to False to resume. Note that this will only work for local files, NOT SD files. Make absolutely sure that if you set this flag, you will always also unset it again. If you don't, the job will be stuck forever. Example: .. code-block:: python if printer.set_job_on_hold(True): try: park_printhead() take_snapshot() send_printhead_back() finally: printer.set_job_on_hold(False) Just like :func: ~octoprint.printer.PrinterInterface.job_on_hold this should be used sparingly and only for very specific situations. If you abuse this, you WILL cause print quality issues! Parameters: Name Type Description Default value bool The value to set required blocking bool Whether to block while attempting to set the value (default) or not True Returns: Type Description (bool) Whether the value could be set successfully (True) or a timeout was encountered (False) set_temperature ( heater , value , tags = None , * args , ** kwargs ) # Sets the target temperature on the specified heater to the given value in celsius. Parameters: Name Type Description Default heater str The heater for which to set the target temperature. Either \"bed\" for setting the bed temperature or something matching the regular expression \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...) for the hotends of the printer required value int , float The temperature in celsius to set the target temperature to. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None set_temperature_offset ( offsets = None , tags = None , * args , ** kwargs ) # Sets the temperature offsets to apply to target temperatures read from a GCODE file while printing. Parameters: Name Type Description Default offsets dict A dictionary specifying the offsets to apply. Keys must match the format for the heater parameter to :func: set_temperature , so \"bed\" for the offset for the bed target temperature and \"tool[0-9]+\" for the offsets to the hotend target temperatures. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None start_print ( tags = None , * args , ** kwargs ) # Starts printing the currently selected file. If no file is currently selected, does nothing. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None toggle_pause_print ( tags = None , * args , ** kwargs ) # Pauses the current print job if it is currently running or resumes it if it is currently paused. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None unregister_callback ( callback , * args , ** kwargs ) # Unregisters a :class: PrinterCallback from the instance. Parameters: Name Type Description Default callback PrinterCallback The callback object to unregister. required unselect_file ( * args , ** kwargs ) # Unselects and currently selected file.","title":"octoprint.printer"},{"location":"reference/octoprint/printer/#octoprintprinter","text":"This module defines the interface for communicating with a connected printer. The communication is in fact divided in two components, the :class: PrinterInterface and a deeper lying communication layer. However, plugins should only ever need to use the :class: PrinterInterface as the abstracted version of the actual printer communication. .. autofunction:: get_connection_options .. autoclass:: PrinterInterface :members: .. autoclass:: PrinterCallback :members:","title":"octoprint.printer"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback","text":"","title":"PrinterCallback"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_log","text":"Called when the :class: PrinterInterface receives a new communication log entry from the communication layer. Parameters: Name Type Description Default data str The received log line. required","title":"on_printer_add_log()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_message","text":"Called when the :class: PrinterInterface receives a new message from the communication layer. Parameters: Name Type Description Default data str The received message. required","title":"on_printer_add_message()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_add_temperature","text":"Called when the :class: PrinterInterface receives a new temperature data set from the communication layer. data is a dict of the following structure:: tool0: actual: <temperature of the first hotend, in degC> target: <target temperature of the first hotend, in degC> ... bed: actual: <temperature of the bed, in degC> target: <target temperature of the bed, in degC> chamber: actual: <temperature of the chamber, in degC> target: <target temperature of the chamber, in degC> Parameters: Name Type Description Default data dict A dict of all current temperatures in the format as specified above required","title":"on_printer_add_temperature()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_received_registered_message","text":"Called when the :class: PrinterInterface received a registered message, e.g. from a feedback command. Parameters: Name Type Description Default name str Name of the registered message (e.g. the feedback command) required output str Output for the registered message required","title":"on_printer_received_registered_message()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_send_current_data","text":"Called when the internal state of the :class: PrinterInterface changes, due to changes in the printer state, temperatures, log lines, job progress etc. Updates via this method are guaranteed to be throttled to a maximum of 2 calls per second. data is a dict of the following structure:: state: text: <current state string> flags: operational: <whether the printer is currently connected and responding> printing: <whether the printer is currently printing> closedOrError: <whether the printer is currently disconnected and/or in an error state> error: <whether the printer is currently in an error state> paused: <whether the printer is currently paused> ready: <whether the printer is operational and ready for jobs> sdReady: <whether an SD card is present> job: file: name: <name of the file>, size: <size of the file in bytes>, origin: <origin of the file, \"local\" or \"sdcard\">, date: <last modification date of the file> estimatedPrintTime: <estimated print time of the file in seconds> lastPrintTime: <last print time of the file in seconds> filament: length: <estimated length of filament needed for this file, in mm> volume: <estimated volume of filament needed for this file, in ccm> progress: completion: <progress of the print job in percent (0-100)> filepos: <current position in the file in bytes> printTime: <current time elapsed for printing, in seconds> printTimeLeft: <estimated time left to finish printing, in seconds> currentZ: <current position of the z axis, in mm> offsets: <current configured temperature offsets, keys are \"bed\" or \"tool[0-9]+\", values the offset in degC> Parameters: Name Type Description Default data dict The current data in the format as specified above. required","title":"on_printer_send_current_data()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterCallback.on_printer_send_initial_data","text":"Called when registering as a callback with the :class: PrinterInterface to receive the initial data (state, log and temperature history etc) from the printer. data is a dict of the following structure:: temps: - time: <timestamp of the temperature data point> tool0: actual: <temperature of the first hotend, in degC> target: <target temperature of the first hotend, in degC> ... bed: actual: <temperature of the bed, in degC> target: <target temperature of the bed, in degC> - ... logs: <list of current communication log lines> messages: <list of current messages from the firmware> Parameters: Name Type Description Default data dict The initial data in the format as specified above. required","title":"on_printer_send_initial_data()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface","text":"The :class: PrinterInterface represents the developer interface to the :class: ~octoprint.printer.standard.Printer instance.","title":"PrinterInterface"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_axes","text":"Valid axes identifiers.","title":"valid_axes"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_heater_regex","text":"Regex for valid heater identifiers.","title":"valid_heater_regex"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.valid_tool_regex","text":"Regex for valid tool identifiers.","title":"valid_tool_regex"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.can_modify_file","text":"Determines whether the path (on the printer's SD if sd is True) may be modified (updated or deleted) or not. A file that is currently being printed is not allowed to be modified. Any other file or the current file when it is not being printed is fine though. :since: 1.3.2 .. warning:: This was introduced in 1.3.2 to work around an issue when updating a file that is already selected. I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide to depend on this particular method in this interface, be advised that it might vanish in future versions! Parameters: Name Type Description Default path str path in storage of the file to check required sd bool True if to check against SD storage, False otherwise required Returns: Type Description (bool) True if the file may be modified, False otherwise","title":"can_modify_file()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.cancel_print","text":"Cancels the current print job. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"cancel_print()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.change_tool","text":"Switch the currently active tool (for which extrude commands will apply). Parameters: Name Type Description Default tool str The tool to switch to, matching the regex \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...) required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"change_tool()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.commands","text":"Sends the provided commands to the printer. Parameters: Name Type Description Default commands str , list The commands to send. Might be a single command provided just as a string or a list of multiple commands to send in order. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None force bool Whether to force sending of the command right away or allow queuing while printing False","title":"commands()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.connect","text":"Connects to the printer, using the specified serial port , baudrate and printer profile . If a connection is already established, that connection will be closed prior to connecting anew with the provided parameters. Parameters: Name Type Description Default port str Name of the serial port to connect to. If not provided, an auto detection will be attempted. None baudrate int Baudrate to connect with. If not provided, an auto detection will be attempted. None profile str Name of the printer profile to use for this connection. If not provided, the default will be retrieved from the :class: PrinterProfileManager . None","title":"connect()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.disconnect","text":"Disconnects from the printer. Does nothing if no connection is currently established.","title":"disconnect()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.extrude","text":"Extrude amount millimeters of material from the tool. Parameters: Name Type Description Default amount int , float The amount of material to extrude in mm required speed int , None Speed at which to extrude (F parameter). If set to None (or left out) None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"extrude()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.fake_ack","text":"Fakes an acknowledgment for the communication layer. If the communication between OctoPrint and the printer gets stuck due to lost \"ok\" responses from the server due to communication issues, this can be used to get things going again.","title":"fake_ack()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.feed_rate","text":"Sets the factor for the printer's feed rate. Parameters: Name Type Description Default factor int , float The factor for the feed rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"feed_rate()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.flow_rate","text":"Sets the factor for the printer's flow rate. Parameters: Name Type Description Default factor int , float The factor for the flow rate to send to the firmware. Percentage expressed as either an int between 0 and 100 or a float between 0 and 1. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"flow_rate()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_connection_options","text":"Retrieves the available ports, baudrates, preferred port and baudrate for connecting to the printer. Returned dict has the following structure:: ports: <list of available serial ports> baudrates: <list of available baudrates> portPreference: <configured default serial port> baudratePreference: <configured default baudrate> autoconnect: <whether autoconnect upon server startup is enabled or not> Returns: Type Description dict A dictionary holding the connection options in the structure specified above","title":"get_connection_options()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_connection","text":"Returns: Type Description (tuple) The current connection information as a 4-tuple (connection_string, port, baudrate, printer_profile) . If the printer is currently not connected, the tuple will be (\"Closed\", None, None, None) .","title":"get_current_connection()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_data","text":"Returns: Type Description (dict) The current state data.","title":"get_current_data()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_job","text":"Returns: Type Description (dict) The data of the current job.","title":"get_current_job()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_current_temperatures","text":"Returns: Type Description (dict) The current temperatures.","title":"get_current_temperatures()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_state_id","text":"Identifier of the current communication state. Possible values are OPEN_SERIAL DETECT_SERIAL DETECT_BAUDRATE CONNECTING OPERATIONAL PRINTING PAUSED CLOSED ERROR CLOSED_WITH_ERROR TRANSFERING_FILE OFFLINE UNKNOWN NONE Returns: Type Description (str) A unique identifier corresponding to the current communication state.","title":"get_state_id()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_state_string","text":"Returns: Type Description (str) A human readable string corresponding to the current communication state.","title":"get_state_string()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_temperature_history","text":"Returns: Type Description (list) The temperature history.","title":"get_temperature_history()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.get_transport","text":"Returns the communication layer's transport object, if a connection is currently established. Note that this doesn't have to necessarily be a :class: serial.Serial instance, it might also be something different, so take care to do instance checks before attempting to access any properties or methods. Returns: Name Type Description object The communication layer's transport object","title":"get_transport()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.home","text":"Homes the specified printer axes . Parameters: Name Type Description Default axes str , list The axis or axes to home, each of which must converted to lower case must match one of \"x\", \"y\", \"z\" and \"e\" required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"home()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_cancelling","text":"Returns: Type Description (boolean) Whether the printer is currently cancelling a print.","title":"is_cancelling()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_closed_or_error","text":"Returns: Type Description (boolean) Whether the printer is currently disconnected and/or in an error state.","title":"is_closed_or_error()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_current_file","text":"Returns whether the provided path (on the printer's SD if sd is True) is the currently selected file for printing. :since: 1.3.2 .. warning:: This was introduced in 1.3.2 to work around an issue when updating a file that is already selected. I'm not 100% sure at this point if this is the best approach to solve this issue, so if you decide to depend on this particular method in this interface, be advised that it might vanish in future versions! Parameters: Name Type Description Default path str path in storage of the file to check required sd bool True if to check against SD storage, False otherwise required Returns: Type Description (bool) True if the file is currently selected, False otherwise","title":"is_current_file()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_error","text":"Returns: Type Description (boolean) Whether the printer is currently in an error state.","title":"is_error()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_operational","text":"Returns: Type Description (boolean) Whether the printer is currently connected and available.","title":"is_operational()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_paused","text":"Returns: Type Description (boolean) Whether the printer is currently paused.","title":"is_paused()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_pausing","text":"Returns: Type Description (boolean) Whether the printer is currently pausing a print.","title":"is_pausing()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_printing","text":"Returns: Type Description (boolean) Whether the printer is currently printing.","title":"is_printing()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.is_ready","text":"Returns: Type Description (boolean) Whether the printer is currently operational and ready for new print jobs (not printing).","title":"is_ready()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.job_on_hold","text":"Contextmanager that allows executing code while printing while making sure that no commands from the file being printed are continued to be sent to the printer. Note that this will only work for local files, NOT SD files. Example: .. code-block:: python with printer.job_on_hold(): park_printhead() take_snapshot() send_printhead_back() It should be used sparingly and only for very specific situations (such as parking the print head somewhere, taking a snapshot from the webcam, then continuing). If you abuse this, you WILL cause print quality issues! A lock is in place that ensures that the context can only actually be held by one thread at a time. If you don't want to block on acquire, be sure to set blocking to False and catch the RuntimeException thrown if the lock can't be acquired. Parameters: Name Type Description Default blocking bool Whether to block while attempting to acquire the lock (default) or not True","title":"job_on_hold()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.jog","text":"Jogs the specified printer axis by the specified amount in mm. Parameters: Name Type Description Default axes dict Axes and distances to jog, keys are axes (\"x\", \"y\", \"z\"), values are distances in mm required relative bool Whether to interpret the distance values as relative (true, default) or absolute (false) coordinates True speed int, bool or None Speed at which to jog (F parameter). If set to False no speed will be set specifically. If set to None (or left out) the minimum of all involved axes speeds from the printer profile will be used. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"jog()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.log_lines","text":"Logs the provided lines to the printer log and serial.log Parameters: Name Type Description Default *lines the lines to log ()","title":"log_lines()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.pause_print","text":"Pauses the current print job if it is currently running, does nothing otherwise. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"pause_print()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.register_callback","text":"Registers a :class: PrinterCallback with the instance. Parameters: Name Type Description Default callback PrinterCallback The callback object to register. required","title":"register_callback()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.resume_print","text":"Resumes the current print job if it is currently paused, does nothing otherwise. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"resume_print()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.script","text":"Sends the GCODE script name to the printer. The script will be run through the template engine, the rendering context can be extended by providing a context with additional template variables to use. If the script is unknown, an :class: UnknownScriptException will be raised. Parameters: Name Type Description Default name str The name of the GCODE script to render. required context dict An optional context of additional template variables to provide to the renderer. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None Raises: Type Description UnknownScriptException There is no GCODE script with name name","title":"script()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.select_file","text":"Selects the specified path for printing, specifying if the file is to be found on the sd or not. Optionally can also directly start the print after selecting the file. Parameters: Name Type Description Default path str The path to select for printing. Either an absolute path or relative path to a local file in the uploads folder or a filename on the printer's SD card. required sd boolean Indicates whether the file is on the printer's SD card or not. required printAfterSelect boolean Indicates whether a print should be started after the file is selected. False tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None Raises: Type Description InvalidFileType if the file is not a machinecode file and hence cannot be printed InvalidFileLocation if an absolute path was provided and not contained within local storage or doesn't exist","title":"select_file()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.send_initial_callback","text":"Sends the initial printer update to :class: PrinterCallback . Parameters: Name Type Description Default callback PrinterCallback The callback object to send initial data to. required","title":"send_initial_callback()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_job_on_hold","text":"Setter for finer control over putting jobs on hold. Set to True to ensure that no commands from the file being printed are continued to be sent to the printer. Set to False to resume. Note that this will only work for local files, NOT SD files. Make absolutely sure that if you set this flag, you will always also unset it again. If you don't, the job will be stuck forever. Example: .. code-block:: python if printer.set_job_on_hold(True): try: park_printhead() take_snapshot() send_printhead_back() finally: printer.set_job_on_hold(False) Just like :func: ~octoprint.printer.PrinterInterface.job_on_hold this should be used sparingly and only for very specific situations. If you abuse this, you WILL cause print quality issues! Parameters: Name Type Description Default value bool The value to set required blocking bool Whether to block while attempting to set the value (default) or not True Returns: Type Description (bool) Whether the value could be set successfully (True) or a timeout was encountered (False)","title":"set_job_on_hold()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_temperature","text":"Sets the target temperature on the specified heater to the given value in celsius. Parameters: Name Type Description Default heater str The heater for which to set the target temperature. Either \"bed\" for setting the bed temperature or something matching the regular expression \"tool[0-9]+\" (e.g. \"tool0\", \"tool1\", ...) for the hotends of the printer required value int , float The temperature in celsius to set the target temperature to. required tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"set_temperature()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.set_temperature_offset","text":"Sets the temperature offsets to apply to target temperatures read from a GCODE file while printing. Parameters: Name Type Description Default offsets dict A dictionary specifying the offsets to apply. Keys must match the format for the heater parameter to :func: set_temperature , so \"bed\" for the offset for the bed target temperature and \"tool[0-9]+\" for the offsets to the hotend target temperatures. None tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"set_temperature_offset()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.start_print","text":"Starts printing the currently selected file. If no file is currently selected, does nothing. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"start_print()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.toggle_pause_print","text":"Pauses the current print job if it is currently running or resumes it if it is currently paused. Parameters: Name Type Description Default tags set of str An optional set of tags to attach to the command(s) throughout their lifecycle None","title":"toggle_pause_print()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.unregister_callback","text":"Unregisters a :class: PrinterCallback from the instance. Parameters: Name Type Description Default callback PrinterCallback The callback object to unregister. required","title":"unregister_callback()"},{"location":"reference/octoprint/printer/#octoprint.printer.PrinterInterface.unselect_file","text":"Unselects and currently selected file.","title":"unselect_file()"},{"location":"reference/octoprint/printer/estimation/","text":"octoprint.printer.estimation # PrintTimeEstimator # Estimator implementation. Subclass this and register via the octoprint.printer.estimation.factory hook to provide your own implementation. estimate ( progress , printTime , cleanedPrintTime , statisticalTotalPrintTime , statisticalTotalPrintTimeType ) # Tries to estimate the print time left for the print job This is somewhat horrible since accurate print time estimation is pretty much impossible to achieve, considering that we basically have only two data points (current progress in file and time needed for that so far - former prints or a file analysis might not have happened or simply be completely impossible e.g. if the file is stored on the printer's SD card) and hence can only do a linear estimation of a completely non-linear process. That's a recipe for inaccurate predictions right there. Yay. Anyhow, here's how this implementation works. This method gets the current progress in the printed file (percentage based on bytes read vs total bytes), the print time that elapsed, the same print time with the heat up times subtracted (if possible) and if available also some statistical total print time (former prints or a result from the GCODE analysis). First get an \"intelligent\" estimate based on the :class: ~octoprint.printer.estimation.TimeEstimationHelper . That thing tries to detect if the estimation based on our progress and time needed for that becomes stable over time through a rolling window and only returns a result once that appears to be the case. If we have any statistical data (former prints or a result from the GCODE analysis) but no intelligent estimate yet, we'll use that for the next step. Otherwise, up to a certain percentage in the print we do a percentage based weighing of the statistical data and the intelligent estimate - the closer to the beginning of the print, the more precedence for the statistical data, the closer to the cut off point, the more precedence for the intelligent estimate. This is our preliminary total print time. If the total print time is set, we do a sanity check for it. Based on the total print time estimate and the time we already spent printing, we calculate at what percentage we SHOULD be and compare that to the percentage at which we actually ARE. If it's too far off, our total can't be trusted and we fall back on the dumb estimate. Same if the time we spent printing is already higher than our total estimate. If we do NOT have a total print time estimate yet but we've been printing for longer than a configured amount of minutes or are further in the file than a configured percentage, we also use the dumb estimate for now. Yes, all this still produces horribly inaccurate results. But we have to do this live during the print and hence can't produce to much computational overhead, we do not have any insight into the firmware implementation with regards to planner setup and acceleration settings, we might not even have access to the printed file's contents and such we need to find something that works \"mostly\" all of the time without costing too many resources. Feel free to propose a better solution within the above limitations (and I mean that, this solution here makes me unhappy). Parameters: Name Type Description Default progress float or None Current percentage in the printed file required printTime float or None Print time elapsed so far required cleanedPrintTime float or None Print time elapsed minus the time needed for getting up to temperature (if detectable). required statisticalTotalPrintTime float or None Total print time of past prints against same printer profile, or estimated total print time from GCODE analysis. required statisticalTotalPrintTimeType str or None Type of statistical print time, either \"average\" (total time of former prints) or \"analysis\" required Returns: Type Description (2-tuple) estimated print time left or None if not proper estimate could be made at all, origin of estimation","title":"estimation"},{"location":"reference/octoprint/printer/estimation/#octoprintprinterestimation","text":"","title":"octoprint.printer.estimation"},{"location":"reference/octoprint/printer/estimation/#octoprint.printer.estimation.PrintTimeEstimator","text":"Estimator implementation. Subclass this and register via the octoprint.printer.estimation.factory hook to provide your own implementation.","title":"PrintTimeEstimator"},{"location":"reference/octoprint/printer/estimation/#octoprint.printer.estimation.PrintTimeEstimator.estimate","text":"Tries to estimate the print time left for the print job This is somewhat horrible since accurate print time estimation is pretty much impossible to achieve, considering that we basically have only two data points (current progress in file and time needed for that so far - former prints or a file analysis might not have happened or simply be completely impossible e.g. if the file is stored on the printer's SD card) and hence can only do a linear estimation of a completely non-linear process. That's a recipe for inaccurate predictions right there. Yay. Anyhow, here's how this implementation works. This method gets the current progress in the printed file (percentage based on bytes read vs total bytes), the print time that elapsed, the same print time with the heat up times subtracted (if possible) and if available also some statistical total print time (former prints or a result from the GCODE analysis). First get an \"intelligent\" estimate based on the :class: ~octoprint.printer.estimation.TimeEstimationHelper . That thing tries to detect if the estimation based on our progress and time needed for that becomes stable over time through a rolling window and only returns a result once that appears to be the case. If we have any statistical data (former prints or a result from the GCODE analysis) but no intelligent estimate yet, we'll use that for the next step. Otherwise, up to a certain percentage in the print we do a percentage based weighing of the statistical data and the intelligent estimate - the closer to the beginning of the print, the more precedence for the statistical data, the closer to the cut off point, the more precedence for the intelligent estimate. This is our preliminary total print time. If the total print time is set, we do a sanity check for it. Based on the total print time estimate and the time we already spent printing, we calculate at what percentage we SHOULD be and compare that to the percentage at which we actually ARE. If it's too far off, our total can't be trusted and we fall back on the dumb estimate. Same if the time we spent printing is already higher than our total estimate. If we do NOT have a total print time estimate yet but we've been printing for longer than a configured amount of minutes or are further in the file than a configured percentage, we also use the dumb estimate for now. Yes, all this still produces horribly inaccurate results. But we have to do this live during the print and hence can't produce to much computational overhead, we do not have any insight into the firmware implementation with regards to planner setup and acceleration settings, we might not even have access to the printed file's contents and such we need to find something that works \"mostly\" all of the time without costing too many resources. Feel free to propose a better solution within the above limitations (and I mean that, this solution here makes me unhappy). Parameters: Name Type Description Default progress float or None Current percentage in the printed file required printTime float or None Print time elapsed so far required cleanedPrintTime float or None Print time elapsed minus the time needed for getting up to temperature (if detectable). required statisticalTotalPrintTime float or None Total print time of past prints against same printer profile, or estimated total print time from GCODE analysis. required statisticalTotalPrintTimeType str or None Type of statistical print time, either \"average\" (total time of former prints) or \"analysis\" required Returns: Type Description (2-tuple) estimated print time left or None if not proper estimate could be made at all, origin of estimation","title":"estimate()"},{"location":"reference/octoprint/printer/profile/","text":"octoprint.printer.profile # This module contains printer profile related code. A printer profile is a dict of the following structure: .. list-table:: :widths: 15 5 30 :header-rows: 1 Name Type Description id string Internal id of the printer profile name string Human readable name of the printer profile model string Printer model color string Color to associate with the printer profile volume dict Information about the print volume volume.width float Width of the print volume (X axis) volume.depth float Depth of the print volume (Y axis) volume.height float Height of the print volume (Z axis) volume.formFactor string Form factor of the print bed, either rectangular or circular volume.origin string Location of gcode origin in the print volume, either lowerleft or center volume.custom_box dict or False Custom boundary box overriding the default bounding box based on the provided width, depth, height and origin. If False , the default boundary box will be used. volume.custom_box.x_min float Minimum valid X coordinate volume.custom_box.y_min float Minimum valid Y coordinate volume.custom_box.z_min float Minimum valid Z coordinate volume.custom_box.x_max float Maximum valid X coordinate volume.custom_box.y_max float Maximum valid Y coordinate volume.custom_box.z_max float Maximum valid Z coordinate heatedBed bool Whether the printer has a heated bed ( True ) or not ( False ) heatedChamber bool Whether the printer has a heated chamber ( True ) or not ( False ) extruder dict Information about the printer's extruders extruder.count int How many extruders the printer has (default 1) extruder.offsets list of tuple Extruder offsets relative to first extruder, list of (x, y) tuples, first is always (0,0) extruder.nozzleDiameter float Diameter of the printer nozzle(s) extruder.sharedNozzle boolean Whether there's only one nozzle shared among all extruders (true) or one nozzle per extruder (false). extruder.defaultExtrusionLength int Default extrusion length used in Control tab on initial page load in mm. axes dict Information about the printer axes axes.x dict Information about the printer's X axis axes.x.speed float Speed of the X axis in mm/min axes.x.inverted bool Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True) axes.y dict Information about the printer's Y axis axes.y.speed float Speed of the Y axis in mm/min axes.y.inverted bool Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True) axes.z dict Information about the printer's Z axis axes.z.speed float Speed of the Z axis in mm/min axes.z.inverted bool Whether a positive value change moves the nozzle away from the print bed (False, default) or towards it (True) axes.e dict Information about the printer's E axis axes.e.speed float Speed of the E axis in mm/min axes.e.inverted bool Whether a positive value change extrudes (False, default) or retracts (True) filament .. autoclass:: PrinterProfileManager :members: .. autoclass:: BedFormFactor :members: .. autoclass:: BedOrigin :members: .. autoclass:: SaveError .. autoclass:: CouldNotOverwriteError .. autoclass:: InvalidProfileError BedTypes = BedFormFactor module-attribute # Deprecated name of :class: BedFormFactors BedFormFactor # Valid values for bed form factor CIRCULAR = 'circular' class-attribute # Circular bed RECTANGULAR = 'rectangular' class-attribute # Rectangular bed BedOrigin # Valid values for bed origin CENTER = 'center' class-attribute # Origin at the center of the bed when looking from top LOWERLEFT = 'lowerleft' class-attribute # Origin at lower left corner of the bed when looking from the top CouldNotOverwriteError # Bases: SaveError Overwriting of a profile not allowed InvalidProfileError # Bases: Exception Profile invalid PrinterProfileManager # Manager for printer profiles. Offers methods to select the globally used printer profile and to list, add, remove, load and save printer profiles. SaveError # Bases: Exception Saving a profile failed","title":"profile"},{"location":"reference/octoprint/printer/profile/#octoprintprinterprofile","text":"This module contains printer profile related code. A printer profile is a dict of the following structure: .. list-table:: :widths: 15 5 30 :header-rows: 1 Name Type Description id string Internal id of the printer profile name string Human readable name of the printer profile model string Printer model color string Color to associate with the printer profile volume dict Information about the print volume volume.width float Width of the print volume (X axis) volume.depth float Depth of the print volume (Y axis) volume.height float Height of the print volume (Z axis) volume.formFactor string Form factor of the print bed, either rectangular or circular volume.origin string Location of gcode origin in the print volume, either lowerleft or center volume.custom_box dict or False Custom boundary box overriding the default bounding box based on the provided width, depth, height and origin. If False , the default boundary box will be used. volume.custom_box.x_min float Minimum valid X coordinate volume.custom_box.y_min float Minimum valid Y coordinate volume.custom_box.z_min float Minimum valid Z coordinate volume.custom_box.x_max float Maximum valid X coordinate volume.custom_box.y_max float Maximum valid Y coordinate volume.custom_box.z_max float Maximum valid Z coordinate heatedBed bool Whether the printer has a heated bed ( True ) or not ( False ) heatedChamber bool Whether the printer has a heated chamber ( True ) or not ( False ) extruder dict Information about the printer's extruders extruder.count int How many extruders the printer has (default 1) extruder.offsets list of tuple Extruder offsets relative to first extruder, list of (x, y) tuples, first is always (0,0) extruder.nozzleDiameter float Diameter of the printer nozzle(s) extruder.sharedNozzle boolean Whether there's only one nozzle shared among all extruders (true) or one nozzle per extruder (false). extruder.defaultExtrusionLength int Default extrusion length used in Control tab on initial page load in mm. axes dict Information about the printer axes axes.x dict Information about the printer's X axis axes.x.speed float Speed of the X axis in mm/min axes.x.inverted bool Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True) axes.y dict Information about the printer's Y axis axes.y.speed float Speed of the Y axis in mm/min axes.y.inverted bool Whether a positive value change moves the nozzle away from the print bed's origin (False, default) or towards it (True) axes.z dict Information about the printer's Z axis axes.z.speed float Speed of the Z axis in mm/min axes.z.inverted bool Whether a positive value change moves the nozzle away from the print bed (False, default) or towards it (True) axes.e dict Information about the printer's E axis axes.e.speed float Speed of the E axis in mm/min axes.e.inverted bool Whether a positive value change extrudes (False, default) or retracts (True) filament .. autoclass:: PrinterProfileManager :members: .. autoclass:: BedFormFactor :members: .. autoclass:: BedOrigin :members: .. autoclass:: SaveError .. autoclass:: CouldNotOverwriteError .. autoclass:: InvalidProfileError","title":"octoprint.printer.profile"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedTypes","text":"Deprecated name of :class: BedFormFactors","title":"BedTypes"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor","text":"Valid values for bed form factor","title":"BedFormFactor"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor.CIRCULAR","text":"Circular bed","title":"CIRCULAR"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedFormFactor.RECTANGULAR","text":"Rectangular bed","title":"RECTANGULAR"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin","text":"Valid values for bed origin","title":"BedOrigin"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin.CENTER","text":"Origin at the center of the bed when looking from top","title":"CENTER"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.BedOrigin.LOWERLEFT","text":"Origin at lower left corner of the bed when looking from the top","title":"LOWERLEFT"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.CouldNotOverwriteError","text":"Bases: SaveError Overwriting of a profile not allowed","title":"CouldNotOverwriteError"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.InvalidProfileError","text":"Bases: Exception Profile invalid","title":"InvalidProfileError"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.PrinterProfileManager","text":"Manager for printer profiles. Offers methods to select the globally used printer profile and to list, add, remove, load and save printer profiles.","title":"PrinterProfileManager"},{"location":"reference/octoprint/printer/profile/#octoprint.printer.profile.SaveError","text":"Bases: Exception Saving a profile failed","title":"SaveError"},{"location":"reference/octoprint/printer/standard/","text":"octoprint.printer.standard # This module holds the standard implementation of the :class: PrinterInterface and it helpers. Printer # Bases: PrinterInterface , comm . MachineComPrintCallback Default implementation of the :class: PrinterInterface . Manages the communication layer object and registers itself with it as a callback to react to changes on the communication layer. cancel_print ( user = None , * args , ** kwargs ) # Cancel the current printjob. commands ( commands , tags = None , force = False , * args , ** kwargs ) # Sends one or more gcode commands to the printer. connect ( port = None , baudrate = None , profile = None , * args , ** kwargs ) # Connects to the printer. If port and/or baudrate is provided, uses these settings, otherwise autodetection will be attempted. disconnect ( * args , ** kwargs ) # Closes the connection to the printer. on_comm_log ( message ) # Callback method for the comm object, called upon log output. on_comm_message ( message ) # Callback method for the comm object, called upon message exchanges via serial. Stores the message in the message buffer, truncates buffer to the last 300 lines. on_comm_progress () # Callback method for the comm object, called upon any change in progress of the printjob. Triggers storage of new values for printTime, printTimeLeft and the current progress. on_comm_state_change ( state ) # Callback method for the comm object, called if the connection state changes. on_comm_z_change ( newZ ) # Callback method for the comm object, called upon change of the z-layer. pause_print ( user = None , * args , ** kwargs ) # Pause the current printjob. refresh_sd_files ( blocking = False , * args , ** kwargs ) # Refreshes the list of file stored on the SD card attached to printer (if available and printer communication available). Optional blocking parameter allows making the method block (max 10s) until the file list has been received (and can be accessed via self._comm.getSdFiles()). Defaults to an asynchronous operation. resume_print ( user = None , * args , ** kwargs ) # Resume the current printjob. start_print ( pos = None , user = None , * args , ** kwargs ) # Starts the currently loaded print job. Only starts if the printer is connected and operational, not currently printing and a printjob is loaded","title":"standard"},{"location":"reference/octoprint/printer/standard/#octoprintprinterstandard","text":"This module holds the standard implementation of the :class: PrinterInterface and it helpers.","title":"octoprint.printer.standard"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer","text":"Bases: PrinterInterface , comm . MachineComPrintCallback Default implementation of the :class: PrinterInterface . Manages the communication layer object and registers itself with it as a callback to react to changes on the communication layer.","title":"Printer"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.cancel_print","text":"Cancel the current printjob.","title":"cancel_print()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.commands","text":"Sends one or more gcode commands to the printer.","title":"commands()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.connect","text":"Connects to the printer. If port and/or baudrate is provided, uses these settings, otherwise autodetection will be attempted.","title":"connect()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.disconnect","text":"Closes the connection to the printer.","title":"disconnect()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_log","text":"Callback method for the comm object, called upon log output.","title":"on_comm_log()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_message","text":"Callback method for the comm object, called upon message exchanges via serial. Stores the message in the message buffer, truncates buffer to the last 300 lines.","title":"on_comm_message()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_progress","text":"Callback method for the comm object, called upon any change in progress of the printjob. Triggers storage of new values for printTime, printTimeLeft and the current progress.","title":"on_comm_progress()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_state_change","text":"Callback method for the comm object, called if the connection state changes.","title":"on_comm_state_change()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.on_comm_z_change","text":"Callback method for the comm object, called upon change of the z-layer.","title":"on_comm_z_change()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.pause_print","text":"Pause the current printjob.","title":"pause_print()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.refresh_sd_files","text":"Refreshes the list of file stored on the SD card attached to printer (if available and printer communication available). Optional blocking parameter allows making the method block (max 10s) until the file list has been received (and can be accessed via self._comm.getSdFiles()). Defaults to an asynchronous operation.","title":"refresh_sd_files()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.resume_print","text":"Resume the current printjob.","title":"resume_print()"},{"location":"reference/octoprint/printer/standard/#octoprint.printer.standard.Printer.start_print","text":"Starts the currently loaded print job. Only starts if the printer is connected and operational, not currently printing and a printjob is loaded","title":"start_print()"},{"location":"reference/octoprint/schema/","text":"octoprint.schema #","title":"octoprint.schema"},{"location":"reference/octoprint/schema/#octoprintschema","text":"","title":"octoprint.schema"},{"location":"reference/octoprint/schema/config/","text":"octoprint.schema.config #","title":"octoprint.schema.config"},{"location":"reference/octoprint/schema/config/#octoprintschemaconfig","text":"","title":"octoprint.schema.config"},{"location":"reference/octoprint/schema/config/access_control/","text":"octoprint.schema.config.access_control # AccessControlConfig # Bases: BaseModel addRemoteUsers : bool = False class-attribute # If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. autologinAs : Optional [ str ] = None class-attribute # The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users. autologinLocal : bool = False class-attribute # If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs . checkBasicAuthenticationPassword : bool = True class-attribute # Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. groupManager : str = 'octoprint.access.groups.FilebasedGroupManager' class-attribute # The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder). groupfile : Optional [ str ] = None class-attribute # The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder. localNetworks : List [ str ] = [ '127.0.0.0/8' , '::1/128' ] class-attribute # A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost. permissionManager : str = 'octoprint.access.permissions.PermissionManager' class-attribute # The permission manager implementation to use. remoteUserHeader : str = 'REMOTE_USER' class-attribute # Header used by the reverse proxy to convey the authenticated user. salt : Optional [ str ] = None class-attribute # Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. trustBasicAuthentication : bool = False class-attribute # Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! trustRemoteUser : bool = False class-attribute # Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! userManager : str = 'octoprint.access.users.FilebasedUserManager' class-attribute # The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder). userfile : Optional [ str ] = None class-attribute # The YAML user file to use. If left out defaults to users.yaml in the default configuration folder.","title":"access_control"},{"location":"reference/octoprint/schema/config/access_control/#octoprintschemaconfigaccess_control","text":"","title":"octoprint.schema.config.access_control"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig","text":"Bases: BaseModel","title":"AccessControlConfig"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.addRemoteUsers","text":"If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint.","title":"addRemoteUsers"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.autologinAs","text":"The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users.","title":"autologinAs"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.autologinLocal","text":"If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs .","title":"autologinLocal"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.checkBasicAuthenticationPassword","text":"Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution.","title":"checkBasicAuthenticationPassword"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.groupManager","text":"The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder).","title":"groupManager"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.groupfile","text":"The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder.","title":"groupfile"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.localNetworks","text":"A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost.","title":"localNetworks"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.permissionManager","text":"The permission manager implementation to use.","title":"permissionManager"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.remoteUserHeader","text":"Header used by the reverse proxy to convey the authenticated user.","title":"remoteUserHeader"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.salt","text":"Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run.","title":"salt"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.trustBasicAuthentication","text":"Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication!","title":"trustBasicAuthentication"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.trustRemoteUser","text":"Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy!","title":"trustRemoteUser"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.userManager","text":"The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder).","title":"userManager"},{"location":"reference/octoprint/schema/config/access_control/#octoprint.schema.config.access_control.AccessControlConfig.userfile","text":"The YAML user file to use. If left out defaults to users.yaml in the default configuration folder.","title":"userfile"},{"location":"reference/octoprint/schema/config/api/","text":"octoprint.schema.config.api # ApiConfig # Bases: BaseModel allowCrossOrigin : bool = False class-attribute # Whether to allow cross origin access to the API or not. key : Optional [ str ] = None class-attribute # Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run.","title":"api"},{"location":"reference/octoprint/schema/config/api/#octoprintschemaconfigapi","text":"","title":"octoprint.schema.config.api"},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig","text":"Bases: BaseModel","title":"ApiConfig"},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig.allowCrossOrigin","text":"Whether to allow cross origin access to the API or not.","title":"allowCrossOrigin"},{"location":"reference/octoprint/schema/config/api/#octoprint.schema.config.api.ApiConfig.key","text":"Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run.","title":"key"},{"location":"reference/octoprint/schema/config/appearance/","text":"octoprint.schema.config.appearance # AppearanceConfig # Bases: BaseModel color : Literal [ 'red' , 'orange' , 'green' , 'blue' , 'yellow' , 'violet' , 'default' ] = 'default' class-attribute # Use this to color the navigation bar. colorTransparent : bool = False class-attribute # Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. components : ComponentConfig = ComponentConfig () class-attribute # Configures the order and availability of the UI components. defaultLanguage : str = '_default' class-attribute # Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. name : str = '' class-attribute # Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\") showInternalFilename : bool = True class-attribute # Show the internal filename in the files sidebar, if necessary. ComponentConfig # Bases: BaseModel disabled : ComponentDisabledConfig = ComponentDisabledConfig () class-attribute # Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. order : ComponentOrderConfig = ComponentOrderConfig () class-attribute # Defines the order of the components within their respective containers. ComponentDisabledConfig # Bases: BaseModel about : List [ str ] = [] class-attribute # Disabled about dialog items. generic : List [ str ] = [] class-attribute # Disabled generic items. navbar : List [ str ] = [] class-attribute # Disabled navbar items. settings : List [ str ] = [] class-attribute # Disabled settings. sidebar : List [ str ] = [] class-attribute # Disabled sidebar items. tab : List [ str ] = [] class-attribute # Disabled tabs. usersettings : List [ str ] = [] class-attribute # Disabled user settings. wizard : List [ str ] = [] class-attribute # Disabled wizards. ComponentOrderConfig # Bases: BaseModel about : List [ str ] = [ 'about' , 'plugin_pi_support' , 'supporters' , 'authors' , 'changelog' , 'license' , 'thirdparty' , 'plugin_pluginmanager' ] class-attribute # Order of about dialog items. generic : List [ str ] = [] class-attribute # Order of generic items. navbar : List [ str ] = [ 'settings' , 'systemmenu' , 'plugin_announcements' , 'plugin_logging_seriallog' , 'plugin_logging_plugintimingslog' , 'plugin_pi_support' , 'login' ] class-attribute # Order of navbar items. settings : List [ str ] = [ 'section_printer' , 'serial' , 'printerprofiles' , 'temperatures' , 'terminalfilters' , 'gcodescripts' , 'section_features' , 'features' , 'webcam' , 'accesscontrol' , 'plugin_gcodeviewer' , 'api' , 'plugin_appkeys' , 'section_octoprint' , 'server' , 'folders' , 'appearance' , 'plugin_logging' , 'plugin_pluginmanager' , 'plugin_softwareupdate' , 'plugin_announcements' , 'plugin_eventmanager' , 'plugin_backup' , 'plugin_tracking' , 'plugin_errortracking' , 'plugin_pi_support' ] class-attribute # Order of settings. sidebar : List [ str ] = [ 'plugin_firmware_check_warning' , 'plugin_firmware_check_info' , 'connection' , 'state' , 'files' ] class-attribute # Order of sidebar items. tab : List [ str ] = [ 'temperature' , 'control' , 'plugin_gcodeviewer' , 'terminal' , 'timelapse' ] class-attribute # Order of tabs. usersettings : List [ str ] = [ 'access' , 'interface' ] class-attribute # Order of user settings. wizard : List [ str ] = [ 'plugin_softwareupdate_update' , 'plugin_backup' , 'plugin_corewizard_acl' , 'plugin_corewizard_onlinecheck' ] class-attribute # Order of wizards.","title":"appearance"},{"location":"reference/octoprint/schema/config/appearance/#octoprintschemaconfigappearance","text":"","title":"octoprint.schema.config.appearance"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig","text":"Bases: BaseModel","title":"AppearanceConfig"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.color","text":"Use this to color the navigation bar.","title":"color"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.colorTransparent","text":"Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09.","title":"colorTransparent"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.components","text":"Configures the order and availability of the UI components.","title":"components"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.defaultLanguage","text":"Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings.","title":"defaultLanguage"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.name","text":"Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\")","title":"name"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.AppearanceConfig.showInternalFilename","text":"Show the internal filename in the files sidebar, if necessary.","title":"showInternalFilename"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig","text":"Bases: BaseModel","title":"ComponentConfig"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig.disabled","text":"Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered.","title":"disabled"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentConfig.order","text":"Defines the order of the components within their respective containers.","title":"order"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig","text":"Bases: BaseModel","title":"ComponentDisabledConfig"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.about","text":"Disabled about dialog items.","title":"about"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.generic","text":"Disabled generic items.","title":"generic"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.navbar","text":"Disabled navbar items.","title":"navbar"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.settings","text":"Disabled settings.","title":"settings"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.sidebar","text":"Disabled sidebar items.","title":"sidebar"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.tab","text":"Disabled tabs.","title":"tab"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.usersettings","text":"Disabled user settings.","title":"usersettings"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentDisabledConfig.wizard","text":"Disabled wizards.","title":"wizard"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig","text":"Bases: BaseModel","title":"ComponentOrderConfig"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.about","text":"Order of about dialog items.","title":"about"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.generic","text":"Order of generic items.","title":"generic"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.navbar","text":"Order of navbar items.","title":"navbar"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.settings","text":"Order of settings.","title":"settings"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.sidebar","text":"Order of sidebar items.","title":"sidebar"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.tab","text":"Order of tabs.","title":"tab"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.usersettings","text":"Order of user settings.","title":"usersettings"},{"location":"reference/octoprint/schema/config/appearance/#octoprint.schema.config.appearance.ComponentOrderConfig.wizard","text":"Order of wizards.","title":"wizard"},{"location":"reference/octoprint/schema/config/controls/","text":"octoprint.schema.config.controls # ContainerConfig # Bases: BaseModel children : 'List[Union[ContainerConfig, ControlConfig]]' = [] class-attribute # A list of children controls or containers contained within this container. layout : Literal [ 'horizontal' , 'vertical' ] = 'vertical' class-attribute # The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ). name : Optional [ str ] = None class-attribute # A name to display above the container, basically a section header. ControlConfig # Bases: BaseModel additionalClasses : Optional [ str ] = None class-attribute # Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red. command : Optional [ str ] = None class-attribute # A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. commands : Optional [ List [ str ]] = None class-attribute # A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. confirm : Optional [ str ] = None class-attribute # A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. enabled : Optional [ str ] = None class-attribute # A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . input : Optional [ List [ ControlInputConfig ]] = [] class-attribute # A list of definitions of input parameters for a command or commands , to be rendered as additional input fields. command / commands may contain placeholders to be replaced by the values obtained from the user for the defined input fields. javascript : Optional [ str ] = None class-attribute # A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . name : str class-attribute # The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. regex : Optional [ str ] = None class-attribute # A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI. script : Optional [ str ] = None class-attribute # The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available. template : Optional [ str ] = None class-attribute # A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ). ControlInputConfig # Bases: BaseModel default : Union [ str , int , float , bool ] class-attribute # Default value for the input field. name : str class-attribute # Name to display for the input field. parameter : str class-attribute # Internal parameter name for the input field, used as a placeholder in command / commands . slider : Optional [ ControlSliderInputConfig ] = None class-attribute # If this attribute is included, instead of an input field a slider control will be rendered. ControlSliderInputConfig # Bases: BaseModel max : int = 255 class-attribute # Maximum value of the slider. min : int = 0 class-attribute # Minimum value of the slider. step : int = 1 class-attribute # Step size per slider tick.","title":"controls"},{"location":"reference/octoprint/schema/config/controls/#octoprintschemaconfigcontrols","text":"","title":"octoprint.schema.config.controls"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig","text":"Bases: BaseModel","title":"ContainerConfig"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.children","text":"A list of children controls or containers contained within this container.","title":"children"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.layout","text":"The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ).","title":"layout"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ContainerConfig.name","text":"A name to display above the container, basically a section header.","title":"name"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig","text":"Bases: BaseModel","title":"ControlConfig"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.additionalClasses","text":"Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red.","title":"additionalClasses"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.command","text":"A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met.","title":"command"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.commands","text":"A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met.","title":"commands"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.confirm","text":"A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog.","title":"confirm"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.enabled","text":"A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self .","title":"enabled"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.input","text":"A list of definitions of input parameters for a command or commands , to be rendered as additional input fields. command / commands may contain placeholders to be replaced by the values obtained from the user for the defined input fields.","title":"input"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.javascript","text":"A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self .","title":"javascript"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.name","text":"The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output.","title":"name"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.regex","text":"A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI.","title":"regex"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.script","text":"The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available.","title":"script"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlConfig.template","text":"A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ).","title":"template"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig","text":"Bases: BaseModel","title":"ControlInputConfig"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.default","text":"Default value for the input field.","title":"default"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.name","text":"Name to display for the input field.","title":"name"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.parameter","text":"Internal parameter name for the input field, used as a placeholder in command / commands .","title":"parameter"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlInputConfig.slider","text":"If this attribute is included, instead of an input field a slider control will be rendered.","title":"slider"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig","text":"Bases: BaseModel","title":"ControlSliderInputConfig"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.max","text":"Maximum value of the slider.","title":"max"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.min","text":"Minimum value of the slider.","title":"min"},{"location":"reference/octoprint/schema/config/controls/#octoprint.schema.config.controls.ControlSliderInputConfig.step","text":"Step size per slider tick.","title":"step"},{"location":"reference/octoprint/schema/config/devel/","text":"octoprint.schema.config.devel # DevelCacheConfig # Bases: BaseModel enabled : bool = True class-attribute # Whether to enable caching. Defaults to true. Setting it to false will cause the UI to always be fully rerendered on request to / on the server. preemptive : bool = True class-attribute # Whether to enable the preemptive cache. DevelConfig # Bases: BaseModel cache : DevelCacheConfig = DevelCacheConfig () class-attribute # Settings for OctoPrint's internal caching. enableCsrfProtection : bool = True class-attribute # Enable or disable the CSRF protection. Careful, disabling this reduces security. enableRateLimiter : bool = True class-attribute # Enable or disable the rate limiter. Careful, disabling this reduces security. showLoadingAnimation : bool = True class-attribute # Enable or disable the loading animation. stylesheet : Literal [ 'css' , 'less' ] = 'less' class-attribute # Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. webassets : DevelWebassetsConfig = DevelWebassetsConfig () class-attribute # Settings for OctoPrint's web asset merging and minifying. DevelWebassetsConfig # Bases: BaseModel bundle : bool = True class-attribute # If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting. clean_on_startup : bool = True class-attribute # Whether to delete generated web assets on server startup (forcing a regeneration). minify : bool = True class-attribute # If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either. minify_plugins : bool = False class-attribute # If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either.","title":"devel"},{"location":"reference/octoprint/schema/config/devel/#octoprintschemaconfigdevel","text":"","title":"octoprint.schema.config.devel"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig","text":"Bases: BaseModel","title":"DevelCacheConfig"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig.enabled","text":"Whether to enable caching. Defaults to true. Setting it to false will cause the UI to always be fully rerendered on request to / on the server.","title":"enabled"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelCacheConfig.preemptive","text":"Whether to enable the preemptive cache.","title":"preemptive"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig","text":"Bases: BaseModel","title":"DevelConfig"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.cache","text":"Settings for OctoPrint's internal caching.","title":"cache"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.enableCsrfProtection","text":"Enable or disable the CSRF protection. Careful, disabling this reduces security.","title":"enableCsrfProtection"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.enableRateLimiter","text":"Enable or disable the rate limiter. Careful, disabling this reduces security.","title":"enableRateLimiter"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.showLoadingAnimation","text":"Enable or disable the loading animation.","title":"showLoadingAnimation"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.stylesheet","text":"Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too.","title":"stylesheet"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelConfig.webassets","text":"Settings for OctoPrint's web asset merging and minifying.","title":"webassets"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig","text":"Bases: BaseModel","title":"DevelWebassetsConfig"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.bundle","text":"If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting.","title":"bundle"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.clean_on_startup","text":"Whether to delete generated web assets on server startup (forcing a regeneration).","title":"clean_on_startup"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.minify","text":"If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either.","title":"minify"},{"location":"reference/octoprint/schema/config/devel/#octoprint.schema.config.devel.DevelWebassetsConfig.minify_plugins","text":"If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either.","title":"minify_plugins"},{"location":"reference/octoprint/schema/config/estimation/","text":"octoprint.schema.config.estimation # EstimationConfig # Bases: BaseModel printTime : PrintTimeEstimationConfig = PrintTimeEstimationConfig () class-attribute # Parameters for the print time estimation during an ongoing print job. PrintTimeEstimationConfig # Bases: BaseModel forceDumbAfterMin : float = 30.0 class-attribute # If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. forceDumbFromPercent : float = 0.3 class-attribute # If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. stableThreshold : int = 60 class-attribute # Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. statsWeighingUntil : float = 0.5 class-attribute # Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. validityRange : float = 0.15 class-attribute # Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used.","title":"estimation"},{"location":"reference/octoprint/schema/config/estimation/#octoprintschemaconfigestimation","text":"","title":"octoprint.schema.config.estimation"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.EstimationConfig","text":"Bases: BaseModel","title":"EstimationConfig"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.EstimationConfig.printTime","text":"Parameters for the print time estimation during an ongoing print job.","title":"printTime"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig","text":"Bases: BaseModel","title":"PrintTimeEstimationConfig"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.forceDumbAfterMin","text":"If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate.","title":"forceDumbAfterMin"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.forceDumbFromPercent","text":"If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0.","title":"forceDumbFromPercent"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.stableThreshold","text":"Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference.","title":"stableThreshold"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.statsWeighingUntil","text":"Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides.","title":"statsWeighingUntil"},{"location":"reference/octoprint/schema/config/estimation/#octoprint.schema.config.estimation.PrintTimeEstimationConfig.validityRange","text":"Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used.","title":"validityRange"},{"location":"reference/octoprint/schema/config/events/","text":"octoprint.schema.config.events # EventSubscription # Bases: BaseModel command : str class-attribute # The command to execute when the event is triggered, either a GCODE or a system command. debug : bool = False class-attribute # If set to true , OctoPrint will log the command after performing all placeholder replacements. enabled : bool = True class-attribute # Whether the event subscription should be enabled. event : str class-attribute # The event to subscribe to. type : Literal [ 'system' , 'gcode' ] class-attribute # The type of the command. EventsConfig # Bases: BaseModel enabled : bool = True class-attribute # Whether event subscriptions should be enabled or not. subscriptions : List [ EventSubscription ] = [] class-attribute # A list of event subscriptions.","title":"events"},{"location":"reference/octoprint/schema/config/events/#octoprintschemaconfigevents","text":"","title":"octoprint.schema.config.events"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription","text":"Bases: BaseModel","title":"EventSubscription"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.command","text":"The command to execute when the event is triggered, either a GCODE or a system command.","title":"command"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.debug","text":"If set to true , OctoPrint will log the command after performing all placeholder replacements.","title":"debug"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.enabled","text":"Whether the event subscription should be enabled.","title":"enabled"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.event","text":"The event to subscribe to.","title":"event"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventSubscription.type","text":"The type of the command.","title":"type"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig","text":"Bases: BaseModel","title":"EventsConfig"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig.enabled","text":"Whether event subscriptions should be enabled or not.","title":"enabled"},{"location":"reference/octoprint/schema/config/events/#octoprint.schema.config.events.EventsConfig.subscriptions","text":"A list of event subscriptions.","title":"subscriptions"},{"location":"reference/octoprint/schema/config/feature/","text":"octoprint.schema.config.feature # FeatureConfig # Bases: BaseModel autoUppercaseBlacklist : List [ str ] = [ 'M117' , 'M118' ] class-attribute # Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. enforceReallyUniversalFilenames : bool = False class-attribute # Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. g90InfluencesExtruder : bool = False class-attribute # Whether G90 / G91 also influence absolute/relative mode of extruders. keyboardControl : bool = True class-attribute # Whether to enable the keyboard control feature in the control tab. modelSizeDetection : bool = True class-attribute # Whether to enable model size detection and warning (true) or not (false). pollWatched : bool = False class-attribute # Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). printCancelConfirmation : bool = True class-attribute # Whether to show a confirmation on print cancelling (true) or not (false) printStartConfirmation : bool = False class-attribute # Whether to show a confirmation on print start (true) or not (false) rememberFileFolder : bool = False class-attribute # Whether to remember the selected folder on the file manager. sdSupport : bool = True class-attribute # Specifies whether support for SD printing and file management should be enabled. temperatureGraph : bool = True class-attribute # Whether to enable the temperature graph in the UI or not.","title":"feature"},{"location":"reference/octoprint/schema/config/feature/#octoprintschemaconfigfeature","text":"","title":"octoprint.schema.config.feature"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig","text":"Bases: BaseModel","title":"FeatureConfig"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.autoUppercaseBlacklist","text":"Commands that should never be auto-uppercased when sent to the printer through the Terminal tab.","title":"autoUppercaseBlacklist"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.enforceReallyUniversalFilenames","text":"Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true.","title":"enforceReallyUniversalFilenames"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.g90InfluencesExtruder","text":"Whether G90 / G91 also influence absolute/relative mode of extruders.","title":"g90InfluencesExtruder"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.keyboardControl","text":"Whether to enable the keyboard control feature in the control tab.","title":"keyboardControl"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.modelSizeDetection","text":"Whether to enable model size detection and warning (true) or not (false).","title":"modelSizeDetection"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.pollWatched","text":"Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false).","title":"pollWatched"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.printCancelConfirmation","text":"Whether to show a confirmation on print cancelling (true) or not (false)","title":"printCancelConfirmation"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.printStartConfirmation","text":"Whether to show a confirmation on print start (true) or not (false)","title":"printStartConfirmation"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.rememberFileFolder","text":"Whether to remember the selected folder on the file manager.","title":"rememberFileFolder"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.sdSupport","text":"Specifies whether support for SD printing and file management should be enabled.","title":"sdSupport"},{"location":"reference/octoprint/schema/config/feature/#octoprint.schema.config.feature.FeatureConfig.temperatureGraph","text":"Whether to enable the temperature graph in the UI or not.","title":"temperatureGraph"},{"location":"reference/octoprint/schema/config/folder/","text":"octoprint.schema.config.folder # FolderConfig # Bases: BaseModel data : Optional [ str ] = None class-attribute # Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder. generated : Optional [ str ] = None class-attribute # Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder. logs : Optional [ str ] = None class-attribute # Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder. plugins : Optional [ str ] = None class-attribute # Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder. printerProfiles : Optional [ str ] = None class-attribute # Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder. scripts : Optional [ str ] = None class-attribute # Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder. slicingProfiles : Optional [ str ] = None class-attribute # Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder. timelapse : Optional [ str ] = None class-attribute # Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder. timelapse_tmp : Optional [ str ] = None class-attribute # Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder. translations : Optional [ str ] = None class-attribute # Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder. uploads : Optional [ str ] = None class-attribute # Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder. virtualSd : Optional [ str ] = None class-attribute # Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder. watched : Optional [ str ] = None class-attribute # Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder.","title":"folder"},{"location":"reference/octoprint/schema/config/folder/#octoprintschemaconfigfolder","text":"","title":"octoprint.schema.config.folder"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig","text":"Bases: BaseModel","title":"FolderConfig"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.data","text":"Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder.","title":"data"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.generated","text":"Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder.","title":"generated"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.logs","text":"Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder.","title":"logs"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.plugins","text":"Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder.","title":"plugins"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.printerProfiles","text":"Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder.","title":"printerProfiles"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.scripts","text":"Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder.","title":"scripts"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.slicingProfiles","text":"Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder.","title":"slicingProfiles"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.timelapse","text":"Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder.","title":"timelapse"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.timelapse_tmp","text":"Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder.","title":"timelapse_tmp"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.translations","text":"Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder.","title":"translations"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.uploads","text":"Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder.","title":"uploads"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.virtualSd","text":"Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder.","title":"virtualSd"},{"location":"reference/octoprint/schema/config/folder/#octoprint.schema.config.folder.FolderConfig.watched","text":"Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder.","title":"watched"},{"location":"reference/octoprint/schema/config/gcode_analysis/","text":"octoprint.schema.config.gcode_analysis # GcodeAnalysisConfig # Bases: BaseModel bedZ : float = 0.0 class-attribute # Z position considered the location of the bed. maxExtruders : int = 10 class-attribute # Maximum number of extruders to support/to sanity check for. runAt : Literal [ 'never' , 'idle' , 'always' ] = 'idle' class-attribute # Whether to run the analysis only when idle (not printing), regardless of printing state or never. throttle_highprio : float = 0.0 class-attribute # Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. throttle_lines : int = 100 class-attribute # GCODE line batch size. throttle_normalprio : float = 0.01 class-attribute # Pause between each processed GCODE line batch in normal priority mode, seconds.","title":"gcode_analysis"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprintschemaconfiggcode_analysis","text":"","title":"octoprint.schema.config.gcode_analysis"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig","text":"Bases: BaseModel","title":"GcodeAnalysisConfig"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.bedZ","text":"Z position considered the location of the bed.","title":"bedZ"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.maxExtruders","text":"Maximum number of extruders to support/to sanity check for.","title":"maxExtruders"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.runAt","text":"Whether to run the analysis only when idle (not printing), regardless of printing state or never.","title":"runAt"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_highprio","text":"Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds.","title":"throttle_highprio"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_lines","text":"GCODE line batch size.","title":"throttle_lines"},{"location":"reference/octoprint/schema/config/gcode_analysis/#octoprint.schema.config.gcode_analysis.GcodeAnalysisConfig.throttle_normalprio","text":"Pause between each processed GCODE line batch in normal priority mode, seconds.","title":"throttle_normalprio"},{"location":"reference/octoprint/schema/config/plugins/","text":"octoprint.schema.config.plugins # PluginsConfig # Bases: BaseModel disabled : List [ str ] = Field ([], alias = '_disabled' ) class-attribute # Identifiers of installed but disabled plugins. forced_compatible : List [ str ] = Field ([], alias = '_forcedCompatible' ) class-attribute # Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. sorting_order : Dict [ str , Dict [ str , int ]] = Field ({}, alias = '_sortingOrder' ) class-attribute # Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name.","title":"plugins"},{"location":"reference/octoprint/schema/config/plugins/#octoprintschemaconfigplugins","text":"","title":"octoprint.schema.config.plugins"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig","text":"Bases: BaseModel","title":"PluginsConfig"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.disabled","text":"Identifiers of installed but disabled plugins.","title":"disabled"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.forced_compatible","text":"Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production.","title":"forced_compatible"},{"location":"reference/octoprint/schema/config/plugins/#octoprint.schema.config.plugins.PluginsConfig.sorting_order","text":"Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name.","title":"sorting_order"},{"location":"reference/octoprint/schema/config/printer_parameters/","text":"octoprint.schema.config.printer_parameters #","title":"printer_parameters"},{"location":"reference/octoprint/schema/config/printer_parameters/#octoprintschemaconfigprinter_parameters","text":"","title":"octoprint.schema.config.printer_parameters"},{"location":"reference/octoprint/schema/config/printer_profiles/","text":"octoprint.schema.config.printer_profiles # PrinterProfilesConfig # Bases: BaseModel default : Optional [ str ] = None class-attribute # Name of the printer profile to default to.","title":"printer_profiles"},{"location":"reference/octoprint/schema/config/printer_profiles/#octoprintschemaconfigprinter_profiles","text":"","title":"octoprint.schema.config.printer_profiles"},{"location":"reference/octoprint/schema/config/printer_profiles/#octoprint.schema.config.printer_profiles.PrinterProfilesConfig","text":"Bases: BaseModel","title":"PrinterProfilesConfig"},{"location":"reference/octoprint/schema/config/printer_profiles/#octoprint.schema.config.printer_profiles.PrinterProfilesConfig.default","text":"Name of the printer profile to default to.","title":"default"},{"location":"reference/octoprint/schema/config/scripts/","text":"octoprint.schema.config.scripts #","title":"scripts"},{"location":"reference/octoprint/schema/config/scripts/#octoprintschemaconfigscripts","text":"","title":"octoprint.schema.config.scripts"},{"location":"reference/octoprint/schema/config/serial/","text":"octoprint.schema.config.serial # SerialCapabilities # Bases: BaseModel autoreport_temp : bool = True class-attribute # Whether to enable temperature autoreport in the firmware if its support is detected busy_protocol : bool = True class-attribute # Whether to shorten the communication timeout if the firmware seems to support the busy protocol SerialConfig # Bases: BaseModel additionalBaudrates : List [ int ] = [] class-attribute # Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer additionalPorts : List [ str ] = [] class-attribute # Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern alwaysSendChecksum : bool = False class-attribute # Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. autoconnect : bool = False class-attribute # Whether to try to automatically connect to the printer on startup or not baudrate : Optional [ int ] = None class-attribute # The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. blockWhileDwelling : bool = False class-attribute # Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). blockedCommands : List [ str ] = [ 'M0' , 'M1' ] class-attribute # Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. checksumRequiringCommands : List [ str ] = [ 'M110' ] class-attribute # Commands which need to always be send with a checksum. disconnectOnErrors : bool = True class-attribute # Whether to disconnect from the printer on errors or not. enableShutdownActionCommand : bool = False class-attribute # Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. encoding : str = 'ascii' class-attribute # Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings . exclusive : bool = True class-attribute # Whether to request the serial port exclusively or not externalHeatupDetection : bool = True class-attribute # Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. firmwareDetection : bool = True class-attribute # Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). helloCommand : str = 'M110 N0' class-attribute # Command to send in order to initiate a handshake with the printer. identicalResendsCountdown : int = 7 class-attribute # If ignoreIdenticalResends is true, how many consecutive identical resends to ignore. ignoreErrorsFromFirmware : bool = False class-attribute # Whether to completely ignore errors from the firmware or not. ignoreIdenticalResends : bool = False class-attribute # Whether to ignore identical resends from the printer (true, repetier) or not (false). ignoredCommands : List [ str ] = [] class-attribute # Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. log : bool = False class-attribute # Whether to log whole communication to serial.log (warning: might decrease performance) logResends : bool = True class-attribute # Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. longRunningCommands : List [ str ] = [ 'G4' , 'G28' , 'G29' , 'G30' , 'G32' , 'M400' , 'M226' , 'M600' ] class-attribute # Commands which are known to take a long time to be acknowledged by the firmware, e.g. homing, dwelling, auto leveling etc. lowLatency : bool = False class-attribute # Whether to request low latency mode on the serial port or not maxWritePasses : int = 5 class-attribute # Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error pausingCommands : List [ str ] = [ 'M0' , 'M1' , 'M25' ] class-attribute # Commands which should cause OctoPrint to pause any ongoing prints. port : Optional [ str ] = None class-attribute # The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected. repetierTargetTemp : bool = False class-attribute # Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses. resendRatioThreshold : int = 10 class-attribute # Percentage of resend requests among all sent lines that should be considered critical. sdAlwaysAvailable : bool = False class-attribute # Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. sdRelativePath : bool = False class-attribute # Specifies whether firmware expects relative paths for selecting SD files. sendChecksumWithUnknownCommands : bool = False class-attribute # Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). supportFAsCommand : bool = False class-attribute # Whether to support F on its own as a valid GCODE command (true) or not (false). supportResendsWithoutOk : Literal [ 'always' , 'detect' , 'never' ] = 'detect' class-attribute # Whether to support resends without follow-up ok or not. timeout : SerialTimeoutConfig = SerialTimeoutConfig () class-attribute # Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems triggerOkForM29 : bool = True class-attribute # Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok). unknownCommandsNeedAck : bool = False class-attribute # Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). waitForStartOnConnect : bool = False class-attribute # Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect. waitToLoadSdFileList : bool = False class-attribute # Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed. SerialMaxTimeouts # Bases: BaseModel idle : int = 2 class-attribute # Max. timeouts when the printer is idle long : int = 5 class-attribute # Max. timeouts when a long running command is active printing : int = 5 class-attribute # Max. timeouts when the printer is printing SerialTimeoutConfig # Bases: BaseModel communication : float = 30.0 class-attribute # Timeout during serial communication, in seconds communicationBusy : float = 3.0 class-attribute # Timeout during serial communication when busy protocol support is detected, in seconds connection : float = 10.0 class-attribute # Timeout for waiting to establish a connection with the selected port, in seconds sdStatus : float = 1.0 class-attribute # Timeout after which to query the SD status while SD printing temperature : float = 5.0 class-attribute # Timeout after which to query temperature when no target is set temperatureTargetSet : float = 2.0 class-attribute # Timeout after which to query temperature when a target is set","title":"serial"},{"location":"reference/octoprint/schema/config/serial/#octoprintschemaconfigserial","text":"","title":"octoprint.schema.config.serial"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities","text":"Bases: BaseModel","title":"SerialCapabilities"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.autoreport_temp","text":"Whether to enable temperature autoreport in the firmware if its support is detected","title":"autoreport_temp"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialCapabilities.busy_protocol","text":"Whether to shorten the communication timeout if the firmware seems to support the busy protocol","title":"busy_protocol"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig","text":"Bases: BaseModel","title":"SerialConfig"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.additionalBaudrates","text":"Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer","title":"additionalBaudrates"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.additionalPorts","text":"Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern","title":"additionalPorts"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.alwaysSendChecksum","text":"Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware.","title":"alwaysSendChecksum"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.autoconnect","text":"Whether to try to automatically connect to the printer on startup or not","title":"autoconnect"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.baudrate","text":"The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected.","title":"baudrate"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.blockWhileDwelling","text":"Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false).","title":"blockWhileDwelling"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.blockedCommands","text":"Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1.","title":"blockedCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.checksumRequiringCommands","text":"Commands which need to always be send with a checksum.","title":"checksumRequiringCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.disconnectOnErrors","text":"Whether to disconnect from the printer on errors or not.","title":"disconnectOnErrors"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.enableShutdownActionCommand","text":"Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on.","title":"enableShutdownActionCommand"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.encoding","text":"Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings .","title":"encoding"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.exclusive","text":"Whether to request the serial port exclusively or not","title":"exclusive"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.externalHeatupDetection","text":"Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware.","title":"externalHeatupDetection"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.firmwareDetection","text":"Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false).","title":"firmwareDetection"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.helloCommand","text":"Command to send in order to initiate a handshake with the printer.","title":"helloCommand"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.identicalResendsCountdown","text":"If ignoreIdenticalResends is true, how many consecutive identical resends to ignore.","title":"identicalResendsCountdown"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoreErrorsFromFirmware","text":"Whether to completely ignore errors from the firmware or not.","title":"ignoreErrorsFromFirmware"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoreIdenticalResends","text":"Whether to ignore identical resends from the printer (true, repetier) or not (false).","title":"ignoreIdenticalResends"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.ignoredCommands","text":"Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command.","title":"ignoredCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.log","text":"Whether to log whole communication to serial.log (warning: might decrease performance)","title":"log"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.logResends","text":"Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please.","title":"logResends"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.longRunningCommands","text":"Commands which are known to take a long time to be acknowledged by the firmware, e.g. homing, dwelling, auto leveling etc.","title":"longRunningCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.lowLatency","text":"Whether to request low latency mode on the serial port or not","title":"lowLatency"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.maxWritePasses","text":"Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error","title":"maxWritePasses"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.pausingCommands","text":"Commands which should cause OctoPrint to pause any ongoing prints.","title":"pausingCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.port","text":"The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected.","title":"port"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.repetierTargetTemp","text":"Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses.","title":"repetierTargetTemp"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.resendRatioThreshold","text":"Percentage of resend requests among all sent lines that should be considered critical.","title":"resendRatioThreshold"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sdAlwaysAvailable","text":"Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly.","title":"sdAlwaysAvailable"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sdRelativePath","text":"Specifies whether firmware expects relative paths for selecting SD files.","title":"sdRelativePath"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.sendChecksumWithUnknownCommands","text":"Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ).","title":"sendChecksumWithUnknownCommands"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.supportFAsCommand","text":"Whether to support F on its own as a valid GCODE command (true) or not (false).","title":"supportFAsCommand"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.supportResendsWithoutOk","text":"Whether to support resends without follow-up ok or not.","title":"supportResendsWithoutOk"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.timeout","text":"Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems","title":"timeout"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.triggerOkForM29","text":"Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok).","title":"triggerOkForM29"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.unknownCommandsNeedAck","text":"Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ).","title":"unknownCommandsNeedAck"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.waitForStartOnConnect","text":"Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect.","title":"waitForStartOnConnect"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialConfig.waitToLoadSdFileList","text":"Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed.","title":"waitToLoadSdFileList"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts","text":"Bases: BaseModel","title":"SerialMaxTimeouts"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.idle","text":"Max. timeouts when the printer is idle","title":"idle"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.long","text":"Max. timeouts when a long running command is active","title":"long"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialMaxTimeouts.printing","text":"Max. timeouts when the printer is printing","title":"printing"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig","text":"Bases: BaseModel","title":"SerialTimeoutConfig"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.communication","text":"Timeout during serial communication, in seconds","title":"communication"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.communicationBusy","text":"Timeout during serial communication when busy protocol support is detected, in seconds","title":"communicationBusy"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.connection","text":"Timeout for waiting to establish a connection with the selected port, in seconds","title":"connection"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.sdStatus","text":"Timeout after which to query the SD status while SD printing","title":"sdStatus"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.temperature","text":"Timeout after which to query temperature when no target is set","title":"temperature"},{"location":"reference/octoprint/schema/config/serial/#octoprint.schema.config.serial.SerialTimeoutConfig.temperatureTargetSet","text":"Timeout after which to query temperature when a target is set","title":"temperatureTargetSet"},{"location":"reference/octoprint/schema/config/server/","text":"octoprint.schema.config.server # CommandsConfig # Bases: BaseModel localPipCommand : Optional [ str ] = None class-attribute # pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. serverRestartCommand : Optional [ str ] = None class-attribute # Command to restart OctoPrint. systemRestartCommand : Optional [ str ] = None class-attribute # Command to restart the system OctoPrint is running on. systemShutdownCommand : Optional [ str ] = None class-attribute # Command to shut down the system OctoPrint is running on. CookiesConfig # Bases: BaseModel samesite : Optional [ Literal [ 'Strict' , 'Lax' , 'None' ]] = 'Lax' class-attribute # SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to Lax . Be advised that if forced unset, this has security implications as many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 . secure : bool = False class-attribute # Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. DiskspaceConfig # Bases: BaseModel critical : int = CONST_200MB class-attribute # Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. warning : int = CONST_500MB class-attribute # Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. IpCheckConfig # Bases: BaseModel enabled : bool = True class-attribute # Whether to enable the check. trustedSubnets : List [ str ] = [] class-attribute # Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 . OnlineCheckConfig # Bases: BaseModel enabled : Optional [ bool ] = None class-attribute # Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. host : str = '1.1.1.1' class-attribute # DNS host against which to check, defaults to Cloudflare's DNS. interval : int = CONST_15MIN class-attribute # Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. name : str = 'octoprint.org' class-attribute # Host name for which to check name resolution, defaults to OctoPrint's main domain. port : int = 53 class-attribute # DNS port against which to check, defaults to the standard DNS port. PluginBlacklistConfig # Bases: BaseModel enabled : Optional [ bool ] = None class-attribute # Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. ttl : int = CONST_15MIN class-attribute # Time to live of the cached blacklist, in seconds (default: 15 minutes). url : str = 'https://plugins.octoprint.org/blacklist.json' class-attribute # The URL from which to fetch the blacklist. PreemptiveCacheConfig # Bases: BaseModel exceptions : List [ str ] = [] class-attribute # Which server paths to exclude from the preemptive cache, e.g. /some/path . until : int = 7 class-attribute # How many days to leave unused entries in the preemptive cache config. ReverseProxyConfig # Bases: BaseModel hostFallback : Optional [ str ] = None class-attribute # Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. hostHeader : Optional [ str ] = None class-attribute # The request header from which to determine the host under which OctoPrint is served by the reverse proxy. prefixFallback : Optional [ str ] = None class-attribute # Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. prefixHeader : Optional [ str ] = None class-attribute # The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. schemeFallback : Optional [ str ] = None class-attribute # Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. schemeHeader : Optional [ str ] = None class-attribute # The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. trustedDownstream : List [ str ] = [] class-attribute # List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. ServerConfig # Bases: BaseModel allowFraming : bool = False class-attribute # Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. commands : CommandsConfig = CommandsConfig () class-attribute # Commands to restart/shutdown octoprint or the system it's running on. cookies : CookiesConfig = CookiesConfig () class-attribute # Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). diskspace : DiskspaceConfig = DiskspaceConfig () class-attribute # Settings of when to display what disk space warning. firstRun : bool = True class-attribute # If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. host : Optional [ str ] = None class-attribute # Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. ignoreIncompleteStartup : bool = False class-attribute # Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. incompleteStartup : bool = False class-attribute # Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode. ipCheck : IpCheckConfig = IpCheckConfig () class-attribute # Configuration of the client IP check to warn about connections from external networks. maxSize : int = CONST_100KB class-attribute # Maximum size of requests other than file uploads in bytes, defaults to 100KB. onlineCheck : OnlineCheckConfig = OnlineCheckConfig () class-attribute # Configuration of the regular online connectivity check. pluginBlacklist : PluginBlacklistConfig = PluginBlacklistConfig () class-attribute # Configuration of the plugin blacklist. port : int = 5000 class-attribute # Use this option to define the port to which to bind the server. preemptiveCache : PreemptiveCacheConfig = PreemptiveCacheConfig () class-attribute # Configuration of the preemptive cache. reverseProxy : ReverseProxyConfig = ReverseProxyConfig () class-attribute # Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. secretKey : Optional [ str ] = None class-attribute # Secret key for encrypting cookies and such, randomly generated on first run. startOnceInSafeMode : bool = False class-attribute # If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false uploads : UploadsConfig = UploadsConfig () class-attribute # Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. UploadsConfig # Bases: BaseModel maxSize : int = CONST_1GB class-attribute # Maximum size of uploaded files in bytes, defaults to 1GB. nameSuffix : str = 'name' class-attribute # Suffix used for storing the filename in the file upload headers when streaming uploads. pathSuffix : str = 'path' class-attribute # Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads.","title":"server"},{"location":"reference/octoprint/schema/config/server/#octoprintschemaconfigserver","text":"","title":"octoprint.schema.config.server"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig","text":"Bases: BaseModel","title":"CommandsConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.localPipCommand","text":"pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting.","title":"localPipCommand"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.serverRestartCommand","text":"Command to restart OctoPrint.","title":"serverRestartCommand"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.systemRestartCommand","text":"Command to restart the system OctoPrint is running on.","title":"systemRestartCommand"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CommandsConfig.systemShutdownCommand","text":"Command to shut down the system OctoPrint is running on.","title":"systemShutdownCommand"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig","text":"Bases: BaseModel","title":"CookiesConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig.samesite","text":"SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to Lax . Be advised that if forced unset, this has security implications as many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 .","title":"samesite"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.CookiesConfig.secure","text":"Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination.","title":"secure"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig","text":"Bases: BaseModel","title":"DiskspaceConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig.critical","text":"Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB.","title":"critical"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.DiskspaceConfig.warning","text":"Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB.","title":"warning"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig","text":"Bases: BaseModel","title":"IpCheckConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig.enabled","text":"Whether to enable the check.","title":"enabled"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.IpCheckConfig.trustedSubnets","text":"Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 .","title":"trustedSubnets"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig","text":"Bases: BaseModel","title":"OnlineCheckConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.enabled","text":"Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard.","title":"enabled"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.host","text":"DNS host against which to check, defaults to Cloudflare's DNS.","title":"host"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.interval","text":"Interval in which to check for online connectivity (in seconds), defaults to 15 minutes.","title":"interval"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.name","text":"Host name for which to check name resolution, defaults to OctoPrint's main domain.","title":"name"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.OnlineCheckConfig.port","text":"DNS port against which to check, defaults to the standard DNS port.","title":"port"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig","text":"Bases: BaseModel","title":"PluginBlacklistConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.enabled","text":"Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard.","title":"enabled"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.ttl","text":"Time to live of the cached blacklist, in seconds (default: 15 minutes).","title":"ttl"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PluginBlacklistConfig.url","text":"The URL from which to fetch the blacklist.","title":"url"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig","text":"Bases: BaseModel","title":"PreemptiveCacheConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig.exceptions","text":"Which server paths to exclude from the preemptive cache, e.g. /some/path .","title":"exceptions"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.PreemptiveCacheConfig.until","text":"How many days to leave unused entries in the preemptive cache config.","title":"until"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig","text":"Bases: BaseModel","title":"ReverseProxyConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.hostFallback","text":"Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests.","title":"hostFallback"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.hostHeader","text":"The request header from which to determine the host under which OctoPrint is served by the reverse proxy.","title":"hostHeader"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.prefixFallback","text":"Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests.","title":"prefixFallback"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.prefixHeader","text":"The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy.","title":"prefixHeader"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.schemeFallback","text":"Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests.","title":"schemeFallback"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.schemeHeader","text":"The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy.","title":"schemeHeader"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ReverseProxyConfig.trustedDownstream","text":"List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default.","title":"trustedDownstream"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig","text":"Bases: BaseModel","title":"ServerConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.allowFraming","text":"Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work.","title":"allowFraming"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.commands","text":"Commands to restart/shutdown octoprint or the system it's running on.","title":"commands"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.cookies","text":"Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...).","title":"cookies"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.diskspace","text":"Settings of when to display what disk space warning.","title":"diskspace"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.firstRun","text":"If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes.","title":"firstRun"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.host","text":"Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled.","title":"host"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.ignoreIncompleteStartup","text":"Set this to true to make OctoPrint ignore incomplete startups. Helpful for development.","title":"ignoreIncompleteStartup"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.incompleteStartup","text":"Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode.","title":"incompleteStartup"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.ipCheck","text":"Configuration of the client IP check to warn about connections from external networks.","title":"ipCheck"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.maxSize","text":"Maximum size of requests other than file uploads in bytes, defaults to 100KB.","title":"maxSize"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.onlineCheck","text":"Configuration of the regular online connectivity check.","title":"onlineCheck"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.pluginBlacklist","text":"Configuration of the plugin blacklist.","title":"pluginBlacklist"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.port","text":"Use this option to define the port to which to bind the server.","title":"port"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.preemptiveCache","text":"Configuration of the preemptive cache.","title":"preemptiveCache"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.reverseProxy","text":"Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly.","title":"reverseProxy"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.secretKey","text":"Secret key for encrypting cookies and such, randomly generated on first run.","title":"secretKey"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.startOnceInSafeMode","text":"If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false","title":"startOnceInSafeMode"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.ServerConfig.uploads","text":"Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file.","title":"uploads"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig","text":"Bases: BaseModel","title":"UploadsConfig"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.maxSize","text":"Maximum size of uploaded files in bytes, defaults to 1GB.","title":"maxSize"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.nameSuffix","text":"Suffix used for storing the filename in the file upload headers when streaming uploads.","title":"nameSuffix"},{"location":"reference/octoprint/schema/config/server/#octoprint.schema.config.server.UploadsConfig.pathSuffix","text":"Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads.","title":"pathSuffix"},{"location":"reference/octoprint/schema/config/slicing/","text":"octoprint.schema.config.slicing # SlicingConfig # Bases: BaseModel defaultProfiles : Dict [ str , str ] = {} class-attribute # Default slicing profiles per slicer, maps slicer identifier to profile identifier. defaultSlicer : Optional [ str ] = None class-attribute # Default slicer to use. enabled : bool = True class-attribute # Whether to enable slicing support or not.","title":"slicing"},{"location":"reference/octoprint/schema/config/slicing/#octoprintschemaconfigslicing","text":"","title":"octoprint.schema.config.slicing"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig","text":"Bases: BaseModel","title":"SlicingConfig"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.defaultProfiles","text":"Default slicing profiles per slicer, maps slicer identifier to profile identifier.","title":"defaultProfiles"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.defaultSlicer","text":"Default slicer to use.","title":"defaultSlicer"},{"location":"reference/octoprint/schema/config/slicing/#octoprint.schema.config.slicing.SlicingConfig.enabled","text":"Whether to enable slicing support or not.","title":"enabled"},{"location":"reference/octoprint/schema/config/system/","text":"octoprint.schema.config.system # ActionConfig # Bases: BaseModel action : str class-attribute # The identifier used internally to identify the action. Set to divider to generate a divider in the menu. async_ : bool = Field ( False , alias = 'async' ) class-attribute # Whether to run the command asynchronously. command : Optional [ str ] = None class-attribute # The command to execute when the action is selected. Must be set if the action is not a divider. confirm : Optional [ str ] = None class-attribute # An optional confirmation message to show before executing the command. name : Optional [ str ] = None class-attribute # The name of the action that will be shown on the menu. Must be set if the action is not a divider. SystemConfig # Bases: BaseModel actions : List [ ActionConfig ] = [] class-attribute # A list of system actions to show in the UI.","title":"system"},{"location":"reference/octoprint/schema/config/system/#octoprintschemaconfigsystem","text":"","title":"octoprint.schema.config.system"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig","text":"Bases: BaseModel","title":"ActionConfig"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.action","text":"The identifier used internally to identify the action. Set to divider to generate a divider in the menu.","title":"action"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.async_","text":"Whether to run the command asynchronously.","title":"async_"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.command","text":"The command to execute when the action is selected. Must be set if the action is not a divider.","title":"command"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.confirm","text":"An optional confirmation message to show before executing the command.","title":"confirm"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.ActionConfig.name","text":"The name of the action that will be shown on the menu. Must be set if the action is not a divider.","title":"name"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.SystemConfig","text":"Bases: BaseModel","title":"SystemConfig"},{"location":"reference/octoprint/schema/config/system/#octoprint.schema.config.system.SystemConfig.actions","text":"A list of system actions to show in the UI.","title":"actions"},{"location":"reference/octoprint/schema/config/temperature/","text":"octoprint.schema.config.temperature # TemperatureConfig # Bases: BaseModel cutoff : int = 30 class-attribute # Cut off time for the temperature data, in minutes. profiles : List [ TemperatureProfile ] = [ TemperatureProfile ( name = 'ABS' , extruder = 210 , bed = 100 ), TemperatureProfile ( name = 'PLA' , extruder = 180 , bed = 60 )] class-attribute # Temperature profiles to offer in the UI for quick pre-heating. sendAutomatically : bool = False class-attribute # Whether to send new temperature settings made in the UI automatically. sendAutomaticallyAfter : int = 1 class-attribute # After what time to send the new temperature settings automatically, in seconds. TemperatureProfile # Bases: BaseModel bed : int class-attribute # Bed temperature to set with the profile. extruder : int class-attribute # Hotend temperature to set with the profile. name : str class-attribute # Name of the profile.","title":"temperature"},{"location":"reference/octoprint/schema/config/temperature/#octoprintschemaconfigtemperature","text":"","title":"octoprint.schema.config.temperature"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig","text":"Bases: BaseModel","title":"TemperatureConfig"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.cutoff","text":"Cut off time for the temperature data, in minutes.","title":"cutoff"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.profiles","text":"Temperature profiles to offer in the UI for quick pre-heating.","title":"profiles"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.sendAutomatically","text":"Whether to send new temperature settings made in the UI automatically.","title":"sendAutomatically"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureConfig.sendAutomaticallyAfter","text":"After what time to send the new temperature settings automatically, in seconds.","title":"sendAutomaticallyAfter"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile","text":"Bases: BaseModel","title":"TemperatureProfile"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.bed","text":"Bed temperature to set with the profile.","title":"bed"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.extruder","text":"Hotend temperature to set with the profile.","title":"extruder"},{"location":"reference/octoprint/schema/config/temperature/#octoprint.schema.config.temperature.TemperatureProfile.name","text":"Name of the profile.","title":"name"},{"location":"reference/octoprint/schema/config/terminalfilters/","text":"octoprint.schema.config.terminalfilters # TerminalFilterEntry # Bases: BaseModel name : str class-attribute # The name of the filter. regex : str class-attribute # The regular expression to match. Use JavaScript regular expressions .","title":"terminalfilters"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprintschemaconfigterminalfilters","text":"","title":"octoprint.schema.config.terminalfilters"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry","text":"Bases: BaseModel","title":"TerminalFilterEntry"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry.name","text":"The name of the filter.","title":"name"},{"location":"reference/octoprint/schema/config/terminalfilters/#octoprint.schema.config.terminalfilters.TerminalFilterEntry.regex","text":"The regular expression to match. Use JavaScript regular expressions .","title":"regex"},{"location":"reference/octoprint/schema/config/webcam/","text":"octoprint.schema.config.webcam # TimelapseConfig # Bases: BaseModel fps : int = 25 class-attribute # The framerate at which to render the movie. options : TimelapseOptions = TimelapseOptions () class-attribute # Additional options depending on the timelapse type. postRoll : int = 0 class-attribute # The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode. type : Literal [ 'off' , 'z-change' , 'timed' ] = 'off' class-attribute # The timelapse type. TimelapseOptions # Bases: BaseModel capturePostRoll : Optional [ bool ] = None class-attribute # timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). interval : Optional [ int ] = None class-attribute # timed timelapses only: The interval which to leave between images in seconds. retractionZHop : Optional [ float ] = None class-attribute # zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots. WebcamConfig # Bases: BaseModel bitrate : str = '10000k' class-attribute # The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. cleanTmpAfterDays : int = 7 class-attribute # After how many days unrendered timelapses will be deleted. ffmpeg : Optional [ str ] = None class-attribute # Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. ffmpegThreads : int = 1 class-attribute # Number of how many threads to instruct ffmpeg to use for encoding. ffmpegVideoCodec : str = 'libx264' class-attribute # Videocodec to be used for encoding. flipH : bool = False class-attribute # Whether to flip the webcam horizontally. flipV : bool = False class-attribute # Whether to flip the webcam vertically. rotate90 : bool = False class-attribute # Whether to rotate the webcam 90\u00b0 counter clockwise. timelapse : TimelapseConfig = TimelapseConfig () class-attribute # The default timelapse settings. timelapseEnabled : bool = True class-attribute # Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. watermark : bool = True class-attribute # Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. webcamEnabled : bool = True class-attribute # Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set.","title":"webcam"},{"location":"reference/octoprint/schema/config/webcam/#octoprintschemaconfigwebcam","text":"","title":"octoprint.schema.config.webcam"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig","text":"Bases: BaseModel","title":"TimelapseConfig"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.fps","text":"The framerate at which to render the movie.","title":"fps"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.options","text":"Additional options depending on the timelapse type.","title":"options"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.postRoll","text":"The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode.","title":"postRoll"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseConfig.type","text":"The timelapse type.","title":"type"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions","text":"Bases: BaseModel","title":"TimelapseOptions"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.capturePostRoll","text":"timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false).","title":"capturePostRoll"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.interval","text":"timed timelapses only: The interval which to leave between images in seconds.","title":"interval"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.TimelapseOptions.retractionZHop","text":"zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots.","title":"retractionZHop"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig","text":"Bases: BaseModel","title":"WebcamConfig"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.bitrate","text":"The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg.","title":"bitrate"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.cleanTmpAfterDays","text":"After how many days unrendered timelapses will be deleted.","title":"cleanTmpAfterDays"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpeg","text":"Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set.","title":"ffmpeg"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpegThreads","text":"Number of how many threads to instruct ffmpeg to use for encoding.","title":"ffmpegThreads"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.ffmpegVideoCodec","text":"Videocodec to be used for encoding.","title":"ffmpegVideoCodec"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.flipH","text":"Whether to flip the webcam horizontally.","title":"flipH"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.flipV","text":"Whether to flip the webcam vertically.","title":"flipV"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.rotate90","text":"Whether to rotate the webcam 90\u00b0 counter clockwise.","title":"rotate90"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.timelapse","text":"The default timelapse settings.","title":"timelapse"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.timelapseEnabled","text":"Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set.","title":"timelapseEnabled"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.watermark","text":"Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings.","title":"watermark"},{"location":"reference/octoprint/schema/config/webcam/#octoprint.schema.config.webcam.WebcamConfig.webcamEnabled","text":"Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set.","title":"webcamEnabled"},{"location":"reference/octoprint/server/","text":"octoprint.server #","title":"octoprint.server"},{"location":"reference/octoprint/server/#octoprintserver","text":"","title":"octoprint.server"},{"location":"reference/octoprint/server/views/","text":"octoprint.server.views #","title":"views"},{"location":"reference/octoprint/server/views/#octoprintserverviews","text":"","title":"octoprint.server.views"},{"location":"reference/octoprint/server/api/","text":"octoprint.server.api #","title":"octoprint.server.api"},{"location":"reference/octoprint/server/api/#octoprintserverapi","text":"","title":"octoprint.server.api"},{"location":"reference/octoprint/server/api/access/","text":"octoprint.server.api.access #","title":"access"},{"location":"reference/octoprint/server/api/access/#octoprintserverapiaccess","text":"","title":"octoprint.server.api.access"},{"location":"reference/octoprint/server/api/connection/","text":"octoprint.server.api.connection #","title":"connection"},{"location":"reference/octoprint/server/api/connection/#octoprintserverapiconnection","text":"","title":"octoprint.server.api.connection"},{"location":"reference/octoprint/server/api/files/","text":"octoprint.server.api.files # WerkzeugFileWrapper # Bases: octoprint . filemanager . util . AbstractFileWrapper A wrapper around a Werkzeug FileStorage object. Parameters: Name Type Description Default file_obj werkzeug . datastructures . FileStorage The Werkzeug FileStorage instance to wrap. required .. seealso:: werkzeug.datastructures.FileStorage <http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.FileStorage> _ The documentation of Werkzeug's FileStorage class. save ( path ) # Delegates to werkzeug.datastructures.FileStorage.save stream () # Returns werkzeug.datastructures.FileStorage.stream","title":"files"},{"location":"reference/octoprint/server/api/files/#octoprintserverapifiles","text":"","title":"octoprint.server.api.files"},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper","text":"Bases: octoprint . filemanager . util . AbstractFileWrapper A wrapper around a Werkzeug FileStorage object. Parameters: Name Type Description Default file_obj werkzeug . datastructures . FileStorage The Werkzeug FileStorage instance to wrap. required .. seealso:: werkzeug.datastructures.FileStorage <http://werkzeug.pocoo.org/docs/0.10/datastructures/#werkzeug.datastructures.FileStorage> _ The documentation of Werkzeug's FileStorage class.","title":"WerkzeugFileWrapper"},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper.save","text":"Delegates to werkzeug.datastructures.FileStorage.save","title":"save()"},{"location":"reference/octoprint/server/api/files/#octoprint.server.api.files.WerkzeugFileWrapper.stream","text":"Returns werkzeug.datastructures.FileStorage.stream","title":"stream()"},{"location":"reference/octoprint/server/api/job/","text":"octoprint.server.api.job #","title":"job"},{"location":"reference/octoprint/server/api/job/#octoprintserverapijob","text":"","title":"octoprint.server.api.job"},{"location":"reference/octoprint/server/api/languages/","text":"octoprint.server.api.languages #","title":"languages"},{"location":"reference/octoprint/server/api/languages/#octoprintserverapilanguages","text":"","title":"octoprint.server.api.languages"},{"location":"reference/octoprint/server/api/printer/","text":"octoprint.server.api.printer #","title":"printer"},{"location":"reference/octoprint/server/api/printer/#octoprintserverapiprinter","text":"","title":"octoprint.server.api.printer"},{"location":"reference/octoprint/server/api/printer_profiles/","text":"octoprint.server.api.printer_profiles #","title":"printer_profiles"},{"location":"reference/octoprint/server/api/printer_profiles/#octoprintserverapiprinter_profiles","text":"","title":"octoprint.server.api.printer_profiles"},{"location":"reference/octoprint/server/api/settings/","text":"octoprint.server.api.settings #","title":"settings"},{"location":"reference/octoprint/server/api/settings/#octoprintserverapisettings","text":"","title":"octoprint.server.api.settings"},{"location":"reference/octoprint/server/api/slicing/","text":"octoprint.server.api.slicing #","title":"slicing"},{"location":"reference/octoprint/server/api/slicing/#octoprintserverapislicing","text":"","title":"octoprint.server.api.slicing"},{"location":"reference/octoprint/server/api/system/","text":"octoprint.server.api.system #","title":"system"},{"location":"reference/octoprint/server/api/system/#octoprintserverapisystem","text":"","title":"octoprint.server.api.system"},{"location":"reference/octoprint/server/api/timelapse/","text":"octoprint.server.api.timelapse #","title":"timelapse"},{"location":"reference/octoprint/server/api/timelapse/#octoprintserverapitimelapse","text":"","title":"octoprint.server.api.timelapse"},{"location":"reference/octoprint/server/api/users/","text":"octoprint.server.api.users #","title":"users"},{"location":"reference/octoprint/server/api/users/#octoprintserverapiusers","text":"","title":"octoprint.server.api.users"},{"location":"reference/octoprint/server/util/","text":"octoprint.server.util # corsRequestHandler () # before_request handler for blueprints which sets CORS headers for OPTIONS requests if enabled corsResponseHandler ( resp ) # after_request handler for blueprints for which CORS is supported. Sets Access-Control-Allow-Origin headers for Origin request header on response. csrfRequestHandler () # before_request handler for blueprints which checks for CRFS double token on relevant requests & methods. csrfResponseHandler ( resp ) # after_request handler for updating the CSRF cookie on each response. has_permissions ( * permissions ) # Determines if the current user (either from the session, api key or authorization header) has all of the requested permissions. Parameters: Name Type Description Default *permissions list of all permissions required to pass the check () loginFromApiKeyRequestHandler () # before_request handler for blueprints which creates a login session for the provided api key (if available) App session keys are handled as anonymous keys here and ignored. loginFromAuthorizationHeaderRequestHandler () # before_request handler for creating login sessions based on the Authorization header. loginUser ( user , remember = False , login_mechanism = None ) # Logs the provided user into Flask Login and Principal if not None and active Parameters: Name Type Description Default user the User to login. May be None in which case the login will fail required remember Whether to set the remember flag on the Flask Login operation False noCachingExceptGetResponseHandler ( resp ) # after_request handler for blueprints which shall set no caching headers on their responses to any requests that are not sent with method GET . See :func: noCachingResponseHandler . noCachingResponseHandler ( resp ) # after_request handler for blueprints which shall set no caching headers on their responses. Sets Cache-Control , Pragma and Expires headers accordingly to prevent all client side caching from taking place. optionsAllowOrigin ( request ) # Shortcut for request handling for CORS OPTIONS requests to set CORS headers. require_login ( * permissions ) # Returns a redirect response to the login view if the permission requirements are not met. Parameters: Name Type Description Default *permissions a list of permissions required to pass the check () require_login_with ( permissions = None , user_id = None ) # Requires a login with the given permissions and/or user id. Parameters: Name Type Description Default permissions list of all permissions required to pass the check None user_id required user to pass the check None validate_local_redirect ( url , allowed_paths ) # Validates the given local redirect URL against the given allowed paths. An url is valid for a local redirect if it has neither scheme nor netloc defined, and its path is one of the given allowed paths. Parameters: Name Type Description Default url str URL to validate required allowed_paths List [ str ] List of allowed paths, only paths contained will be considered valid. required Returns: Name Type Description bool Whether the url passed validation or not.","title":"octoprint.server.util"},{"location":"reference/octoprint/server/util/#octoprintserverutil","text":"","title":"octoprint.server.util"},{"location":"reference/octoprint/server/util/#octoprint.server.util.corsRequestHandler","text":"before_request handler for blueprints which sets CORS headers for OPTIONS requests if enabled","title":"corsRequestHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.corsResponseHandler","text":"after_request handler for blueprints for which CORS is supported. Sets Access-Control-Allow-Origin headers for Origin request header on response.","title":"corsResponseHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.csrfRequestHandler","text":"before_request handler for blueprints which checks for CRFS double token on relevant requests & methods.","title":"csrfRequestHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.csrfResponseHandler","text":"after_request handler for updating the CSRF cookie on each response.","title":"csrfResponseHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.has_permissions","text":"Determines if the current user (either from the session, api key or authorization header) has all of the requested permissions. Parameters: Name Type Description Default *permissions list of all permissions required to pass the check ()","title":"has_permissions()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginFromApiKeyRequestHandler","text":"before_request handler for blueprints which creates a login session for the provided api key (if available) App session keys are handled as anonymous keys here and ignored.","title":"loginFromApiKeyRequestHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginFromAuthorizationHeaderRequestHandler","text":"before_request handler for creating login sessions based on the Authorization header.","title":"loginFromAuthorizationHeaderRequestHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.loginUser","text":"Logs the provided user into Flask Login and Principal if not None and active Parameters: Name Type Description Default user the User to login. May be None in which case the login will fail required remember Whether to set the remember flag on the Flask Login operation False","title":"loginUser()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.noCachingExceptGetResponseHandler","text":"after_request handler for blueprints which shall set no caching headers on their responses to any requests that are not sent with method GET . See :func: noCachingResponseHandler .","title":"noCachingExceptGetResponseHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.noCachingResponseHandler","text":"after_request handler for blueprints which shall set no caching headers on their responses. Sets Cache-Control , Pragma and Expires headers accordingly to prevent all client side caching from taking place.","title":"noCachingResponseHandler()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.optionsAllowOrigin","text":"Shortcut for request handling for CORS OPTIONS requests to set CORS headers.","title":"optionsAllowOrigin()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.require_login","text":"Returns a redirect response to the login view if the permission requirements are not met. Parameters: Name Type Description Default *permissions a list of permissions required to pass the check ()","title":"require_login()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.require_login_with","text":"Requires a login with the given permissions and/or user id. Parameters: Name Type Description Default permissions list of all permissions required to pass the check None user_id required user to pass the check None","title":"require_login_with()"},{"location":"reference/octoprint/server/util/#octoprint.server.util.validate_local_redirect","text":"Validates the given local redirect URL against the given allowed paths. An url is valid for a local redirect if it has neither scheme nor netloc defined, and its path is one of the given allowed paths. Parameters: Name Type Description Default url str URL to validate required allowed_paths List [ str ] List of allowed paths, only paths contained will be considered valid. required Returns: Name Type Description bool Whether the url passed validation or not.","title":"validate_local_redirect()"},{"location":"reference/octoprint/server/util/csrf/","text":"octoprint.server.util.csrf # CSRF double cookie implementation","title":"csrf"},{"location":"reference/octoprint/server/util/csrf/#octoprintserverutilcsrf","text":"CSRF double cookie implementation","title":"octoprint.server.util.csrf"},{"location":"reference/octoprint/server/util/flask/","text":"octoprint.server.util.flask # LessSimpleCache # Bases: BaseCache Slightly improved version of :class: SimpleCache . Setting default_timeout or timeout to -1 will have no timeout be applied at all. OctoPrintFlaskRequest # Bases: flask . Request server_name () # Short cut to the request's server name header server_port () # Short cut to the request's server port header check_lastmodified ( lastmodified ) # Compares the provided lastmodified value with the value of the If-Modified-Since header. If lastmodified is an int or float, it's assumed to be a Unix timestamp and converted to a timezone aware datetime instance in UTC. If lastmodified is a datetime instance, it needs to be timezone aware or the result will always be False . Parameters: Name Type Description Default lastmodified Union [ int , float , datetime ] The last modified value to compare against required Raises: Type Description ValueError If anything but an int, float or datetime instance is passed Returns: Name Type Description bool bool true if the values indicate that the document is still up to date firstrun_only_access ( func ) # If you decorate a view with this, it will ensure that first setup has not been done for OctoPrint's Access Control. Otherwise it will cause a HTTP 403 status code to be returned by the decorated resource. get_cookie_suffix ( request ) # Request specific suffix for set and read cookies We need this because cookies are not port-specific and we don't want to overwrite our session and other cookies from one OctoPrint instance on our machine with those of another one who happens to listen on the same address albeit a different port or script root. get_flask_user_from_request ( request ) # Retrieves the current flask user from the request context. Uses API key if available, otherwise the current user session if available. :param request: flask request from which to retrieve the current user :return: the user (might be an anonymous user) make_api_error ( message , status ) # Helper to generate API error responses in JSON format. Turns something like make_api_error(\"Not Found\", 404) into a JSON response with body {\"error\": \"Not Found\"} . Parameters: Name Type Description Default message The error message to put into the response required status The HTTP status code required make_text_response ( message , status ) # Helper to generate basic text responses. Response will have the provided message as body, the provided status code, and a content type of \"text/plain\". Parameters: Name Type Description Default message The message in the response body required status The HTTP status code required no_firstrun_access ( func ) # If you decorate a view with this, it will ensure that first setup has been done for OctoPrint's Access Control. If OctoPrint's Access Control has not been setup yet (indicated by the userManager not reporting that its user database has been customized from default), the decorator will cause a HTTP 403 status code to be returned by the decorated resource. permission_validator ( request , permission ) # Validates that the given request is made by an authorized user, identified either by API key or existing Flask session. Must be executed in an existing Flask request context! :param request: The Flask request object :param request: The required permission redirect_to_tornado ( request , target , code = 302 ) # Redirects from flask to tornado, flask request context must exist. :param request: :param target: :param code: :return: restricted_access ( func ) # This combines func: no_firstrun_access and login_required .","title":"flask"},{"location":"reference/octoprint/server/util/flask/#octoprintserverutilflask","text":"","title":"octoprint.server.util.flask"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.LessSimpleCache","text":"Bases: BaseCache Slightly improved version of :class: SimpleCache . Setting default_timeout or timeout to -1 will have no timeout be applied at all.","title":"LessSimpleCache"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest","text":"Bases: flask . Request","title":"OctoPrintFlaskRequest"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest.server_name","text":"Short cut to the request's server name header","title":"server_name()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.OctoPrintFlaskRequest.server_port","text":"Short cut to the request's server port header","title":"server_port()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.check_lastmodified","text":"Compares the provided lastmodified value with the value of the If-Modified-Since header. If lastmodified is an int or float, it's assumed to be a Unix timestamp and converted to a timezone aware datetime instance in UTC. If lastmodified is a datetime instance, it needs to be timezone aware or the result will always be False . Parameters: Name Type Description Default lastmodified Union [ int , float , datetime ] The last modified value to compare against required Raises: Type Description ValueError If anything but an int, float or datetime instance is passed Returns: Name Type Description bool bool true if the values indicate that the document is still up to date","title":"check_lastmodified()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.firstrun_only_access","text":"If you decorate a view with this, it will ensure that first setup has not been done for OctoPrint's Access Control. Otherwise it will cause a HTTP 403 status code to be returned by the decorated resource.","title":"firstrun_only_access()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.get_cookie_suffix","text":"Request specific suffix for set and read cookies We need this because cookies are not port-specific and we don't want to overwrite our session and other cookies from one OctoPrint instance on our machine with those of another one who happens to listen on the same address albeit a different port or script root.","title":"get_cookie_suffix()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.get_flask_user_from_request","text":"Retrieves the current flask user from the request context. Uses API key if available, otherwise the current user session if available. :param request: flask request from which to retrieve the current user :return: the user (might be an anonymous user)","title":"get_flask_user_from_request()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.make_api_error","text":"Helper to generate API error responses in JSON format. Turns something like make_api_error(\"Not Found\", 404) into a JSON response with body {\"error\": \"Not Found\"} . Parameters: Name Type Description Default message The error message to put into the response required status The HTTP status code required","title":"make_api_error()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.make_text_response","text":"Helper to generate basic text responses. Response will have the provided message as body, the provided status code, and a content type of \"text/plain\". Parameters: Name Type Description Default message The message in the response body required status The HTTP status code required","title":"make_text_response()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.no_firstrun_access","text":"If you decorate a view with this, it will ensure that first setup has been done for OctoPrint's Access Control. If OctoPrint's Access Control has not been setup yet (indicated by the userManager not reporting that its user database has been customized from default), the decorator will cause a HTTP 403 status code to be returned by the decorated resource.","title":"no_firstrun_access()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.permission_validator","text":"Validates that the given request is made by an authorized user, identified either by API key or existing Flask session. Must be executed in an existing Flask request context! :param request: The Flask request object :param request: The required permission","title":"permission_validator()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.redirect_to_tornado","text":"Redirects from flask to tornado, flask request context must exist. :param request: :param target: :param code: :return:","title":"redirect_to_tornado()"},{"location":"reference/octoprint/server/util/flask/#octoprint.server.util.flask.restricted_access","text":"This combines func: no_firstrun_access and login_required .","title":"restricted_access()"},{"location":"reference/octoprint/server/util/sockjs/","text":"octoprint.server.util.sockjs # PrinterStateConnection # Bases: octoprint . vendor . sockjs . tornado . SockJSConnection , octoprint . printer . PrinterCallback , LoginStatusListener , GroupChangeListener","title":"sockjs"},{"location":"reference/octoprint/server/util/sockjs/#octoprintserverutilsockjs","text":"","title":"octoprint.server.util.sockjs"},{"location":"reference/octoprint/server/util/sockjs/#octoprint.server.util.sockjs.PrinterStateConnection","text":"Bases: octoprint . vendor . sockjs . tornado . SockJSConnection , octoprint . printer . PrinterCallback , LoginStatusListener , GroupChangeListener","title":"PrinterStateConnection"},{"location":"reference/octoprint/server/util/tornado/","text":"octoprint.server.util.tornado # CorsSupportMixin # Bases: tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ mixin that makes sure to set CORS headers similarly to the Flask backed API endpoints. CustomHTTP1Connection # Bases: tornado . http1connection . HTTP1Connection A custom implementation of tornado.http1connection.HTTP1Connection which upon checking the Content-Length of the request against the configured maximum utilizes max_body_sizes and default_max_body_size as a fallback. CustomHTTP1ConnectionParameters # Bases: tornado . http1connection . HTTP1ConnectionParameters An implementation of tornado.http1connection.HTTP1ConnectionParameters that adds two new parameters max_body_sizes and default_max_body_size . For a description of these please see the documentation of CustomHTTPServer above. CustomHTTP1ServerConnection # Bases: tornado . http1connection . HTTP1ServerConnection A custom implementation of tornado.http1connection.HTTP1ServerConnection which utilizes a CustomHTTP1Connection instead of a tornado.http1connection.HTTP1Connection in _server_request_loop . The implementation logic is otherwise the same as tornado.http1connection.HTTP1ServerConnection . CustomHTTPServer # Bases: tornado . httpserver . HTTPServer Custom implementation of tornado.httpserver.HTTPServer that allows defining max body sizes depending on path and method. The implementation is mostly taken from tornado.httpserver.HTTPServer , the only difference is the creation of a CustomHTTP1ConnectionParameters instance instead of tornado.http1connection.HTTP1ConnectionParameters which is supplied with the two new constructor arguments max_body_sizes and max_default_body_size and the creation of a CustomHTTP1ServerConnection instead of a tornado.http1connection.HTTP1ServerConnection upon connection by a client. max_body_sizes is expected to be an iterable containing tuples of the form (method, path regex, maximum body size), with method and path regex having to match in order for maximum body size to take affect. default_max_body_size is the default maximum body size to apply if no specific one from max_body_sizes matches. DeprecatedEndpointHandler # Bases: CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that redirects to another url and logs a deprecation warning. Parameters: Name Type Description Default url str URL to which to redirect required LargeResponseHandler # Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . StaticFileHandler Customized tornado.web.StaticFileHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#tornado.web.StaticFileHandler> _ that allows delivery of the requested resource as attachment and access and request path validation through optional callbacks. Note that access validation takes place before path validation. Parameters: Name Type Description Default path str The system path from which to serve files (this will be forwarded to the initialize method of :class: ~tornado.web.StaticFileHandler ) required default_filename str The default filename to serve if none is explicitly specified and the request references a subdirectory of the served path (this will be forwarded to the initialize method of :class: ~tornado.web.StaticFileHandler as the default_filename keyword parameter). Defaults to None . required as_attachment bool Whether to serve requested files with Content-Disposition: attachment header ( True ) or not. Defaults to False . required allow_client_caching bool Whether to allow the client to cache (by not setting any Cache-Control or Expires headers on the response) or not. required access_validation function Callback to call in the get method to validate access to the resource. Will be called with self.request as parameter which contains the full tornado request object. Should raise a tornado.web.HTTPError if access is not allowed in which case the request will not be further processed. Defaults to None and hence no access validation being performed. required path_validation function Callback to call in the get method to validate the requested path. Will be called with the requested path as parameter. Should raise a tornado.web.HTTPError (e.g. an 404) if the requested path does not pass validation in which case the request will not be further processed. Defaults to None and hence no path validation being performed. required etag_generator function Callback to call for generating the value of the ETag response header. Will be called with the response handler as parameter. May return None to prevent the ETag response header from being set. If not provided the last modified time of the file in question will be used as returned by get_content_version . required name_generator function Callback to call for generating the value of the attachment file name header. Will be called with the requested path as parameter. required mime_type_guesser function Callback to guess the mime type to use for the content type encoding of the response. Will be called with the requested path on disk as parameter. required is_pre_compressed bool if the file is expected to be pre-compressed, i.e, if there is a file in the same directory with the same name, but with '.gz' appended and gzip-encoded required original_absolute_path () property # The path of the uncompressed file corresponding to the compressed file streamed_get ( path , include_body = True ) # Version of StaticFileHandler.get that doesn't support ranges or ETag but streams the content. Helpful for files that might still change while being transmitted (e.g. log files) StaticDataHandler # Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that returns static data of a configured content_type . Parameters: Name Type Description Default data str The data with which to respond required content_type str The content type with which to respond. Defaults to text/plain required UploadStorageFallbackHandler # Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin A RequestHandler similar to tornado.web.FallbackHandler which fetches any files contained in the request bodies of content type multipart , stores them in temporary files and supplies the fallback with the file's name , content_type , path and size instead via a rewritten body. Basically similar to what the nginx upload module does. Basic request body example: .. code-block:: none ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file\"; filename=\"test.gcode\" Content-Type: application/octet-stream ... ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"apikey\" my_funny_apikey ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"select\" true ------WebKitFormBoundarypYiSUx63abAmhT5C-- That would get turned into: .. code-block:: none ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"apikey\" my_funny_apikey ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"select\" true ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.path\" Content-Type: text/plain; charset=utf-8 /tmp/tmpzupkro ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.name\" Content-Type: text/plain; charset=utf-8 test.gcode ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.content_type\" Content-Type: text/plain; charset=utf-8 application/octet-stream ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.size\" Content-Type: text/plain; charset=utf-8 349182 ------WebKitFormBoundarypYiSUx63abAmhT5C-- The underlying application can then access the contained files via their respective paths and just move them where necessary. BODY_METHODS = ( 'POST' , 'PATCH' , 'PUT' ) class-attribute # The request methods that may contain a request body. data_received ( chunk ) # Called by Tornado on receiving a chunk of the request body. If request is a multipart request, takes care of processing the multipart data structure via :func: _process_multipart_data . If not, just adds the chunk to internal in-memory buffer. :param chunk: chunk of data received from Tornado is_multipart () # Checks whether this request is a multipart request prepare () # Prepares the processing of the request. If it's a request that may contain a request body (as defined in :attr: UploadStorageFallbackHandler.BODY_METHODS ) prepares the multipart parsing if content type fits. If it's a body-less request, just calls the fallback with an empty body and finishes the request. UrlProxyHandler # Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that proxies requests to a preconfigured url and returns the response. Allows delivery of the requested content as attachment and access validation through an optional callback. This will use tornado.httpclient.AsyncHTTPClient <http://tornado.readthedocs.org/en/branch4.0/httpclient.html#tornado.httpclient.AsyncHTTPClient> _ for making the request to the configured endpoint and return the body of the client response with the status code from the client response and the following headers Date , Cache-Control , Expires , ETag , Server , Content-Type and Location will be copied over. If as_attachment is set to True, Content-Disposition will be set to attachment . If basename is set including the attachment's filename attribute will be set to the base name followed by the extension guessed based on the MIME type from the Content-Type header of the response. If no extension can be guessed no filename attribute will be set. Parameters: Name Type Description Default url str URL to forward any requests to. A 404 response will be returned if this is not set. Defaults to None . required as_attachment bool Whether to serve files with Content-Disposition: attachment header ( True ) or not. Defaults to False . required basename str base name of file names to return as part of the attachment header, see above. Defaults to None . required access_validation function Callback to call in the get method to validate access to the resource. Will be called with self.request as parameter which contains the full tornado request object. Should raise a tornado.web.HTTPError if access is not allowed in which case the request will not be further processed. Defaults to None and hence no access validation being performed. required WsgiInputContainer # A WSGI container for use with Tornado that allows supplying the request body to be used for wsgi.input in the generated WSGI environment upon call. A RequestHandler can thus provide the WSGI application with a stream for the request body, or a modified body. Example usage: .. code-block:: python wsgi_app = octoprint.server.util.WsgiInputContainer(octoprint_app) application = tornado.web.Application([ (r\".*\", UploadStorageFallbackHandler, dict(fallback=wsgi_app), ]) The implementation logic is basically the same as tornado.wsgi.WSGIContainer but the __call__ and environ methods have been adjusted to allow for an optionally supplied body argument which is then used for wsgi.input . __call__ ( request , body = None ) # Wraps the call against the WSGI app, deriving the WSGI environment from the supplied Tornado HTTPServerRequest . :param request: the tornado.httpserver.HTTPServerRequest to derive the WSGI environment from :param body: an optional body to use as wsgi.input instead of request.body , can be a string or a stream environ ( request , body = None ) staticmethod # Converts a tornado.httputil.HTTPServerRequest to a WSGI environment. An optional body to be used for populating wsgi.input can be supplied (either a string or a stream). If not supplied, request.body will be wrapped into a io.BytesIO stream and used instead. :param request: the tornado.httpserver.HTTPServerRequest to derive the WSGI environment from :param body: an optional body to use as wsgi.input instead of request.body , can be a string or a stream access_validation_factory ( app , validator , * args ) # Creates an access validation wrapper using the supplied validator. :param validator: the access validator to use inside the validation wrapper :return: an access validator taking a request as parameter and performing the request validation enable_per_message_deflate_extension () # This configures tornado.websocket.WebSocketHandler.get_compression_options to support the permessage-deflate extension to the websocket protocol, minimizing data bandwidth if clients support the extension as well fix_json_encode () # This makes tornado.escape.json_encode use octoprint.util.JsonEncoding.encode as fallback in order to allow serialization of globally registered types like frozendict and others. fix_websocket_check_origin () # This fixes tornado.websocket.WebSocketHandler.check_origin to do the same origin check against the Host header case-insensitively, as defined in RFC6454, Section 4, item 5. path_validation_factory ( path_filter , status_code = 404 ) # Creates a request path validation wrapper returning the defined status code if the supplied path_filter returns False. :param path_filter: the path filter to use on the requested path, should return False for requests that should be responded with the provided error code. :return: a request path validator taking a request path as parameter and performing the request validation","title":"tornado"},{"location":"reference/octoprint/server/util/tornado/#octoprintserverutiltornado","text":"","title":"octoprint.server.util.tornado"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CorsSupportMixin","text":"Bases: tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ mixin that makes sure to set CORS headers similarly to the Flask backed API endpoints.","title":"CorsSupportMixin"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1Connection","text":"Bases: tornado . http1connection . HTTP1Connection A custom implementation of tornado.http1connection.HTTP1Connection which upon checking the Content-Length of the request against the configured maximum utilizes max_body_sizes and default_max_body_size as a fallback.","title":"CustomHTTP1Connection"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1ConnectionParameters","text":"Bases: tornado . http1connection . HTTP1ConnectionParameters An implementation of tornado.http1connection.HTTP1ConnectionParameters that adds two new parameters max_body_sizes and default_max_body_size . For a description of these please see the documentation of CustomHTTPServer above.","title":"CustomHTTP1ConnectionParameters"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTP1ServerConnection","text":"Bases: tornado . http1connection . HTTP1ServerConnection A custom implementation of tornado.http1connection.HTTP1ServerConnection which utilizes a CustomHTTP1Connection instead of a tornado.http1connection.HTTP1Connection in _server_request_loop . The implementation logic is otherwise the same as tornado.http1connection.HTTP1ServerConnection .","title":"CustomHTTP1ServerConnection"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.CustomHTTPServer","text":"Bases: tornado . httpserver . HTTPServer Custom implementation of tornado.httpserver.HTTPServer that allows defining max body sizes depending on path and method. The implementation is mostly taken from tornado.httpserver.HTTPServer , the only difference is the creation of a CustomHTTP1ConnectionParameters instance instead of tornado.http1connection.HTTP1ConnectionParameters which is supplied with the two new constructor arguments max_body_sizes and max_default_body_size and the creation of a CustomHTTP1ServerConnection instead of a tornado.http1connection.HTTP1ServerConnection upon connection by a client. max_body_sizes is expected to be an iterable containing tuples of the form (method, path regex, maximum body size), with method and path regex having to match in order for maximum body size to take affect. default_max_body_size is the default maximum body size to apply if no specific one from max_body_sizes matches.","title":"CustomHTTPServer"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.DeprecatedEndpointHandler","text":"Bases: CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that redirects to another url and logs a deprecation warning. Parameters: Name Type Description Default url str URL to which to redirect required","title":"DeprecatedEndpointHandler"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler","text":"Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . StaticFileHandler Customized tornado.web.StaticFileHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#tornado.web.StaticFileHandler> _ that allows delivery of the requested resource as attachment and access and request path validation through optional callbacks. Note that access validation takes place before path validation. Parameters: Name Type Description Default path str The system path from which to serve files (this will be forwarded to the initialize method of :class: ~tornado.web.StaticFileHandler ) required default_filename str The default filename to serve if none is explicitly specified and the request references a subdirectory of the served path (this will be forwarded to the initialize method of :class: ~tornado.web.StaticFileHandler as the default_filename keyword parameter). Defaults to None . required as_attachment bool Whether to serve requested files with Content-Disposition: attachment header ( True ) or not. Defaults to False . required allow_client_caching bool Whether to allow the client to cache (by not setting any Cache-Control or Expires headers on the response) or not. required access_validation function Callback to call in the get method to validate access to the resource. Will be called with self.request as parameter which contains the full tornado request object. Should raise a tornado.web.HTTPError if access is not allowed in which case the request will not be further processed. Defaults to None and hence no access validation being performed. required path_validation function Callback to call in the get method to validate the requested path. Will be called with the requested path as parameter. Should raise a tornado.web.HTTPError (e.g. an 404) if the requested path does not pass validation in which case the request will not be further processed. Defaults to None and hence no path validation being performed. required etag_generator function Callback to call for generating the value of the ETag response header. Will be called with the response handler as parameter. May return None to prevent the ETag response header from being set. If not provided the last modified time of the file in question will be used as returned by get_content_version . required name_generator function Callback to call for generating the value of the attachment file name header. Will be called with the requested path as parameter. required mime_type_guesser function Callback to guess the mime type to use for the content type encoding of the response. Will be called with the requested path on disk as parameter. required is_pre_compressed bool if the file is expected to be pre-compressed, i.e, if there is a file in the same directory with the same name, but with '.gz' appended and gzip-encoded required","title":"LargeResponseHandler"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler.original_absolute_path","text":"The path of the uncompressed file corresponding to the compressed file","title":"original_absolute_path()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.LargeResponseHandler.streamed_get","text":"Version of StaticFileHandler.get that doesn't support ranges or ETag but streams the content. Helpful for files that might still change while being transmitted (e.g. log files)","title":"streamed_get()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.StaticDataHandler","text":"Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that returns static data of a configured content_type . Parameters: Name Type Description Default data str The data with which to respond required content_type str The content type with which to respond. Defaults to text/plain required","title":"StaticDataHandler"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler","text":"Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin A RequestHandler similar to tornado.web.FallbackHandler which fetches any files contained in the request bodies of content type multipart , stores them in temporary files and supplies the fallback with the file's name , content_type , path and size instead via a rewritten body. Basically similar to what the nginx upload module does. Basic request body example: .. code-block:: none ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file\"; filename=\"test.gcode\" Content-Type: application/octet-stream ... ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"apikey\" my_funny_apikey ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"select\" true ------WebKitFormBoundarypYiSUx63abAmhT5C-- That would get turned into: .. code-block:: none ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"apikey\" my_funny_apikey ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"select\" true ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.path\" Content-Type: text/plain; charset=utf-8 /tmp/tmpzupkro ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.name\" Content-Type: text/plain; charset=utf-8 test.gcode ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.content_type\" Content-Type: text/plain; charset=utf-8 application/octet-stream ------WebKitFormBoundarypYiSUx63abAmhT5C Content-Disposition: form-data; name=\"file.size\" Content-Type: text/plain; charset=utf-8 349182 ------WebKitFormBoundarypYiSUx63abAmhT5C-- The underlying application can then access the contained files via their respective paths and just move them where necessary.","title":"UploadStorageFallbackHandler"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.BODY_METHODS","text":"The request methods that may contain a request body.","title":"BODY_METHODS"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.data_received","text":"Called by Tornado on receiving a chunk of the request body. If request is a multipart request, takes care of processing the multipart data structure via :func: _process_multipart_data . If not, just adds the chunk to internal in-memory buffer. :param chunk: chunk of data received from Tornado","title":"data_received()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.is_multipart","text":"Checks whether this request is a multipart request","title":"is_multipart()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UploadStorageFallbackHandler.prepare","text":"Prepares the processing of the request. If it's a request that may contain a request body (as defined in :attr: UploadStorageFallbackHandler.BODY_METHODS ) prepares the multipart parsing if content type fits. If it's a body-less request, just calls the fallback with an empty body and finishes the request.","title":"prepare()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.UrlProxyHandler","text":"Bases: RequestlessExceptionLoggingMixin , CorsSupportMixin , tornado . web . RequestHandler tornado.web.RequestHandler <http://tornado.readthedocs.org/en/branch4.0/web.html#request-handlers> _ that proxies requests to a preconfigured url and returns the response. Allows delivery of the requested content as attachment and access validation through an optional callback. This will use tornado.httpclient.AsyncHTTPClient <http://tornado.readthedocs.org/en/branch4.0/httpclient.html#tornado.httpclient.AsyncHTTPClient> _ for making the request to the configured endpoint and return the body of the client response with the status code from the client response and the following headers Date , Cache-Control , Expires , ETag , Server , Content-Type and Location will be copied over. If as_attachment is set to True, Content-Disposition will be set to attachment . If basename is set including the attachment's filename attribute will be set to the base name followed by the extension guessed based on the MIME type from the Content-Type header of the response. If no extension can be guessed no filename attribute will be set. Parameters: Name Type Description Default url str URL to forward any requests to. A 404 response will be returned if this is not set. Defaults to None . required as_attachment bool Whether to serve files with Content-Disposition: attachment header ( True ) or not. Defaults to False . required basename str base name of file names to return as part of the attachment header, see above. Defaults to None . required access_validation function Callback to call in the get method to validate access to the resource. Will be called with self.request as parameter which contains the full tornado request object. Should raise a tornado.web.HTTPError if access is not allowed in which case the request will not be further processed. Defaults to None and hence no access validation being performed. required","title":"UrlProxyHandler"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer","text":"A WSGI container for use with Tornado that allows supplying the request body to be used for wsgi.input in the generated WSGI environment upon call. A RequestHandler can thus provide the WSGI application with a stream for the request body, or a modified body. Example usage: .. code-block:: python wsgi_app = octoprint.server.util.WsgiInputContainer(octoprint_app) application = tornado.web.Application([ (r\".*\", UploadStorageFallbackHandler, dict(fallback=wsgi_app), ]) The implementation logic is basically the same as tornado.wsgi.WSGIContainer but the __call__ and environ methods have been adjusted to allow for an optionally supplied body argument which is then used for wsgi.input .","title":"WsgiInputContainer"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer.__call__","text":"Wraps the call against the WSGI app, deriving the WSGI environment from the supplied Tornado HTTPServerRequest . :param request: the tornado.httpserver.HTTPServerRequest to derive the WSGI environment from :param body: an optional body to use as wsgi.input instead of request.body , can be a string or a stream","title":"__call__()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.WsgiInputContainer.environ","text":"Converts a tornado.httputil.HTTPServerRequest to a WSGI environment. An optional body to be used for populating wsgi.input can be supplied (either a string or a stream). If not supplied, request.body will be wrapped into a io.BytesIO stream and used instead. :param request: the tornado.httpserver.HTTPServerRequest to derive the WSGI environment from :param body: an optional body to use as wsgi.input instead of request.body , can be a string or a stream","title":"environ()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.access_validation_factory","text":"Creates an access validation wrapper using the supplied validator. :param validator: the access validator to use inside the validation wrapper :return: an access validator taking a request as parameter and performing the request validation","title":"access_validation_factory()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.enable_per_message_deflate_extension","text":"This configures tornado.websocket.WebSocketHandler.get_compression_options to support the permessage-deflate extension to the websocket protocol, minimizing data bandwidth if clients support the extension as well","title":"enable_per_message_deflate_extension()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.fix_json_encode","text":"This makes tornado.escape.json_encode use octoprint.util.JsonEncoding.encode as fallback in order to allow serialization of globally registered types like frozendict and others.","title":"fix_json_encode()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.fix_websocket_check_origin","text":"This fixes tornado.websocket.WebSocketHandler.check_origin to do the same origin check against the Host header case-insensitively, as defined in RFC6454, Section 4, item 5.","title":"fix_websocket_check_origin()"},{"location":"reference/octoprint/server/util/tornado/#octoprint.server.util.tornado.path_validation_factory","text":"Creates a request path validation wrapper returning the defined status code if the supplied path_filter returns False. :param path_filter: the path filter to use on the requested path, should return False for requests that should be responded with the provided error code. :return: a request path validator taking a request path as parameter and performing the request validation","title":"path_validation_factory()"},{"location":"reference/octoprint/server/util/watchdog/","text":"octoprint.server.util.watchdog # GcodeWatchdogHandler # Bases: watchdog . events . PatternMatchingEventHandler Takes care of automatically \"uploading\" files that get added to the watched folder.","title":"watchdog"},{"location":"reference/octoprint/server/util/watchdog/#octoprintserverutilwatchdog","text":"","title":"octoprint.server.util.watchdog"},{"location":"reference/octoprint/server/util/watchdog/#octoprint.server.util.watchdog.GcodeWatchdogHandler","text":"Bases: watchdog . events . PatternMatchingEventHandler Takes care of automatically \"uploading\" files that get added to the watched folder.","title":"GcodeWatchdogHandler"},{"location":"reference/octoprint/server/util/webassets/","text":"octoprint.server.util.webassets #","title":"webassets"},{"location":"reference/octoprint/server/util/webassets/#octoprintserverutilwebassets","text":"","title":"octoprint.server.util.webassets"},{"location":"reference/octoprint/settings/","text":"octoprint.settings # This module represents OctoPrint's settings management. Within this module the default settings for the core application are defined and the instance of the :class: Settings is held, which offers getter and setter methods for the raw configuration values as well as various convenience methods to access the paths to base folders of various types and the configuration file itself. .. autodata:: default_settings :annotation: = dict(...) .. autodata:: valid_boolean_trues .. autofunction:: settings .. autoclass:: Settings :members: :undoc-members: default_settings = _config . dict ( by_alias = True ) module-attribute # The default settings of the core application. valid_boolean_trues = CaseInsensitiveSet ( True , 'true' , 'yes' , 'y' , '1' , 1 ) module-attribute # Values that are considered to be equivalent to the boolean True value, used for type conversion in various places. HierarchicalChainMap # Stores a bunch of nested dictionaries in chain map, allowing queries of nested values work on lower directories. For example: Example example_dict = {\"a\": \"a\", \"b\": {\"c\": \"c\"}} hcm = HierarchicalChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm = ChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm \"b\" 'd' cm \"b\" Traceback (most recent call last): ... KeyError: 'c' hcm.get_by_path([\"b\", \"d\"]) 'd' hcm.get_by_path([\"b\", \"c\"]) 'c' all_layers () property # A list of all layers in this map. read-only bottom_map () property # The very bottom layer is the default layer top_map () property writable # This is the layer that is written to with_config_defaults ( config = None , defaults = None ) # Builds a new map with the following layers: provided config + any intermediary parents + provided defaults + regular defaults :param config: :param defaults: :return: Settings # The :class: Settings class allows managing all of OctoPrint's settings. It takes care of initializing the settings directory, loading the configuration from config.yaml , persisting changes to disk etc and provides access methods for getting and setting specific values from the overall settings structure via paths. A general word on the concept of paths, since they play an important role in OctoPrint's settings management. A path is basically a list or tuple consisting of keys to follow down into the settings (which are basically like a dict ) in order to set or retrieve a specific value (or more than one). For example, for a settings structure like the following:: serial: port: \"/dev/ttyACM0\" baudrate: 250000 timeout: communication: 20.0 temperature: 5.0 sdStatus: 1.0 connection: 10.0 server: host: \"0.0.0.0\" port: 5000 the following paths could be used: ========================================== ============================================================================ Path Value ========================================== ============================================================================ [\"serial\", \"port\"] :: \"/dev/ttyACM0\" [\"serial\", \"timeout\"] :: communication: 20.0 temperature: 5.0 sdStatus: 1.0 connection: 10.0 [\"serial\", \"timeout\", \"temperature\"] :: 5.0 [\"server\", \"port\"] :: 5000 ========================================== ============================================================================ However, these would be invalid paths: [\"key\"] , [\"serial\", \"port\", \"value\"] , [\"server\", \"host\", 3] . config () property # A view of the local config as stored in config.yaml Does not support modifications, they will be thrown away silently. If you need to modify anything in the settings, utilize the provided set and remove methods. last_modified () property # Returns: Type Description (int) The last modification time of the configuration file. settings ( init = False , basedir = None , configfile = None , overlays = None ) # Factory method for initially constructing and consecutively retrieving the :class: ~octoprint.settings.Settings singleton. Parameters: Name Type Description Default init boolean A flag indicating whether this is the initial call to construct the singleton (True) or not (False, default). If this is set to True and the plugin manager has already been initialized, a :class: ValueError will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False. False basedir str Path of the base directory for all of OctoPrint's settings, log files, uploads etc. If not set the default will be used: ~/.octoprint on Linux, %APPDATA%/OctoPrint on Windows and ~/Library/Application Support/OctoPrint on MacOS. None configfile str Path of the configuration file ( config.yaml ) to work on. If not set the default will be used: <basedir>/config.yaml for basedir as defined above. None overlays list List of paths to config overlays to put between default settings and config.yaml None Returns: Name Type Description Settings The fully initialized :class: Settings instance. Raises: Type Description ValueError init is True but settings are already initialized or vice versa.","title":"settings"},{"location":"reference/octoprint/settings/#octoprintsettings","text":"This module represents OctoPrint's settings management. Within this module the default settings for the core application are defined and the instance of the :class: Settings is held, which offers getter and setter methods for the raw configuration values as well as various convenience methods to access the paths to base folders of various types and the configuration file itself. .. autodata:: default_settings :annotation: = dict(...) .. autodata:: valid_boolean_trues .. autofunction:: settings .. autoclass:: Settings :members: :undoc-members:","title":"octoprint.settings"},{"location":"reference/octoprint/settings/#octoprint.settings.default_settings","text":"The default settings of the core application.","title":"default_settings"},{"location":"reference/octoprint/settings/#octoprint.settings.valid_boolean_trues","text":"Values that are considered to be equivalent to the boolean True value, used for type conversion in various places.","title":"valid_boolean_trues"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap","text":"Stores a bunch of nested dictionaries in chain map, allowing queries of nested values work on lower directories. For example: Example example_dict = {\"a\": \"a\", \"b\": {\"c\": \"c\"}} hcm = HierarchicalChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm = ChainMap({\"b\": {\"d\": \"d\"}}, example_dict) cm \"b\" 'd' cm \"b\" Traceback (most recent call last): ... KeyError: 'c' hcm.get_by_path([\"b\", \"d\"]) 'd' hcm.get_by_path([\"b\", \"c\"]) 'c'","title":"HierarchicalChainMap"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.all_layers","text":"A list of all layers in this map. read-only","title":"all_layers()"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.bottom_map","text":"The very bottom layer is the default layer","title":"bottom_map()"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.top_map","text":"This is the layer that is written to","title":"top_map()"},{"location":"reference/octoprint/settings/#octoprint.settings.HierarchicalChainMap.with_config_defaults","text":"Builds a new map with the following layers: provided config + any intermediary parents + provided defaults + regular defaults :param config: :param defaults: :return:","title":"with_config_defaults()"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings","text":"The :class: Settings class allows managing all of OctoPrint's settings. It takes care of initializing the settings directory, loading the configuration from config.yaml , persisting changes to disk etc and provides access methods for getting and setting specific values from the overall settings structure via paths. A general word on the concept of paths, since they play an important role in OctoPrint's settings management. A path is basically a list or tuple consisting of keys to follow down into the settings (which are basically like a dict ) in order to set or retrieve a specific value (or more than one). For example, for a settings structure like the following:: serial: port: \"/dev/ttyACM0\" baudrate: 250000 timeout: communication: 20.0 temperature: 5.0 sdStatus: 1.0 connection: 10.0 server: host: \"0.0.0.0\" port: 5000 the following paths could be used: ========================================== ============================================================================ Path Value ========================================== ============================================================================ [\"serial\", \"port\"] :: \"/dev/ttyACM0\" [\"serial\", \"timeout\"] :: communication: 20.0 temperature: 5.0 sdStatus: 1.0 connection: 10.0 [\"serial\", \"timeout\", \"temperature\"] :: 5.0 [\"server\", \"port\"] :: 5000 ========================================== ============================================================================ However, these would be invalid paths: [\"key\"] , [\"serial\", \"port\", \"value\"] , [\"server\", \"host\", 3] .","title":"Settings"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings.config","text":"A view of the local config as stored in config.yaml Does not support modifications, they will be thrown away silently. If you need to modify anything in the settings, utilize the provided set and remove methods.","title":"config()"},{"location":"reference/octoprint/settings/#octoprint.settings.Settings.last_modified","text":"Returns: Type Description (int) The last modification time of the configuration file.","title":"last_modified()"},{"location":"reference/octoprint/settings/#octoprint.settings.settings","text":"Factory method for initially constructing and consecutively retrieving the :class: ~octoprint.settings.Settings singleton. Parameters: Name Type Description Default init boolean A flag indicating whether this is the initial call to construct the singleton (True) or not (False, default). If this is set to True and the plugin manager has already been initialized, a :class: ValueError will be raised. The same will happen if the plugin manager has not yet been initialized and this is set to False. False basedir str Path of the base directory for all of OctoPrint's settings, log files, uploads etc. If not set the default will be used: ~/.octoprint on Linux, %APPDATA%/OctoPrint on Windows and ~/Library/Application Support/OctoPrint on MacOS. None configfile str Path of the configuration file ( config.yaml ) to work on. If not set the default will be used: <basedir>/config.yaml for basedir as defined above. None overlays list List of paths to config overlays to put between default settings and config.yaml None Returns: Name Type Description Settings The fully initialized :class: Settings instance. Raises: Type Description ValueError init is True but settings are already initialized or vice versa.","title":"settings()"},{"location":"reference/octoprint/slicing/","text":"octoprint.slicing # In this module the slicing support of OctoPrint is encapsulated. .. autoclass:: SlicingProfile :members: .. autoclass:: TemporaryProfile :members: .. autoclass:: SlicingManager :members: SlicingManager # The :class: SlicingManager is responsible for managing available slicers and slicing profiles. Parameters: Name Type Description Default profile_path str Absolute path to the base folder where all slicing profiles are stored. required printer_profile_manager ~ octoprint . printer . profile . PrinterProfileManager :class: ~octoprint.printer.profile.PrinterProfileManager instance to use for accessing available printer profiles, most importantly the currently selected one. required all_profiles ( slicer , require_configured = False ) # Retrieves all profiles for slicer slicer . If require_configured is set to True (default is False), only will return the profiles if the slicer is already configured, otherwise a :class: SlicerNotConfigured exception will be raised. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to retrieve all slicer profiles required require_configured boolean Whether to require the slicer slicer to be already configured (True) or not (False, default). If False and the slicer is not yet configured, a :class: ~octoprint.slicing.exceptions.SlicerNotConfigured exception will be raised. False Returns: Type Description dict of SlicingProfile: A dict of all :class: SlicingProfile instances available for the slicer slicer , mapped by the identifier. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer slicer is not configured and require_configured was True. cancel_slicing ( slicer_name , source_path , dest_path ) # Cancels the slicing job on slicer slicer_name from source_path to dest_path . Parameters: Name Type Description Default slicer_name str Identifier of the slicer on which to cancel the job. required source_path str The absolute path to the source file being sliced. required dest_path str The absolute path to the destination file being sliced to. required Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer_name is unknown. configured_slicers () property # Returns: Type Description (list of str) Identifiers of all available configured slicers. default_slicer () property # Retrieves the default slicer. Returns: Type Description (str) The identifier of the default slicer or None if the default slicer is not registered in the system. delete_profile ( slicer , name ) # Deletes the profile name for the specified slicer . If the profile does not exist, nothing will happen. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to delete the profile. required name str Identifier of the profile to delete. required Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . CouldNotDeleteProfile There was an error while deleting the profile. get_profile_path ( slicer , name , must_exist = False ) # Retrieves the path to the profile named name for slicer slicer . If must_exist is set to True (defaults to False) a :class: UnknownProfile exception will be raised if the profile doesn't exist yet. Parameters: Name Type Description Default slicer str Identifier of the slicer to which the profile belongs to. required name str Identifier of the profile for which to retrieve the path. required must_exist boolean Whether the path must exist (True) or not (False, default). False Returns: Name Type Description str The absolute path to the profile identified by name for slicer slicer . Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . UnknownProfile The profile named name doesn't exist and must_exist was True. get_slicer ( slicer , require_configured = True ) # Retrieves the slicer named slicer . If require_configured is set to True (the default) an exception will be raised if the slicer is not yet configured. Parameters: Name Type Description Default slicer str Identifier of the slicer to return required require_configured boolean Whether to raise an exception if the slicer has not been configured yet (True, the default), or also return an unconfigured slicer (False). True Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer is not yet configured and require_configured was set to True. get_slicer_profile_path ( slicer ) # Retrieves the path where the profiles for slicer slicer are stored. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to retrieve the path. required Returns: Name Type Description str The absolute path to the folder where the slicer's profiles are stored. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. initialize () # Initializes the slicing manager by loading and initializing all available :class: ~octoprint.plugin.SlicerPlugin implementations. load_profile ( slicer , name , require_configured = True ) # Loads the slicing profile for slicer with the given profile name and returns it. If it can't be loaded due to an :class: IOError None will be returned instead. If require_configured is True (the default) a :class: SlicerNotConfigured exception will be raised if the indicated slicer has not yet been configured. Returns: Name Type Description SlicingProfile The requested slicing profile or None if it could not be loaded. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer specified via slicer has not yet been configured and require_configured was True. ~ octoprint . slicing . exceptions . UnknownProfile The profile for slicer slicer named name does not exist. profiles_last_modified ( slicer ) # Retrieves the last modification date of slicer 's profiles. Parameters: Name Type Description Default slicer str the slicer for which to retrieve the last modification date required Returns: Type Description (float) the time stamp of the last modification of the slicer's profiles registered_slicers () property # Returns: Type Description (list of str) Identifiers of all available slicers. reload_slicers () # Retrieves all registered :class: ~octoprint.plugin.SlicerPlugin implementations and registers them as available slicers. save_profile ( slicer , name , profile , overrides = None , allow_overwrite = True , display_name = None , description = None ) # Saves the slicer profile profile for slicer slicer under name name . profile may be either a :class: SlicingProfile or a :class: dict . If it's a :class: SlicingProfile , its :attr: ~SlicingProfile.slicer``, :attr: ~SlicingProfile.name and - if provided - :attr: ~SlicingProfile.display_name and :attr: ~SlicingProfile.description` attributes will be overwritten with the supplied values. If it's a :class: dict , a new :class: SlicingProfile instance will be created with the supplied meta data and the profile data as the :attr: ~SlicingProfile.data attribute. .. note:: If the profile is the first profile to be saved for the slicer, it will automatically be marked as default. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to save the profile . required name str Identifier under which to save the profile . required profile SlicingProfile or dict The :class: SlicingProfile or a :class: dict containing the profile data of the profile the save. required overrides dict Overrides to apply to the profile before saving it. None allow_overwrite boolean If True (default) if a profile for the same slicer of the same name already exists, it will be overwritten. Otherwise an exception will be thrown. True display_name str The name to display to the user for the profile. None description str A description of the profile. None Returns: Name Type Description SlicingProfile The saved profile (including the applied overrides). Raises: Type Description ValueError The supplied profile is neither a :class: SlicingProfile nor a :class: dict . ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . ProfileAlreadyExists A profile with name name already exists for slicer and allow_overwrite is False. set_default_profile ( slicer , name , require_configured = False , require_exists = True ) # Sets the given profile as default profile for the slicer. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to set the default profile. required name str Identifier of the profile to set as default. required require_configured bool Whether the slicer needs to be configured for the action to succeed. Defaults to false. Will raise a SlicerNotConfigured error if true and the slicer has not been configured yet. False require_exists bool Whether the profile is required to exist in order to be set as default. Defaults to true. Will raise a UnknownProfile error if true and the profile is unknown. True Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer slicer has not yet been configured and require_configured was true. ~ octoprint . slicing . exceptions . UnknownProfile The profile name was unknown for slicer slicer and require_exists was true. slice ( slicer_name , source_path , dest_path , profile_name , callback , callback_args = None , callback_kwargs = None , overrides = None , on_progress = None , on_progress_args = None , on_progress_kwargs = None , printer_profile_id = None , position = None ) # Slices source_path to dest_path using slicer slicer_name and slicing profile profile_name . Since slicing happens asynchronously, callback will be called when slicing has finished (either successfully or not), with callback_args and callback_kwargs supplied. If callback_args is left out, an empty argument list will be assumed for the callback. If callback_kwargs is left out, likewise an empty keyword argument list will be assumed for the callback. Note that in any case the callback must support being called with the following optional keyword arguments: _analysis If the slicer returned analysis data of the created machine code as part of its slicing result, this keyword argument will contain that data. _error If there was an error while slicing this keyword argument will contain the error message as returned from the slicer. _cancelled If the slicing job was cancelled this keyword argument will be set to True. Additionally callees may specify overrides for the specified slicing profile, e.g. a different extrusion temperature than defined in the profile or a different layer height. With on_progress , on_progress_args and on_progress_kwargs , callees may specify a callback plus arguments and keyword arguments to call upon progress reports from the slicing job. The progress callback will be called with a keyword argument _progress containing the current slicing progress as a value between 0 and 1 plus all additionally specified args and kwargs. If a different printer profile than the currently selected one is to be used for slicing, its id can be provided via the keyword argument printer_profile_id . If the source_path is to be a sliced at a different position than the print bed center, this position can be supplied as a dictionary defining the x and y coordinate in print bed coordinates of the model's center. Parameters: Name Type Description Default slicer_name str The identifier of the slicer to use for slicing. required source_path str The absolute path to the source file to slice. required dest_path str The absolute path to the destination file to slice to. required profile_name str The name of the slicing profile to use. required callback callable A callback to call after slicing has finished. required callback_args list or tuple Arguments of the callback to call after slicing has finished. Defaults to an empty list. None callback_kwargs dict Keyword arguments for the callback to call after slicing has finished, will be extended by _analysis , _error or _cancelled as described above! Defaults to an empty dictionary. None overrides dict Overrides for the printer profile to apply. None on_progress callable Callback to call upon slicing progress. None on_progress_args list or tuple Arguments of the progress callback. Defaults to an empty list. None on_progress_kwargs dict Keyword arguments of the progress callback, will be extended by _progress as described above! Defaults to an empty dictionary. None printer_profile_id str Identifier of the printer profile for which to slice, if another than the one currently selected is to be used. None position dict Dictionary containing the x and y coordinate in the print bed's coordinate system of the sliced model's center. If not provided the model will be positioned at the print bed's center. Example: dict(x=10,y=20) . None Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer_name is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slice specified via slicer_name is not configured yet. slicing_enabled () property # Returns: Type Description (boolean) True if there is at least one configured slicer available, False otherwise. SlicingProfile # A wrapper for slicing profiles, both meta data and actual profile data. Parameters: Name Type Description Default slicer str Identifier of the slicer this profile belongs to. required name str Identifier of this slicing profile. required data object Profile data, actual structure depends on individual slicer implementation. required display_name str Displayable name for this slicing profile. None description str Description of this slicing profile. None default bool Whether this is the default slicing profile for the slicer. False TemporaryProfile # A wrapper for a temporary slicing profile to be used for a slicing job, based on a :class: SlicingProfile with optional overrides applied through the supplied save_profile method. Usage example: .. code-block:: python temporary = TemporaryProfile(my_slicer.save_slicer_profile, my_default_profile, overrides=my_overrides) with (temporary) as profile_path: my_slicer.do_slice(..., profile_path=profile_path, ...) Parameters: Name Type Description Default save_profile callable Method to use for saving the temporary profile, also responsible for applying the supplied overrides . This will be called according to the method signature of :meth: ~octoprint.plugin.SlicerPlugin.save_slicer_profile . required profile SlicingProfile The profile from which to derive the temporary profile. required overrides dict Optional overrides to apply to the profile for creation of the temporary profile. None","title":"octoprint.slicing"},{"location":"reference/octoprint/slicing/#octoprintslicing","text":"In this module the slicing support of OctoPrint is encapsulated. .. autoclass:: SlicingProfile :members: .. autoclass:: TemporaryProfile :members: .. autoclass:: SlicingManager :members:","title":"octoprint.slicing"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager","text":"The :class: SlicingManager is responsible for managing available slicers and slicing profiles. Parameters: Name Type Description Default profile_path str Absolute path to the base folder where all slicing profiles are stored. required printer_profile_manager ~ octoprint . printer . profile . PrinterProfileManager :class: ~octoprint.printer.profile.PrinterProfileManager instance to use for accessing available printer profiles, most importantly the currently selected one. required","title":"SlicingManager"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.all_profiles","text":"Retrieves all profiles for slicer slicer . If require_configured is set to True (default is False), only will return the profiles if the slicer is already configured, otherwise a :class: SlicerNotConfigured exception will be raised. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to retrieve all slicer profiles required require_configured boolean Whether to require the slicer slicer to be already configured (True) or not (False, default). If False and the slicer is not yet configured, a :class: ~octoprint.slicing.exceptions.SlicerNotConfigured exception will be raised. False Returns: Type Description dict of SlicingProfile: A dict of all :class: SlicingProfile instances available for the slicer slicer , mapped by the identifier. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer slicer is not configured and require_configured was True.","title":"all_profiles()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.cancel_slicing","text":"Cancels the slicing job on slicer slicer_name from source_path to dest_path . Parameters: Name Type Description Default slicer_name str Identifier of the slicer on which to cancel the job. required source_path str The absolute path to the source file being sliced. required dest_path str The absolute path to the destination file being sliced to. required Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer_name is unknown.","title":"cancel_slicing()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.configured_slicers","text":"Returns: Type Description (list of str) Identifiers of all available configured slicers.","title":"configured_slicers()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.default_slicer","text":"Retrieves the default slicer. Returns: Type Description (str) The identifier of the default slicer or None if the default slicer is not registered in the system.","title":"default_slicer()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.delete_profile","text":"Deletes the profile name for the specified slicer . If the profile does not exist, nothing will happen. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to delete the profile. required name str Identifier of the profile to delete. required Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . CouldNotDeleteProfile There was an error while deleting the profile.","title":"delete_profile()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_profile_path","text":"Retrieves the path to the profile named name for slicer slicer . If must_exist is set to True (defaults to False) a :class: UnknownProfile exception will be raised if the profile doesn't exist yet. Parameters: Name Type Description Default slicer str Identifier of the slicer to which the profile belongs to. required name str Identifier of the profile for which to retrieve the path. required must_exist boolean Whether the path must exist (True) or not (False, default). False Returns: Name Type Description str The absolute path to the profile identified by name for slicer slicer . Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . UnknownProfile The profile named name doesn't exist and must_exist was True.","title":"get_profile_path()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_slicer","text":"Retrieves the slicer named slicer . If require_configured is set to True (the default) an exception will be raised if the slicer is not yet configured. Parameters: Name Type Description Default slicer str Identifier of the slicer to return required require_configured boolean Whether to raise an exception if the slicer has not been configured yet (True, the default), or also return an unconfigured slicer (False). True Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer is not yet configured and require_configured was set to True.","title":"get_slicer()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.get_slicer_profile_path","text":"Retrieves the path where the profiles for slicer slicer are stored. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to retrieve the path. required Returns: Name Type Description str The absolute path to the folder where the slicer's profiles are stored. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown.","title":"get_slicer_profile_path()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.initialize","text":"Initializes the slicing manager by loading and initializing all available :class: ~octoprint.plugin.SlicerPlugin implementations.","title":"initialize()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.load_profile","text":"Loads the slicing profile for slicer with the given profile name and returns it. If it can't be loaded due to an :class: IOError None will be returned instead. If require_configured is True (the default) a :class: SlicerNotConfigured exception will be raised if the indicated slicer has not yet been configured. Returns: Name Type Description SlicingProfile The requested slicing profile or None if it could not be loaded. Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer specified via slicer has not yet been configured and require_configured was True. ~ octoprint . slicing . exceptions . UnknownProfile The profile for slicer slicer named name does not exist.","title":"load_profile()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.profiles_last_modified","text":"Retrieves the last modification date of slicer 's profiles. Parameters: Name Type Description Default slicer str the slicer for which to retrieve the last modification date required Returns: Type Description (float) the time stamp of the last modification of the slicer's profiles","title":"profiles_last_modified()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.registered_slicers","text":"Returns: Type Description (list of str) Identifiers of all available slicers.","title":"registered_slicers()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.reload_slicers","text":"Retrieves all registered :class: ~octoprint.plugin.SlicerPlugin implementations and registers them as available slicers.","title":"reload_slicers()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.save_profile","text":"Saves the slicer profile profile for slicer slicer under name name . profile may be either a :class: SlicingProfile or a :class: dict . If it's a :class: SlicingProfile , its :attr: ~SlicingProfile.slicer``, :attr: ~SlicingProfile.name and - if provided - :attr: ~SlicingProfile.display_name and :attr: ~SlicingProfile.description` attributes will be overwritten with the supplied values. If it's a :class: dict , a new :class: SlicingProfile instance will be created with the supplied meta data and the profile data as the :attr: ~SlicingProfile.data attribute. .. note:: If the profile is the first profile to be saved for the slicer, it will automatically be marked as default. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to save the profile . required name str Identifier under which to save the profile . required profile SlicingProfile or dict The :class: SlicingProfile or a :class: dict containing the profile data of the profile the save. required overrides dict Overrides to apply to the profile before saving it. None allow_overwrite boolean If True (default) if a profile for the same slicer of the same name already exists, it will be overwritten. Otherwise an exception will be thrown. True display_name str The name to display to the user for the profile. None description str A description of the profile. None Returns: Name Type Description SlicingProfile The saved profile (including the applied overrides). Raises: Type Description ValueError The supplied profile is neither a :class: SlicingProfile nor a :class: dict . ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown. ~ octoprint . slicing . exceptions . ProfileAlreadyExists A profile with name name already exists for slicer and allow_overwrite is False.","title":"save_profile()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.set_default_profile","text":"Sets the given profile as default profile for the slicer. Parameters: Name Type Description Default slicer str Identifier of the slicer for which to set the default profile. required name str Identifier of the profile to set as default. required require_configured bool Whether the slicer needs to be configured for the action to succeed. Defaults to false. Will raise a SlicerNotConfigured error if true and the slicer has not been configured yet. False require_exists bool Whether the profile is required to exist in order to be set as default. Defaults to true. Will raise a UnknownProfile error if true and the profile is unknown. True Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer slicer is unknown ~ octoprint . slicing . exceptions . SlicerNotConfigured The slicer slicer has not yet been configured and require_configured was true. ~ octoprint . slicing . exceptions . UnknownProfile The profile name was unknown for slicer slicer and require_exists was true.","title":"set_default_profile()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.slice","text":"Slices source_path to dest_path using slicer slicer_name and slicing profile profile_name . Since slicing happens asynchronously, callback will be called when slicing has finished (either successfully or not), with callback_args and callback_kwargs supplied. If callback_args is left out, an empty argument list will be assumed for the callback. If callback_kwargs is left out, likewise an empty keyword argument list will be assumed for the callback. Note that in any case the callback must support being called with the following optional keyword arguments: _analysis If the slicer returned analysis data of the created machine code as part of its slicing result, this keyword argument will contain that data. _error If there was an error while slicing this keyword argument will contain the error message as returned from the slicer. _cancelled If the slicing job was cancelled this keyword argument will be set to True. Additionally callees may specify overrides for the specified slicing profile, e.g. a different extrusion temperature than defined in the profile or a different layer height. With on_progress , on_progress_args and on_progress_kwargs , callees may specify a callback plus arguments and keyword arguments to call upon progress reports from the slicing job. The progress callback will be called with a keyword argument _progress containing the current slicing progress as a value between 0 and 1 plus all additionally specified args and kwargs. If a different printer profile than the currently selected one is to be used for slicing, its id can be provided via the keyword argument printer_profile_id . If the source_path is to be a sliced at a different position than the print bed center, this position can be supplied as a dictionary defining the x and y coordinate in print bed coordinates of the model's center. Parameters: Name Type Description Default slicer_name str The identifier of the slicer to use for slicing. required source_path str The absolute path to the source file to slice. required dest_path str The absolute path to the destination file to slice to. required profile_name str The name of the slicing profile to use. required callback callable A callback to call after slicing has finished. required callback_args list or tuple Arguments of the callback to call after slicing has finished. Defaults to an empty list. None callback_kwargs dict Keyword arguments for the callback to call after slicing has finished, will be extended by _analysis , _error or _cancelled as described above! Defaults to an empty dictionary. None overrides dict Overrides for the printer profile to apply. None on_progress callable Callback to call upon slicing progress. None on_progress_args list or tuple Arguments of the progress callback. Defaults to an empty list. None on_progress_kwargs dict Keyword arguments of the progress callback, will be extended by _progress as described above! Defaults to an empty dictionary. None printer_profile_id str Identifier of the printer profile for which to slice, if another than the one currently selected is to be used. None position dict Dictionary containing the x and y coordinate in the print bed's coordinate system of the sliced model's center. If not provided the model will be positioned at the print bed's center. Example: dict(x=10,y=20) . None Raises: Type Description ~ octoprint . slicing . exceptions . UnknownSlicer The slicer specified via slicer_name is unknown. ~ octoprint . slicing . exceptions . SlicerNotConfigured The slice specified via slicer_name is not configured yet.","title":"slice()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingManager.slicing_enabled","text":"Returns: Type Description (boolean) True if there is at least one configured slicer available, False otherwise.","title":"slicing_enabled()"},{"location":"reference/octoprint/slicing/#octoprint.slicing.SlicingProfile","text":"A wrapper for slicing profiles, both meta data and actual profile data. Parameters: Name Type Description Default slicer str Identifier of the slicer this profile belongs to. required name str Identifier of this slicing profile. required data object Profile data, actual structure depends on individual slicer implementation. required display_name str Displayable name for this slicing profile. None description str Description of this slicing profile. None default bool Whether this is the default slicing profile for the slicer. False","title":"SlicingProfile"},{"location":"reference/octoprint/slicing/#octoprint.slicing.TemporaryProfile","text":"A wrapper for a temporary slicing profile to be used for a slicing job, based on a :class: SlicingProfile with optional overrides applied through the supplied save_profile method. Usage example: .. code-block:: python temporary = TemporaryProfile(my_slicer.save_slicer_profile, my_default_profile, overrides=my_overrides) with (temporary) as profile_path: my_slicer.do_slice(..., profile_path=profile_path, ...) Parameters: Name Type Description Default save_profile callable Method to use for saving the temporary profile, also responsible for applying the supplied overrides . This will be called according to the method signature of :meth: ~octoprint.plugin.SlicerPlugin.save_slicer_profile . required profile SlicingProfile The profile from which to derive the temporary profile. required overrides dict Optional overrides to apply to the profile for creation of the temporary profile. None","title":"TemporaryProfile"},{"location":"reference/octoprint/slicing/exceptions/","text":"octoprint.slicing.exceptions # Slicing related exceptions. .. autoclass:: SlicingException .. autoclass:: SlicingCancelled :show-inheritance: .. autoclass:: SlicerException :show-inheritance: .. autoclass:: UnknownSlicer :show-inheritance: .. autoclass:: SlicerNotConfigured :show-inheritance: .. autoclass:: ProfileException .. autoclass:: UnknownProfile :show-inheritance: .. autoclass:: ProfileAlreadyExists :show-inheritance: CouldNotDeleteProfile # Bases: ProfileException Raised if there is an unexpected error trying to delete a known profile. ProfileAlreadyExists # Bases: ProfileException Raised if a slicing profile already exists and must not be overwritten. ProfileException # Bases: Exception Base exception of all slicing profile related exceptions. .. attribute:: slicer Identifier of the slicer to which the profile belongs. .. attribute:: profile Identifier of the profile for which the exception was raised. SlicerException # Bases: SlicingException Base exception of all slicer related exceptions. .. attribute:: slicer Identifier of the slicer for which the exception was raised. SlicerNotConfigured # Bases: SlicerException Raised if a slicer is not yet configured but must be configured to proceed. SlicingCancelled # Bases: SlicingException Raised if a slicing job was cancelled. SlicingException # Bases: Exception Base exception of all slicing related exceptions. UnknownProfile # Bases: ProfileException Raised if a slicing profile does not exist but must exist to proceed. UnknownSlicer # Bases: SlicerException Raised if a slicer is unknown.","title":"exceptions"},{"location":"reference/octoprint/slicing/exceptions/#octoprintslicingexceptions","text":"Slicing related exceptions. .. autoclass:: SlicingException .. autoclass:: SlicingCancelled :show-inheritance: .. autoclass:: SlicerException :show-inheritance: .. autoclass:: UnknownSlicer :show-inheritance: .. autoclass:: SlicerNotConfigured :show-inheritance: .. autoclass:: ProfileException .. autoclass:: UnknownProfile :show-inheritance: .. autoclass:: ProfileAlreadyExists :show-inheritance:","title":"octoprint.slicing.exceptions"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.CouldNotDeleteProfile","text":"Bases: ProfileException Raised if there is an unexpected error trying to delete a known profile.","title":"CouldNotDeleteProfile"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.ProfileAlreadyExists","text":"Bases: ProfileException Raised if a slicing profile already exists and must not be overwritten.","title":"ProfileAlreadyExists"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.ProfileException","text":"Bases: Exception Base exception of all slicing profile related exceptions. .. attribute:: slicer Identifier of the slicer to which the profile belongs. .. attribute:: profile Identifier of the profile for which the exception was raised.","title":"ProfileException"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicerException","text":"Bases: SlicingException Base exception of all slicer related exceptions. .. attribute:: slicer Identifier of the slicer for which the exception was raised.","title":"SlicerException"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicerNotConfigured","text":"Bases: SlicerException Raised if a slicer is not yet configured but must be configured to proceed.","title":"SlicerNotConfigured"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicingCancelled","text":"Bases: SlicingException Raised if a slicing job was cancelled.","title":"SlicingCancelled"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.SlicingException","text":"Bases: Exception Base exception of all slicing related exceptions.","title":"SlicingException"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.UnknownProfile","text":"Bases: ProfileException Raised if a slicing profile does not exist but must exist to proceed.","title":"UnknownProfile"},{"location":"reference/octoprint/slicing/exceptions/#octoprint.slicing.exceptions.UnknownSlicer","text":"Bases: SlicerException Raised if a slicer is unknown.","title":"UnknownSlicer"},{"location":"reference/octoprint/systemcommands/","text":"octoprint.systemcommands # This module represents OctoPrint's system and server commands.","title":"systemcommands"},{"location":"reference/octoprint/systemcommands/#octoprintsystemcommands","text":"This module represents OctoPrint's system and server commands.","title":"octoprint.systemcommands"},{"location":"reference/octoprint/util/","text":"octoprint.util # This module bundles commonly used utility methods or helper classes that are used in multiple places within OctoPrint's source code. deprecated = warning_decorator_factory ( DeprecationWarning ) module-attribute # A decorator for deprecated methods. Logs a deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. If both since and includedoc are provided, a deprecation warning will also be added to the function's docstring by providing or extending its __doc__ property. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required includedoc string Message about the deprecation to include in the wrapped function's docstring. required extenddoc boolean If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message. required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description function The wrapped function with the deprecation warnings in place. pending_deprecation = warning_decorator_factory ( PendingDeprecationWarning ) module-attribute # A decorator for methods pending deprecation. Logs a pending deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. If both since and includedoc are provided, a deprecation warning will also be added to the function's docstring by providing or extending its __doc__ property. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required extenddoc boolean If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message. required includedoc string Message about the deprecation to include in the wrapped function's docstring. required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description function The wrapped function with the deprecation warnings in place. variable_deprecated = warning_factory ( DeprecationWarning ) module-attribute # A function for deprecated variables. Logs a deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description value The value of the variable with the deprecation warnings in place. variable_pending_deprecation = warning_factory ( PendingDeprecationWarning ) module-attribute # A decorator for variables pending deprecation. Logs a pending deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description value The value of the variable with the deprecation warnings in place. CaseInsensitiveSet # Bases: Set Basic case insensitive set Any str values will be stored and compared in lower case. Other value types are left as-is. RepeatedTimer # Bases: threading . Thread This class represents an action that should be run repeatedly in an interval. It is similar to python's own :class: threading.Timer class, but instead of only running once the function will be run again and again, sleeping the stated interval in between. RepeatedTimers are started, as with threads, by calling their start() method. The timer can be stopped (in between runs) by calling the :func: cancel method. The interval the time waited before execution of a loop may not be exactly the same as the interval specified by the user. For example: .. code-block:: python def hello(): print(\"Hello World!\") t = RepeatedTimer(1.0, hello) t.start() # prints \"Hello World!\" every second Another example with dynamic interval and loop condition: .. code-block:: python count = 0 maximum = 5 factor = 1 def interval(): global count global factor return count * factor def condition(): global count global maximum return count <= maximum def hello(): print(\"Hello World!\") global count count += 1 t = RepeatedTimer(interval, hello, run_first=True, condition=condition) t.start() # prints \"Hello World!\" 5 times, printing the first one # directly, then waiting 1, 2, 3, 4s in between (adaptive interval) Parameters: Name Type Description Default interval float or callable The interval between each function call, in seconds. Can also be a callable returning the interval to use, in case the interval is not static. required function callable The function to call. required args list or tuple The arguments for the function call. Defaults to an empty list. None kwargs dict The keyword arguments for the function call. Defaults to an empty dict. None run_first boolean If set to True, the function will be run for the first time before the first wait period. If set to False (the default), the function will be run for the first time after the first wait period. False condition callable Condition that needs to be True for loop to continue. Defaults to lambda: True . None on_condition_false callable Callback to call when the timer finishes due to condition becoming false. Will be called before the on_finish callback. None on_cancelled callable Callback to call when the timer finishes due to being cancelled. Will be called before the on_finish callback. None on_finish callable Callback to call when the timer finishes, either due to being cancelled or since the condition became false. None daemon bool daemon flag to set on underlying thread. True ResettableTimer # Bases: threading . Thread This class represents an action that should be run after a specified amount of time. It is similar to python's own :class: threading.Timer class, with the addition of being able to reset the counter to zero. ResettableTimers are started, as with threads, by calling their start() method. The timer can be stopped (in between runs) by calling the :func: cancel method. Resetting the counter can be done with the :func: reset method. For example: .. code-block:: python def hello(): print(\"Ran hello() at {}\").format(time.time()) t = ResettableTimer(60.0, hello) t.start() print(\"Started at {}\").format(time.time()) time.sleep(30) t.reset() print(\"Reset at {}\").format(time.time()) Parameters: Name Type Description Default interval float or callable The interval before calling function , in seconds. Can also be a callable returning the interval to use, in case the interval is not static. required function callable The function to call. required args list or tuple The arguments for the function call. Defaults to an empty list. None kwargs dict The keyword arguments for the function call. Defaults to an empty dict. None on_cancelled callable Callback to call when the timer finishes due to being cancelled. None on_reset callable Callback to call when the timer is reset. None daemon bool daemon flag to set on underlying thread. True chunks ( l , n ) # Yield successive n-sized chunks from l. Taken from http://stackoverflow.com/a/312464/2028598 count ( gen ) # Used instead of len(generator), which doesn't work deserialize ( filename , encoding = 'utf-8' ) # Deserializes data from a file In the current implementation this uses json.loads and - if the file is found to be compressed - zlib.decompress. Parameters: Name Type Description Default filename str The file to deserialize from required encoding str The encoding to use for the file, defaults to utf-8 'utf-8' Returns: Type Description The deserialized data structure dict_contains_keys ( keys , dictionary ) # Recursively deep-checks if dictionary contains all keys found in keys . Example:: >>> positive = dict(foo=\"some_other_bar\", fnord=dict(b=100)) >>> negative = dict(foo=\"some_other_bar\", fnord=dict(b=100, d=20)) >>> dictionary = dict(foo=\"bar\", fnord=dict(a=1, b=2, c=3)) >>> dict_contains_keys(positive, dictionary) True >>> dict_contains_keys(negative, dictionary) False Parameters: Name Type Description Default a dict The dictionary to check for the keys from b . required b dict The dictionary whose keys to check a for. required Returns: Name Type Description boolean True if all keys found in b are also present in a , False otherwise. dict_filter ( dictionary , filter_function ) # Filters a dictionary with the provided filter_function Example:: >>> data = dict(key1=\"value1\", key2=\"value2\", other_key=\"other_value\", foo=\"bar\", bar=\"foo\") >>> dict_filter(data, lambda k, v: k.startswith(\"key\")) == dict(key1=\"value1\", key2=\"value2\") True >>> dict_filter(data, lambda k, v: v.startswith(\"value\")) == dict(key1=\"value1\", key2=\"value2\") True >>> dict_filter(data, lambda k, v: k == \"foo\" or v == \"foo\") == dict(foo=\"bar\", bar=\"foo\") True >>> dict_filter(data, lambda k, v: False) == dict() True >>> dict_filter(data, lambda k, v: True) == data True >>> dict_filter(None, lambda k, v: True) Traceback (most recent call last): ... AssertionError >>> dict_filter(data, None) Traceback (most recent call last): ... AssertionError Parameters: Name Type Description Default dictionary dict The dictionary to filter required filter_function callable The filter function to apply, called with key and value of an entry in the dictionary, must return True for values to keep and False for values to strip required Returns: Name Type Description dict A shallow copy of the provided dictionary, stripped of the key-value-pairs for which the filter_function returned False dict_flatten ( dictionary , prefix = '' , separator = '.' ) # Flatten a dictionary. Example:: >>> data = {'a': {'a1': 'a1', 'a2': 'a2'}, 'b': 'b'} >>> expected = {'a.a1': 'a1', 'a.a2': 'a2', 'b': 'b'} >>> actual = dict_flatten(data) >>> shared = {(k, actual[k]) for k in actual if k in expected and actual[k] == expected[k]} >>> len(shared) == len(expected) True Parameters: Name Type Description Default dictionary the dictionary to flatten required prefix the key prefix, initially an empty string '' separator key separator, '.' by default '.' dict_merge ( a , b , leaf_merger = None , in_place = False ) # Recursively deep-merges two dictionaries. Based on https://www.xormedia.com/recursively-merge-dictionaries-in-python/ Example:: >>> a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1)) >>> b = dict(foo=\"other foo\", fnord=dict(b=2, l=[\"some\", \"list\"])) >>> expected = dict(foo=\"other foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"])) >>> dict_merge(a, b) == expected True >>> dict_merge(a, None) == a True >>> dict_merge(None, b) == b True >>> dict_merge(None, None) == dict() True >>> def leaf_merger(a, b): ... if isinstance(a, list) and isinstance(b, list): ... return a + b ... raise ValueError() >>> result = dict_merge(dict(l1=[3, 4], l2=[1], a=\"a\"), dict(l1=[1, 2], l2=\"foo\", b=\"b\"), leaf_merger=leaf_merger) >>> result.get(\"l1\") == [3, 4, 1, 2] True >>> result.get(\"l2\") == \"foo\" True >>> result.get(\"a\") == \"a\" True >>> result.get(\"b\") == \"b\" True >>> c = dict(foo=\"foo\") >>> dict_merge(c, {\"bar\": \"bar\"}) is c False >>> dict_merge(c, {\"bar\": \"bar\"}, in_place=True) is c True Parameters: Name Type Description Default a dict The dictionary to merge b into required b dict The dictionary to merge into a required leaf_merger callable An optional callable to use to merge leaves (non-dict values) None in_place boolean If set to True, a will be merged with b in place, meaning a will be modified False Returns: Name Type Description dict b deep-merged into a dict_minimal_mergediff ( source , target ) # Recursively calculates the minimal dict that would be needed to be deep merged with a in order to produce the same result as deep merging a and b. Example:: >>> a = dict(foo=dict(a=1, b=2), bar=dict(c=3, d=4)) >>> b = dict(bar=dict(c=3, d=5), fnord=None) >>> c = dict_minimal_mergediff(a, b) >>> c == dict(bar=dict(d=5), fnord=None) True >>> dict_merge(a, c) == dict_merge(a, b) True Parameters: Name Type Description Default source dict Source dictionary required target dict Dictionary to compare to source dictionary and derive diff for required Returns: Name Type Description dict The minimal dictionary to deep merge on source to get the same result as deep merging target on source . dict_sanitize ( a , b ) # Recursively deep-sanitizes a based on b , removing all keys (and associated values) from a that do not appear in b . Example:: >>> a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"])) >>> b = dict(foo=None, fnord=dict(a=None, b=None)) >>> expected = dict(foo=\"foo\", fnord=dict(a=1, b=2)) >>> dict_sanitize(a, b) == expected True >>> dict_clean(a, b) == expected True Parameters: Name Type Description Default a dict The dictionary to clean against b . required b dict The dictionary containing the key structure to clean from a . required Results filter_non_ascii ( line ) # Filter predicate to test if a line contains non ASCII characters. Parameters: Name Type Description Default line string The line to test required Returns: Name Type Description boolean True if the line contains non ASCII characters, False otherwise. get_bom ( filename , encoding ) # Check if the file has a BOM and if so return it. Parameters: Name Type Description Default filename str The file to check. required encoding str The encoding to check for. required Returns: Type Description (bytes) the BOM or None if there is no BOM. get_class ( name ) # Retrieves the class object for a given fully qualified class name. Parameters: Name Type Description Default name string The fully qualified class name, including all modules separated by . required Returns: Name Type Description type The class if it could be found. get_exception_string ( fmt = \" {type} : ' {message} ' @ {file} : {function} : {line} \" ) # Retrieves the exception info of the last raised exception and returns it as a string formatted as <exception type>: <exception message> @ <source file>:<function name>:<line number> . Returns: Name Type Description string The formatted exception information. get_formatted_datetime ( d ) # Formats a datetime instance as \"YYYY-mm-dd HH:MM\" and returns the resulting string. Parameters: Name Type Description Default d datetime . datetime The datetime instance to format required Returns: Name Type Description string The datetime formatted as \"YYYY-mm-dd HH:MM\" get_formatted_size ( num ) # Formats the given byte count as a human readable rounded size expressed in the most pressing unit among B(ytes), K(ilo)B(ytes), M(ega)B(ytes), G(iga)B(ytes) and T(era)B(ytes), with one decimal place. Based on http://stackoverflow.com/a/1094933/2028598 Parameters: Name Type Description Default num int The byte count to format required Returns: Name Type Description string The formatted byte count. get_formatted_timedelta ( d ) # Formats a timedelta instance as \"HH:MM:ss\" and returns the resulting string. Parameters: Name Type Description Default d datetime . timedelta The timedelta instance to format required Returns: Name Type Description string The timedelta formatted as \"HH:MM:ss\" get_fully_qualified_classname ( o ) # Returns the fully qualified class name for an object. Based on https://stackoverflow.com/a/2020083 Parameters: Name Type Description Default o the object of which to determine the fqcn required Returns: Type Description (str) the fqcn of the object is_allowed_file ( filename , extensions ) # Determines if the provided filename has one of the supplied extensions . The check is done case-insensitive. Parameters: Name Type Description Default filename string The file name to check against the extensions. required extensions list The extensions to check against, a list of strings required Return pp ( value ) # pp(dict()) 'dict()' pp(dict(a=1, b=2, c=3)) 'dict(a=1, b=2, c=3)' pp(set()) 'set()' pp({\"a\", \"b\"}) \"{'a', 'b'}\" pp([\"a\", \"b\", \"d\", \"c\"]) \"['a', 'b', 'd', 'c']\" pp((\"a\", \"b\", \"d\", \"c\")) \"('a', 'b', 'd', 'c')\" pp(\"foo\") \"'foo'\" pp([dict(a=1, b=2), {\"a\", \"c\", \"b\"}, (1, 2), None, 1, True, \"foo\"]) \"[dict(a=1, b=2), {'a', 'b', 'c'}, (1, 2), None, 1, True, 'foo']\" serialize ( filename , data , encoding = 'utf-8' , compressed = True ) # Serializes data to a file In the current implementation this uses json.dumps. If compressed is True (the default), the serialized data put through zlib.compress. Supported data types are listed at the bottom of :func: octoprint.util.comprehensive_json , and include some data types that are not supported by json.dumps by default. This is not thread-safe, if concurrent access is required, the caller needs to ensure that only one thread is writing to the file at any given time. Parameters: Name Type Description Default filename str The file to write to required data object The data to serialize required encoding str The encoding to use for the file 'utf-8' compressed bool Whether to compress the data before writing it to the file True to_bytes ( s_or_u , encoding = 'utf-8' , errors = 'strict' ) # Make sure s_or_u is a byte string. Parameters: Name Type Description Default s_or_u str or bytes The value to convert required encoding str encoding to use if necessary, see :meth: python:str.encode 'utf-8' errors str error handling to use if necessary, see :meth: python:str.encode 'strict' Returns: Name Type Description bytes bytes converted bytes. to_unicode ( s_or_u , encoding = 'utf-8' , errors = 'strict' ) # Make sure s_or_u is a string (str). Parameters: Name Type Description Default s_or_u str or bytes The value to convert required encoding str encoding to use if necessary, see :meth: python:bytes.decode 'utf-8' errors str error handling to use if necessary, see :meth: python:bytes.decode 'strict' Returns: Name Type Description str str converted string.","title":"octoprint.util"},{"location":"reference/octoprint/util/#octoprintutil","text":"This module bundles commonly used utility methods or helper classes that are used in multiple places within OctoPrint's source code.","title":"octoprint.util"},{"location":"reference/octoprint/util/#octoprint.util.deprecated","text":"A decorator for deprecated methods. Logs a deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. If both since and includedoc are provided, a deprecation warning will also be added to the function's docstring by providing or extending its __doc__ property. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required includedoc string Message about the deprecation to include in the wrapped function's docstring. required extenddoc boolean If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message. required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description function The wrapped function with the deprecation warnings in place.","title":"deprecated"},{"location":"reference/octoprint/util/#octoprint.util.pending_deprecation","text":"A decorator for methods pending deprecation. Logs a pending deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. If both since and includedoc are provided, a deprecation warning will also be added to the function's docstring by providing or extending its __doc__ property. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required extenddoc boolean If True the original docstring of the wrapped function will be extended by the deprecation message, if False (default) it will be replaced with the deprecation message. required includedoc string Message about the deprecation to include in the wrapped function's docstring. required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description function The wrapped function with the deprecation warnings in place.","title":"pending_deprecation"},{"location":"reference/octoprint/util/#octoprint.util.variable_deprecated","text":"A function for deprecated variables. Logs a deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description value The value of the variable with the deprecation warnings in place.","title":"variable_deprecated"},{"location":"reference/octoprint/util/#octoprint.util.variable_pending_deprecation","text":"A decorator for variables pending deprecation. Logs a pending deprecation warning via Python's :mod: warnings` module including the supplied message . The call stack level used (for adding the source location of the offending call to the warning) can be overridden using the optional stacklevel parameter. Parameters: Name Type Description Default message string The message to include in the deprecation warning. required stacklevel int Stack level for including the caller of the offending method in the logged warning. Defaults to 1, meaning the direct caller of the method. It might make sense to increase this in case of the function call happening dynamically from a fixed position to not shadow the real caller (e.g. in case of overridden getattr methods). required since string Version since when the function was deprecated, must be present for the docstring to get extended. required Returns: Name Type Description value The value of the variable with the deprecation warnings in place.","title":"variable_pending_deprecation"},{"location":"reference/octoprint/util/#octoprint.util.CaseInsensitiveSet","text":"Bases: Set Basic case insensitive set Any str values will be stored and compared in lower case. Other value types are left as-is.","title":"CaseInsensitiveSet"},{"location":"reference/octoprint/util/#octoprint.util.RepeatedTimer","text":"Bases: threading . Thread This class represents an action that should be run repeatedly in an interval. It is similar to python's own :class: threading.Timer class, but instead of only running once the function will be run again and again, sleeping the stated interval in between. RepeatedTimers are started, as with threads, by calling their start() method. The timer can be stopped (in between runs) by calling the :func: cancel method. The interval the time waited before execution of a loop may not be exactly the same as the interval specified by the user. For example: .. code-block:: python def hello(): print(\"Hello World!\") t = RepeatedTimer(1.0, hello) t.start() # prints \"Hello World!\" every second Another example with dynamic interval and loop condition: .. code-block:: python count = 0 maximum = 5 factor = 1 def interval(): global count global factor return count * factor def condition(): global count global maximum return count <= maximum def hello(): print(\"Hello World!\") global count count += 1 t = RepeatedTimer(interval, hello, run_first=True, condition=condition) t.start() # prints \"Hello World!\" 5 times, printing the first one # directly, then waiting 1, 2, 3, 4s in between (adaptive interval) Parameters: Name Type Description Default interval float or callable The interval between each function call, in seconds. Can also be a callable returning the interval to use, in case the interval is not static. required function callable The function to call. required args list or tuple The arguments for the function call. Defaults to an empty list. None kwargs dict The keyword arguments for the function call. Defaults to an empty dict. None run_first boolean If set to True, the function will be run for the first time before the first wait period. If set to False (the default), the function will be run for the first time after the first wait period. False condition callable Condition that needs to be True for loop to continue. Defaults to lambda: True . None on_condition_false callable Callback to call when the timer finishes due to condition becoming false. Will be called before the on_finish callback. None on_cancelled callable Callback to call when the timer finishes due to being cancelled. Will be called before the on_finish callback. None on_finish callable Callback to call when the timer finishes, either due to being cancelled or since the condition became false. None daemon bool daemon flag to set on underlying thread. True","title":"RepeatedTimer"},{"location":"reference/octoprint/util/#octoprint.util.ResettableTimer","text":"Bases: threading . Thread This class represents an action that should be run after a specified amount of time. It is similar to python's own :class: threading.Timer class, with the addition of being able to reset the counter to zero. ResettableTimers are started, as with threads, by calling their start() method. The timer can be stopped (in between runs) by calling the :func: cancel method. Resetting the counter can be done with the :func: reset method. For example: .. code-block:: python def hello(): print(\"Ran hello() at {}\").format(time.time()) t = ResettableTimer(60.0, hello) t.start() print(\"Started at {}\").format(time.time()) time.sleep(30) t.reset() print(\"Reset at {}\").format(time.time()) Parameters: Name Type Description Default interval float or callable The interval before calling function , in seconds. Can also be a callable returning the interval to use, in case the interval is not static. required function callable The function to call. required args list or tuple The arguments for the function call. Defaults to an empty list. None kwargs dict The keyword arguments for the function call. Defaults to an empty dict. None on_cancelled callable Callback to call when the timer finishes due to being cancelled. None on_reset callable Callback to call when the timer is reset. None daemon bool daemon flag to set on underlying thread. True","title":"ResettableTimer"},{"location":"reference/octoprint/util/#octoprint.util.chunks","text":"Yield successive n-sized chunks from l. Taken from http://stackoverflow.com/a/312464/2028598","title":"chunks()"},{"location":"reference/octoprint/util/#octoprint.util.count","text":"Used instead of len(generator), which doesn't work","title":"count()"},{"location":"reference/octoprint/util/#octoprint.util.deserialize","text":"Deserializes data from a file In the current implementation this uses json.loads and - if the file is found to be compressed - zlib.decompress. Parameters: Name Type Description Default filename str The file to deserialize from required encoding str The encoding to use for the file, defaults to utf-8 'utf-8' Returns: Type Description The deserialized data structure","title":"deserialize()"},{"location":"reference/octoprint/util/#octoprint.util.dict_contains_keys","text":"Recursively deep-checks if dictionary contains all keys found in keys . Example:: >>> positive = dict(foo=\"some_other_bar\", fnord=dict(b=100)) >>> negative = dict(foo=\"some_other_bar\", fnord=dict(b=100, d=20)) >>> dictionary = dict(foo=\"bar\", fnord=dict(a=1, b=2, c=3)) >>> dict_contains_keys(positive, dictionary) True >>> dict_contains_keys(negative, dictionary) False Parameters: Name Type Description Default a dict The dictionary to check for the keys from b . required b dict The dictionary whose keys to check a for. required Returns: Name Type Description boolean True if all keys found in b are also present in a , False otherwise.","title":"dict_contains_keys()"},{"location":"reference/octoprint/util/#octoprint.util.dict_filter","text":"Filters a dictionary with the provided filter_function Example:: >>> data = dict(key1=\"value1\", key2=\"value2\", other_key=\"other_value\", foo=\"bar\", bar=\"foo\") >>> dict_filter(data, lambda k, v: k.startswith(\"key\")) == dict(key1=\"value1\", key2=\"value2\") True >>> dict_filter(data, lambda k, v: v.startswith(\"value\")) == dict(key1=\"value1\", key2=\"value2\") True >>> dict_filter(data, lambda k, v: k == \"foo\" or v == \"foo\") == dict(foo=\"bar\", bar=\"foo\") True >>> dict_filter(data, lambda k, v: False) == dict() True >>> dict_filter(data, lambda k, v: True) == data True >>> dict_filter(None, lambda k, v: True) Traceback (most recent call last): ... AssertionError >>> dict_filter(data, None) Traceback (most recent call last): ... AssertionError Parameters: Name Type Description Default dictionary dict The dictionary to filter required filter_function callable The filter function to apply, called with key and value of an entry in the dictionary, must return True for values to keep and False for values to strip required Returns: Name Type Description dict A shallow copy of the provided dictionary, stripped of the key-value-pairs for which the filter_function returned False","title":"dict_filter()"},{"location":"reference/octoprint/util/#octoprint.util.dict_flatten","text":"Flatten a dictionary. Example:: >>> data = {'a': {'a1': 'a1', 'a2': 'a2'}, 'b': 'b'} >>> expected = {'a.a1': 'a1', 'a.a2': 'a2', 'b': 'b'} >>> actual = dict_flatten(data) >>> shared = {(k, actual[k]) for k in actual if k in expected and actual[k] == expected[k]} >>> len(shared) == len(expected) True Parameters: Name Type Description Default dictionary the dictionary to flatten required prefix the key prefix, initially an empty string '' separator key separator, '.' by default '.'","title":"dict_flatten()"},{"location":"reference/octoprint/util/#octoprint.util.dict_merge","text":"Recursively deep-merges two dictionaries. Based on https://www.xormedia.com/recursively-merge-dictionaries-in-python/ Example:: >>> a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1)) >>> b = dict(foo=\"other foo\", fnord=dict(b=2, l=[\"some\", \"list\"])) >>> expected = dict(foo=\"other foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"])) >>> dict_merge(a, b) == expected True >>> dict_merge(a, None) == a True >>> dict_merge(None, b) == b True >>> dict_merge(None, None) == dict() True >>> def leaf_merger(a, b): ... if isinstance(a, list) and isinstance(b, list): ... return a + b ... raise ValueError() >>> result = dict_merge(dict(l1=[3, 4], l2=[1], a=\"a\"), dict(l1=[1, 2], l2=\"foo\", b=\"b\"), leaf_merger=leaf_merger) >>> result.get(\"l1\") == [3, 4, 1, 2] True >>> result.get(\"l2\") == \"foo\" True >>> result.get(\"a\") == \"a\" True >>> result.get(\"b\") == \"b\" True >>> c = dict(foo=\"foo\") >>> dict_merge(c, {\"bar\": \"bar\"}) is c False >>> dict_merge(c, {\"bar\": \"bar\"}, in_place=True) is c True Parameters: Name Type Description Default a dict The dictionary to merge b into required b dict The dictionary to merge into a required leaf_merger callable An optional callable to use to merge leaves (non-dict values) None in_place boolean If set to True, a will be merged with b in place, meaning a will be modified False Returns: Name Type Description dict b deep-merged into a","title":"dict_merge()"},{"location":"reference/octoprint/util/#octoprint.util.dict_minimal_mergediff","text":"Recursively calculates the minimal dict that would be needed to be deep merged with a in order to produce the same result as deep merging a and b. Example:: >>> a = dict(foo=dict(a=1, b=2), bar=dict(c=3, d=4)) >>> b = dict(bar=dict(c=3, d=5), fnord=None) >>> c = dict_minimal_mergediff(a, b) >>> c == dict(bar=dict(d=5), fnord=None) True >>> dict_merge(a, c) == dict_merge(a, b) True Parameters: Name Type Description Default source dict Source dictionary required target dict Dictionary to compare to source dictionary and derive diff for required Returns: Name Type Description dict The minimal dictionary to deep merge on source to get the same result as deep merging target on source .","title":"dict_minimal_mergediff()"},{"location":"reference/octoprint/util/#octoprint.util.dict_sanitize","text":"Recursively deep-sanitizes a based on b , removing all keys (and associated values) from a that do not appear in b . Example:: >>> a = dict(foo=\"foo\", bar=\"bar\", fnord=dict(a=1, b=2, l=[\"some\", \"list\"])) >>> b = dict(foo=None, fnord=dict(a=None, b=None)) >>> expected = dict(foo=\"foo\", fnord=dict(a=1, b=2)) >>> dict_sanitize(a, b) == expected True >>> dict_clean(a, b) == expected True Parameters: Name Type Description Default a dict The dictionary to clean against b . required b dict The dictionary containing the key structure to clean from a . required Results","title":"dict_sanitize()"},{"location":"reference/octoprint/util/#octoprint.util.filter_non_ascii","text":"Filter predicate to test if a line contains non ASCII characters. Parameters: Name Type Description Default line string The line to test required Returns: Name Type Description boolean True if the line contains non ASCII characters, False otherwise.","title":"filter_non_ascii()"},{"location":"reference/octoprint/util/#octoprint.util.get_bom","text":"Check if the file has a BOM and if so return it. Parameters: Name Type Description Default filename str The file to check. required encoding str The encoding to check for. required Returns: Type Description (bytes) the BOM or None if there is no BOM.","title":"get_bom()"},{"location":"reference/octoprint/util/#octoprint.util.get_class","text":"Retrieves the class object for a given fully qualified class name. Parameters: Name Type Description Default name string The fully qualified class name, including all modules separated by . required Returns: Name Type Description type The class if it could be found.","title":"get_class()"},{"location":"reference/octoprint/util/#octoprint.util.get_exception_string","text":"Retrieves the exception info of the last raised exception and returns it as a string formatted as <exception type>: <exception message> @ <source file>:<function name>:<line number> . Returns: Name Type Description string The formatted exception information.","title":"get_exception_string()"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_datetime","text":"Formats a datetime instance as \"YYYY-mm-dd HH:MM\" and returns the resulting string. Parameters: Name Type Description Default d datetime . datetime The datetime instance to format required Returns: Name Type Description string The datetime formatted as \"YYYY-mm-dd HH:MM\"","title":"get_formatted_datetime()"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_size","text":"Formats the given byte count as a human readable rounded size expressed in the most pressing unit among B(ytes), K(ilo)B(ytes), M(ega)B(ytes), G(iga)B(ytes) and T(era)B(ytes), with one decimal place. Based on http://stackoverflow.com/a/1094933/2028598 Parameters: Name Type Description Default num int The byte count to format required Returns: Name Type Description string The formatted byte count.","title":"get_formatted_size()"},{"location":"reference/octoprint/util/#octoprint.util.get_formatted_timedelta","text":"Formats a timedelta instance as \"HH:MM:ss\" and returns the resulting string. Parameters: Name Type Description Default d datetime . timedelta The timedelta instance to format required Returns: Name Type Description string The timedelta formatted as \"HH:MM:ss\"","title":"get_formatted_timedelta()"},{"location":"reference/octoprint/util/#octoprint.util.get_fully_qualified_classname","text":"Returns the fully qualified class name for an object. Based on https://stackoverflow.com/a/2020083 Parameters: Name Type Description Default o the object of which to determine the fqcn required Returns: Type Description (str) the fqcn of the object","title":"get_fully_qualified_classname()"},{"location":"reference/octoprint/util/#octoprint.util.is_allowed_file","text":"Determines if the provided filename has one of the supplied extensions . The check is done case-insensitive. Parameters: Name Type Description Default filename string The file name to check against the extensions. required extensions list The extensions to check against, a list of strings required Return","title":"is_allowed_file()"},{"location":"reference/octoprint/util/#octoprint.util.pp","text":"pp(dict()) 'dict()' pp(dict(a=1, b=2, c=3)) 'dict(a=1, b=2, c=3)' pp(set()) 'set()' pp({\"a\", \"b\"}) \"{'a', 'b'}\" pp([\"a\", \"b\", \"d\", \"c\"]) \"['a', 'b', 'd', 'c']\" pp((\"a\", \"b\", \"d\", \"c\")) \"('a', 'b', 'd', 'c')\" pp(\"foo\") \"'foo'\" pp([dict(a=1, b=2), {\"a\", \"c\", \"b\"}, (1, 2), None, 1, True, \"foo\"]) \"[dict(a=1, b=2), {'a', 'b', 'c'}, (1, 2), None, 1, True, 'foo']\"","title":"pp()"},{"location":"reference/octoprint/util/#octoprint.util.serialize","text":"Serializes data to a file In the current implementation this uses json.dumps. If compressed is True (the default), the serialized data put through zlib.compress. Supported data types are listed at the bottom of :func: octoprint.util.comprehensive_json , and include some data types that are not supported by json.dumps by default. This is not thread-safe, if concurrent access is required, the caller needs to ensure that only one thread is writing to the file at any given time. Parameters: Name Type Description Default filename str The file to write to required data object The data to serialize required encoding str The encoding to use for the file 'utf-8' compressed bool Whether to compress the data before writing it to the file True","title":"serialize()"},{"location":"reference/octoprint/util/#octoprint.util.to_bytes","text":"Make sure s_or_u is a byte string. Parameters: Name Type Description Default s_or_u str or bytes The value to convert required encoding str encoding to use if necessary, see :meth: python:str.encode 'utf-8' errors str error handling to use if necessary, see :meth: python:str.encode 'strict' Returns: Name Type Description bytes bytes converted bytes.","title":"to_bytes()"},{"location":"reference/octoprint/util/#octoprint.util.to_unicode","text":"Make sure s_or_u is a string (str). Parameters: Name Type Description Default s_or_u str or bytes The value to convert required encoding str encoding to use if necessary, see :meth: python:bytes.decode 'utf-8' errors str error handling to use if necessary, see :meth: python:bytes.decode 'strict' Returns: Name Type Description str str converted string.","title":"to_unicode()"},{"location":"reference/octoprint/util/comm/","text":"octoprint.util.comm # __copyright__ = 'Copyright (C) 2013 David Braam, Gina H\u00e4u\u00dfge & others - Released under terms of the AGPLv3 License' module-attribute # The code in this file is based on Cura.util.machineCom from the Cura project from late 2012 ( https://github.com/daid/Cura ). regex_command = re . compile ( '^ \\\\ s*((?P<codeGM>[GM] \\\\ d+)( \\\\ .(?P<subcode> \\\\ d+))?|(?P<codeT>T) \\\\ d+|(?P<codeF>F) \\\\ d+)' ) module-attribute # Regex for a GCODE command. regex_e_positions = re . compile ( f 'E(?P<id> \\\\ d+): \\\\ s*(?P<value> { regex_float_pattern } )' ) module-attribute # Regex for matching multiple E coordinates in a position report. Groups will be as follows id : id of the extruder or which the position is reported value : reported position value regex_firmware_splitter = re . compile ( '(^| \\\\ s+)([A-Z][A-Z0-9_]*):' ) module-attribute # Regex to use for splitting M115 responses. regex_float = re . compile ( regex_float_pattern ) module-attribute # Regex for a float value. regex_marlinKillError = re . compile ( 'Heating failed|Thermal Runaway|MAXTEMP triggered|MINTEMP triggered|Invalid extruder number|Watchdog barked|KILL caused' ) module-attribute # Regex matching first line of kill causing errors from Marlin. regex_minMaxError = re . compile ( 'Error:[0-9] \\\\ n' ) module-attribute # Regex matching first line of min/max errors from the firmware. regex_position = re . compile ( 'X: \\\\ s*(?P<x> {float} ) \\\\ s*Y: \\\\ s*(?P<y> {float} ) \\\\ s*Z: \\\\ s*(?P<z> {float} ) \\\\ s*((E: \\\\ s*(?P<e> {float} ))|(?P<es>(E \\\\ d+: \\\\ s* {float} \\\\ s*)+))' . format ( float = regex_float_pattern )) module-attribute # Regex for matching position reporting. Groups will be as follows x : X coordinate y : Y coordinate z : Z coordinate e : E coordinate if present, or es : multiple E coordinates if present, to be parsed further with regex_e_positions regex_repetierTempBed = re . compile ( 'TargetBed:(?P<target> %s )' % regex_float_pattern ) module-attribute # Regex for matching target temp reporting from Repetier for beds. Groups will be as follows target : new target temperature (float) regex_repetierTempExtr = re . compile ( 'TargetExtr(?P<toolnum> \\\\ d+):(?P<target> %s )' % regex_float_pattern ) module-attribute # Regex for matching target temp reporting from Repetier. Groups will be as follows toolnum : number of the extruder to which the target temperature report belongs (int) target : new target temperature (float) regex_resend_linenumber = re . compile ( '(N|N:)?(?P<n> %s )' % regex_int_pattern ) module-attribute # Regex to use for request line numbers in resend requests regex_sdFileOpened = re . compile ( 'File opened: \\\\ s*(?P<name>.*?) \\\\ s+Size: \\\\ s*(?P<size> %s )' % regex_int_pattern ) module-attribute # Regex matching \"File opened\" messages from the firmware. Groups will be as follows name : name of the file reported as having been opened (str) size : size of the file in bytes (int) regex_sdPrintingByte = re . compile ( '(?P<current>[0-9]+)/(?P<total>[0-9]+)' ) module-attribute # Regex matching SD printing status reports. Groups will be as follows current : current byte position in file being printed total : total size of file being printed regex_serial_devices = re . compile ( '^(?:ttyUSB|ttyACM|tty \\\\ .usb|cu \\\\ .|cuaU|ttyS|rfcomm).*' ) module-attribute # Regex used to filter out valid tty devices regex_temp = re . compile ( '(^| \\\\ s)(?P<sensor>B|C|T(?P<toolnum> \\\\ d*)|([ \\\\ w]+)): \\\\ s*(?P<actual> %s )( \\\\ s* \\\\ /? \\\\ s*(?P<target> %s ))?' % ( regex_float_pattern , regex_float_pattern )) module-attribute # Regex matching temperature entries in line. Groups will be as follows sensor : whole sensor designator, incl. optional toolnum , e.g. \"T1\", \"B\", \"C\" or anything custom (str) toolnum : tool number, if provided, only for T0, T1, etc (int) actual : actual temperature (float) target : target temperature, if provided (float) regexes_parameters = { 'floatE' : re . compile ( '(^|[^A-Za-z])[Ee](?P<value> %s )' % regex_float_pattern ), 'floatF' : re . compile ( '(^|[^A-Za-z])[Ff](?P<value> %s )' % regex_float_pattern ), 'floatP' : re . compile ( '(^|[^A-Za-z])[Pp](?P<value> %s )' % regex_float_pattern ), 'floatR' : re . compile ( '(^|[^A-Za-z])[Rr](?P<value> %s )' % regex_float_pattern ), 'floatS' : re . compile ( '(^|[^A-Za-z])[Ss](?P<value> %s )' % regex_float_pattern ), 'floatX' : re . compile ( '(^|[^A-Za-z])[Xx](?P<value> %s )' % regex_float_pattern ), 'floatY' : re . compile ( '(^|[^A-Za-z])[Yy](?P<value> %s )' % regex_float_pattern ), 'floatZ' : re . compile ( '(^|[^A-Za-z])[Zz](?P<value> %s )' % regex_float_pattern ), 'intN' : re . compile ( '(^|[^A-Za-z])[Nn](?P<value> %s )' % regex_int_pattern ), 'intS' : re . compile ( '(^|[^A-Za-z])[Ss](?P<value> %s )' % regex_int_pattern ), 'intT' : re . compile ( '(^|[^A-Za-z])[Tt](?P<value> %s )' % regex_int_pattern )} module-attribute # Regexes for parsing various GCODE command parameters. MachineCom # close ( is_error = False , wait = True , timeout = 10.0 , * args , ** kwargs ) # Closes the connection to the printer. If is_error is False, will attempt to send the beforePrinterDisconnected gcode script. If is_error is False and wait is True, will wait until all messages in the send queue (including the beforePrinterDisconnected gcode script) have been sent to the printer. Parameters: Name Type Description Default is_error bool Whether the closing takes place due to an error (True) or not (False, default) False wait bool Whether to wait for all messages in the send queue to be processed before closing (True, default) or not (False) True PrintingFileInformation # Encapsulates information regarding the current file being printed: file name, current position, total size and time the print started. Allows to reset the current file position to 0 and to calculate the current progress as a floating point value between 0 and 1. close () # Closes the print job. getProgress () # The current progress of the file, calculated as relation between file position and absolute size. Returns -1 if file size is None or < 1. reset () # Resets the current file position to 0. start () # Marks the print job as started and remembers the start time. PrintingGcodeFileInformation # Bases: PrintingFileInformation Encapsulates information regarding an ongoing direct print. Takes care of the needed file handle and ensures that the file is closed in case of an error. close () # Closes the file if it's still open. getNext () # Retrieves the next line for printing. start () # Opens the file for reading and determines the file size. PrintingSdFileInformation # Bases: PrintingFileInformation Encapsulates information regarding an ongoing print from SD. SpecialStreamingGcodeFileInformation # Bases: StreamingGcodeFileInformation For streaming files to the printer that aren't GCODE. Difference to regular StreamingGcodeFileInformation: no checksum requirement, only rudimentary line processing (stripping of whitespace from the end and ignoring of empty lines) canonicalize_temperatures ( parsed , current ) # Canonicalizes the temperatures provided in parsed. Will make sure that returned result only contains extruder keys like Tn, so always qualified with a tool number. The algorithm for cleaning up the parsed keys is the following If T is not included with the reported extruders, return If more than just T is reported: If both T and T0 are reported, remove T from the result. Else set T0 to T and delete T (Smoothie extra). If only T is reported, set Tc to T and delete T return Parameters: Name Type Description Default parsed dict the parsed temperatures (mapping tool => (actual, target)) to canonicalize required current int the current active extruder required Returns: Name Type Description dict the canonicalized version of parsed gcode_command_for_cmd ( cmd ) # Tries to parse the provided cmd and extract the GCODE command identifier from it (e.g. \"G0\" for \"G0 X10.0\"). Parameters: Name Type Description Default cmd str The command to try to parse. required Returns: Type Description str or None: The GCODE command identifier if it could be parsed, or None if not. parse_capability_line ( line ) # Parses the provided firmware capability line. Lines are expected to be of the format Cap:<capability name in caps>:<0 or 1> e.g. Cap:AUTOREPORT_TEMP:1 Cap:TOGGLE_LIGHTS:0 Parameters: Name Type Description Default line str the line to parse required Returns: Name Type Description tuple a 2-tuple of the parsed capability name and whether it's on (true) or off (false), or None if the line could not be parsed parse_firmware_line ( line ) # Parses the provided firmware info line. The result will be a dictionary mapping from the contained keys to the contained values. Valid keys must only contain A-Z, 0-9 and _ and must start with a letter. See the unit tests for valid and invalid examples. There sadly is no existing specification of the key format, but this is the format extracted from real life logs. Parameters: Name Type Description Default line str the line to parse required Returns: Name Type Description dict a dictionary with the parsed data parse_position_line ( line ) # Parses the provided M114 response line and returns the parsed coordinates. Parameters: Name Type Description Default line str the line to parse required Returns: Type Description dict or None: the parsed coordinates, or None if no coordinates could be parsed parse_resend_line ( line ) # Parses the provided resend line and returns requested line number. Parameters: Name Type Description Default line str the line to parse required Returns: Type Description int or None: the extracted line number to resend, or None if no number could be extracted parse_temperature_line ( line , current ) # Parses the provided temperature line. The result will be a dictionary mapping from the extruder or bed key to a tuple with current and target temperature. The result will be canonicalized with :func: canonicalize_temperatures before returning. Parameters: Name Type Description Default line str the temperature line to parse required current int the current active extruder required Returns: Name Type Description tuple a 2-tuple with the maximum tool number and a dict mapping from key to (actual, target) tuples, with key either matching Tn for n >= 0 or B upload_cli () # Uploads to on SD card of printer on port , using baudrate .","title":"comm"},{"location":"reference/octoprint/util/comm/#octoprintutilcomm","text":"","title":"octoprint.util.comm"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.__copyright__","text":"The code in this file is based on Cura.util.machineCom from the Cura project from late 2012 ( https://github.com/daid/Cura ).","title":"__copyright__"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_command","text":"Regex for a GCODE command.","title":"regex_command"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_e_positions","text":"Regex for matching multiple E coordinates in a position report. Groups will be as follows id : id of the extruder or which the position is reported value : reported position value","title":"regex_e_positions"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_firmware_splitter","text":"Regex to use for splitting M115 responses.","title":"regex_firmware_splitter"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_float","text":"Regex for a float value.","title":"regex_float"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_marlinKillError","text":"Regex matching first line of kill causing errors from Marlin.","title":"regex_marlinKillError"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_minMaxError","text":"Regex matching first line of min/max errors from the firmware.","title":"regex_minMaxError"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_position","text":"Regex for matching position reporting. Groups will be as follows x : X coordinate y : Y coordinate z : Z coordinate e : E coordinate if present, or es : multiple E coordinates if present, to be parsed further with regex_e_positions","title":"regex_position"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_repetierTempBed","text":"Regex for matching target temp reporting from Repetier for beds. Groups will be as follows target : new target temperature (float)","title":"regex_repetierTempBed"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_repetierTempExtr","text":"Regex for matching target temp reporting from Repetier. Groups will be as follows toolnum : number of the extruder to which the target temperature report belongs (int) target : new target temperature (float)","title":"regex_repetierTempExtr"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_resend_linenumber","text":"Regex to use for request line numbers in resend requests","title":"regex_resend_linenumber"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_sdFileOpened","text":"Regex matching \"File opened\" messages from the firmware. Groups will be as follows name : name of the file reported as having been opened (str) size : size of the file in bytes (int)","title":"regex_sdFileOpened"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_sdPrintingByte","text":"Regex matching SD printing status reports. Groups will be as follows current : current byte position in file being printed total : total size of file being printed","title":"regex_sdPrintingByte"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_serial_devices","text":"Regex used to filter out valid tty devices","title":"regex_serial_devices"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regex_temp","text":"Regex matching temperature entries in line. Groups will be as follows sensor : whole sensor designator, incl. optional toolnum , e.g. \"T1\", \"B\", \"C\" or anything custom (str) toolnum : tool number, if provided, only for T0, T1, etc (int) actual : actual temperature (float) target : target temperature, if provided (float)","title":"regex_temp"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.regexes_parameters","text":"Regexes for parsing various GCODE command parameters.","title":"regexes_parameters"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.MachineCom","text":"","title":"MachineCom"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.MachineCom.close","text":"Closes the connection to the printer. If is_error is False, will attempt to send the beforePrinterDisconnected gcode script. If is_error is False and wait is True, will wait until all messages in the send queue (including the beforePrinterDisconnected gcode script) have been sent to the printer. Parameters: Name Type Description Default is_error bool Whether the closing takes place due to an error (True) or not (False, default) False wait bool Whether to wait for all messages in the send queue to be processed before closing (True, default) or not (False) True","title":"close()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation","text":"Encapsulates information regarding the current file being printed: file name, current position, total size and time the print started. Allows to reset the current file position to 0 and to calculate the current progress as a floating point value between 0 and 1.","title":"PrintingFileInformation"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.close","text":"Closes the print job.","title":"close()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.getProgress","text":"The current progress of the file, calculated as relation between file position and absolute size. Returns -1 if file size is None or < 1.","title":"getProgress()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.reset","text":"Resets the current file position to 0.","title":"reset()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingFileInformation.start","text":"Marks the print job as started and remembers the start time.","title":"start()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation","text":"Bases: PrintingFileInformation Encapsulates information regarding an ongoing direct print. Takes care of the needed file handle and ensures that the file is closed in case of an error.","title":"PrintingGcodeFileInformation"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.close","text":"Closes the file if it's still open.","title":"close()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.getNext","text":"Retrieves the next line for printing.","title":"getNext()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingGcodeFileInformation.start","text":"Opens the file for reading and determines the file size.","title":"start()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.PrintingSdFileInformation","text":"Bases: PrintingFileInformation Encapsulates information regarding an ongoing print from SD.","title":"PrintingSdFileInformation"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.SpecialStreamingGcodeFileInformation","text":"Bases: StreamingGcodeFileInformation For streaming files to the printer that aren't GCODE. Difference to regular StreamingGcodeFileInformation: no checksum requirement, only rudimentary line processing (stripping of whitespace from the end and ignoring of empty lines)","title":"SpecialStreamingGcodeFileInformation"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.canonicalize_temperatures","text":"Canonicalizes the temperatures provided in parsed. Will make sure that returned result only contains extruder keys like Tn, so always qualified with a tool number. The algorithm for cleaning up the parsed keys is the following If T is not included with the reported extruders, return If more than just T is reported: If both T and T0 are reported, remove T from the result. Else set T0 to T and delete T (Smoothie extra). If only T is reported, set Tc to T and delete T return Parameters: Name Type Description Default parsed dict the parsed temperatures (mapping tool => (actual, target)) to canonicalize required current int the current active extruder required Returns: Name Type Description dict the canonicalized version of parsed","title":"canonicalize_temperatures()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.gcode_command_for_cmd","text":"Tries to parse the provided cmd and extract the GCODE command identifier from it (e.g. \"G0\" for \"G0 X10.0\"). Parameters: Name Type Description Default cmd str The command to try to parse. required Returns: Type Description str or None: The GCODE command identifier if it could be parsed, or None if not.","title":"gcode_command_for_cmd()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_capability_line","text":"Parses the provided firmware capability line. Lines are expected to be of the format Cap:<capability name in caps>:<0 or 1> e.g. Cap:AUTOREPORT_TEMP:1 Cap:TOGGLE_LIGHTS:0 Parameters: Name Type Description Default line str the line to parse required Returns: Name Type Description tuple a 2-tuple of the parsed capability name and whether it's on (true) or off (false), or None if the line could not be parsed","title":"parse_capability_line()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_firmware_line","text":"Parses the provided firmware info line. The result will be a dictionary mapping from the contained keys to the contained values. Valid keys must only contain A-Z, 0-9 and _ and must start with a letter. See the unit tests for valid and invalid examples. There sadly is no existing specification of the key format, but this is the format extracted from real life logs. Parameters: Name Type Description Default line str the line to parse required Returns: Name Type Description dict a dictionary with the parsed data","title":"parse_firmware_line()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_position_line","text":"Parses the provided M114 response line and returns the parsed coordinates. Parameters: Name Type Description Default line str the line to parse required Returns: Type Description dict or None: the parsed coordinates, or None if no coordinates could be parsed","title":"parse_position_line()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_resend_line","text":"Parses the provided resend line and returns requested line number. Parameters: Name Type Description Default line str the line to parse required Returns: Type Description int or None: the extracted line number to resend, or None if no number could be extracted","title":"parse_resend_line()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.parse_temperature_line","text":"Parses the provided temperature line. The result will be a dictionary mapping from the extruder or bed key to a tuple with current and target temperature. The result will be canonicalized with :func: canonicalize_temperatures before returning. Parameters: Name Type Description Default line str the temperature line to parse required current int the current active extruder required Returns: Name Type Description tuple a 2-tuple with the maximum tool number and a dict mapping from key to (actual, target) tuples, with key either matching Tn for n >= 0 or B","title":"parse_temperature_line()"},{"location":"reference/octoprint/util/comm/#octoprint.util.comm.upload_cli","text":"Uploads to on SD card of printer on port , using baudrate .","title":"upload_cli()"},{"location":"reference/octoprint/util/commandline/","text":"octoprint.util.commandline # CommandlineCaller # The CommandlineCaller is a utility class that allows running command line commands while logging their stdout and stderr via configurable callback functions. Callbacks are expected to have a signature matching .. code-block:: python def callback(*lines): do_something_with_the_passed_lines() The class utilizes sarge underneath. Example: .. code-block:: python from octoprint.util.commandline import CommandLineCaller, CommandLineError def log(prefix, *lines): for line in lines: print(\"{} {}\".format(prefix, line)) def log_stdout( lines): log(\">>>\", lines) def log_stderr( lines): log(\"!!!\", lines) def log_call( lines) log(\"---\", lines) caller = CommandLineCaller() caller.on_log_call = log_call caller.on_log_stdout = log_stdout caller.on_log_stderr = log_stderr try: caller.checked_call([\"some\", \"command\", \"with\", \"parameters\"]) except CommandLineError as err: print(\"Command returned {}\".format(err.returncode)) else: print(\"Command finished successfully\") on_log_call = lambda : None instance-attribute # Callback for the called command line on_log_stderr = lambda : None instance-attribute # Callback for stderr output on_log_stdout = lambda : None instance-attribute # Callback for stdout output call ( command , delimiter = b ' \\n ' , buffer_size =- 1 , ** kwargs ) # Calls a command Parameters: Name Type Description Default command list, tuple or str command to call required kwargs dict additional keyword arguments to pass to the sarge run call (note that _async , stdout and stderr will be overwritten) required Returns: Type Description Tuple [ Optional [ int ], List [ str ], List [ str ]] (tuple) a 3-tuple of return code, full stdout and full stderr output checked_call ( command , ** kwargs ) # Calls a command and raises an error if it doesn't return with return code 0 Parameters: Name Type Description Default command list, tuple or str command to call required kwargs dict additional keyword arguments to pass to the sarge run call (note that _async , stdout and stderr will be overwritten) required Returns: Type Description Tuple [ int , List [ str ], List [ str ]] (tuple) a 3-tuple of return code, full stdout and full stderr output CommandlineError # Bases: Exception Raised by func: ~octoprint.util.commandline.CommandLineCaller.checked_call on non zero return codes Parameters: Name Type Description Default returncode int the return code of the command required stdout str the stdout output produced by the command required stderr str the stderr output produced by the command required clean_ansi ( line ) # Removes ANSI control codes from line . Note: This function also still supports an input of bytes , leading to an output of bytes . This if for reasons of backwards compatibility only, should no longer be used and considered to be deprecated and to be removed in a future version of OctoPrint. A warning will be logged. Parameters: Name Type Description Default line str or bytes the line to process required Returns: Type Description Union [ str , bytes ] (str or bytes) The line without any ANSI control codes .. versionchanged:: 1.8.0 Usage as clean_ansi(line: bytes) -> bytes is now deprecated and will be removed in a future version of OctoPrint.","title":"commandline"},{"location":"reference/octoprint/util/commandline/#octoprintutilcommandline","text":"","title":"octoprint.util.commandline"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller","text":"The CommandlineCaller is a utility class that allows running command line commands while logging their stdout and stderr via configurable callback functions. Callbacks are expected to have a signature matching .. code-block:: python def callback(*lines): do_something_with_the_passed_lines() The class utilizes sarge underneath. Example: .. code-block:: python from octoprint.util.commandline import CommandLineCaller, CommandLineError def log(prefix, *lines): for line in lines: print(\"{} {}\".format(prefix, line)) def log_stdout( lines): log(\">>>\", lines) def log_stderr( lines): log(\"!!!\", lines) def log_call( lines) log(\"---\", lines) caller = CommandLineCaller() caller.on_log_call = log_call caller.on_log_stdout = log_stdout caller.on_log_stderr = log_stderr try: caller.checked_call([\"some\", \"command\", \"with\", \"parameters\"]) except CommandLineError as err: print(\"Command returned {}\".format(err.returncode)) else: print(\"Command finished successfully\")","title":"CommandlineCaller"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_call","text":"Callback for the called command line","title":"on_log_call"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_stderr","text":"Callback for stderr output","title":"on_log_stderr"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.on_log_stdout","text":"Callback for stdout output","title":"on_log_stdout"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.call","text":"Calls a command Parameters: Name Type Description Default command list, tuple or str command to call required kwargs dict additional keyword arguments to pass to the sarge run call (note that _async , stdout and stderr will be overwritten) required Returns: Type Description Tuple [ Optional [ int ], List [ str ], List [ str ]] (tuple) a 3-tuple of return code, full stdout and full stderr output","title":"call()"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineCaller.checked_call","text":"Calls a command and raises an error if it doesn't return with return code 0 Parameters: Name Type Description Default command list, tuple or str command to call required kwargs dict additional keyword arguments to pass to the sarge run call (note that _async , stdout and stderr will be overwritten) required Returns: Type Description Tuple [ int , List [ str ], List [ str ]] (tuple) a 3-tuple of return code, full stdout and full stderr output","title":"checked_call()"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.CommandlineError","text":"Bases: Exception Raised by func: ~octoprint.util.commandline.CommandLineCaller.checked_call on non zero return codes Parameters: Name Type Description Default returncode int the return code of the command required stdout str the stdout output produced by the command required stderr str the stderr output produced by the command required","title":"CommandlineError"},{"location":"reference/octoprint/util/commandline/#octoprint.util.commandline.clean_ansi","text":"Removes ANSI control codes from line . Note: This function also still supports an input of bytes , leading to an output of bytes . This if for reasons of backwards compatibility only, should no longer be used and considered to be deprecated and to be removed in a future version of OctoPrint. A warning will be logged. Parameters: Name Type Description Default line str or bytes the line to process required Returns: Type Description Union [ str , bytes ] (str or bytes) The line without any ANSI control codes .. versionchanged:: 1.8.0 Usage as clean_ansi(line: bytes) -> bytes is now deprecated and will be removed in a future version of OctoPrint.","title":"clean_ansi()"},{"location":"reference/octoprint/util/connectivity/","text":"octoprint.util.connectivity # ConnectivityChecker # Regularly checks for online connectivity. Tries to open a connection to the provided host and port every interval seconds and sets the online status accordingly. If a name is provided, also tries to resolve that name to a valid IP address during connectivity check and only set online to True if that succeeds as well. check_immediately () # Check immediately and return result. enabled () property writable # Whether the check is enabled or not. host () property writable # DNS host to query. interval () property writable # Interval between consecutive automatic checks. online () property # Current online status, True if online, False if offline. port () property writable # DNS port to query.","title":"connectivity"},{"location":"reference/octoprint/util/connectivity/#octoprintutilconnectivity","text":"","title":"octoprint.util.connectivity"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker","text":"Regularly checks for online connectivity. Tries to open a connection to the provided host and port every interval seconds and sets the online status accordingly. If a name is provided, also tries to resolve that name to a valid IP address during connectivity check and only set online to True if that succeeds as well.","title":"ConnectivityChecker"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.check_immediately","text":"Check immediately and return result.","title":"check_immediately()"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.enabled","text":"Whether the check is enabled or not.","title":"enabled()"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.host","text":"DNS host to query.","title":"host()"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.interval","text":"Interval between consecutive automatic checks.","title":"interval()"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.online","text":"Current online status, True if online, False if offline.","title":"online()"},{"location":"reference/octoprint/util/connectivity/#octoprint.util.connectivity.ConnectivityChecker.port","text":"DNS port to query.","title":"port()"},{"location":"reference/octoprint/util/dev/","text":"octoprint.util.dev # This module provides a bunch of utility methods and helpers FOR DEVELOPMENT ONLY. duration_log ( context = None , log = None ) # Context manager to log the duration of the wrapped code block. If no log function is provided will use a debug python logger for octoprint.util.dev . context can be set to give some textual context in the output. Parameters: Name Type Description Default context str A custom string to give some textual context in the output. None log callable The log function to use to log the execution duration. None log_duration ( log = None , with_args = False ) # Decorator that logs the execution duration of the annotated function. Parameters: Name Type Description Default log callable The logging function to use. None with_args bool Whether to include the calling arguments in the logged output or not. False","title":"dev"},{"location":"reference/octoprint/util/dev/#octoprintutildev","text":"This module provides a bunch of utility methods and helpers FOR DEVELOPMENT ONLY.","title":"octoprint.util.dev"},{"location":"reference/octoprint/util/dev/#octoprint.util.dev.duration_log","text":"Context manager to log the duration of the wrapped code block. If no log function is provided will use a debug python logger for octoprint.util.dev . context can be set to give some textual context in the output. Parameters: Name Type Description Default context str A custom string to give some textual context in the output. None log callable The log function to use to log the execution duration. None","title":"duration_log()"},{"location":"reference/octoprint/util/dev/#octoprint.util.dev.log_duration","text":"Decorator that logs the execution duration of the annotated function. Parameters: Name Type Description Default log callable The logging function to use. None with_args bool Whether to include the calling arguments in the logged output or not. False","title":"log_duration()"},{"location":"reference/octoprint/util/files/","text":"octoprint.util.files # find_collision_free_name ( filename , extension , existing_filenames , max_power = 2 ) # Tries to find a collision free translation of \" . \" to the 8.3 DOS compatible format, preventing collisions with any of the existing_filenames . First strips all of .\"/\\[]:;=, from the filename and extensions, converts them to lower case and truncates the extension to a maximum length of 3 characters. If the filename is already equal or less than 8 characters in length after that procedure and \" . \" are not contained in the existing_files , that concatenation will be returned as the result. If not, the following algorithm will be applied to try to find a collision free name:: set counter := power := 1 while counter < 10^max_power: set truncated := substr(filename, 0, 6 - power + 1) + \"~\" + counter set result := \"<truncated>.<extension>\" if result is collision free: return result counter++ if counter >= 10 ** power: power++ raise ValueError This will basically -- for a given original filename of some_filename and an extension of gco -- iterate through names of the format some_f~1.gco , some_f~2.gco , ..., some_~10.gco , some_~11.gco , ..., <prefix>~<n>.gco for n less than 10 ^ max_power , returning as soon as one is found that is not colliding. Parameters: Name Type Description Default filename string The filename without the extension to convert to 8.3. required extension string The extension to convert to 8.3 -- will be truncated to 3 characters if it's longer than that. required existing_filenames list A list of existing filenames to prevent name collisions with. required max_power int Limits the possible attempts of generating a collision free name to 10 ^ max_power variations. Defaults to 2, so the name generation will maximally reach <name>~99.<ext> before aborting and raising an exception. 2 Returns: Name Type Description string A 8.3 representation of the provided original filename, ensured to not collide with the provided existing_filenames Raises: Type Description ValueError No collision free name could be found. Examples: >>> find_collision_free_name ( \"test1234\" , \"gco\" , []) 'test1234.gco' >>> find_collision_free_name ( \"test1234\" , \"gcode\" , []) 'test1234.gco' >>> find_collision_free_name ( \"test12345\" , \"gco\" , []) 'test12~1.gco' >>> find_collision_free_name ( \"test 123\" , \"gco\" , []) 'test_123.gco' >>> find_collision_free_name ( \"test1234\" , \"g o\" , []) 'test1234.g_o' >>> find_collision_free_name ( \"test12345\" , \"gco\" , [ \"/test12~1.gco\" ]) 'test12~2.gco' >>> many_files = [ \"/test12~ {} .gco\" . format ( x ) for x in range ( 10 )[ 1 :]] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_files ) 'test1~10.gco' >>> many_more_files = many_files + [ \"/test1~ {} .gco\" . format ( x ) for x in range ( 10 , 99 )] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files ) 'test1~99.gco' >>> many_more_files_plus_one = many_more_files + [ \"/test1~99.gco\" ] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files_plus_one ) Traceback (most recent call last): ... ValueError : Can't create a collision free filename >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files_plus_one , max_power = 3 ) 'test~100.gco' get_dos_filename ( input , existing_filenames = None , extension = None , whitelisted_extensions = None , ** kwargs ) # Converts the provided input filename to a 8.3 DOS compatible filename. If existing_filenames is provided, the conversion result will be guaranteed not to collide with any of the filenames provided thus. Uses :func: find_collision_free_name internally. Parameters: Name Type Description Default input string The original filename incl. extension to convert to the 8.3 format. required existing_filenames list A list of existing filenames with which the generated 8.3 name must not collide. Optional. None extension string The .3 file extension to use for the generated filename. If not provided, the extension of the provided filename will simply be truncated to 3 characters. None whitelisted_extensions list A list of extensions on input that will be left as-is instead of exchanging for extension . None kwargs dict Additional keyword arguments to provide to :func: find_collision_free_name . required Returns: Name Type Description string A 8.3 compatible translation of the original filename, not colliding with the optionally provided existing_filenames and with the provided extension or the original extension shortened to a maximum of 3 characters. Raises: Type Description ValueError No 8.3 compatible name could be found that doesn't collide with the provided existing_filenames . Examples: >>> get_dos_filename ( \"test1234.gco\" ) 'test1234.gco' >>> get_dos_filename ( \"test1234.gcode\" ) 'test1234.gco' >>> get_dos_filename ( \"test12345.gco\" ) 'test12~1.gco' >>> get_dos_filename ( \"W\u00f6lfe \ud83d\udc3a.gcode\" ) 'wolfe_~1.gco' >>> get_dos_filename ( \"\ud83d\udc9a.gcode\" ) 'green_~1.gco' >>> get_dos_filename ( \"test1234.fnord\" , extension = \"gco\" ) 'test1234.gco' >>> get_dos_filename ( \"auto0.g\" , extension = \"gco\" ) 'auto0.gco' >>> get_dos_filename ( \"auto0.g\" , extension = \"gco\" , whitelisted_extensions = [ \"g\" ]) 'auto0.g' >>> get_dos_filename ( None ) >>> get_dos_filename ( \"foo\" ) 'foo' m20_timestamp_to_unix_timestamp ( timestamp ) # Converts \"M20 T\" timestamp to unix timestamp. Upper 16 bit contain date, lower 16 bit contain time. https://reprap.org/wiki/G-code#M20:_List_SD_card Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT Parameters: Name Type Description Default timestamp string M20 T timestamp as hex string required Returns: Name Type Description int Unix timestamp in seconds sanitize_filename ( name , really_universal = False ) # Sanitizes the provided filename. Implementation differs between Python versions. Under normal operation, pathvalidate.sanitize_filename will be used, leaving the name as intact as possible while still being a legal file name under all operating systems. Behaviour can be changed by setting really_universal to True . In this case, the name will be ASCII-fied, using octoprint.util.text.sanitize with safe chars -_.()[] and all spaces replaced by _ . This is the old behaviour. In all cases, a single leading . will be removed (as it denotes hidden files on *nix). Parameters: Name Type Description Default name The file name to sanitize. Only the name, no path elements. required really_universal If True , the old method of sanitization will always be used. Defaults to False . False Returns: Type Description the sanitized file name silent_remove ( file ) # Silently removes a file. Does not raise an error if the file doesn't exist. Parameters: Name Type Description Default file string The path of the file to be removed required unix_timestamp_to_m20_timestamp ( unix_timestamp ) # Converts unix timestamp to \"M20 T\" format which embeds date and time into 32bit int. Upper 16 bit contain date, lower 16 bit contain time. https://reprap.org/wiki/G-code#M20:_List_SD_card Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT Parameters: Name Type Description Default unix_timestamp int Unix timestamp in seconds required Returns: Name Type Description string M20 T timestamp as hex string","title":"files"},{"location":"reference/octoprint/util/files/#octoprintutilfiles","text":"","title":"octoprint.util.files"},{"location":"reference/octoprint/util/files/#octoprint.util.files.find_collision_free_name","text":"Tries to find a collision free translation of \" . \" to the 8.3 DOS compatible format, preventing collisions with any of the existing_filenames . First strips all of .\"/\\[]:;=, from the filename and extensions, converts them to lower case and truncates the extension to a maximum length of 3 characters. If the filename is already equal or less than 8 characters in length after that procedure and \" . \" are not contained in the existing_files , that concatenation will be returned as the result. If not, the following algorithm will be applied to try to find a collision free name:: set counter := power := 1 while counter < 10^max_power: set truncated := substr(filename, 0, 6 - power + 1) + \"~\" + counter set result := \"<truncated>.<extension>\" if result is collision free: return result counter++ if counter >= 10 ** power: power++ raise ValueError This will basically -- for a given original filename of some_filename and an extension of gco -- iterate through names of the format some_f~1.gco , some_f~2.gco , ..., some_~10.gco , some_~11.gco , ..., <prefix>~<n>.gco for n less than 10 ^ max_power , returning as soon as one is found that is not colliding. Parameters: Name Type Description Default filename string The filename without the extension to convert to 8.3. required extension string The extension to convert to 8.3 -- will be truncated to 3 characters if it's longer than that. required existing_filenames list A list of existing filenames to prevent name collisions with. required max_power int Limits the possible attempts of generating a collision free name to 10 ^ max_power variations. Defaults to 2, so the name generation will maximally reach <name>~99.<ext> before aborting and raising an exception. 2 Returns: Name Type Description string A 8.3 representation of the provided original filename, ensured to not collide with the provided existing_filenames Raises: Type Description ValueError No collision free name could be found. Examples: >>> find_collision_free_name ( \"test1234\" , \"gco\" , []) 'test1234.gco' >>> find_collision_free_name ( \"test1234\" , \"gcode\" , []) 'test1234.gco' >>> find_collision_free_name ( \"test12345\" , \"gco\" , []) 'test12~1.gco' >>> find_collision_free_name ( \"test 123\" , \"gco\" , []) 'test_123.gco' >>> find_collision_free_name ( \"test1234\" , \"g o\" , []) 'test1234.g_o' >>> find_collision_free_name ( \"test12345\" , \"gco\" , [ \"/test12~1.gco\" ]) 'test12~2.gco' >>> many_files = [ \"/test12~ {} .gco\" . format ( x ) for x in range ( 10 )[ 1 :]] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_files ) 'test1~10.gco' >>> many_more_files = many_files + [ \"/test1~ {} .gco\" . format ( x ) for x in range ( 10 , 99 )] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files ) 'test1~99.gco' >>> many_more_files_plus_one = many_more_files + [ \"/test1~99.gco\" ] >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files_plus_one ) Traceback (most recent call last): ... ValueError : Can't create a collision free filename >>> find_collision_free_name ( \"test12345\" , \"gco\" , many_more_files_plus_one , max_power = 3 ) 'test~100.gco'","title":"find_collision_free_name()"},{"location":"reference/octoprint/util/files/#octoprint.util.files.get_dos_filename","text":"Converts the provided input filename to a 8.3 DOS compatible filename. If existing_filenames is provided, the conversion result will be guaranteed not to collide with any of the filenames provided thus. Uses :func: find_collision_free_name internally. Parameters: Name Type Description Default input string The original filename incl. extension to convert to the 8.3 format. required existing_filenames list A list of existing filenames with which the generated 8.3 name must not collide. Optional. None extension string The .3 file extension to use for the generated filename. If not provided, the extension of the provided filename will simply be truncated to 3 characters. None whitelisted_extensions list A list of extensions on input that will be left as-is instead of exchanging for extension . None kwargs dict Additional keyword arguments to provide to :func: find_collision_free_name . required Returns: Name Type Description string A 8.3 compatible translation of the original filename, not colliding with the optionally provided existing_filenames and with the provided extension or the original extension shortened to a maximum of 3 characters. Raises: Type Description ValueError No 8.3 compatible name could be found that doesn't collide with the provided existing_filenames . Examples: >>> get_dos_filename ( \"test1234.gco\" ) 'test1234.gco' >>> get_dos_filename ( \"test1234.gcode\" ) 'test1234.gco' >>> get_dos_filename ( \"test12345.gco\" ) 'test12~1.gco' >>> get_dos_filename ( \"W\u00f6lfe \ud83d\udc3a.gcode\" ) 'wolfe_~1.gco' >>> get_dos_filename ( \"\ud83d\udc9a.gcode\" ) 'green_~1.gco' >>> get_dos_filename ( \"test1234.fnord\" , extension = \"gco\" ) 'test1234.gco' >>> get_dos_filename ( \"auto0.g\" , extension = \"gco\" ) 'auto0.gco' >>> get_dos_filename ( \"auto0.g\" , extension = \"gco\" , whitelisted_extensions = [ \"g\" ]) 'auto0.g' >>> get_dos_filename ( None ) >>> get_dos_filename ( \"foo\" ) 'foo'","title":"get_dos_filename()"},{"location":"reference/octoprint/util/files/#octoprint.util.files.m20_timestamp_to_unix_timestamp","text":"Converts \"M20 T\" timestamp to unix timestamp. Upper 16 bit contain date, lower 16 bit contain time. https://reprap.org/wiki/G-code#M20:_List_SD_card Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT Parameters: Name Type Description Default timestamp string M20 T timestamp as hex string required Returns: Name Type Description int Unix timestamp in seconds","title":"m20_timestamp_to_unix_timestamp()"},{"location":"reference/octoprint/util/files/#octoprint.util.files.sanitize_filename","text":"Sanitizes the provided filename. Implementation differs between Python versions. Under normal operation, pathvalidate.sanitize_filename will be used, leaving the name as intact as possible while still being a legal file name under all operating systems. Behaviour can be changed by setting really_universal to True . In this case, the name will be ASCII-fied, using octoprint.util.text.sanitize with safe chars -_.()[] and all spaces replaced by _ . This is the old behaviour. In all cases, a single leading . will be removed (as it denotes hidden files on *nix). Parameters: Name Type Description Default name The file name to sanitize. Only the name, no path elements. required really_universal If True , the old method of sanitization will always be used. Defaults to False . False Returns: Type Description the sanitized file name","title":"sanitize_filename()"},{"location":"reference/octoprint/util/files/#octoprint.util.files.silent_remove","text":"Silently removes a file. Does not raise an error if the file doesn't exist. Parameters: Name Type Description Default file string The path of the file to be removed required","title":"silent_remove()"},{"location":"reference/octoprint/util/files/#octoprint.util.files.unix_timestamp_to_m20_timestamp","text":"Converts unix timestamp to \"M20 T\" format which embeds date and time into 32bit int. Upper 16 bit contain date, lower 16 bit contain time. https://reprap.org/wiki/G-code#M20:_List_SD_card Format derived from FAT filesystem timestamps: https://wiki.osdev.org/FAT Parameters: Name Type Description Default unix_timestamp int Unix timestamp in seconds required Returns: Name Type Description string M20 T timestamp as hex string","title":"unix_timestamp_to_m20_timestamp()"},{"location":"reference/octoprint/util/fixes/","text":"octoprint.util.fixes # This module contains a functions that monkey patch third party dependencies in the one or other way.","title":"fixes"},{"location":"reference/octoprint/util/fixes/#octoprintutilfixes","text":"This module contains a functions that monkey patch third party dependencies in the one or other way.","title":"octoprint.util.fixes"},{"location":"reference/octoprint/util/gcodeInterpreter/","text":"octoprint.util.gcodeInterpreter # regex_command = re . compile ( '^ \\\\ s*((?P<codeGM>[GM] \\\\ d+)( \\\\ .(?P<subcode> \\\\ d+))?|(?P<codeT>T)(?P<tool> \\\\ d+))' ) module-attribute # Regex for a GCODE command. MinMax3D # Tracks minimum and maximum of recorded values Examples: minmax = MinMax3D() minmax.record(Vector3D(2.0, 2.0, 2.0)) minmax.min.x == 2.0 == minmax.max.x and minmax.min.y == 2.0 == minmax.max.y and minmax.min.z == 2.0 == minmax.max.z True minmax.record(Vector3D(1.0, 2.0, 3.0)) minmax.min.x == 1.0 and minmax.min.y == 2.0 and minmax.min.z == 2.0 True minmax.max.x == 2.0 and minmax.max.y == 2.0 and minmax.max.z == 3.0 True minmax.size == Vector3D(1.0, 0.0, 1.0) True empty = MinMax3D() empty.size == Vector3D(0.0, 0.0, 0.0) True weird = MinMax3D(min_z=-1.0) weird.record(Vector3D(2.0, 2.0, 2.0)) weird.record(Vector3D(1.0, 2.0, 3.0)) weird.min.z == -1.0 True weird.size == Vector3D(1.0, 0.0, 4.0) True record ( coordinate ) # Records the coordinate, storing the min and max values. The input vector components must not be None. Vector3D # 3D vector value Supports addition, subtraction and multiplication with a scalar value (float, int) as well as calculating the length of the vector. Examples: a = Vector3D(1.0, 1.0, 1.0) b = Vector3D(4.0, 4.0, 4.0) a + b == Vector3D(5.0, 5.0, 5.0) True b - a == Vector3D(3.0, 3.0, 3.0) True abs(a - b) == Vector3D(3.0, 3.0, 3.0) True a * 2 == Vector3D(2.0, 2.0, 2.0) True a * 2 == 2 * a True a.length == math.sqrt(a.x 2 + a.y 2 + a.z ** 2) True copied_a = Vector3D(a) a == copied_a True copied_a.x == a.x and copied_a.y == a.y and copied_a.z == a.z True","title":"gcodeInterpreter"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprintutilgcodeinterpreter","text":"","title":"octoprint.util.gcodeInterpreter"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.regex_command","text":"Regex for a GCODE command.","title":"regex_command"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.MinMax3D","text":"Tracks minimum and maximum of recorded values Examples: minmax = MinMax3D() minmax.record(Vector3D(2.0, 2.0, 2.0)) minmax.min.x == 2.0 == minmax.max.x and minmax.min.y == 2.0 == minmax.max.y and minmax.min.z == 2.0 == minmax.max.z True minmax.record(Vector3D(1.0, 2.0, 3.0)) minmax.min.x == 1.0 and minmax.min.y == 2.0 and minmax.min.z == 2.0 True minmax.max.x == 2.0 and minmax.max.y == 2.0 and minmax.max.z == 3.0 True minmax.size == Vector3D(1.0, 0.0, 1.0) True empty = MinMax3D() empty.size == Vector3D(0.0, 0.0, 0.0) True weird = MinMax3D(min_z=-1.0) weird.record(Vector3D(2.0, 2.0, 2.0)) weird.record(Vector3D(1.0, 2.0, 3.0)) weird.min.z == -1.0 True weird.size == Vector3D(1.0, 0.0, 4.0) True","title":"MinMax3D"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.MinMax3D.record","text":"Records the coordinate, storing the min and max values. The input vector components must not be None.","title":"record()"},{"location":"reference/octoprint/util/gcodeInterpreter/#octoprint.util.gcodeInterpreter.Vector3D","text":"3D vector value Supports addition, subtraction and multiplication with a scalar value (float, int) as well as calculating the length of the vector. Examples: a = Vector3D(1.0, 1.0, 1.0) b = Vector3D(4.0, 4.0, 4.0) a + b == Vector3D(5.0, 5.0, 5.0) True b - a == Vector3D(3.0, 3.0, 3.0) True abs(a - b) == Vector3D(3.0, 3.0, 3.0) True a * 2 == Vector3D(2.0, 2.0, 2.0) True a * 2 == 2 * a True a.length == math.sqrt(a.x 2 + a.y 2 + a.z ** 2) True copied_a = Vector3D(a) a == copied_a True copied_a.x == a.x and copied_a.y == a.y and copied_a.z == a.z True","title":"Vector3D"},{"location":"reference/octoprint/util/jinja/","text":"octoprint.util.jinja # FilteredFileSystemLoader # Bases: FileSystemLoader Jinja2 FileSystemLoader subclass that allows filtering templates. Only such templates will be accessible for whose paths the provided path_filter filter function returns True. path_filter will receive the actual path on disc and should behave just like callables provided to Python's internal filter function, returning True if the path is cleared and False if it is supposed to be removed from results and hence filter(path_filter, iterable) should be equivalent to [item for item in iterable if path_filter(item)] . If path_filter is not set or not a callable , the loader will behave just like the regular Jinja2 FileSystemLoader . WarningLoader # Bases: BaseLoader Logs a warning if the loader is used to successfully load a template.","title":"jinja"},{"location":"reference/octoprint/util/jinja/#octoprintutiljinja","text":"","title":"octoprint.util.jinja"},{"location":"reference/octoprint/util/jinja/#octoprint.util.jinja.FilteredFileSystemLoader","text":"Bases: FileSystemLoader Jinja2 FileSystemLoader subclass that allows filtering templates. Only such templates will be accessible for whose paths the provided path_filter filter function returns True. path_filter will receive the actual path on disc and should behave just like callables provided to Python's internal filter function, returning True if the path is cleared and False if it is supposed to be removed from results and hence filter(path_filter, iterable) should be equivalent to [item for item in iterable if path_filter(item)] . If path_filter is not set or not a callable , the loader will behave just like the regular Jinja2 FileSystemLoader .","title":"FilteredFileSystemLoader"},{"location":"reference/octoprint/util/jinja/#octoprint.util.jinja.WarningLoader","text":"Bases: BaseLoader Logs a warning if the loader is used to successfully load a template.","title":"WarningLoader"},{"location":"reference/octoprint/util/net/","text":"octoprint.util.net # address_for_client ( host , port , timeout = 3.05 , addresses = None , interfaces = None , ignored = None ) # Determines the address of the network interface on this host needed to connect to the indicated client host and port. interface_addresses ( family = None , interfaces = None , ignored = None ) # Retrieves all of the host's network interface addresses. server_reachable ( host , port , timeout = 3.05 , proto = 'tcp' , source = None ) # Checks if a server is reachable Parameters: Name Type Description Default host str host to check against required port int port to check against required timeout float timeout for check 3.05 proto str tcp or udp 'tcp' source str optional, socket used for check will be bound against this address if provided None Returns: Name Type Description boolean True if a connection to the server could be opened, False otherwise","title":"net"},{"location":"reference/octoprint/util/net/#octoprintutilnet","text":"","title":"octoprint.util.net"},{"location":"reference/octoprint/util/net/#octoprint.util.net.address_for_client","text":"Determines the address of the network interface on this host needed to connect to the indicated client host and port.","title":"address_for_client()"},{"location":"reference/octoprint/util/net/#octoprint.util.net.interface_addresses","text":"Retrieves all of the host's network interface addresses.","title":"interface_addresses()"},{"location":"reference/octoprint/util/net/#octoprint.util.net.server_reachable","text":"Checks if a server is reachable Parameters: Name Type Description Default host str host to check against required port int port to check against required timeout float timeout for check 3.05 proto str tcp or udp 'tcp' source str optional, socket used for check will be bound against this address if provided None Returns: Name Type Description boolean True if a connection to the server could be opened, False otherwise","title":"server_reachable()"},{"location":"reference/octoprint/util/paths/","text":"octoprint.util.paths #","title":"paths"},{"location":"reference/octoprint/util/paths/#octoprintutilpaths","text":"","title":"octoprint.util.paths"},{"location":"reference/octoprint/util/pip/","text":"octoprint.util.pip # OUTPUT_ALREADY_INSTALLED = 'Requirement already satisfied' module-attribute # Start of a line indicating some package was already installed in this version OUTPUT_FAILURE = 'Could not install' module-attribute # Start of failure result line OUTPUT_POTENTIAL_EGG_PROBLEM_POSIX = 'No such file or directory' module-attribute # Line indicating a potential egg problem on Posix OUTPUT_POTENTIAL_EGG_PROBLEM_WINDOWS = 'The system cannot find the file specified' module-attribute # Line indicating a potential egg problem on Windows OUTPUT_PYTHON_MISMATCH = 'requires a different Python:' module-attribute # Line segment indicating a mismatch of python_requires version OUTPUT_PYTHON_SYNTAX = 'SyntaxError: invalid syntax' module-attribute # Line segment indicating a syntax error, could be a python mismatch, e.g. f-strings OUTPUT_SUCCESS = 'Successfully installed' module-attribute # Start of successful result line LocalPipCaller # Bases: PipCaller The LocalPipCaller always uses the pip instance associated with sys.executable. PipCaller # Bases: CommandlineCaller get_result_line ( lines ) # Returns the success or failure line contained in the output. pip might generate more lines after the actual result line, which is why we can't just take the final line. So instead we look for the last line starting with either \"Successfully installed\" or \"Could not installed\". If neither can be found, an empty string will be returned, which should also be considered a failure to install. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description str the last result line, or an empty string if none was found, in which case failure should be resumed is_already_installed ( lines ) # Returns whether the given output lines indicates the packages was already installed or not. This is currently determined by an empty result line and any line starting with \"Requirement already satisfied\". Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise is_egg_problem ( lines ) # Returns whether the given output lines indicates an occurrence of the \"egg-problem\". If something (target or dependency of target) was installed as an egg at an earlier date (e.g. thanks to just running python setup.py install), pip install will throw an error after updating that something to a newer (non-egg) version since it will still have the egg on its sys.path and expect to read data from it. See commit 8ad0aadb52b9ef354cad1b33bd4882ae2fbdb8d6 for more details. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise is_python_mismatch ( lines ) # Returns whether the given output lines indicates a Python version mismatch. This is currently determined by either a syntax error or an explicit \"requires a different Python\" line. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise","title":"pip"},{"location":"reference/octoprint/util/pip/#octoprintutilpip","text":"","title":"octoprint.util.pip"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_ALREADY_INSTALLED","text":"Start of a line indicating some package was already installed in this version","title":"OUTPUT_ALREADY_INSTALLED"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_FAILURE","text":"Start of failure result line","title":"OUTPUT_FAILURE"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_POTENTIAL_EGG_PROBLEM_POSIX","text":"Line indicating a potential egg problem on Posix","title":"OUTPUT_POTENTIAL_EGG_PROBLEM_POSIX"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_POTENTIAL_EGG_PROBLEM_WINDOWS","text":"Line indicating a potential egg problem on Windows","title":"OUTPUT_POTENTIAL_EGG_PROBLEM_WINDOWS"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_PYTHON_MISMATCH","text":"Line segment indicating a mismatch of python_requires version","title":"OUTPUT_PYTHON_MISMATCH"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_PYTHON_SYNTAX","text":"Line segment indicating a syntax error, could be a python mismatch, e.g. f-strings","title":"OUTPUT_PYTHON_SYNTAX"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.OUTPUT_SUCCESS","text":"Start of successful result line","title":"OUTPUT_SUCCESS"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.LocalPipCaller","text":"Bases: PipCaller The LocalPipCaller always uses the pip instance associated with sys.executable.","title":"LocalPipCaller"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.PipCaller","text":"Bases: CommandlineCaller","title":"PipCaller"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.get_result_line","text":"Returns the success or failure line contained in the output. pip might generate more lines after the actual result line, which is why we can't just take the final line. So instead we look for the last line starting with either \"Successfully installed\" or \"Could not installed\". If neither can be found, an empty string will be returned, which should also be considered a failure to install. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description str the last result line, or an empty string if none was found, in which case failure should be resumed","title":"get_result_line()"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_already_installed","text":"Returns whether the given output lines indicates the packages was already installed or not. This is currently determined by an empty result line and any line starting with \"Requirement already satisfied\". Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise","title":"is_already_installed()"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_egg_problem","text":"Returns whether the given output lines indicates an occurrence of the \"egg-problem\". If something (target or dependency of target) was installed as an egg at an earlier date (e.g. thanks to just running python setup.py install), pip install will throw an error after updating that something to a newer (non-egg) version since it will still have the egg on its sys.path and expect to read data from it. See commit 8ad0aadb52b9ef354cad1b33bd4882ae2fbdb8d6 for more details. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise","title":"is_egg_problem()"},{"location":"reference/octoprint/util/pip/#octoprint.util.pip.is_python_mismatch","text":"Returns whether the given output lines indicates a Python version mismatch. This is currently determined by either a syntax error or an explicit \"requires a different Python\" line. Parameters: Name Type Description Default lines list of str the output to parse, stdout or stderr required Returns: Name Type Description bool True if detected, False otherwise","title":"is_python_mismatch()"},{"location":"reference/octoprint/util/text/","text":"octoprint.util.text # sanitize ( text , safe_chars = '-_.' , demoji = True ) # Sanitizes text by running it through slugify and optionally emoji translating. Examples: sanitize(\"Hello World!\") 'Hello-World' sanitize(\"Hello World!\", safe_chars=\"-_. \") 'Hello World' sanitize(\"\u2764\") 'red_heart' sanitize(\"\u2764\ufe00\") 'red_heart' sanitize(\"\u2764\", demoji=False) '' Parameters: Name Type Description Default text the text to sanitize required safe_chars characters to consider safe and to keep after sanitization '-_.' emoji whether to also convert emoji to text required","title":"text"},{"location":"reference/octoprint/util/text/#octoprintutiltext","text":"","title":"octoprint.util.text"},{"location":"reference/octoprint/util/text/#octoprint.util.text.sanitize","text":"Sanitizes text by running it through slugify and optionally emoji translating. Examples: sanitize(\"Hello World!\") 'Hello-World' sanitize(\"Hello World!\", safe_chars=\"-_. \") 'Hello World' sanitize(\"\u2764\") 'red_heart' sanitize(\"\u2764\ufe00\") 'red_heart' sanitize(\"\u2764\", demoji=False) '' Parameters: Name Type Description Default text the text to sanitize required safe_chars characters to consider safe and to keep after sanitization '-_.' emoji whether to also convert emoji to text required","title":"sanitize()"},{"location":"reference/octoprint/util/tz/","text":"octoprint.util.tz #","title":"tz"},{"location":"reference/octoprint/util/tz/#octoprintutiltz","text":"","title":"octoprint.util.tz"},{"location":"reference/octoprint/util/version/","text":"octoprint.util.version # This module provides a bunch of utility methods and helpers for version handling. get_comparable_version ( version_string , cut = None , ** kwargs ) # Parameters: Name Type Description Default version_string The version string for which to create a comparable version instance required cut optional, how many version digits to remove (e.g., cut=1 will turn 1.2.3 into 1.2). Defaults to None , meaning no further action. Settings this to 0 will remove anything up to the last digit, e.g. dev or rc information. None Returns: Type Description A comparable version is_octoprint_compatible ( * compatibility_entries , ** kwargs ) # Tests if the current octoprint_version is compatible to any of the provided compatibility_entries . Parameters: Name Type Description Default compatibility_entries str compatibility string(s) to test against, result will be True if any match is found required octoprint_version tuple or SetuptoolsVersion optional OctoPrint version to match against, if not current base version will be determined via :func: get_octoprint_version . required Returns: Type Description (bool) True if any of the provided compatibility entries matches or there are no entries, else False is_release ( version ) # import pkg_resources is_release(pkg_resources.parse_version(\"1.3.6rc3\")) True is_release(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.6\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False is_stable ( version ) # import pkg_resources is_stable(pkg_resources.parse_version(\"1.3.6rc3\")) False is_stable(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.6\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False","title":"version"},{"location":"reference/octoprint/util/version/#octoprintutilversion","text":"This module provides a bunch of utility methods and helpers for version handling.","title":"octoprint.util.version"},{"location":"reference/octoprint/util/version/#octoprint.util.version.get_comparable_version","text":"Parameters: Name Type Description Default version_string The version string for which to create a comparable version instance required cut optional, how many version digits to remove (e.g., cut=1 will turn 1.2.3 into 1.2). Defaults to None , meaning no further action. Settings this to 0 will remove anything up to the last digit, e.g. dev or rc information. None Returns: Type Description A comparable version","title":"get_comparable_version()"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_octoprint_compatible","text":"Tests if the current octoprint_version is compatible to any of the provided compatibility_entries . Parameters: Name Type Description Default compatibility_entries str compatibility string(s) to test against, result will be True if any match is found required octoprint_version tuple or SetuptoolsVersion optional OctoPrint version to match against, if not current base version will be determined via :func: get_octoprint_version . required Returns: Type Description (bool) True if any of the provided compatibility entries matches or there are no entries, else False","title":"is_octoprint_compatible()"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_release","text":"import pkg_resources is_release(pkg_resources.parse_version(\"1.3.6rc3\")) True is_release(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.6\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_release(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_release(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False","title":"is_release()"},{"location":"reference/octoprint/util/version/#octoprint.util.version.is_stable","text":"import pkg_resources is_stable(pkg_resources.parse_version(\"1.3.6rc3\")) False is_stable(pkg_resources.parse_version(\"1.3.6rc3.dev2+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.6\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1+g1234\")) True is_stable(pkg_resources.parse_version(\"1.3.6.post1.dev0+g1234\")) False is_stable(pkg_resources.parse_version(\"1.3.7.dev123+g23545\")) False","title":"is_stable()"},{"location":"reference/octoprint/util/yaml/","text":"octoprint.util.yaml # dump ( data , pretty = False , ** kwargs ) # Safely and performantly dumps the data to a yaml string. :param data: the data to be serialized :param pretty: formats the output yaml into a more human-friendly format :param kwargs: any other args to be passed to the internal yaml.dump() call. :return: yaml-serialized data :rtype: str load_from_file ( file = None , path = None ) # Safely and performantly loads yaml data from the given source. Either a path or a file must be passed in. save_to_file ( data , file = None , path = None , pretty = False , ** kwargs ) # Safely and performantly dumps the data to yaml. To dump to a string, use yaml.dump() . :type data: object :param data: the data to be serialized :type file: typing.TextIO | None :type path: str | None :type pretty: bool :param pretty: formats the output yaml into a more human-friendly format","title":"yaml"},{"location":"reference/octoprint/util/yaml/#octoprintutilyaml","text":"","title":"octoprint.util.yaml"},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.dump","text":"Safely and performantly dumps the data to a yaml string. :param data: the data to be serialized :param pretty: formats the output yaml into a more human-friendly format :param kwargs: any other args to be passed to the internal yaml.dump() call. :return: yaml-serialized data :rtype: str","title":"dump()"},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.load_from_file","text":"Safely and performantly loads yaml data from the given source. Either a path or a file must be passed in.","title":"load_from_file()"},{"location":"reference/octoprint/util/yaml/#octoprint.util.yaml.save_to_file","text":"Safely and performantly dumps the data to yaml. To dump to a string, use yaml.dump() . :type data: object :param data: the data to be serialized :type file: typing.TextIO | None :type path: str | None :type pretty: bool :param pretty: formats the output yaml into a more human-friendly format","title":"save_to_file()"},{"location":"reference/octoprint/util/json/","text":"octoprint.util.json #","title":"octoprint.util.json"},{"location":"reference/octoprint/util/json/#octoprintutiljson","text":"","title":"octoprint.util.json"},{"location":"reference/octoprint/util/json/encoding/","text":"octoprint.util.json.encoding # JsonEncoding # add_encoder ( typ , encoder ) classmethod # Add an encoder for a type. :param typ: the type to add an encoder for :param encoder: the encoder. Must take a single argument and return a tuple (name, parameters...) dumps ( obj ) classmethod # Dump an object to JSON, handles additional types that the JSON encoder can't, like bytes and frozendicts.","title":"encoding"},{"location":"reference/octoprint/util/json/encoding/#octoprintutiljsonencoding","text":"","title":"octoprint.util.json.encoding"},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding","text":"","title":"JsonEncoding"},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding.add_encoder","text":"Add an encoder for a type. :param typ: the type to add an encoder for :param encoder: the encoder. Must take a single argument and return a tuple (name, parameters...)","title":"add_encoder()"},{"location":"reference/octoprint/util/json/encoding/#octoprint.util.json.encoding.JsonEncoding.dumps","text":"Dump an object to JSON, handles additional types that the JSON encoder can't, like bytes and frozendicts.","title":"dumps()"},{"location":"reference/octoprint/util/json/serializing/","text":"octoprint.util.json.serializing # SerializableJsonEncoding # Bases: JsonEncoding A JSON encoding that can serialize and deserialize objects, including additional objects otherwise not serializable by the standard JSON encoder bytes frozendict.frozendict datetime.datetime time.struct_time decode ( dct ) classmethod # Recursively replace all instances of decodable types with their decoded values. You'll want to have used class_encode() in your encoder to get this to work properly. encode ( val ) classmethod # Recursively replace all instances of encodable types with their encoded value. This is useful over the default= functionality of the JSON encoder because JSON will not call default for tuples, lists, ints, etc: https://docs.python.org/3/library/json.html#json.JSONEncoder Cannot handle circular references. class_encode ( name , * params ) # Encode a class name and parameters into a serializable dict. You'll probably want to use this if you're going to set a custom decoder. This stores the class names in a format inspired by the JSON-RPC spec at https://www.jsonrpc.org/specification_v1#a3.JSONClasshinting","title":"serializing"},{"location":"reference/octoprint/util/json/serializing/#octoprintutiljsonserializing","text":"","title":"octoprint.util.json.serializing"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding","text":"Bases: JsonEncoding A JSON encoding that can serialize and deserialize objects, including additional objects otherwise not serializable by the standard JSON encoder bytes frozendict.frozendict datetime.datetime time.struct_time","title":"SerializableJsonEncoding"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding.decode","text":"Recursively replace all instances of decodable types with their decoded values. You'll want to have used class_encode() in your encoder to get this to work properly.","title":"decode()"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.SerializableJsonEncoding.encode","text":"Recursively replace all instances of encodable types with their encoded value. This is useful over the default= functionality of the JSON encoder because JSON will not call default for tuples, lists, ints, etc: https://docs.python.org/3/library/json.html#json.JSONEncoder Cannot handle circular references.","title":"encode()"},{"location":"reference/octoprint/util/json/serializing/#octoprint.util.json.serializing.class_encode","text":"Encode a class name and parameters into a serializable dict. You'll probably want to use this if you're going to set a custom decoder. This stores the class names in a format inspired by the JSON-RPC spec at https://www.jsonrpc.org/specification_v1#a3.JSONClasshinting","title":"class_encode()"},{"location":"reference/octoprint/util/piptestballoon/setup/","text":"","title":"setup"},{"location":"reference/octoprint/util/platform/","text":"octoprint.util.platform # This module bundles platform specific flags and implementations. CLOSE_FDS = True module-attribute # Default setting for close_fds parameter to Popen/sarge.run. Set close_fds on every sub process to this to ensure file handlers will be closed on child processes on platforms. get_os () # Returns a canonical OS identifier. Currently the following OS are recognized: win32 , linux ( sys.platform = linux* ), macos ( sys.platform = darwin ) and freebsd ( sys.platform = freebsd* ). Returns: Type Description (str) mapped OS identifier is_os_compatible ( compatibility_entries , current_os = None ) # Tests if the current_os or sys.platform are blacklisted or whitelisted in compatibility_entries Returns: Type Description (bool) True if the os is compatible, False otherwise set_close_exec ( handle ) # Set close_exec flag on handle, if supported by the OS.","title":"platform"},{"location":"reference/octoprint/util/platform/#octoprintutilplatform","text":"This module bundles platform specific flags and implementations.","title":"octoprint.util.platform"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.CLOSE_FDS","text":"Default setting for close_fds parameter to Popen/sarge.run. Set close_fds on every sub process to this to ensure file handlers will be closed on child processes on platforms.","title":"CLOSE_FDS"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.get_os","text":"Returns a canonical OS identifier. Currently the following OS are recognized: win32 , linux ( sys.platform = linux* ), macos ( sys.platform = darwin ) and freebsd ( sys.platform = freebsd* ). Returns: Type Description (str) mapped OS identifier","title":"get_os()"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.is_os_compatible","text":"Tests if the current_os or sys.platform are blacklisted or whitelisted in compatibility_entries Returns: Type Description (bool) True if the os is compatible, False otherwise","title":"is_os_compatible()"},{"location":"reference/octoprint/util/platform/#octoprint.util.platform.set_close_exec","text":"Set close_exec flag on handle, if supported by the OS.","title":"set_close_exec()"},{"location":"reference/octoprint/vendor/","text":"octoprint.vendor #","title":"octoprint.vendor"},{"location":"reference/octoprint/vendor/#octoprintvendor","text":"","title":"octoprint.vendor"},{"location":"reference/octoprint/vendor/flask_principal/","text":"octoprint.vendor.flask_principal # flask_principal ~~~~~~~~~~~~~~~ Identity management for Flask. (c) 2012 by Ali Afshar. :license: MIT, see LICENSE for more details. ItemNeed = namedtuple ( 'ItemNeed' , [ 'method' , 'value' , 'type' ]) module-attribute # A required item need An item need is just a named tuple, and practically any tuple will do. In addition to other Needs, there is a type, for example this could be specified as:: ItemNeed('update', 27, 'posts') ('update', 27, 'posts') # or like this And that might describe the permission to update a particular blog post. In reality, the developer is free to choose whatever convention the permissions are. Need = namedtuple ( 'Need' , [ 'method' , 'value' ]) module-attribute # A required need This is just a named tuple, and practically any tuple will do. The method attribute can be used to look up element 0, and the value attribute can be used to look up element 1. AnonymousIdentity # Bases: Identity An anonymous identity Denial # Bases: Permission Shortcut class for passing excluded needs. Identity # Bases: object Represent the user's identity. :param id: The user id :param auth_type: The authentication type used to confirm the user's identity. The identity is used to represent the user's identity in the system. This object is created on login, or on the start of the request as loaded from the user's session. Once loaded it is sent using the identity-loaded signal, and should be populated with additional required information. Needs that are provided by this identity should be added to the provides set after loading. can ( permission ) # Whether the identity has access to the permission. :param permission: The permission to test provision for. IdentityContext # Bases: object The context of an identity for a permission. .. note:: The principal is usually created by the flaskext.Permission.require method call for normal use-cases. The principal behaves as either a context manager or a decorator. The permission is checked for provision in the identity, and if available the flow is continued (context manager) or the function is executed (decorator). http_exception = http_exception instance-attribute # The permission of this principal can () # Whether the identity has access to the permission identity () property # The identity of this principal Permission # Bases: object Represents needs, any of which must be present to access a resource :param needs: The needs for this permission __and__ ( other ) # Does the same thing as self.union(other) __bool__ () # Equivalent to self.can() . __contains__ ( other ) # Does the same thing as other.issubset(self) . __init__ ( * needs ) # A set of needs, any of which must be present in an identity to have access. __nonzero__ () # Equivalent to self.can() . __or__ ( other ) # Does the same thing as self.difference(other) allows ( identity ) # Whether the identity can access this permission. :param identity: The identity can () # Whether the required context for this permission has access This creates an identity context and tests whether it can access this permission difference ( other ) # Create a new permission consisting of requirements in this permission and not in the other. issubset ( other ) # Whether this permission needs are a subset of another :param other: The other permission require ( http_exception = None ) # Create a principal for this permission. The principal may be used as a context manager, or a decroator. If http_exception is passed then abort() will be called with the HTTP exception code. Otherwise a PermissionDenied exception will be raised if the identity does not meet the requirements. :param http_exception: the HTTP exception code (403, 401 etc) reverse () # Returns reverse of current state (needs->excludes, excludes->needs) test ( http_exception = None ) # Checks if permission available and raises relevant exception if not. This is useful if you just want to check permission without wrapping everything in a require() block. This is equivalent to:: with permission.require(): pass union ( other ) # Create a new permission with the requirements of the union of this and other. :param other: The other permission PermissionDenied # Bases: RuntimeError Permission denied to the resource Principal # Bases: object Principal extension :param app: The flask application to extend :param use_sessions: Whether to use sessions to extract and store identification. :param skip_static: Whether to ignore static endpoints. identity_loader ( f ) # Decorator to define a function as an identity loader. An identity loader function is called before request to find any provided identities. The first found identity is used to load from. For example:: app = Flask(__name__) principals = Principal(app) @principals.identity_loader def load_identity_from_weird_usecase(): return Identity('ali') identity_saver ( f ) # Decorator to define a function as an identity saver. An identity loader saver is called when the identity is set to persist it for the next request. For example:: app = Flask(__name__) principals = Principal(app) @principals.identity_saver def save_identity_to_weird_usecase(identity): my_special_cookie['identity'] = identity set_identity ( identity ) # Set the current identity. :param identity: The identity to set","title":"flask_principal"},{"location":"reference/octoprint/vendor/flask_principal/#octoprintvendorflask_principal","text":"flask_principal ~~~~~~~~~~~~~~~ Identity management for Flask. (c) 2012 by Ali Afshar. :license: MIT, see LICENSE for more details.","title":"octoprint.vendor.flask_principal"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.ItemNeed","text":"A required item need An item need is just a named tuple, and practically any tuple will do. In addition to other Needs, there is a type, for example this could be specified as:: ItemNeed('update', 27, 'posts') ('update', 27, 'posts') # or like this And that might describe the permission to update a particular blog post. In reality, the developer is free to choose whatever convention the permissions are.","title":"ItemNeed"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Need","text":"A required need This is just a named tuple, and practically any tuple will do. The method attribute can be used to look up element 0, and the value attribute can be used to look up element 1.","title":"Need"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.AnonymousIdentity","text":"Bases: Identity An anonymous identity","title":"AnonymousIdentity"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Denial","text":"Bases: Permission Shortcut class for passing excluded needs.","title":"Denial"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Identity","text":"Bases: object Represent the user's identity. :param id: The user id :param auth_type: The authentication type used to confirm the user's identity. The identity is used to represent the user's identity in the system. This object is created on login, or on the start of the request as loaded from the user's session. Once loaded it is sent using the identity-loaded signal, and should be populated with additional required information. Needs that are provided by this identity should be added to the provides set after loading.","title":"Identity"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Identity.can","text":"Whether the identity has access to the permission. :param permission: The permission to test provision for.","title":"can()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext","text":"Bases: object The context of an identity for a permission. .. note:: The principal is usually created by the flaskext.Permission.require method call for normal use-cases. The principal behaves as either a context manager or a decorator. The permission is checked for provision in the identity, and if available the flow is continued (context manager) or the function is executed (decorator).","title":"IdentityContext"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.http_exception","text":"The permission of this principal","title":"http_exception"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.can","text":"Whether the identity has access to the permission","title":"can()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.IdentityContext.identity","text":"The identity of this principal","title":"identity()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission","text":"Bases: object Represents needs, any of which must be present to access a resource :param needs: The needs for this permission","title":"Permission"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__and__","text":"Does the same thing as self.union(other)","title":"__and__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__bool__","text":"Equivalent to self.can() .","title":"__bool__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__contains__","text":"Does the same thing as other.issubset(self) .","title":"__contains__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__init__","text":"A set of needs, any of which must be present in an identity to have access.","title":"__init__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__nonzero__","text":"Equivalent to self.can() .","title":"__nonzero__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.__or__","text":"Does the same thing as self.difference(other)","title":"__or__()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.allows","text":"Whether the identity can access this permission. :param identity: The identity","title":"allows()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.can","text":"Whether the required context for this permission has access This creates an identity context and tests whether it can access this permission","title":"can()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.difference","text":"Create a new permission consisting of requirements in this permission and not in the other.","title":"difference()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.issubset","text":"Whether this permission needs are a subset of another :param other: The other permission","title":"issubset()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.require","text":"Create a principal for this permission. The principal may be used as a context manager, or a decroator. If http_exception is passed then abort() will be called with the HTTP exception code. Otherwise a PermissionDenied exception will be raised if the identity does not meet the requirements. :param http_exception: the HTTP exception code (403, 401 etc)","title":"require()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.reverse","text":"Returns reverse of current state (needs->excludes, excludes->needs)","title":"reverse()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.test","text":"Checks if permission available and raises relevant exception if not. This is useful if you just want to check permission without wrapping everything in a require() block. This is equivalent to:: with permission.require(): pass","title":"test()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Permission.union","text":"Create a new permission with the requirements of the union of this and other. :param other: The other permission","title":"union()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.PermissionDenied","text":"Bases: RuntimeError Permission denied to the resource","title":"PermissionDenied"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal","text":"Bases: object Principal extension :param app: The flask application to extend :param use_sessions: Whether to use sessions to extract and store identification. :param skip_static: Whether to ignore static endpoints.","title":"Principal"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.identity_loader","text":"Decorator to define a function as an identity loader. An identity loader function is called before request to find any provided identities. The first found identity is used to load from. For example:: app = Flask(__name__) principals = Principal(app) @principals.identity_loader def load_identity_from_weird_usecase(): return Identity('ali')","title":"identity_loader()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.identity_saver","text":"Decorator to define a function as an identity saver. An identity loader saver is called when the identity is set to persist it for the next request. For example:: app = Flask(__name__) principals = Principal(app) @principals.identity_saver def save_identity_to_weird_usecase(identity): my_special_cookie['identity'] = identity","title":"identity_saver()"},{"location":"reference/octoprint/vendor/flask_principal/#octoprint.vendor.flask_principal.Principal.set_identity","text":"Set the current identity. :param identity: The identity to set","title":"set_identity()"},{"location":"reference/octoprint/vendor/imp/","text":"octoprint.vendor.imp # This module provides the components needed to build your own import function. Undocumented functions are obsolete. In most cases it is preferred you consider using the importlib module's functionality over this module. Taken from CPython 3.7.0 and vendored to still have it when it gets completely removed. Licensed under the PSF LICENSE AGREEMENT https://docs.python.org/3/license.html NullImporter # Null import object. find_module ( fullname ) # Always returns None. cache_from_source ( path , debug_override = None ) # Given the path to a .py file, return the path to its .pyc file. The .py file does not need to exist; this simply returns the path to the .pyc file calculated as if the .py file were imported. If debug_override is not None, then it must be a boolean and is used in place of sys.flags.optimize. If sys.implementation.cache_tag is None then NotImplementedError is raised. find_module ( name , path = None ) # Search for a module. If path is omitted or None, search for a built-in, frozen or special module and continue search in sys.path. The module name cannot contain '.'; to search for a submodule of a package, pass the submodule name and the package's path . get_magic () # Return the magic number for .pyc files. get_tag () # Return the magic tag for .pyc files. init_builtin ( name ) # Load and return a built-in module by name, or None is such module doesn't exist load_compiled ( name , pathname , file = None ) # DEPRECATED load_dynamic ( name , path , file = None ) # Load an extension module. load_module ( name , file , filename , details ) # Load a module, given information returned by find_module(). The module name must include the full package name, if any. new_module ( name ) # Create a new module. The module is not entered into sys.modules. reload ( module ) # Reload the module and return it. The module must have been successfully imported before. source_from_cache ( path ) # Given the path to a .pyc. file, return the path to its .py file. The .pyc file does not need to exist; this simply returns the path to the .py file calculated to correspond to the .pyc file. If path does not conform to PEP 3147 format, ValueError will be raised. If sys.implementation.cache_tag is None then NotImplementedError is raised.","title":"imp"},{"location":"reference/octoprint/vendor/imp/#octoprintvendorimp","text":"This module provides the components needed to build your own import function. Undocumented functions are obsolete. In most cases it is preferred you consider using the importlib module's functionality over this module. Taken from CPython 3.7.0 and vendored to still have it when it gets completely removed. Licensed under the PSF LICENSE AGREEMENT https://docs.python.org/3/license.html","title":"octoprint.vendor.imp"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.NullImporter","text":"Null import object.","title":"NullImporter"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.NullImporter.find_module","text":"Always returns None.","title":"find_module()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.cache_from_source","text":"Given the path to a .py file, return the path to its .pyc file. The .py file does not need to exist; this simply returns the path to the .pyc file calculated as if the .py file were imported. If debug_override is not None, then it must be a boolean and is used in place of sys.flags.optimize. If sys.implementation.cache_tag is None then NotImplementedError is raised.","title":"cache_from_source()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.find_module","text":"Search for a module. If path is omitted or None, search for a built-in, frozen or special module and continue search in sys.path. The module name cannot contain '.'; to search for a submodule of a package, pass the submodule name and the package's path .","title":"find_module()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.get_magic","text":"Return the magic number for .pyc files.","title":"get_magic()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.get_tag","text":"Return the magic tag for .pyc files.","title":"get_tag()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.init_builtin","text":"Load and return a built-in module by name, or None is such module doesn't exist","title":"init_builtin()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_compiled","text":"DEPRECATED","title":"load_compiled()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_dynamic","text":"Load an extension module.","title":"load_dynamic()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.load_module","text":"Load a module, given information returned by find_module(). The module name must include the full package name, if any.","title":"load_module()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.new_module","text":"Create a new module. The module is not entered into sys.modules.","title":"new_module()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.reload","text":"Reload the module and return it. The module must have been successfully imported before.","title":"reload()"},{"location":"reference/octoprint/vendor/imp/#octoprint.vendor.imp.source_from_cache","text":"Given the path to a .pyc. file, return the path to its .py file. The .pyc file does not need to exist; this simply returns the path to the .py file calculated to correspond to the .pyc file. If path does not conform to PEP 3147 format, ValueError will be raised. If sys.implementation.cache_tag is None then NotImplementedError is raised.","title":"source_from_cache()"},{"location":"reference/octoprint/vendor/with_attrs_docs/","text":"octoprint.vendor.with_attrs_docs # apply_attributes_docs ( model , override_existing = True ) # Apply model attributes documentation in-place. Resulted docs are placed inside :code: field.schema.description for pydantic model field. :param model: any pydantic model :param override_existing: override existing descriptions with_attrs_docs ( model_cls ) # Applies func: .apply_attributes_docs .","title":"with_attrs_docs"},{"location":"reference/octoprint/vendor/with_attrs_docs/#octoprintvendorwith_attrs_docs","text":"","title":"octoprint.vendor.with_attrs_docs"},{"location":"reference/octoprint/vendor/with_attrs_docs/#octoprint.vendor.with_attrs_docs.apply_attributes_docs","text":"Apply model attributes documentation in-place. Resulted docs are placed inside :code: field.schema.description for pydantic model field. :param model: any pydantic model :param override_existing: override existing descriptions","title":"apply_attributes_docs()"},{"location":"reference/octoprint/vendor/with_attrs_docs/#octoprint.vendor.with_attrs_docs.with_attrs_docs","text":"Applies func: .apply_attributes_docs .","title":"with_attrs_docs()"},{"location":"reference/octoprint/vendor/awesome_slugify/","text":"octoprint.vendor.awesome_slugify #","title":"octoprint.vendor.awesome_slugify"},{"location":"reference/octoprint/vendor/awesome_slugify/#octoprintvendorawesome_slugify","text":"","title":"octoprint.vendor.awesome_slugify"},{"location":"reference/octoprint/vendor/awesome_slugify/alt_translates/","text":"octoprint.vendor.awesome_slugify.alt_translates #","title":"alt_translates"},{"location":"reference/octoprint/vendor/awesome_slugify/alt_translates/#octoprintvendorawesome_slugifyalt_translates","text":"","title":"octoprint.vendor.awesome_slugify.alt_translates"},{"location":"reference/octoprint/vendor/awesome_slugify/main/","text":"octoprint.vendor.awesome_slugify.main # UniqueSlugify # Bases: Slugify Manage unique slugified ids join_words ( words , separator , max_length = None ) # words - iterator or list","title":"main"},{"location":"reference/octoprint/vendor/awesome_slugify/main/#octoprintvendorawesome_slugifymain","text":"","title":"octoprint.vendor.awesome_slugify.main"},{"location":"reference/octoprint/vendor/awesome_slugify/main/#octoprint.vendor.awesome_slugify.main.UniqueSlugify","text":"Bases: Slugify Manage unique slugified ids","title":"UniqueSlugify"},{"location":"reference/octoprint/vendor/awesome_slugify/main/#octoprint.vendor.awesome_slugify.main.join_words","text":"words - iterator or list","title":"join_words()"},{"location":"reference/octoprint/vendor/sockjs/","text":"octoprint.vendor.sockjs #","title":"octoprint.vendor.sockjs"},{"location":"reference/octoprint/vendor/sockjs/#octoprintvendorsockjs","text":"","title":"octoprint.vendor.sockjs"},{"location":"reference/octoprint/vendor/sockjs/tornado/","text":"octoprint.vendor.sockjs.tornado #","title":"octoprint.vendor.sockjs.tornado"},{"location":"reference/octoprint/vendor/sockjs/tornado/#octoprintvendorsockjstornado","text":"","title":"octoprint.vendor.sockjs.tornado"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/","text":"octoprint.vendor.sockjs.tornado.basehandler # BaseHandler # Bases: RequestHandler Base request handler with set of helpers. disable_cache () # Disable client-side cache for the current request enable_cache () # Enable client-side caching for the current request finish ( chunk = None ) # Tornado finish handler handle_session_cookie () # Handle JSESSIONID cookie logic initialize ( server ) # Initialize request server SockJSRouter instance. on_connection_close () # Tornado on_connection_close handler prepare () # Increment connection count safe_finish () # Finish session. If it will blow up - connection was set to Keep-Alive and client dropped connection, ignore any IOError or socket error. PreflightHandler # Bases: BaseHandler CORS preflight handler options ( * args , ** kwargs ) # XHR cross-domain OPTIONS handler preflight () # Handles request authentication verify_origin () # Verify if request can be served","title":"basehandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprintvendorsockjstornadobasehandler","text":"","title":"octoprint.vendor.sockjs.tornado.basehandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler","text":"Bases: RequestHandler Base request handler with set of helpers.","title":"BaseHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.disable_cache","text":"Disable client-side cache for the current request","title":"disable_cache()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.enable_cache","text":"Enable client-side caching for the current request","title":"enable_cache()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.finish","text":"Tornado finish handler","title":"finish()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.handle_session_cookie","text":"Handle JSESSIONID cookie logic","title":"handle_session_cookie()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.initialize","text":"Initialize request server SockJSRouter instance.","title":"initialize()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.on_connection_close","text":"Tornado on_connection_close handler","title":"on_connection_close()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.prepare","text":"Increment connection count","title":"prepare()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.BaseHandler.safe_finish","text":"Finish session. If it will blow up - connection was set to Keep-Alive and client dropped connection, ignore any IOError or socket error.","title":"safe_finish()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler","text":"Bases: BaseHandler CORS preflight handler","title":"PreflightHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.options","text":"XHR cross-domain OPTIONS handler","title":"options()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.preflight","text":"Handles request authentication","title":"preflight()"},{"location":"reference/octoprint/vendor/sockjs/tornado/basehandler/#octoprint.vendor.sockjs.tornado.basehandler.PreflightHandler.verify_origin","text":"Verify if request can be served","title":"verify_origin()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/","text":"octoprint.vendor.sockjs.tornado.conn # SockJSConnection # Bases: object __init__ ( session ) # Connection constructor. session Associated session broadcast ( clients , message ) # Broadcast message to the one or more clients. Use this method if you want to send same message to lots of clients, as it contains several optimizations and will work fast than just having loop in your code. clients Clients iterable message Message to send. is_closed () property # Check if connection was closed on_close () # Default on_close handler. on_message ( message ) # Default on_message handler. Must be overridden in your application on_open ( request ) # Default on_open() handler. Override when you need to do some initialization or request validation. If you return False, connection will be rejected. You can also throw Tornado HTTPError to close connection. request ConnectionInfo object which contains caller IP address, query string parameters and cookies associated with this request (if any). send ( message , binary = False ) # Send message to the client. message Message to send.","title":"conn"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprintvendorsockjstornadoconn","text":"","title":"octoprint.vendor.sockjs.tornado.conn"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection","text":"Bases: object","title":"SockJSConnection"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.__init__","text":"Connection constructor. session Associated session","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.broadcast","text":"Broadcast message to the one or more clients. Use this method if you want to send same message to lots of clients, as it contains several optimizations and will work fast than just having loop in your code. clients Clients iterable message Message to send.","title":"broadcast()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.is_closed","text":"Check if connection was closed","title":"is_closed()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_close","text":"Default on_close handler.","title":"on_close()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_message","text":"Default on_message handler. Must be overridden in your application","title":"on_message()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.on_open","text":"Default on_open() handler. Override when you need to do some initialization or request validation. If you return False, connection will be rejected. You can also throw Tornado HTTPError to close connection. request ConnectionInfo object which contains caller IP address, query string parameters and cookies associated with this request (if any).","title":"on_open()"},{"location":"reference/octoprint/vendor/sockjs/tornado/conn/#octoprint.vendor.sockjs.tornado.conn.SockJSConnection.send","text":"Send message to the client. message Message to send.","title":"send()"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/","text":"octoprint.vendor.sockjs.tornado.migrate # WebsocketHandler # Bases: conn . SockJSConnection If you already use Tornado websockets for your application and want try sockjs-tornado, change your handlers to derive from this WebsocketHandler class. There are some limitations, for example only self.request only contains remote_ip, cookies and arguments collection on_open ( info ) # sockjs-tornado on_open handler open () # open handler","title":"migrate"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprintvendorsockjstornadomigrate","text":"","title":"octoprint.vendor.sockjs.tornado.migrate"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler","text":"Bases: conn . SockJSConnection If you already use Tornado websockets for your application and want try sockjs-tornado, change your handlers to derive from this WebsocketHandler class. There are some limitations, for example only self.request only contains remote_ip, cookies and arguments collection","title":"WebsocketHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler.on_open","text":"sockjs-tornado on_open handler","title":"on_open()"},{"location":"reference/octoprint/vendor/sockjs/tornado/migrate/#octoprint.vendor.sockjs.tornado.migrate.WebsocketHandler.open","text":"open handler","title":"open()"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/","text":"octoprint.vendor.sockjs.tornado.periodic # Callback # Bases: object Custom implementation of the Tornado.Callback with support of callback timeout delays. __init__ ( callback , callback_time , io_loop ) # Constructor. callback Callback function callback_time Callback timeout value (in milliseconds) io_loop io_loop instance calculate_next_run () # Caltulate next scheduled run delay () # Delay callback start ( timeout = None ) # Start callbacks stop () # Stop callbacks","title":"periodic"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprintvendorsockjstornadoperiodic","text":"","title":"octoprint.vendor.sockjs.tornado.periodic"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback","text":"Bases: object Custom implementation of the Tornado.Callback with support of callback timeout delays.","title":"Callback"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.__init__","text":"Constructor. callback Callback function callback_time Callback timeout value (in milliseconds) io_loop io_loop instance","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.calculate_next_run","text":"Caltulate next scheduled run","title":"calculate_next_run()"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.delay","text":"Delay callback","title":"delay()"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.start","text":"Start callbacks","title":"start()"},{"location":"reference/octoprint/vendor/sockjs/tornado/periodic/#octoprint.vendor.sockjs.tornado.periodic.Callback.stop","text":"Stop callbacks","title":"stop()"},{"location":"reference/octoprint/vendor/sockjs/tornado/proto/","text":"octoprint.vendor.sockjs.tornado.proto # disconnect ( code , reason ) # Return SockJS packet with code and close reason code Closing code reason Closing reason","title":"proto"},{"location":"reference/octoprint/vendor/sockjs/tornado/proto/#octoprintvendorsockjstornadoproto","text":"","title":"octoprint.vendor.sockjs.tornado.proto"},{"location":"reference/octoprint/vendor/sockjs/tornado/proto/#octoprint.vendor.sockjs.tornado.proto.disconnect","text":"Return SockJS packet with code and close reason code Closing code reason Closing reason","title":"disconnect()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/","text":"octoprint.vendor.sockjs.tornado.router # SockJSRouter # Bases: object SockJS protocol router __init__ ( connection , prefix = '' , user_settings = {}, io_loop = None , session_kls = None ) # Constructor. connection SockJSConnection class prefix Connection prefix user_settings Settings dictionary io_loop Optional IOLoop instance apply_routes ( routes ) # Feed list of the URLs to the routes list. Returns list broadcast ( clients , msg ) # Optimized broadcast implementation. Depending on type of the session, will json-encode message once and will call either send_message or send_jsonifed . clients Clients iterable msg Message to send create_session ( session_id , register = True ) # Creates new session object and returns it. request Request that created the session. Will be used to get query string parameters and cookies register Should be session registered in a storage. Websockets don't need it. get_connection_class () # Return associated connection class get_session ( session_id ) # Get session by session id session_id Session id urls () property # List of the URLs to be added to the Tornado application","title":"router"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprintvendorsockjstornadorouter","text":"","title":"octoprint.vendor.sockjs.tornado.router"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter","text":"Bases: object SockJS protocol router","title":"SockJSRouter"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.__init__","text":"Constructor. connection SockJSConnection class prefix Connection prefix user_settings Settings dictionary io_loop Optional IOLoop instance","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.apply_routes","text":"Feed list of the URLs to the routes list. Returns list","title":"apply_routes()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.broadcast","text":"Optimized broadcast implementation. Depending on type of the session, will json-encode message once and will call either send_message or send_jsonifed . clients Clients iterable msg Message to send","title":"broadcast()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.create_session","text":"Creates new session object and returns it. request Request that created the session. Will be used to get query string parameters and cookies register Should be session registered in a storage. Websockets don't need it.","title":"create_session()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.get_connection_class","text":"Return associated connection class","title":"get_connection_class()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.get_session","text":"Get session by session id session_id Session id","title":"get_session()"},{"location":"reference/octoprint/vendor/sockjs/tornado/router/#octoprint.vendor.sockjs.tornado.router.SockJSRouter.urls","text":"List of the URLs to be added to the Tornado application","title":"urls()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/","text":"octoprint.vendor.sockjs.tornado.session # BaseSession # Bases: object Base session implementation class __init__ ( conn , server ) # Base constructor. conn Connection class server SockJSRouter instance broadcast ( clients , msg ) # Optimized broadcast implementation. Depending on type of the session, will json-encode message once and will call either send_message or send_jsonifed . clients Clients iterable msg Message to send close ( code = 3000 , message = 'Go away!' ) # Close session or endpoint connection. code Closing code message Close message delayed_close () # Delayed close - won't close immediately, but on next ioloop tick. get_close_reason () # Return last close reason tuple. For example if self.session.is_closed: code, reason = self.session.get_close_reason() is_closed () property # Check if session was closed. remove_handler ( handler ) # Remove active handler from the session handler Handler to remove send_jsonified ( msg , stats = True ) # Send or queue outgoing message which was json-encoded before. Used by the broadcast method. msg JSON-encoded message to send stats If set to True, will update statistics after operation completes send_message ( msg , stats = True , binary = False ) # Send or queue outgoing message msg Message to send stats If set to True, will update statistics after operation completes set_handler ( handler ) # Set transport handler handler Handler, should derive from the sockjs.tornado.transports.base.BaseTransportMixin . verify_state () # Verify if session was not yet opened. If it is, open it and call connections on_open ConnectionInfo # Bases: object Connection information object. Will be passed to the on_open handler of your connection class. Has few properties: ip Caller IP address cookies Collection of cookies arguments Collection of the query string arguments headers Collection of headers sent by the browser that established this connection path Request uri path get_argument ( name ) # Return single argument by name get_cookie ( name ) # Return single cookie by its name get_header ( name ) # Return single header by its name Session # Bases: BaseSession , sessioncontainer . SessionMixin SockJS session implementation. __init__ ( conn , server , session_id , expiry = None ) # Session constructor. conn Default connection class server SockJSRouter instance session_id Session id expiry Session expiry time close ( code = 3000 , message = 'Go away!' ) # Close session. code Closing code message Closing message delay_heartbeat () # Delay active heartbeat flush () # Flush message queue if there's an active connection running on_delete ( forced ) # Session expiration callback forced If session item explicitly deleted, forced will be set to True. If item expired, will be set to False. on_messages ( msg_list ) # Handle incoming messages msg_list Message list to process remove_handler ( handler ) # Detach active handler from the session handler Handler to remove send_jsonified ( msg , stats = True ) # Send JSON-encoded message msg JSON encoded string to send stats If set to True, will update statistics after operation completes send_message ( msg , stats = True , binary = False ) # Send or queue outgoing message msg Message to send stats If set to True, will update statistics after operation completes set_handler ( handler , start_heartbeat = True ) # Set active handler for the session handler Associate active Tornado handler with the session start_heartbeat Should session start heartbeat immediately start_heartbeat () # Reset hearbeat timer stop_heartbeat () # Stop active heartbeat verify_state () # Verify if session was not yet opened. If it is, open it and call connections on_open","title":"session"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprintvendorsockjstornadosession","text":"","title":"octoprint.vendor.sockjs.tornado.session"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession","text":"Bases: object Base session implementation class","title":"BaseSession"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.__init__","text":"Base constructor. conn Connection class server SockJSRouter instance","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.broadcast","text":"Optimized broadcast implementation. Depending on type of the session, will json-encode message once and will call either send_message or send_jsonifed . clients Clients iterable msg Message to send","title":"broadcast()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.close","text":"Close session or endpoint connection. code Closing code message Close message","title":"close()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.delayed_close","text":"Delayed close - won't close immediately, but on next ioloop tick.","title":"delayed_close()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.get_close_reason","text":"Return last close reason tuple. For example if self.session.is_closed: code, reason = self.session.get_close_reason()","title":"get_close_reason()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.is_closed","text":"Check if session was closed.","title":"is_closed()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.remove_handler","text":"Remove active handler from the session handler Handler to remove","title":"remove_handler()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.send_jsonified","text":"Send or queue outgoing message which was json-encoded before. Used by the broadcast method. msg JSON-encoded message to send stats If set to True, will update statistics after operation completes","title":"send_jsonified()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.send_message","text":"Send or queue outgoing message msg Message to send stats If set to True, will update statistics after operation completes","title":"send_message()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.set_handler","text":"Set transport handler handler Handler, should derive from the sockjs.tornado.transports.base.BaseTransportMixin .","title":"set_handler()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.BaseSession.verify_state","text":"Verify if session was not yet opened. If it is, open it and call connections on_open","title":"verify_state()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo","text":"Bases: object Connection information object. Will be passed to the on_open handler of your connection class. Has few properties: ip Caller IP address cookies Collection of cookies arguments Collection of the query string arguments headers Collection of headers sent by the browser that established this connection path Request uri path","title":"ConnectionInfo"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_argument","text":"Return single argument by name","title":"get_argument()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_cookie","text":"Return single cookie by its name","title":"get_cookie()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.ConnectionInfo.get_header","text":"Return single header by its name","title":"get_header()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session","text":"Bases: BaseSession , sessioncontainer . SessionMixin SockJS session implementation.","title":"Session"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.__init__","text":"Session constructor. conn Default connection class server SockJSRouter instance session_id Session id expiry Session expiry time","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.close","text":"Close session. code Closing code message Closing message","title":"close()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.delay_heartbeat","text":"Delay active heartbeat","title":"delay_heartbeat()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.flush","text":"Flush message queue if there's an active connection running","title":"flush()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.on_delete","text":"Session expiration callback forced If session item explicitly deleted, forced will be set to True. If item expired, will be set to False.","title":"on_delete()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.on_messages","text":"Handle incoming messages msg_list Message list to process","title":"on_messages()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.remove_handler","text":"Detach active handler from the session handler Handler to remove","title":"remove_handler()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.send_jsonified","text":"Send JSON-encoded message msg JSON encoded string to send stats If set to True, will update statistics after operation completes","title":"send_jsonified()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.send_message","text":"Send or queue outgoing message msg Message to send stats If set to True, will update statistics after operation completes","title":"send_message()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.set_handler","text":"Set active handler for the session handler Associate active Tornado handler with the session start_heartbeat Should session start heartbeat immediately","title":"set_handler()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.start_heartbeat","text":"Reset hearbeat timer","title":"start_heartbeat()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.stop_heartbeat","text":"Stop active heartbeat","title":"stop_heartbeat()"},{"location":"reference/octoprint/vendor/sockjs/tornado/session/#octoprint.vendor.sockjs.tornado.session.Session.verify_state","text":"Verify if session was not yet opened. If it is, open it and call connections on_open","title":"verify_state()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/","text":"octoprint.vendor.sockjs.tornado.sessioncontainer # SessionContainer # Bases: object Session container object. If we will implement sessions with Tornado timeouts, for polling transports it will be nightmare - if load will be high, number of discarded timeouts will be huge and will be huge performance hit, as Tornado will have to clean them up all the time. add ( session ) # Add session to the container. session Session object expire ( current_time = None ) # Expire any old entries current_time Optional time to be used to clean up queue (can be used in unit tests) get ( session_id ) # Return session object or None if it is not available session_id Session identifier remove ( session_id ) # Remove session object from the container session_id Session identifier SessionMixin # Bases: object Represents one session object stored in the session container. Derive from this object to store additional data. __init__ ( session_id = None , expiry = None ) # Constructor. session_id Optional session id. If not provided, will generate new session id. expiry Expiration time. If not provided, will never expire. is_alive () # Check if session is still alive on_delete ( forced ) # Triggered when object was expired or deleted. promote () # Mark object as alive, so it won't be collected during next run of the garbage collector.","title":"sessioncontainer"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprintvendorsockjstornadosessioncontainer","text":"","title":"octoprint.vendor.sockjs.tornado.sessioncontainer"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer","text":"Bases: object Session container object. If we will implement sessions with Tornado timeouts, for polling transports it will be nightmare - if load will be high, number of discarded timeouts will be huge and will be huge performance hit, as Tornado will have to clean them up all the time.","title":"SessionContainer"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.add","text":"Add session to the container. session Session object","title":"add()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.expire","text":"Expire any old entries current_time Optional time to be used to clean up queue (can be used in unit tests)","title":"expire()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.get","text":"Return session object or None if it is not available session_id Session identifier","title":"get()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionContainer.remove","text":"Remove session object from the container session_id Session identifier","title":"remove()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin","text":"Bases: object Represents one session object stored in the session container. Derive from this object to store additional data.","title":"SessionMixin"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.__init__","text":"Constructor. session_id Optional session id. If not provided, will generate new session id. expiry Expiration time. If not provided, will never expire.","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.is_alive","text":"Check if session is still alive","title":"is_alive()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.on_delete","text":"Triggered when object was expired or deleted.","title":"on_delete()"},{"location":"reference/octoprint/vendor/sockjs/tornado/sessioncontainer/#octoprint.vendor.sockjs.tornado.sessioncontainer.SessionMixin.promote","text":"Mark object as alive, so it won't be collected during next run of the garbage collector.","title":"promote()"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/","text":"octoprint.vendor.sockjs.tornado.static # ChunkingTestHandler # Bases: PreflightHandler SockJS chunking test handler GreetingsHandler # Bases: BaseHandler SockJS greetings page handler IFrameHandler # Bases: BaseHandler SockJS IFrame page handler InfoHandler # Bases: PreflightHandler SockJS 0.2+ /info handler","title":"static"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprintvendorsockjstornadostatic","text":"","title":"octoprint.vendor.sockjs.tornado.static"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.ChunkingTestHandler","text":"Bases: PreflightHandler SockJS chunking test handler","title":"ChunkingTestHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.GreetingsHandler","text":"Bases: BaseHandler SockJS greetings page handler","title":"GreetingsHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.IFrameHandler","text":"Bases: BaseHandler SockJS IFrame page handler","title":"IFrameHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/static/#octoprint.vendor.sockjs.tornado.static.InfoHandler","text":"Bases: PreflightHandler SockJS 0.2+ /info handler","title":"InfoHandler"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/","text":"octoprint.vendor.sockjs.tornado.stats # MovingAverage # Bases: object Moving average class implementation __init__ ( period = 10 ) # Constructor. period Moving window size. Average will be calculated from the data in the window. add ( n ) # Add value to the current accumulator n Value to add flush () # Add accumulator to the moving average queue and reset it. For example, called by the StatsCollector once per second to calculate per-second average. StatsCollector # Bases: object dump () # Return dictionary with current statistical information","title":"stats"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprintvendorsockjstornadostats","text":"","title":"octoprint.vendor.sockjs.tornado.stats"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage","text":"Bases: object Moving average class implementation","title":"MovingAverage"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage.__init__","text":"Constructor. period Moving window size. Average will be calculated from the data in the window.","title":"__init__()"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage.add","text":"Add value to the current accumulator n Value to add","title":"add()"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.MovingAverage.flush","text":"Add accumulator to the moving average queue and reset it. For example, called by the StatsCollector once per second to calculate per-second average.","title":"flush()"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.StatsCollector","text":"Bases: object","title":"StatsCollector"},{"location":"reference/octoprint/vendor/sockjs/tornado/stats/#octoprint.vendor.sockjs.tornado.stats.StatsCollector.dump","text":"Return dictionary with current statistical information","title":"dump()"},{"location":"reference/octoprint/vendor/sockjs/tornado/util/","text":"octoprint.vendor.sockjs.tornado.util #","title":"util"},{"location":"reference/octoprint/vendor/sockjs/tornado/util/#octoprintvendorsockjstornadoutil","text":"","title":"octoprint.vendor.sockjs.tornado.util"},{"location":"reference/octoprint/vendor/sockjs/tornado/websocket/","text":"octoprint.vendor.sockjs.tornado.websocket #","title":"websocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/websocket/#octoprintvendorsockjstornadowebsocket","text":"","title":"octoprint.vendor.sockjs.tornado.websocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/","text":"octoprint.vendor.sockjs.tornado.transports #","title":"octoprint.vendor.sockjs.tornado.transports"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/#octoprintvendorsockjstornadotransports","text":"","title":"octoprint.vendor.sockjs.tornado.transports"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/","text":"octoprint.vendor.sockjs.tornado.transports.base # BaseTransportMixin # Bases: object Base transport. Implements few methods that session expects to see in each transport. get_conn_info () # Return ConnectionInfo object from current transport session_closed () # Called by the session, when it gets closed","title":"base"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprintvendorsockjstornadotransportsbase","text":"","title":"octoprint.vendor.sockjs.tornado.transports.base"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin","text":"Bases: object Base transport. Implements few methods that session expects to see in each transport.","title":"BaseTransportMixin"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin.get_conn_info","text":"Return ConnectionInfo object from current transport","title":"get_conn_info()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/base/#octoprint.vendor.sockjs.tornado.transports.base.BaseTransportMixin.session_closed","text":"Called by the session, when it gets closed","title":"session_closed()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/eventsource/","text":"octoprint.vendor.sockjs.tornado.transports.eventsource #","title":"eventsource"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/eventsource/#octoprintvendorsockjstornadotransportseventsource","text":"","title":"octoprint.vendor.sockjs.tornado.transports.eventsource"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/htmlfile/","text":"octoprint.vendor.sockjs.tornado.transports.htmlfile #","title":"htmlfile"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/htmlfile/#octoprintvendorsockjstornadotransportshtmlfile","text":"","title":"octoprint.vendor.sockjs.tornado.transports.htmlfile"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/jsonp/","text":"octoprint.vendor.sockjs.tornado.transports.jsonp #","title":"jsonp"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/jsonp/#octoprintvendorsockjstornadotransportsjsonp","text":"","title":"octoprint.vendor.sockjs.tornado.transports.jsonp"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/","text":"octoprint.vendor.sockjs.tornado.transports.pollingbase # PollingTransportBase # Bases: basehandler . PreflightHandler , base . BaseTransportMixin Polling transport handler base class send_message ( message , binary = False ) # Called by the session when some data is available session_closed () # Called by the session when it was closed","title":"pollingbase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprintvendorsockjstornadotransportspollingbase","text":"","title":"octoprint.vendor.sockjs.tornado.transports.pollingbase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase","text":"Bases: basehandler . PreflightHandler , base . BaseTransportMixin Polling transport handler base class","title":"PollingTransportBase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase.send_message","text":"Called by the session when some data is available","title":"send_message()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/pollingbase/#octoprint.vendor.sockjs.tornado.transports.pollingbase.PollingTransportBase.session_closed","text":"Called by the session when it was closed","title":"session_closed()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/","text":"octoprint.vendor.sockjs.tornado.transports.rawwebsocket # RawSession # Bases: session . BaseSession Raw session without any sockjs protocol encoding/decoding. Simply works as a proxy between SockJSConnection class and RawWebSocketTransport . RawWebSocketTransport # Bases: websocket . SockJSWebSocketHandler , base . BaseTransportMixin Raw Websocket transport","title":"rawwebsocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/#octoprintvendorsockjstornadotransportsrawwebsocket","text":"","title":"octoprint.vendor.sockjs.tornado.transports.rawwebsocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/#octoprint.vendor.sockjs.tornado.transports.rawwebsocket.RawSession","text":"Bases: session . BaseSession Raw session without any sockjs protocol encoding/decoding. Simply works as a proxy between SockJSConnection class and RawWebSocketTransport .","title":"RawSession"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/rawwebsocket/#octoprint.vendor.sockjs.tornado.transports.rawwebsocket.RawWebSocketTransport","text":"Bases: websocket . SockJSWebSocketHandler , base . BaseTransportMixin Raw Websocket transport","title":"RawWebSocketTransport"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/","text":"octoprint.vendor.sockjs.tornado.transports.streamingbase # StreamingTransportBase # Bases: pollingbase . PollingTransportBase notify_sent ( data_len ) # Update amount of data sent send_complete ( f = None ) # Verify if connection should be closed based on amount of data that was sent. should_finish () # Check if transport should close long running connection after sending X bytes to the client. data_len Amount of data that was sent","title":"streamingbase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprintvendorsockjstornadotransportsstreamingbase","text":"","title":"octoprint.vendor.sockjs.tornado.transports.streamingbase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase","text":"Bases: pollingbase . PollingTransportBase","title":"StreamingTransportBase"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.notify_sent","text":"Update amount of data sent","title":"notify_sent()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.send_complete","text":"Verify if connection should be closed based on amount of data that was sent.","title":"send_complete()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/streamingbase/#octoprint.vendor.sockjs.tornado.transports.streamingbase.StreamingTransportBase.should_finish","text":"Check if transport should close long running connection after sending X bytes to the client. data_len Amount of data that was sent","title":"should_finish()"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/websocket/","text":"octoprint.vendor.sockjs.tornado.transports.websocket # WebSocketTransport # Bases: websocket . SockJSWebSocketHandler , base . BaseTransportMixin Websocket transport","title":"websocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/websocket/#octoprintvendorsockjstornadotransportswebsocket","text":"","title":"octoprint.vendor.sockjs.tornado.transports.websocket"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/websocket/#octoprint.vendor.sockjs.tornado.transports.websocket.WebSocketTransport","text":"Bases: websocket . SockJSWebSocketHandler , base . BaseTransportMixin Websocket transport","title":"WebSocketTransport"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhr/","text":"octoprint.vendor.sockjs.tornado.transports.xhr # XhrPollingTransport # Bases: pollingbase . PollingTransportBase xhr-polling transport implementation","title":"xhr"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhr/#octoprintvendorsockjstornadotransportsxhr","text":"","title":"octoprint.vendor.sockjs.tornado.transports.xhr"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhr/#octoprint.vendor.sockjs.tornado.transports.xhr.XhrPollingTransport","text":"Bases: pollingbase . PollingTransportBase xhr-polling transport implementation","title":"XhrPollingTransport"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhrstreaming/","text":"octoprint.vendor.sockjs.tornado.transports.xhrstreaming #","title":"xhrstreaming"},{"location":"reference/octoprint/vendor/sockjs/tornado/transports/xhrstreaming/#octoprintvendorsockjstornadotransportsxhrstreaming","text":"","title":"octoprint.vendor.sockjs.tornado.transports.xhrstreaming"},{"location":"reference/octoprint_client/","text":"octoprint_client # SocketClient # connect () # Connects the socket. disconnect () # Disconnect the web socket. is_connected () property # Whether the web socket is connected or not. reconnect ( timeout = None , disconnect = True ) # Tries to reconnect to the web socket. If timeout is set will try to reconnect over the specified timeout in seconds and return False if the connection could not be re-established. If no timeout is provided, the method will block until the connection could be re-established. If disconnect is set to True will disconnect the socket explicitly first if it is currently connected. Parameters: Name Type Description Default timeout number timeout in seconds to wait for the reconnect to happen. None disconnect bool Whether to disconnect explicitly from the socket if a connection is currently established (True, default) or not (False). True Returns: Type Description bool - True if the reconnect was successful, False otherwise. wait ( timeout = None ) # Waits for the closing of the socket or the timeout.","title":"octoprint_client"},{"location":"reference/octoprint_client/#octoprint_client_1","text":"","title":"octoprint_client"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient","text":"","title":"SocketClient"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.connect","text":"Connects the socket.","title":"connect()"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.disconnect","text":"Disconnect the web socket.","title":"disconnect()"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.is_connected","text":"Whether the web socket is connected or not.","title":"is_connected()"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.reconnect","text":"Tries to reconnect to the web socket. If timeout is set will try to reconnect over the specified timeout in seconds and return False if the connection could not be re-established. If no timeout is provided, the method will block until the connection could be re-established. If disconnect is set to True will disconnect the socket explicitly first if it is currently connected. Parameters: Name Type Description Default timeout number timeout in seconds to wait for the reconnect to happen. None disconnect bool Whether to disconnect explicitly from the socket if a connection is currently established (True, default) or not (False). True Returns: Type Description bool - True if the reconnect was successful, False otherwise.","title":"reconnect()"},{"location":"reference/octoprint_client/#octoprint_client.SocketClient.wait","text":"Waits for the closing of the socket or the timeout.","title":"wait()"},{"location":"reference/octoprint_setuptools/","text":"octoprint_setuptools #","title":"octoprint_setuptools"},{"location":"reference/octoprint_setuptools/#octoprint_setuptools_1","text":"","title":"octoprint_setuptools"},{"location":"user-guide/","text":"User Guide #","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"},{"location":"user-guide/bundled-plugins/discovery/","text":"Discovery Plugin # Todo Migrate me","title":"Discovery Plugin"},{"location":"user-guide/bundled-plugins/discovery/#user-guide.bundled-plugins.discovery","text":"Todo Migrate me","title":"Discovery Plugin"},{"location":"user-guide/configuration/cli/","text":"Command-line configuration interface # New in version 1.3.0. OctoPrint provides a basic command line interface for manipulation of config.yaml : $ octoprint config --help Usage: octoprint config [OPTIONS] COMMAND [ARGS]... Basic config manipulation. Options: --help Show this message and exit. Commands: append_value Appends value to list behind config path. effective Retrieves the full effective config. get Retrieves value from config path. insert_value Inserts value at index of list behind config key. remove Removes a config path. remove_value Removes value from list at config path. set Sets a config path to the provided value. $ octoprint config append_value --help Usage: octoprint config append_value [OPTIONS] PATH VALUE Appends value to list behind config path. Options: --json --help Show this message and exit. $ octoprint config effective --help Usage: octoprint config effective [OPTIONS] Retrieves the full effective config. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config get --help Usage: octoprint config get [OPTIONS] PATH Retrieves value from config path. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config insert_value --help Usage: octoprint config insert_value [OPTIONS] PATH INDEX VALUE Inserts value at index of list behind config key. Options: --json --help Show this message and exit. $ octoprint config remove --help Usage: octoprint config remove [OPTIONS] PATH Removes a config path. Options: --help Show this message and exit. $ octoprint config remove_value --help Usage: octoprint config remove_value [OPTIONS] PATH VALUE Removes value from list at config path. Options: --json --help Show this message and exit. $ octoprint config set --help Usage: octoprint config set [OPTIONS] PATH VALUE Sets a config path to the provided value. Options: --bool Interpret value as bool --float Interpret value as float --int Interpret value as int --json Parse value from json --help Show this message and exit.","title":"CLI"},{"location":"user-guide/configuration/cli/#command-line-configuration-interface","text":"New in version 1.3.0. OctoPrint provides a basic command line interface for manipulation of config.yaml : $ octoprint config --help Usage: octoprint config [OPTIONS] COMMAND [ARGS]... Basic config manipulation. Options: --help Show this message and exit. Commands: append_value Appends value to list behind config path. effective Retrieves the full effective config. get Retrieves value from config path. insert_value Inserts value at index of list behind config key. remove Removes a config path. remove_value Removes value from list at config path. set Sets a config path to the provided value. $ octoprint config append_value --help Usage: octoprint config append_value [OPTIONS] PATH VALUE Appends value to list behind config path. Options: --json --help Show this message and exit. $ octoprint config effective --help Usage: octoprint config effective [OPTIONS] Retrieves the full effective config. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config get --help Usage: octoprint config get [OPTIONS] PATH Retrieves value from config path. Options: --json Output value formatted as JSON --yaml Output value formatted as YAML --raw Output value as raw string representation --help Show this message and exit. $ octoprint config insert_value --help Usage: octoprint config insert_value [OPTIONS] PATH INDEX VALUE Inserts value at index of list behind config key. Options: --json --help Show this message and exit. $ octoprint config remove --help Usage: octoprint config remove [OPTIONS] PATH Removes a config path. Options: --help Show this message and exit. $ octoprint config remove_value --help Usage: octoprint config remove_value [OPTIONS] PATH VALUE Removes value from list at config path. Options: --json --help Show this message and exit. $ octoprint config set --help Usage: octoprint config set [OPTIONS] PATH VALUE Sets a config path to the provided value. Options: --bool Interpret value as bool --float Interpret value as float --int Interpret value as int --json Parse value from json --help Show this message and exit.","title":"Command-line configuration interface"},{"location":"user-guide/configuration/config-yaml/","text":"Main configuration: config.yaml # If not specified via the command line, the main configuration file config.yaml for OctoPrint is expected in its settings folder, which unless defined differently via the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. If the file is not there, you can just create it - it will only get created by OctoPrint once you save settings that deviate from the default settings. Note that many of these settings are available from the Settings in OctoPrint itself. They can also be configured via config command line interface. The configuration is a YAML file with a top-level dictionary. The keys of this dictionary are as follows: accessControl : # ... api : # ... appearance : # ... controls : # ... devel : # ... estimation : # ... events : # ... feature : # ... folder : # ... gcodeAnalysis : # ... plugins : # ... printerParameters : # ... printerProfiles : # ... scripts : # ... serial : # ... server : # ... slicing : # ... system : # ... temperature : # ... terminalFilters : # ... webcam : # ... Their content is described in the following sections. accessControl # Defaults # accessControl : salt : userManager : octoprint.access.users.FilebasedUserManager groupManager : octoprint.access.groups.FilebasedGroupManager permissionManager : octoprint.access.permissions.PermissionManager userfile : groupfile : autologinLocal : false localNetworks : - 127.0.0.0/8 - ::1/128 autologinAs : trustBasicAuthentication : false checkBasicAuthenticationPassword : true trustRemoteUser : false remoteUserHeader : REMOTE_USER addRemoteUsers : false Data model # Name Type Description Default salt Optional[str] Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. unset userManager str The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder). 'octoprint.access.users.FilebasedUserManager' groupManager str The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder). 'octoprint.access.groups.FilebasedGroupManager' permissionManager str The permission manager implementation to use. 'octoprint.access.permissions.PermissionManager' userfile Optional[str] The YAML user file to use. If left out defaults to users.yaml in the default configuration folder. unset groupfile Optional[str] The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder. unset autologinLocal bool If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs . False localNetworks List[str] A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost. ['127.0.0.0/8', '::1/128'] autologinAs Optional[str] The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users. unset trustBasicAuthentication bool Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! False checkBasicAuthenticationPassword bool Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. True trustRemoteUser bool Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! False remoteUserHeader str Header used by the reverse proxy to convey the authenticated user. 'REMOTE_USER' addRemoteUsers bool If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. False api # Defaults # api : key : apps : {} allowCrossOrigin : false Data model # Name Type Description Default key Optional[str] Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run. unset apps Dict[str, str] {} allowCrossOrigin bool Whether to allow cross origin access to the API or not. False appearance # Using the appearance settings you can tweak OctoPrint's appearance a bit to better distinguish multiple instances/printers appearance or to modify the order and presence of the various UI components Defaults # appearance : name : '' color : default colorTransparent : false colorIcon : true defaultLanguage : _default showFahrenheitAlso : false fuzzyTimes : true closeModalsWithClick : true showInternalFilename : true components : order : navbar : - settings - systemmenu - plugin_announcements - plugin_logging_seriallog - plugin_logging_plugintimingslog - plugin_pi_support - login sidebar : - plugin_firmware_check_warning - plugin_firmware_check_info - connection - state - files tab : - temperature - control - plugin_gcodeviewer - terminal - timelapse settings : - section_printer - serial - printerprofiles - temperatures - terminalfilters - gcodescripts - section_features - features - webcam - accesscontrol - plugin_gcodeviewer - api - plugin_appkeys - section_octoprint - server - folders - appearance - plugin_logging - plugin_pluginmanager - plugin_softwareupdate - plugin_announcements - plugin_eventmanager - plugin_backup - plugin_tracking - plugin_errortracking - plugin_pi_support usersettings : - access - interface wizard : - plugin_softwareupdate_update - plugin_backup - plugin_corewizard_acl - plugin_corewizard_onlinecheck about : - about - plugin_pi_support - supporters - authors - changelog - license - thirdparty - plugin_pluginmanager generic : [] disabled : navbar : [] sidebar : [] tab : [] settings : [] usersettings : [] wizard : [] about : [] generic : [] Data model # Name Type Description Default name str Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\") '' color str Valid values: 'red' , 'orange' , 'green' , 'blue' , 'yellow' , 'violet' , 'default' . 'default' colorTransparent bool Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. False colorIcon bool True defaultLanguage str Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. '_default' showFahrenheitAlso bool False fuzzyTimes bool True closeModalsWithClick bool True showInternalFilename bool Show the internal filename in the files sidebar, if necessary. True components.* Configures the order and availability of the UI components. components.order.* Defines the order of the components within their respective containers. components.order.navbar List[str] ['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login'] components.order.sidebar List[str] ['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files'] components.order.tab List[str] ['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse'] components.order.settings List[str] ['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support'] components.order.usersettings List[str] Order of user settings. ['access', 'interface'] components.order.wizard List[str] ['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck'] components.order.about List[str] ['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager'] components.order.generic List[str] Order of generic items. [] components.disabled.* Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. components.disabled.navbar List[str] Disabled navbar items. [] components.disabled.sidebar List[str] Disabled sidebar items. [] components.disabled.tab List[str] Disabled tabs. [] components.disabled.settings List[str] Disabled settings. [] components.disabled.usersettings List[str] Disabled user settings. [] components.disabled.wizard List[str] Disabled wizards. [] components.disabled.about List[str] Disabled about dialog items. [] components.disabled.generic List[str] Disabled generic items. [] Hint By modifying the components.order lists you may reorder OctoPrint's UI components as you like. You can also inject Plugins at another than their default location in their respective container by adding the entry plugin_<plugin identifier> where you want them to appear. When you override this setting, the resulting order for display will be calculated as follows: first all components as defined by the components.order list then all enabled core components as defined in the default order Components not contained within the default order (e.g. from third party plugins) will be either prepended or appended to that result, depending on the component type. Example: If you want the tab of the Hello World Plugin to appear as the first tab in OctoPrint, you'd need to redefine components.order.tab by including something like this in your config.yaml : appearance : components : order : tab : - plugin_helloworld OctoPrint will then display the Hello World tab first, followed by the default tabs and then any other not explicitely ordered tabs. controls # Use the controls section to add custom controls to the \"Controls\" tab within OctoPrint. Defaults # controls : [] Data model # controls is a list, with each entry in the list being a dictionary describing either a control or a container. Control model # Name Type Description Default name str The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. required command Optional[str] A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset commands Optional[List[str]] A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset script Optional[str] The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available. unset javascript Optional[str] A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset additionalClasses Optional[str] Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red. unset enabled Optional[str] A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset regex Optional[str] A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI. unset template Optional[str] A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ). unset confirm Optional[str] A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. unset Container model # Name Type Description Default children List[Union[octoprint.schema.config.controls.ControlConfig, octoprint.schema.config.controls.ContainerConfig]] A list of children controls or containers contained within this container. [] name Optional[str] A name to display above the container, basically a section header. unset layout str The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ). Valid values: 'horizontal' , 'vertical' . 'vertical' Example # controls : - name : Fan layout : horizontal children : - name : Enable Fan command : M106 S%(speed)s input : - name : Speed (0-255) parameter : speed default : 255 slider : min : 0 max : 255 - name : Disable Fan command : M107 - name : Example for multiple commands children : - name : Move X (static) confirm : You are about to move the X axis right by 10mm with 3000mm/min. commands : - G91 - G1 X10 F3000 - G90 - name : Move X (parametric) commands : - G91 - G1 X%(distance)s F%(speed)s - G90 input : - default : 10 name : Distance parameter : distance - default : 3000 name : Speed parameter : speed - name : Reporting children : - name : Get Position command : M114 regex : \"X:([-+]?[0-9.]+) Y:([-+]?[0-9.]+) Z:([-+]?[0-9.]+) E:([-+]?[0-9.]+)\" template : \"Position: X={0}, Y={1}, Z={2}, E={3}\" - name : Fun stuff children : - name : Dance script : custom/dance.gco input : - name : Go arounds parameter : repetitions slider : max : 10 min : 1 step : 1 devel # The following settings are only relevant to you if you want to do OctoPrint development. Defaults # devel : stylesheet : less cache : enabled : true preemptive : true webassets : bundle : true clean_on_startup : true minify : true minify_plugins : false useFrozenDictForPrinterState : true showLoadingAnimation : true sockJsConnectTimeout : 30 pluginTimings : false enableRateLimiter : true enableCsrfProtection : true Data model # Name Type Description Default stylesheet str Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. Valid values: 'css' , 'less' . 'less' cache.* Settings for OctoPrint's internal caching. cache.enabled bool True cache.preemptive bool True webassets.* Settings for OctoPrint's web asset merging and minifying. webassets.bundle bool If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting. True webassets.clean_on_startup bool Whether to delete generated web assets on server startup (forcing a regeneration). True webassets.minify bool If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either. True webassets.minify_plugins bool If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either. False useFrozenDictForPrinterState bool True showLoadingAnimation bool Enable or disable the loading animation. True sockJsConnectTimeout float 30 pluginTimings bool False enableRateLimiter bool Enable or disable the rate limiter. Careful, disabling this reduces security. True enableCsrfProtection bool Enable or disable the CSRF protection. Careful, disabling this reduces security. True estimation # Defaults # estimation : printTime : statsWeighingUntil : 0.5 validityRange : 0.15 forceDumbFromPercent : 0.3 forceDumbAfterMin : 30.0 stableThreshold : 60 Data model # Name Type Description Default printTime.* Parameters for the print time estimation during an ongoing print job. printTime.statsWeighingUntil float Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. 0.5 printTime.validityRange float Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used. 0.15 printTime.forceDumbFromPercent float If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. 0.3 printTime.forceDumbAfterMin float If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. 30.0 printTime.stableThreshold int Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. 60 events # Use the following settings to add shell/gcode commands to be executed on certain events : Defaults # events : enabled : true subscriptions : [] Data model # Name Type Description Default enabled bool Whether event subscriptions should be enabled or not. True subscriptions[] A list of event subscriptions. subscriptions[].event str The event to subscribe to. required subscriptions[].command str The command to execute when the event is triggered, either a GCODE or a system command. required subscriptions[].type str The type of the command. Valid values: 'system' , 'gcode' . required subscriptions[].enabled bool Whether the event subscription should be enabled. True subscriptions[].debug bool If set to true , OctoPrint will log the command after performing all placeholder replacements. False Example # events : subscriptions : # example event consumer that prints a message to the system log if the printer is disconnected - event : Disconnected command : \"logger 'Printer got disconnected'\" type : system # example event consumer that queries printer information from the firmware, prints a \"Connected\" # message to the LCD and homes the print head upon established printer connection, disabled though - event : Connected command : M115,M117 printer connected!,G28 type : gcode enabled : False Hint For debugging purposes, you can set the debug property on your event subscription definition to true . That will make the event handler print a log line with your subscription's command after performing all placeholder replacements. Example: events : subscriptions : - event : Startup command : \"logger 'OctoPrint started up'\" type : system debug : true This will be logged in OctoPrint's logfile as Executing System Command: logger 'OctoPrint started up' feature # Defaults # feature : temperatureGraph : true sdSupport : true keyboardControl : true pollWatched : false modelSizeDetection : true rememberFileFolder : false printStartConfirmation : false printCancelConfirmation : true uploadOverwriteConfirmation : true autoUppercaseBlacklist : - M117 - M118 g90InfluencesExtruder : false enforceReallyUniversalFilenames : false Data model # Name Type Description Default temperatureGraph bool Whether to enable the temperature graph in the UI or not. True sdSupport bool Specifies whether support for SD printing and file management should be enabled. True keyboardControl bool Whether to enable the keyboard control feature in the control tab. True pollWatched bool Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). False modelSizeDetection bool Whether to enable model size detection and warning (true) or not (false). True rememberFileFolder bool Whether to remember the selected folder on the file manager. False printStartConfirmation bool Whether to show a confirmation on print start (true) or not (false) False printCancelConfirmation bool Whether to show a confirmation on print cancelling (true) or not (false) True uploadOverwriteConfirmation bool True autoUppercaseBlacklist List[str] Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. ['M117', 'M118'] g90InfluencesExtruder bool Whether G90 / G91 also influence absolute/relative mode of extruders. False enforceReallyUniversalFilenames bool Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. False folder # Defaults # folder : uploads : timelapse : timelapse_tmp : logs : virtualSd : watched : plugins : slicingProfiles : printerProfiles : scripts : translations : generated : data : Data model # Name Type Description Default uploads Optional[str] Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder. unset timelapse Optional[str] Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder. unset timelapse_tmp Optional[str] Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder. unset logs Optional[str] Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder. unset virtualSd Optional[str] Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder. unset watched Optional[str] Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder. unset plugins Optional[str] Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder. unset slicingProfiles Optional[str] Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder. unset printerProfiles Optional[str] Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder. unset scripts Optional[str] Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder. unset translations Optional[str] Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder. unset generated Optional[str] Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder. unset data Optional[str] Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder. unset gcodeAnalysis # Defaults # gcodeAnalysis : maxExtruders : 10 throttle_normalprio : 0.01 throttle_highprio : 0.0 throttle_lines : 100 runAt : idle bedZ : 0.0 Data model # Name Type Description Default maxExtruders int Maximum number of extruders to support/to sanity check for. 10 throttle_normalprio float Pause between each processed GCODE line batch in normal priority mode, seconds. 0.01 throttle_highprio float Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. 0.0 throttle_lines int GCODE line batch size. 100 runAt str Whether to run the analysis only when idle (not printing), regardless of printing state or never. Valid values: 'never' , 'idle' , 'always' . 'idle' bedZ float Z position considered the location of the bed. 0.0 plugins # The plugins section is where plugins can store their specific settings. It is also where the installed but disabled plugins are tracked. Defaults # plugins : _disabled : [] _forcedCompatible : [] _sortingOrder : {} Data model # Name Type Description Default _disabled None Identifiers of installed but disabled plugins. [] _forcedCompatible None Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. [] _sortingOrder None Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name. {} Additionally to the fields listed here, plugins will contain further keys for each plugin that is storing settings itself. The keys will be the plugin's identifier. Example # plugins : _disabled : - some_plugin _forcedCompatible : - some_other_plugin _sortingOrder : yet_another_plugin : octoprint.plugin.ordertest.callback : 1 StartupPlugin.on_startup : 10 virtual_printer : _config_version : 1 enabled : true printerParameters # Defaults # printerParameters : pauseTriggers : [] Data model # Name Type Description Default pauseTriggers List[str] [] printerProfiles # Defaults # printerProfiles : default : Data model # Name Type Description Default default Optional[str] Name of the printer profile to default to. unset scripts # Default scripts and snippets. You'd usually not edit the config.yaml file to adjust those but instead create the corresponding files in ~/.octoprint/scripts/ . See GCODE Scripts . Defaults # scripts : gcode : afterPrinterConnected : beforePrinterDisconnected : beforePrintStarted : afterPrintCancelled : \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet\\ \\ 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" afterPrintDone : beforePrintPaused : afterPrintResumed : beforeToolChange : afterToolChange : snippets : disable_hotends : \"{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n\\ {% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{\\ \\ tool }} S0\\n{% endfor %}{% endif %}\" disable_bed : \"{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}\" Data model # Name Type Description Default gcode.* gcode.afterPrinterConnected Optional[str] unset gcode.beforePrinterDisconnected Optional[str] unset gcode.beforePrintStarted Optional[str] unset gcode.afterPrintCancelled Optional[str] \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" gcode.afterPrintDone Optional[str] unset gcode.beforePrintPaused Optional[str] unset gcode.afterPrintResumed Optional[str] unset gcode.beforeToolChange Optional[str] unset gcode.afterToolChange Optional[str] unset gcode.snippets Dict[str, str] {'disable_hotends': '{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{ tool }} S0\\n{% endfor %}{% endif %}', 'disable_bed': '{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}'} serial # Defaults # serial : port : baudrate : exclusive : true lowLatency : false autoconnect : false log : false timeout : detectionFirst : 10.0 detectionConsecutive : 2.0 connection : 10.0 communication : 30.0 communicationBusy : 3.0 temperature : 5.0 temperatureTargetSet : 2.0 temperatureAutoreport : 2.0 sdStatus : 1.0 sdStatusAutoreport : 1.0 posAutoreport : 5.0 resendOk : 0.5 baudrateDetectionPause : 1.0 positionLogWait : 10.0 maxCommunicationTimeouts : idle : 2 printing : 5 long : 5 maxWritePasses : 5 additionalPorts : [] additionalBaudrates : [] blacklistedPorts : [] blacklistedBaudrates : [] longRunningCommands : - G4 - G28 - G29 - G30 - G32 - M400 - M226 - M600 blockedCommands : - M0 - M1 ignoredCommands : [] pausingCommands : - M0 - M1 - M25 emergencyCommands : - M112 - M108 - M410 checksumRequiringCommands : - M110 helloCommand : M110 N0 disconnectOnErrors : true ignoreErrorsFromFirmware : false terminalLogSize : 20 lastLineBufferSize : 50 logResends : true supportResendsWithoutOk : detect logPositionOnPause : true logPositionOnCancel : false abortHeatupOnCancel : true waitForStartOnConnect : false waitToLoadSdFileList : false alwaysSendChecksum : false neverSendChecksum : false sendChecksumWithUnknownCommands : false unknownCommandsNeedAck : false sdRelativePath : false sdAlwaysAvailable : false sdLowerCase : false sdCancelCommand : M25 maxNotSdPrinting : 2 swallowOkAfterResend : true repetierTargetTemp : false externalHeatupDetection : true supportWait : true ignoreIdenticalResends : false identicalResendsCountdown : 7 supportFAsCommand : false firmwareDetection : true blockWhileDwelling : false useParityWorkaround : detect maxConsecutiveResends : 10 sendM112OnError : true disableSdPrintingDetection : false ackMax : 1 sanityCheckTools : true notifySuppressedCommands : warn capabilities : autoreport_temp : true autoreport_sdstatus : true autoreport_pos : true busy_protocol : true emergency_parser : true extended_m20 : true resendRatioThreshold : 10 resendRatioStart : 100 ignoreEmptyPorts : false encoding : ascii enableShutdownActionCommand : false triggerOkForM29 : true Data model # Name Type Description Default port Optional[str] The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected. unset baudrate Optional[int] The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. unset exclusive bool Whether to request the serial port exclusively or not True lowLatency bool Whether to request low latency mode on the serial port or not False autoconnect bool Whether to try to automatically connect to the printer on startup or not False log bool Whether to log whole communication to serial.log (warning: might decrease performance) False timeout.* Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems timeout.detectionFirst float 10.0 timeout.detectionConsecutive float 2.0 timeout.connection float Timeout for waiting to establish a connection with the selected port, in seconds 10.0 timeout.communication float Timeout during serial communication, in seconds 30.0 timeout.communicationBusy float Timeout during serial communication when busy protocol support is detected, in seconds 3.0 timeout.temperature float Timeout after which to query temperature when no target is set 5.0 timeout.temperatureTargetSet float Timeout after which to query temperature when a target is set 2.0 timeout.temperatureAutoreport float 2.0 timeout.sdStatus float Timeout after which to query the SD status while SD printing 1.0 timeout.sdStatusAutoreport float 1.0 timeout.posAutoreport float 5.0 timeout.resendOk float 0.5 timeout.baudrateDetectionPause float 1.0 timeout.positionLogWait float 10.0 maxCommunicationTimeouts.* maxCommunicationTimeouts.idle int Max. timeouts when the printer is idle 2 maxCommunicationTimeouts.printing int Max. timeouts when the printer is printing 5 maxCommunicationTimeouts.long int Max. timeouts when a long running command is active 5 maxWritePasses int Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error 5 additionalPorts List[str] Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern [] additionalBaudrates List[int] Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer [] blacklistedPorts List[str] [] blacklistedBaudrates List[int] [] longRunningCommands List[str] ['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600'] blockedCommands List[str] Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. ['M0', 'M1'] ignoredCommands List[str] Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. [] pausingCommands List[str] Commands which should cause OctoPrint to pause any ongoing prints. ['M0', 'M1', 'M25'] emergencyCommands List[str] ['M112', 'M108', 'M410'] checksumRequiringCommands List[str] Commands which need to always be send with a checksum. ['M110'] helloCommand str Command to send in order to initiate a handshake with the printer. 'M110 N0' disconnectOnErrors bool Whether to disconnect from the printer on errors or not. True ignoreErrorsFromFirmware bool Whether to completely ignore errors from the firmware or not. False terminalLogSize int 20 lastLineBufferSize int 50 logResends bool Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. True supportResendsWithoutOk str Whether to support resends without follow-up ok or not. Valid values: 'always' , 'detect' , 'never' . 'detect' logPositionOnPause bool True logPositionOnCancel bool False abortHeatupOnCancel bool True waitForStartOnConnect bool Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect. False waitToLoadSdFileList bool Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed. False alwaysSendChecksum bool Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. False neverSendChecksum bool False sendChecksumWithUnknownCommands bool Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False unknownCommandsNeedAck bool Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False sdRelativePath bool Specifies whether firmware expects relative paths for selecting SD files. False sdAlwaysAvailable bool Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. False sdLowerCase bool False sdCancelCommand str 'M25' maxNotSdPrinting int 2 swallowOkAfterResend bool True repetierTargetTemp bool Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses. False externalHeatupDetection bool Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. True supportWait bool True ignoreIdenticalResends bool Whether to ignore identical resends from the printer (true, repetier) or not (false). False identicalResendsCountdown int If ignoreIdenticalResends is true, how many consecutive identical resends to ignore. 7 supportFAsCommand bool Whether to support F on its own as a valid GCODE command (true) or not (false). False firmwareDetection bool Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). True blockWhileDwelling bool Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). False useParityWorkaround str Valid values: 'always' , 'detect' , 'never' . 'detect' maxConsecutiveResends int 10 sendM112OnError bool True disableSdPrintingDetection bool False ackMax int 1 sanityCheckTools bool True notifySuppressedCommands str Valid values: 'info' , 'warn' , 'never' . 'warn' capabilities.* capabilities.autoreport_temp bool Whether to enable temperature autoreport in the firmware if its support is detected True capabilities.autoreport_sdstatus bool True capabilities.autoreport_pos bool True capabilities.busy_protocol bool Whether to shorten the communication timeout if the firmware seems to support the busy protocol True capabilities.emergency_parser bool True capabilities.extended_m20 bool True resendRatioThreshold int Percentage of resend requests among all sent lines that should be considered critical. 10 resendRatioStart int 100 ignoreEmptyPorts bool False encoding str Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings . 'ascii' enableShutdownActionCommand bool Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. False triggerOkForM29 bool Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok). True server # Defaults # server : host : port : 5000 firstRun : true startOnceInSafeMode : false ignoreIncompleteStartup : false incompleteStartup : false seenWizards : {} secretKey : heartbeat : 900 reverseProxy : prefixHeader : schemeHeader : hostHeader : serverHeader : portHeader : prefixFallback : schemeFallback : hostFallback : serverFallback : portFallback : trustedDownstream : [] uploads : maxSize : 1073741824 nameSuffix : name pathSuffix : path maxSize : 102400 commands : systemShutdownCommand : systemRestartCommand : serverRestartCommand : localPipCommand : onlineCheck : enabled : interval : 900 host : 1.1.1.1 port : 53 name : octoprint.org pluginBlacklist : enabled : url : https://plugins.octoprint.org/blacklist.json ttl : 900 diskspace : warning : 524288000 critical : 209715200 preemptiveCache : exceptions : [] until : 7 ipCheck : enabled : true trustedSubnets : [] allowFraming : false cookies : secure : false samesite : Lax Data model # Name Type Description Default host Optional[str] Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. unset port int Use this option to define the port to which to bind the server. 5000 firstRun bool If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. True startOnceInSafeMode bool If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false False ignoreIncompleteStartup bool Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. False incompleteStartup bool Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode. False seenWizards Dict[str, str] {} secretKey Optional[str] Secret key for encrypting cookies and such, randomly generated on first run. unset heartbeat int 900 reverseProxy.* Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. reverseProxy.prefixHeader Optional[str] The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. unset reverseProxy.schemeHeader Optional[str] The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. unset reverseProxy.hostHeader Optional[str] The request header from which to determine the host under which OctoPrint is served by the reverse proxy. unset reverseProxy.serverHeader Optional[str] unset reverseProxy.portHeader Optional[str] unset reverseProxy.prefixFallback Optional[str] Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. unset reverseProxy.schemeFallback Optional[str] Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. unset reverseProxy.hostFallback Optional[str] Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. unset reverseProxy.serverFallback Optional[str] unset reverseProxy.portFallback Optional[str] unset reverseProxy.trustedDownstream List[str] List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. [] uploads.* Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. uploads.maxSize int Maximum size of uploaded files in bytes, defaults to 1GB. 1073741824 uploads.nameSuffix str Suffix used for storing the filename in the file upload headers when streaming uploads. 'name' uploads.pathSuffix str Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads. 'path' maxSize int Maximum size of requests other than file uploads in bytes, defaults to 100KB. 102400 commands.* Commands to restart/shutdown octoprint or the system it's running on. commands.systemShutdownCommand Optional[str] Command to shut down the system OctoPrint is running on. unset commands.systemRestartCommand Optional[str] Command to restart the system OctoPrint is running on. unset commands.serverRestartCommand Optional[str] Command to restart OctoPrint. unset commands.localPipCommand Optional[str] pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. unset onlineCheck.* Configuration of the regular online connectivity check. onlineCheck.enabled Optional[bool] Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. unset onlineCheck.interval int Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. 900 onlineCheck.host str DNS host against which to check, defaults to Cloudflare's DNS. '1.1.1.1' onlineCheck.port int DNS port against which to check, defaults to the standard DNS port. 53 onlineCheck.name str Host name for which to check name resolution, defaults to OctoPrint's main domain. 'octoprint.org' pluginBlacklist.* Configuration of the plugin blacklist. pluginBlacklist.enabled Optional[bool] Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. unset pluginBlacklist.url str The URL from which to fetch the blacklist. 'https://plugins.octoprint.org/blacklist.json' pluginBlacklist.ttl int Time to live of the cached blacklist, in seconds (default: 15 minutes). 900 diskspace.* Settings of when to display what disk space warning. diskspace.warning int Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. 524288000 diskspace.critical int Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. 209715200 preemptiveCache.* Configuration of the preemptive cache. preemptiveCache.exceptions List[str] Which server paths to exclude from the preemptive cache, e.g. /some/path . [] preemptiveCache.until int How many days to leave unused entries in the preemptive cache config. 7 ipCheck.* Configuration of the client IP check to warn about connections from external networks. ipCheck.enabled bool Whether to enable the check. True ipCheck.trustedSubnets List[str] Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 . [] allowFraming bool Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. False cookies.* Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). cookies.secure bool Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. False cookies.samesite Optional[Literal['Strict', 'Lax', 'None']] SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to Lax . Be advised that if forced unset, this has security implications as many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 . 'Lax' slicing # Defaults # slicing : enabled : true defaultSlicer : defaultProfiles : {} Data model # Name Type Description Default enabled bool Whether to enable slicing support or not. True defaultSlicer Optional[str] Default slicer to use. unset defaultProfiles Dict[str, str] Default slicing profiles per slicer, maps slicer identifier to profile identifier. {} system # Defaults # system : actions : [] Data model # Name Type Description Default actions[] A list of system actions to show in the UI. actions[].action str The identifier used internally to identify the action. Set to divider to generate a divider in the menu. required actions[].name Optional[str] The name of the action that will be shown on the menu. Must be set if the action is not a divider. unset actions[].command Optional[str] The command to execute when the action is selected. Must be set if the action is not a divider. unset actions[].async None Whether to run the command asynchronously. False actions[].confirm Optional[str] An optional confirmation message to show before executing the command. unset temperature # Defaults # temperature : profiles : - name : ABS extruder : 210 bed : 100 - name : PLA extruder : 180 bed : 60 cutoff : 30 sendAutomatically : false sendAutomaticallyAfter : 1 Data model # Name Type Description Default profiles[] profiles[].name str Name of the profile. required profiles[].extruder int Hotend temperature to set with the profile. required profiles[].bed int Bed temperature to set with the profile. required cutoff int Cut off time for the temperature data, in minutes. 30 sendAutomatically bool Whether to send new temperature settings made in the UI automatically. False sendAutomaticallyAfter int After what time to send the new temperature settings automatically, in seconds. 1 terminalFilters # Use the following settings to define a list of terminal filters to display in the terminal tab for filtering certain lines from the display terminal log. Defaults # terminal_filters : - name : Suppress temperature messages regex : '(Send: (N\\d+\\s+)?M105)|(Recv:\\s+(ok\\s+([PBN]\\d+\\s+)*)?([BCLPR]|T\\d*):-?\\d+)' - name : Suppress SD status messages regex : '(Send: (N\\d+\\s+)?M27)|(Recv: SD printing byte)|(Recv: Not SD printing)' - name : Suppress position messages regex : (Send:\\s+(N\\d+\\s+)?M114)|(Recv:\\s+(ok\\s+)?X:[+-]?([0-9]*[.])?[0-9]+\\s+Y:[+-]?([0-9]*[.])?[0-9]+\\s+Z:[+-]?([0-9]*[.])?[0-9]+\\s+E\\d*:[+-]?([0-9]*[.])?[0-9]+).* - name : Suppress wait responses regex : 'Recv: wait' - name : Suppress processing responses regex : 'Recv: (echo:\\s*)?busy:\\s*processing' Data model # Each filter entry in the list is a dictionary with the following keys: Name Type Description Default name str The name of the filter. required regex str The regular expression to match. Use JavaScript regular expressions . required webcam # Defaults # webcam : webcamEnabled : true timelapseEnabled : true stream : streamRatio : 16:9 streamTimeout : 5 streamWebrtcIceServers : - stun:stun.l.google.com:19302 snapshot : snapshotTimeout : 5 snapshotSslValidation : true ffmpeg : ffmpegThreads : 1 ffmpegVideoCodec : libx264 bitrate : 10000k watermark : true flipH : false flipV : false rotate90 : false ffmpegCommandline : '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline : '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse : type : off fps : 25 postRoll : 0 options : interval : capturePostRoll : retractionZHop : cleanTmpAfterDays : 7 cacheBuster : false Data model # Name Type Description Default webcamEnabled bool Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set. True timelapseEnabled bool Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. True stream Optional[str] unset streamRatio str Valid values: '16:9' , '4:3' . '16:9' streamTimeout int 5 streamWebrtcIceServers List[str] ['stun:stun.l.google.com:19302'] snapshot Optional[str] unset snapshotTimeout int 5 snapshotSslValidation bool True ffmpeg Optional[str] Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. unset ffmpegThreads int Number of how many threads to instruct ffmpeg to use for encoding. 1 ffmpegVideoCodec str Videocodec to be used for encoding. 'libx264' bitrate str The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. '10000k' watermark bool Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. True flipH bool Whether to flip the webcam horizontally. False flipV bool Whether to flip the webcam vertically. False rotate90 bool Whether to rotate the webcam 90\u00b0 counter clockwise. False ffmpegCommandline str '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline str '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse.* The default timelapse settings. timelapse.type str The timelapse type. Valid values: 'off' , 'z-change' , 'timed' . 'off' timelapse.fps int The framerate at which to render the movie. 25 timelapse.postRoll int The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode. 0 timelapse.options.* Additional options depending on the timelapse type. timelapse.options.interval Optional[int] timed timelapses only: The interval which to leave between images in seconds. unset timelapse.options.capturePostRoll Optional[bool] timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). unset timelapse.options.retractionZHop Optional[float] zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots. unset cleanTmpAfterDays int After how many days unrendered timelapses will be deleted. 7 cacheBuster bool False","title":"Main configuration: config.yaml"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml","text":"If not specified via the command line, the main configuration file config.yaml for OctoPrint is expected in its settings folder, which unless defined differently via the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. If the file is not there, you can just create it - it will only get created by OctoPrint once you save settings that deviate from the default settings. Note that many of these settings are available from the Settings in OctoPrint itself. They can also be configured via config command line interface. The configuration is a YAML file with a top-level dictionary. The keys of this dictionary are as follows: accessControl : # ... api : # ... appearance : # ... controls : # ... devel : # ... estimation : # ... events : # ... feature : # ... folder : # ... gcodeAnalysis : # ... plugins : # ... printerParameters : # ... printerProfiles : # ... scripts : # ... serial : # ... server : # ... slicing : # ... system : # ... temperature : # ... terminalFilters : # ... webcam : # ... Their content is described in the following sections.","title":"Main configuration: config.yaml"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.accessControl","text":"","title":"accessControl"},{"location":"user-guide/configuration/config-yaml/#defaults","text":"accessControl : salt : userManager : octoprint.access.users.FilebasedUserManager groupManager : octoprint.access.groups.FilebasedGroupManager permissionManager : octoprint.access.permissions.PermissionManager userfile : groupfile : autologinLocal : false localNetworks : - 127.0.0.0/8 - ::1/128 autologinAs : trustBasicAuthentication : false checkBasicAuthenticationPassword : true trustRemoteUser : false remoteUserHeader : REMOTE_USER addRemoteUsers : false","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model","text":"Name Type Description Default salt Optional[str] Secret salt used for password hashing. DO NOT TOUCH! If changed you will no longer be able to log in with your existing accounts. Default unset, generated on first run. unset userManager str The user manager implementation to use for accessing user information. Currently only a filebased user manager is implemented which stores configured accounts in a YAML file (Default: users.yaml in the default configuration folder). 'octoprint.access.users.FilebasedUserManager' groupManager str The group manager implementation to use for accessing group information. Currently only a filebased user manager is implemented which stores configured groups in a YAML file (Default: groups.yaml in the default configuration folder). 'octoprint.access.groups.FilebasedGroupManager' permissionManager str The permission manager implementation to use. 'octoprint.access.permissions.PermissionManager' userfile Optional[str] The YAML user file to use. If left out defaults to users.yaml in the default configuration folder. unset groupfile Optional[str] The YAML group file to use. If left out defaults to groups.yaml in the default configuration folder. unset autologinLocal bool If set to true, will automatically log on clients originating from any of the networks defined in localNetworks as the user defined in autologinAs . False localNetworks List[str] A list of networks or IPs for which an automatic logon as the user defined in autologinAs will take place. If available OctoPrint will evaluate the X-Forwarded-For HTTP header for determining the client's IP address. Defaults to anything originating from localhost. ['127.0.0.0/8', '::1/128'] autologinAs Optional[str] The name of the user to automatically log on clients originating from localNetworks as. Must be the name of one of your configured users. unset trustBasicAuthentication bool Whether to trust Basic Authentication headers. If you have setup Basic Authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user user during Basic Authentication. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through Basic Authentication! False checkBasicAuthenticationPassword bool Whether to also check the password provided through Basic Authentication, if the Basic Authentication header is to be trusted. Disabling this will only match the user name in the Basic Authentication header and login the user without further checks, thus disable with caution. True trustRemoteUser bool Whether to trust remote user headers. If you have setup authentication in front of OctoPrint and the user names you use there match OctoPrint accounts, by setting this to true users will be logged into OctoPrint as the user provided in the header. ONLY ENABLE THIS if your OctoPrint instance is only accessible through a connection locked down through an authenticating reverse proxy! False remoteUserHeader str Header used by the reverse proxy to convey the authenticated user. 'REMOTE_USER' addRemoteUsers bool If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint. False","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.api","text":"","title":"api"},{"location":"user-guide/configuration/config-yaml/#defaults_1","text":"api : key : apps : {} allowCrossOrigin : false","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_1","text":"Name Type Description Default key Optional[str] Global API key, deprecated, use User API keys instead. Unset by default, will be generated on first run. unset apps Dict[str, str] {} allowCrossOrigin bool Whether to allow cross origin access to the API or not. False","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.appearance","text":"Using the appearance settings you can tweak OctoPrint's appearance a bit to better distinguish multiple instances/printers appearance or to modify the order and presence of the various UI components","title":"appearance"},{"location":"user-guide/configuration/config-yaml/#defaults_2","text":"appearance : name : '' color : default colorTransparent : false colorIcon : true defaultLanguage : _default showFahrenheitAlso : false fuzzyTimes : true closeModalsWithClick : true showInternalFilename : true components : order : navbar : - settings - systemmenu - plugin_announcements - plugin_logging_seriallog - plugin_logging_plugintimingslog - plugin_pi_support - login sidebar : - plugin_firmware_check_warning - plugin_firmware_check_info - connection - state - files tab : - temperature - control - plugin_gcodeviewer - terminal - timelapse settings : - section_printer - serial - printerprofiles - temperatures - terminalfilters - gcodescripts - section_features - features - webcam - accesscontrol - plugin_gcodeviewer - api - plugin_appkeys - section_octoprint - server - folders - appearance - plugin_logging - plugin_pluginmanager - plugin_softwareupdate - plugin_announcements - plugin_eventmanager - plugin_backup - plugin_tracking - plugin_errortracking - plugin_pi_support usersettings : - access - interface wizard : - plugin_softwareupdate_update - plugin_backup - plugin_corewizard_acl - plugin_corewizard_onlinecheck about : - about - plugin_pi_support - supporters - authors - changelog - license - thirdparty - plugin_pluginmanager generic : [] disabled : navbar : [] sidebar : [] tab : [] settings : [] usersettings : [] wizard : [] about : [] generic : []","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_2","text":"Name Type Description Default name str Use this to give your OctoPrint instance a name. It will be displayed in the title bar (as \" [OctoPrint]\") and in the navigation bar (as \"OctoPrint: <>\") '' color str Valid values: 'red' , 'orange' , 'green' , 'blue' , 'yellow' , 'violet' , 'default' . 'default' colorTransparent bool Makes the color of the navigation bar \"transparent\". In case your printer uses acrylic for its frame \ud83d\ude09. False colorIcon bool True defaultLanguage str Default language of OctoPrint. If left unset OctoPrint will try to match up available languages with the user's browser settings. '_default' showFahrenheitAlso bool False fuzzyTimes bool True closeModalsWithClick bool True showInternalFilename bool Show the internal filename in the files sidebar, if necessary. True components.* Configures the order and availability of the UI components. components.order.* Defines the order of the components within their respective containers. components.order.navbar List[str] ['settings', 'systemmenu', 'plugin_announcements', 'plugin_logging_seriallog', 'plugin_logging_plugintimingslog', 'plugin_pi_support', 'login'] components.order.sidebar List[str] ['plugin_firmware_check_warning', 'plugin_firmware_check_info', 'connection', 'state', 'files'] components.order.tab List[str] ['temperature', 'control', 'plugin_gcodeviewer', 'terminal', 'timelapse'] components.order.settings List[str] ['section_printer', 'serial', 'printerprofiles', 'temperatures', 'terminalfilters', 'gcodescripts', 'section_features', 'features', 'webcam', 'accesscontrol', 'plugin_gcodeviewer', 'api', 'plugin_appkeys', 'section_octoprint', 'server', 'folders', 'appearance', 'plugin_logging', 'plugin_pluginmanager', 'plugin_softwareupdate', 'plugin_announcements', 'plugin_eventmanager', 'plugin_backup', 'plugin_tracking', 'plugin_errortracking', 'plugin_pi_support'] components.order.usersettings List[str] Order of user settings. ['access', 'interface'] components.order.wizard List[str] ['plugin_softwareupdate_update', 'plugin_backup', 'plugin_corewizard_acl', 'plugin_corewizard_onlinecheck'] components.order.about List[str] ['about', 'plugin_pi_support', 'supporters', 'authors', 'changelog', 'license', 'thirdparty', 'plugin_pluginmanager'] components.order.generic List[str] Order of generic items. [] components.disabled.* Disabled components per container. If a component is included here it will not be included in OctoPrint's UI at all. Note that this might mean that critical functionality will not be available if no replacement is registered. components.disabled.navbar List[str] Disabled navbar items. [] components.disabled.sidebar List[str] Disabled sidebar items. [] components.disabled.tab List[str] Disabled tabs. [] components.disabled.settings List[str] Disabled settings. [] components.disabled.usersettings List[str] Disabled user settings. [] components.disabled.wizard List[str] Disabled wizards. [] components.disabled.about List[str] Disabled about dialog items. [] components.disabled.generic List[str] Disabled generic items. [] Hint By modifying the components.order lists you may reorder OctoPrint's UI components as you like. You can also inject Plugins at another than their default location in their respective container by adding the entry plugin_<plugin identifier> where you want them to appear. When you override this setting, the resulting order for display will be calculated as follows: first all components as defined by the components.order list then all enabled core components as defined in the default order Components not contained within the default order (e.g. from third party plugins) will be either prepended or appended to that result, depending on the component type. Example: If you want the tab of the Hello World Plugin to appear as the first tab in OctoPrint, you'd need to redefine components.order.tab by including something like this in your config.yaml : appearance : components : order : tab : - plugin_helloworld OctoPrint will then display the Hello World tab first, followed by the default tabs and then any other not explicitely ordered tabs.","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.controls","text":"Use the controls section to add custom controls to the \"Controls\" tab within OctoPrint.","title":"controls"},{"location":"user-guide/configuration/config-yaml/#defaults_3","text":"controls : []","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_3","text":"controls is a list, with each entry in the list being a dictionary describing either a control or a container.","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#control-model","text":"Name Type Description Default name str The name of the control, will be displayed either on the button if it's a control sending a command or as a label for controls which only display output. required command Optional[str] A single GCODE command to send to the printer. Will be rendered as a button which sends the command to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with commands and script . The rendered button be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset commands Optional[List[str]] A list of GCODE commands to send to the printer. Will be rendered as a button which sends the commands to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and script . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. unset script Optional[str] The name of a full blown GCODE script to send to the printer. Will be rendered as a button which sends the script to the printer upon click. The button text will be the value of the name attribute. Mutually exclusive with command and commands . The rendered button will be disabled if the printer is currently offline or printing or alternatively if the requirements defined via the enabled attribute are not met. Values of input parameters will be available in the template context under the parameter variable (e.g. an input parameter speed will be available in the script template as parameter.speed ). On top of that all other variables defined in the GCODE template context will be available. unset javascript Optional[str] A JavaScript snippet to be executed when the button rendered for command or commands is clicked. This allows to override the direct sending of the command or commands to the printer with more sophisticated behaviour. The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset additionalClasses Optional[str] Additional classes to apply to the button of a command , commands , script or javascript control, other than the default btn . Can be used to visually style the button, e.g. set to btn-danger to turn the button red. unset enabled Optional[str] A JavaScript snippet returning either true or false determining whether the control should be enabled or not. This allows to override the default logic for the enable state of the control (disabled if printer is offline). The JavaScript snippet is eval 'd and processed in a context where the control it is part of is provided as local variable data and the ControlViewModel is available as self . unset regex Optional[str] A regular expression to match against lines received from the printer to retrieve information from it (e.g. specific output). Together with template this allows rendition of received data from the printer within the UI. unset template Optional[str] A template to use for rendering the match of regex . May contain placeholders in Python Format String Syntax for either named groups within the regex (e.g. Temperature: {temperature} for a regex T:\\s*(?P<temperature>\\d+(\\.\\d*) ) or positional groups within the regex (e.g. Position: X={0}, Y={1}, Z={2}, E={3} for a regex X:([0-9.]+) Y:([0-9.]+) Z:([0-9.]+) E:([0-9.]+) ). unset confirm Optional[str] A text to display to the user to confirm his button press. Can be used with sensitive custom controls like changing EEPROM values in order to prevent accidental clicks. The text will be displayed in a confirmation dialog. unset","title":"Control model"},{"location":"user-guide/configuration/config-yaml/#container-model","text":"Name Type Description Default children List[Union[octoprint.schema.config.controls.ControlConfig, octoprint.schema.config.controls.ContainerConfig]] A list of children controls or containers contained within this container. [] name Optional[str] A name to display above the container, basically a section header. unset layout str The layout to use for laying out the contained children, either from top to bottom ( vertical ) or from left to right ( horizontal ). Valid values: 'horizontal' , 'vertical' . 'vertical'","title":"Container model"},{"location":"user-guide/configuration/config-yaml/#example","text":"controls : - name : Fan layout : horizontal children : - name : Enable Fan command : M106 S%(speed)s input : - name : Speed (0-255) parameter : speed default : 255 slider : min : 0 max : 255 - name : Disable Fan command : M107 - name : Example for multiple commands children : - name : Move X (static) confirm : You are about to move the X axis right by 10mm with 3000mm/min. commands : - G91 - G1 X10 F3000 - G90 - name : Move X (parametric) commands : - G91 - G1 X%(distance)s F%(speed)s - G90 input : - default : 10 name : Distance parameter : distance - default : 3000 name : Speed parameter : speed - name : Reporting children : - name : Get Position command : M114 regex : \"X:([-+]?[0-9.]+) Y:([-+]?[0-9.]+) Z:([-+]?[0-9.]+) E:([-+]?[0-9.]+)\" template : \"Position: X={0}, Y={1}, Z={2}, E={3}\" - name : Fun stuff children : - name : Dance script : custom/dance.gco input : - name : Go arounds parameter : repetitions slider : max : 10 min : 1 step : 1","title":"Example"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.devel","text":"The following settings are only relevant to you if you want to do OctoPrint development.","title":"devel"},{"location":"user-guide/configuration/config-yaml/#defaults_4","text":"devel : stylesheet : less cache : enabled : true preemptive : true webassets : bundle : true clean_on_startup : true minify : true minify_plugins : false useFrozenDictForPrinterState : true showLoadingAnimation : true sockJsConnectTimeout : 30 pluginTimings : false enableRateLimiter : true enableCsrfProtection : true","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_4","text":"Name Type Description Default stylesheet str Settings for stylesheet preference. OctoPrint will prefer to use the stylesheet type specified here. Usually (on a production install) that will be the compiled css (default). Developers may specify less here too. Valid values: 'css' , 'less' . 'less' cache.* Settings for OctoPrint's internal caching. cache.enabled bool True cache.preemptive bool True webassets.* Settings for OctoPrint's web asset merging and minifying. webassets.bundle bool If set to true, OctoPrint will merge all JS, all CSS and all Less files into one file per type to reduce request count. Setting it to false will load all assets individually. Note: if this is set to false, no minification will take place regardless of the minify setting. True webassets.clean_on_startup bool Whether to delete generated web assets on server startup (forcing a regeneration). True webassets.minify bool If set to true, OctoPrint will the core and library javascript assets. Note: if bundle is set to false, no minification will take place either. True webassets.minify_plugins bool If set to true, OctoPrint will also minify the third party plugin javascript assets. Note: if bundle or minify are set to false, no minification of the plugin assets will take place either. False useFrozenDictForPrinterState bool True showLoadingAnimation bool Enable or disable the loading animation. True sockJsConnectTimeout float 30 pluginTimings bool False enableRateLimiter bool Enable or disable the rate limiter. Careful, disabling this reduces security. True enableCsrfProtection bool Enable or disable the CSRF protection. Careful, disabling this reduces security. True","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.estimation","text":"","title":"estimation"},{"location":"user-guide/configuration/config-yaml/#defaults_5","text":"estimation : printTime : statsWeighingUntil : 0.5 validityRange : 0.15 forceDumbFromPercent : 0.3 forceDumbAfterMin : 30.0 stableThreshold : 60","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_5","text":"Name Type Description Default printTime.* Parameters for the print time estimation during an ongoing print job. printTime.statsWeighingUntil float Until which percentage to do a weighted mixture of statistical duration (analysis or past prints) with the result from the calculated estimate if that's already available. Utilized to compensate for the fact that the earlier in a print job, the least accuracy even a stable calculated estimate provides. 0.5 printTime.validityRange float Range the assumed percentage (based on current estimated statistical, calculated or mixed total vs elapsed print time so far) needs to be around the actual percentage for the result to be used. 0.15 printTime.forceDumbFromPercent float If no estimate could be calculated until this percentage and no statistical data is available, use dumb linear estimate. Value between 0 and 1.0. 0.3 printTime.forceDumbAfterMin float If no estimate could be calculated until this many minutes into the print and no statistical data is available, use dumb linear estimate. 30.0 printTime.stableThreshold int Average fluctuation between individual calculated estimates to consider in stable range. Seconds of difference. 60","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.events","text":"Use the following settings to add shell/gcode commands to be executed on certain events :","title":"events"},{"location":"user-guide/configuration/config-yaml/#defaults_6","text":"events : enabled : true subscriptions : []","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_6","text":"Name Type Description Default enabled bool Whether event subscriptions should be enabled or not. True subscriptions[] A list of event subscriptions. subscriptions[].event str The event to subscribe to. required subscriptions[].command str The command to execute when the event is triggered, either a GCODE or a system command. required subscriptions[].type str The type of the command. Valid values: 'system' , 'gcode' . required subscriptions[].enabled bool Whether the event subscription should be enabled. True subscriptions[].debug bool If set to true , OctoPrint will log the command after performing all placeholder replacements. False","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#example_1","text":"events : subscriptions : # example event consumer that prints a message to the system log if the printer is disconnected - event : Disconnected command : \"logger 'Printer got disconnected'\" type : system # example event consumer that queries printer information from the firmware, prints a \"Connected\" # message to the LCD and homes the print head upon established printer connection, disabled though - event : Connected command : M115,M117 printer connected!,G28 type : gcode enabled : False Hint For debugging purposes, you can set the debug property on your event subscription definition to true . That will make the event handler print a log line with your subscription's command after performing all placeholder replacements. Example: events : subscriptions : - event : Startup command : \"logger 'OctoPrint started up'\" type : system debug : true This will be logged in OctoPrint's logfile as Executing System Command: logger 'OctoPrint started up'","title":"Example"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.feature","text":"","title":"feature"},{"location":"user-guide/configuration/config-yaml/#defaults_7","text":"feature : temperatureGraph : true sdSupport : true keyboardControl : true pollWatched : false modelSizeDetection : true rememberFileFolder : false printStartConfirmation : false printCancelConfirmation : true uploadOverwriteConfirmation : true autoUppercaseBlacklist : - M117 - M118 g90InfluencesExtruder : false enforceReallyUniversalFilenames : false","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_7","text":"Name Type Description Default temperatureGraph bool Whether to enable the temperature graph in the UI or not. True sdSupport bool Specifies whether support for SD printing and file management should be enabled. True keyboardControl bool Whether to enable the keyboard control feature in the control tab. True pollWatched bool Whether to actively poll the watched folder (true) or to rely on the OS's file system notifications instead (false). False modelSizeDetection bool Whether to enable model size detection and warning (true) or not (false). True rememberFileFolder bool Whether to remember the selected folder on the file manager. False printStartConfirmation bool Whether to show a confirmation on print start (true) or not (false) False printCancelConfirmation bool Whether to show a confirmation on print cancelling (true) or not (false) True uploadOverwriteConfirmation bool True autoUppercaseBlacklist List[str] Commands that should never be auto-uppercased when sent to the printer through the Terminal tab. ['M117', 'M118'] g90InfluencesExtruder bool Whether G90 / G91 also influence absolute/relative mode of extruders. False enforceReallyUniversalFilenames bool Replace all special characters and spaces with text equivalent to make them universally compatible. Most OS filesystems work fine with unicode characters, but just in case you can revert to the older behaviour by setting this to true. False","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.folder","text":"","title":"folder"},{"location":"user-guide/configuration/config-yaml/#defaults_8","text":"folder : uploads : timelapse : timelapse_tmp : logs : virtualSd : watched : plugins : slicingProfiles : printerProfiles : scripts : translations : generated : data :","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_8","text":"Name Type Description Default uploads Optional[str] Absolute path where to store gcode uploads. Defaults to the uploads folder in OctoPrint's base folder. unset timelapse Optional[str] Absolute path where to store finished timelase recordings. Defaults to the timelapse folder in OctoPrint's base folder. unset timelapse_tmp Optional[str] Absolute path where to store temporary timelapse snapshots. Defaults to the timelapse/tmp folder in OctoPrint's base folder. unset logs Optional[str] Absolute path where to store logs. Defaults to the logs folder in OctoPrint's base folder. unset virtualSd Optional[str] Absolute path where to store the virtual printer's SD card files. Defaults to the virtualSd folder in OctoPrint's base folder. unset watched Optional[str] Absolute path to the watched folder. Defaults to the watched folder in OctoPrint's base folder. unset plugins Optional[str] Absolute path where to locate and install single file plugins. Defaults to the plugins folder in OctoPrint's base folder. unset slicingProfiles Optional[str] Absolute path where to store slicing profiles. Defaults to the slicingProfiles folder in OctoPrint's base folder. unset printerProfiles Optional[str] Absolute path where to store printer profiles. Defaults to the printerProfiles folder in OctoPrint's base folder. unset scripts Optional[str] Absolute path where to store (GCODE) scripts. Defaults to the scripts folder in OctoPrint's base folder. unset translations Optional[str] Absolute path where to store additional translations. Defaults to the translations folder in OctoPrint's base folder. unset generated Optional[str] Absolute path where to store generated files. Defaults to the generated folder in OctoPrint's base folder. unset data Optional[str] Absolute path where to store additional data. Defaults to the data folder in OctoPrint's base folder. unset","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.gcodeAnalysis","text":"","title":"gcodeAnalysis"},{"location":"user-guide/configuration/config-yaml/#defaults_9","text":"gcodeAnalysis : maxExtruders : 10 throttle_normalprio : 0.01 throttle_highprio : 0.0 throttle_lines : 100 runAt : idle bedZ : 0.0","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_9","text":"Name Type Description Default maxExtruders int Maximum number of extruders to support/to sanity check for. 10 throttle_normalprio float Pause between each processed GCODE line batch in normal priority mode, seconds. 0.01 throttle_highprio float Pause between each processed GCODE line batch in high priority mode (e.g. on fresh uploads), seconds. 0.0 throttle_lines int GCODE line batch size. 100 runAt str Whether to run the analysis only when idle (not printing), regardless of printing state or never. Valid values: 'never' , 'idle' , 'always' . 'idle' bedZ float Z position considered the location of the bed. 0.0","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.plugins","text":"The plugins section is where plugins can store their specific settings. It is also where the installed but disabled plugins are tracked.","title":"plugins"},{"location":"user-guide/configuration/config-yaml/#defaults_10","text":"plugins : _disabled : [] _forcedCompatible : [] _sortingOrder : {}","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_10","text":"Name Type Description Default _disabled None Identifiers of installed but disabled plugins. [] _forcedCompatible None Identifiers of plugins for which python compatibility information will be ignored and the plugin considered compatible in any case. Only for development, do NOT use in production. [] _sortingOrder None Custom sorting of hooks and implementations provided by plugins. Two-tiered dictionary structure, plugin identifier mapping to a dictionary of order overrides mapped by sorting context/hook name. {} Additionally to the fields listed here, plugins will contain further keys for each plugin that is storing settings itself. The keys will be the plugin's identifier.","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#example_2","text":"plugins : _disabled : - some_plugin _forcedCompatible : - some_other_plugin _sortingOrder : yet_another_plugin : octoprint.plugin.ordertest.callback : 1 StartupPlugin.on_startup : 10 virtual_printer : _config_version : 1 enabled : true","title":"Example"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.printerParameters","text":"","title":"printerParameters"},{"location":"user-guide/configuration/config-yaml/#defaults_11","text":"printerParameters : pauseTriggers : []","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_11","text":"Name Type Description Default pauseTriggers List[str] []","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.printerProfiles","text":"","title":"printerProfiles"},{"location":"user-guide/configuration/config-yaml/#defaults_12","text":"printerProfiles : default :","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_12","text":"Name Type Description Default default Optional[str] Name of the printer profile to default to. unset","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.scripts","text":"Default scripts and snippets. You'd usually not edit the config.yaml file to adjust those but instead create the corresponding files in ~/.octoprint/scripts/ . See GCODE Scripts .","title":"scripts"},{"location":"user-guide/configuration/config-yaml/#defaults_13","text":"scripts : gcode : afterPrinterConnected : beforePrinterDisconnected : beforePrintStarted : afterPrintCancelled : \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet\\ \\ 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" afterPrintDone : beforePrintPaused : afterPrintResumed : beforeToolChange : afterToolChange : snippets : disable_hotends : \"{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n\\ {% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{\\ \\ tool }} S0\\n{% endfor %}{% endif %}\" disable_bed : \"{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}\"","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_13","text":"Name Type Description Default gcode.* gcode.afterPrinterConnected Optional[str] unset gcode.beforePrinterDisconnected Optional[str] unset gcode.beforePrintStarted Optional[str] unset gcode.afterPrintCancelled Optional[str] \"; disable motors\\nM84\\n\\n;disable all heaters\\n{% snippet 'disable_hotends' %}\\n{% snippet 'disable_bed' %}\\n;disable fan\\nM106 S0\" gcode.afterPrintDone Optional[str] unset gcode.beforePrintPaused Optional[str] unset gcode.afterPrintResumed Optional[str] unset gcode.beforeToolChange Optional[str] unset gcode.afterToolChange Optional[str] unset gcode.snippets Dict[str, str] {'disable_hotends': '{% if printer_profile.extruder.sharedNozzle %}M104 T0 S0\\n{% else %}{% for tool in range(printer_profile.extruder.count) %}M104 T{{ tool }} S0\\n{% endfor %}{% endif %}', 'disable_bed': '{% if printer_profile.heatedBed %}M140 S0\\n{% endif %}'}","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.serial","text":"","title":"serial"},{"location":"user-guide/configuration/config-yaml/#defaults_14","text":"serial : port : baudrate : exclusive : true lowLatency : false autoconnect : false log : false timeout : detectionFirst : 10.0 detectionConsecutive : 2.0 connection : 10.0 communication : 30.0 communicationBusy : 3.0 temperature : 5.0 temperatureTargetSet : 2.0 temperatureAutoreport : 2.0 sdStatus : 1.0 sdStatusAutoreport : 1.0 posAutoreport : 5.0 resendOk : 0.5 baudrateDetectionPause : 1.0 positionLogWait : 10.0 maxCommunicationTimeouts : idle : 2 printing : 5 long : 5 maxWritePasses : 5 additionalPorts : [] additionalBaudrates : [] blacklistedPorts : [] blacklistedBaudrates : [] longRunningCommands : - G4 - G28 - G29 - G30 - G32 - M400 - M226 - M600 blockedCommands : - M0 - M1 ignoredCommands : [] pausingCommands : - M0 - M1 - M25 emergencyCommands : - M112 - M108 - M410 checksumRequiringCommands : - M110 helloCommand : M110 N0 disconnectOnErrors : true ignoreErrorsFromFirmware : false terminalLogSize : 20 lastLineBufferSize : 50 logResends : true supportResendsWithoutOk : detect logPositionOnPause : true logPositionOnCancel : false abortHeatupOnCancel : true waitForStartOnConnect : false waitToLoadSdFileList : false alwaysSendChecksum : false neverSendChecksum : false sendChecksumWithUnknownCommands : false unknownCommandsNeedAck : false sdRelativePath : false sdAlwaysAvailable : false sdLowerCase : false sdCancelCommand : M25 maxNotSdPrinting : 2 swallowOkAfterResend : true repetierTargetTemp : false externalHeatupDetection : true supportWait : true ignoreIdenticalResends : false identicalResendsCountdown : 7 supportFAsCommand : false firmwareDetection : true blockWhileDwelling : false useParityWorkaround : detect maxConsecutiveResends : 10 sendM112OnError : true disableSdPrintingDetection : false ackMax : 1 sanityCheckTools : true notifySuppressedCommands : warn capabilities : autoreport_temp : true autoreport_sdstatus : true autoreport_pos : true busy_protocol : true emergency_parser : true extended_m20 : true resendRatioThreshold : 10 resendRatioStart : 100 ignoreEmptyPorts : false encoding : ascii enableShutdownActionCommand : false triggerOkForM29 : true","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_14","text":"Name Type Description Default port Optional[str] The default port to use to connect to the printer. If unset or set to AUTO , the port will be auto-detected. unset baudrate Optional[int] The default baudrate to use to connect to the printer. If unset or set to 0, the baudrate will be auto-detected. unset exclusive bool Whether to request the serial port exclusively or not True lowLatency bool Whether to request low latency mode on the serial port or not False autoconnect bool Whether to try to automatically connect to the printer on startup or not False log bool Whether to log whole communication to serial.log (warning: might decrease performance) False timeout.* Timeouts used for the serial connection to the printer, you might want to adjust these if you are experiencing connection problems timeout.detectionFirst float 10.0 timeout.detectionConsecutive float 2.0 timeout.connection float Timeout for waiting to establish a connection with the selected port, in seconds 10.0 timeout.communication float Timeout during serial communication, in seconds 30.0 timeout.communicationBusy float Timeout during serial communication when busy protocol support is detected, in seconds 3.0 timeout.temperature float Timeout after which to query temperature when no target is set 5.0 timeout.temperatureTargetSet float Timeout after which to query temperature when a target is set 2.0 timeout.temperatureAutoreport float 2.0 timeout.sdStatus float Timeout after which to query the SD status while SD printing 1.0 timeout.sdStatusAutoreport float 1.0 timeout.posAutoreport float 5.0 timeout.resendOk float 0.5 timeout.baudrateDetectionPause float 1.0 timeout.positionLogWait float 10.0 maxCommunicationTimeouts.* maxCommunicationTimeouts.idle int Max. timeouts when the printer is idle 2 maxCommunicationTimeouts.printing int Max. timeouts when the printer is printing 5 maxCommunicationTimeouts.long int Max. timeouts when a long running command is active 5 maxWritePasses int Maximum number of write attempts to serial during which nothing can be written before the communication with the printer is considered dead and OctoPrint will disconnect with an error 5 additionalPorts List[str] Use this to define additional patterns to consider for serial port listing. Must be a valid \"glob\" pattern [] additionalBaudrates List[int] Use this to define additional baud rates to offer for connecting to serial ports. Must be a valid integer [] blacklistedPorts List[str] [] blacklistedBaudrates List[int] [] longRunningCommands List[str] ['G4', 'G28', 'G29', 'G30', 'G32', 'M400', 'M226', 'M600'] blockedCommands List[str] Commands which should not be sent to the printer, e.g. because they are known to block serial communication until physical interaction with the printer as is the case on most firmwares with the default M0 and M1. ['M0', 'M1'] ignoredCommands List[str] Commands which should not be sent to the printer and just silently ignored. An example of when you may wish to use this could be useful if you wish to manually change a filament on M600, by using that as a Pausing command. [] pausingCommands List[str] Commands which should cause OctoPrint to pause any ongoing prints. ['M0', 'M1', 'M25'] emergencyCommands List[str] ['M112', 'M108', 'M410'] checksumRequiringCommands List[str] Commands which need to always be send with a checksum. ['M110'] helloCommand str Command to send in order to initiate a handshake with the printer. 'M110 N0' disconnectOnErrors bool Whether to disconnect from the printer on errors or not. True ignoreErrorsFromFirmware bool Whether to completely ignore errors from the firmware or not. False terminalLogSize int 20 lastLineBufferSize int 50 logResends bool Whether to log resends to octoprint.log or not. Invaluable debug tool without performance impact, leave on if possible please. True supportResendsWithoutOk str Whether to support resends without follow-up ok or not. Valid values: 'always' , 'detect' , 'never' . 'detect' logPositionOnPause bool True logPositionOnCancel bool False abortHeatupOnCancel bool True waitForStartOnConnect bool Whether OctoPrint should wait for the start response from the printer before trying to send commands during connect. False waitToLoadSdFileList bool Specifies whether OctoPrint should wait to load the SD card file list until the first firmware capability report is processed. False alwaysSendChecksum bool Specifies whether OctoPrint should send linenumber + checksum with every printer command. Needed for successful communication with Repetier firmware. False neverSendChecksum bool False sendChecksumWithUnknownCommands bool Specifies whether OctoPrint should also send linenumber + checksum with commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False unknownCommandsNeedAck bool Specifies whether OctoPrint should also use up acknowledgments ( ok ) for commands that are not detected as valid GCODE (as in, they do not match the regular expression ^\\s*([GM]\\d+|T) ). False sdRelativePath bool Specifies whether firmware expects relative paths for selecting SD files. False sdAlwaysAvailable bool Whether to always assume that an SD card is present in the printer. Needed by some firmwares which don't report the SD card status properly. False sdLowerCase bool False sdCancelCommand str 'M25' maxNotSdPrinting int 2 swallowOkAfterResend bool True repetierTargetTemp bool Whether the printer sends repetier style target temperatures in the format TargetExtr0:<temperature> instead of attaching that information to the regular M105 responses. False externalHeatupDetection bool Whether to enable external heatup detection (to detect heatup triggered e.g. through the printer's LCD panel or while printing from SD) or not. Causes issues with Repetier's \"first ok then response\" approach to communication, so disable for printers running Repetier firmware. True supportWait bool True ignoreIdenticalResends bool Whether to ignore identical resends from the printer (true, repetier) or not (false). False identicalResendsCountdown int If ignoreIdenticalResends is true, how many consecutive identical resends to ignore. 7 supportFAsCommand bool Whether to support F on its own as a valid GCODE command (true) or not (false). False firmwareDetection bool Whether to attempt to auto detect the firmware of the printer and adjust settings accordingly (true) or not and rely on manual configuration (false). True blockWhileDwelling bool Whether to block all sending to the printer while a G4 (dwell) command is active (true, repetier) or not (false). False useParityWorkaround str Valid values: 'always' , 'detect' , 'never' . 'detect' maxConsecutiveResends int 10 sendM112OnError bool True disableSdPrintingDetection bool False ackMax int 1 sanityCheckTools bool True notifySuppressedCommands str Valid values: 'info' , 'warn' , 'never' . 'warn' capabilities.* capabilities.autoreport_temp bool Whether to enable temperature autoreport in the firmware if its support is detected True capabilities.autoreport_sdstatus bool True capabilities.autoreport_pos bool True capabilities.busy_protocol bool Whether to shorten the communication timeout if the firmware seems to support the busy protocol True capabilities.emergency_parser bool True capabilities.extended_m20 bool True resendRatioThreshold int Percentage of resend requests among all sent lines that should be considered critical. 10 resendRatioStart int 100 ignoreEmptyPorts bool False encoding str Encoding to use when talking to a machine. ascii limits access to characters 0-127, latin_1 enables access to the \"extended\" ascii characters 0-255. Other values can be used, see Python's standard encodings . 'ascii' enableShutdownActionCommand bool Whether to enable support for the shutdown action command, allowing the printer to shut down OctoPrint and the system it's running on. False triggerOkForM29 bool Whether to automatically trigger an ok for M29 (a lot of versions of this command are buggy and the response skips on the ok). True","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.server","text":"","title":"server"},{"location":"user-guide/configuration/config-yaml/#defaults_15","text":"server : host : port : 5000 firstRun : true startOnceInSafeMode : false ignoreIncompleteStartup : false incompleteStartup : false seenWizards : {} secretKey : heartbeat : 900 reverseProxy : prefixHeader : schemeHeader : hostHeader : serverHeader : portHeader : prefixFallback : schemeFallback : hostFallback : serverFallback : portFallback : trustedDownstream : [] uploads : maxSize : 1073741824 nameSuffix : name pathSuffix : path maxSize : 102400 commands : systemShutdownCommand : systemRestartCommand : serverRestartCommand : localPipCommand : onlineCheck : enabled : interval : 900 host : 1.1.1.1 port : 53 name : octoprint.org pluginBlacklist : enabled : url : https://plugins.octoprint.org/blacklist.json ttl : 900 diskspace : warning : 524288000 critical : 209715200 preemptiveCache : exceptions : [] until : 7 ipCheck : enabled : true trustedSubnets : [] allowFraming : false cookies : secure : false samesite : Lax","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_15","text":"Name Type Description Default host Optional[str] Use this option to define the host to which to bind the server. If unset, OctoPrint will attempt to bind on all available interfaces, IPv4 and v6 unless either is disabled. unset port int Use this option to define the port to which to bind the server. 5000 firstRun bool If this option is true, OctoPrint will show the First Run wizard and set the setting to false after that completes. True startOnceInSafeMode bool If this option is true, OctoPrint will enable safe mode on the next server start and reset the setting to false False ignoreIncompleteStartup bool Set this to true to make OctoPrint ignore incomplete startups. Helpful for development. False incompleteStartup bool Signals to OctoPrint that the last startup was incomplete. OctoPrint will then startup in safe mode. False seenWizards Dict[str, str] {} secretKey Optional[str] Secret key for encrypting cookies and such, randomly generated on first run. unset heartbeat int 900 reverseProxy.* Settings if OctoPrint is running behind a reverse proxy (haproxy, nginx, apache, ...) that doesn't correctly set the required headers . These are necessary in order to make OctoPrint generate correct external URLs so that AJAX requests and download URLs work, and so that client IPs are read correctly. reverseProxy.prefixHeader Optional[str] The request header from which to determine the URL prefix under which OctoPrint is served by the reverse proxy. unset reverseProxy.schemeHeader Optional[str] The request header from which to determine the scheme (http or https) under which a specific request to OctoPrint was made to the reverse proxy. unset reverseProxy.hostHeader Optional[str] The request header from which to determine the host under which OctoPrint is served by the reverse proxy. unset reverseProxy.serverHeader Optional[str] unset reverseProxy.portHeader Optional[str] unset reverseProxy.prefixFallback Optional[str] Use this option to define an optional URL prefix (with a leading /, so absolute to your server's root) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy under a different root endpoint than / and can't configure said reverse proxy to send a prefix HTTP header (X-Script-Name by default, see above) with forwarded requests. unset reverseProxy.schemeFallback Optional[str] Use this option to define an optional forced scheme (http or https) under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy that also does HTTPS determination but can't configure said reverse proxy to send a scheme HTTP header (X-Scheme by default, see above) with forwarded requests. unset reverseProxy.hostFallback Optional[str] Use this option to define an optional forced host under which to run OctoPrint. This should only be needed if you want to run OctoPrint behind a reverse proxy with a different hostname than OctoPrint itself but can't configure said reverse proxy to send a host HTTP header (X-Forwarded-Host by default, see above) with forwarded requests. unset reverseProxy.serverFallback Optional[str] unset reverseProxy.portFallback Optional[str] unset reverseProxy.trustedDownstream List[str] List of trusted downstream servers for which to ignore the IP address when trying to determine the connecting client's IP address. If you have OctoPrint behind more than one reverse proxy you should add their IPs here so that they won't be interpreted as the client's IP. One reverse proxy will be handled correctly by default. [] uploads.* Settings for file uploads to OctoPrint, such as maximum allowed file size and header suffixes to use for streaming uploads. OctoPrint does some nifty things internally in order to allow streaming of large file uploads to the application rather than just storing them in memory. For that it needs to do some rewriting of the incoming upload HTTP requests, storing the uploaded file to a temporary location on disk and then sending an internal request to the application containing the original filename and the location of the temporary file. uploads.maxSize int Maximum size of uploaded files in bytes, defaults to 1GB. 1073741824 uploads.nameSuffix str Suffix used for storing the filename in the file upload headers when streaming uploads. 'name' uploads.pathSuffix str Suffix used for storing the path to the temporary file in the file upload headers when streaming uploads. 'path' maxSize int Maximum size of requests other than file uploads in bytes, defaults to 100KB. 102400 commands.* Commands to restart/shutdown octoprint or the system it's running on. commands.systemShutdownCommand Optional[str] Command to shut down the system OctoPrint is running on. unset commands.systemRestartCommand Optional[str] Command to restart the system OctoPrint is running on. unset commands.serverRestartCommand Optional[str] Command to restart OctoPrint. unset commands.localPipCommand Optional[str] pip command associated with OctoPrint, used for installing plugins and updates, if unset (default) the command will be autodetected based on the current python executable - unless you have a really special setup this is the right way to do it and there should be no need to ever touch this setting. unset onlineCheck.* Configuration of the regular online connectivity check. onlineCheck.enabled Optional[bool] Whether the online check is enabled. Ships unset, the user will be asked to make a decision as part of the setup wizard. unset onlineCheck.interval int Interval in which to check for online connectivity (in seconds), defaults to 15 minutes. 900 onlineCheck.host str DNS host against which to check, defaults to Cloudflare's DNS. '1.1.1.1' onlineCheck.port int DNS port against which to check, defaults to the standard DNS port. 53 onlineCheck.name str Host name for which to check name resolution, defaults to OctoPrint's main domain. 'octoprint.org' pluginBlacklist.* Configuration of the plugin blacklist. pluginBlacklist.enabled Optional[bool] Whether use of the blacklist is enabled. If unset, the user will be asked to make a decision as part of the setup wizard. unset pluginBlacklist.url str The URL from which to fetch the blacklist. 'https://plugins.octoprint.org/blacklist.json' pluginBlacklist.ttl int Time to live of the cached blacklist, in seconds (default: 15 minutes). 900 diskspace.* Settings of when to display what disk space warning. diskspace.warning int Threshold (bytes) after which to consider disk space becoming sparse, defaults to 500MB. 524288000 diskspace.critical int Threshold (bytes) after which to consider disk space becoming critical, defaults to 200MB. 209715200 preemptiveCache.* Configuration of the preemptive cache. preemptiveCache.exceptions List[str] Which server paths to exclude from the preemptive cache, e.g. /some/path . [] preemptiveCache.until int How many days to leave unused entries in the preemptive cache config. 7 ipCheck.* Configuration of the client IP check to warn about connections from external networks. ipCheck.enabled bool Whether to enable the check. True ipCheck.trustedSubnets List[str] Additional non-local subnets to consider trusted, in CIDR notation, e.g. 192.168.1.0/24 . [] allowFraming bool Whether to allow OctoPrint to be embedded in a frame or not. Note that depending on your setup you might have to set SameSite to None, Secure to true and serve OctoPrint through a reverse proxy that enables https for cookies and thus logging in to work. False cookies.* Settings for further configuration of the cookies that OctoPrint sets (login, remember me, ...). cookies.secure bool Whether to set the Secure flag to true on cookies. Only set to true if you are running OctoPrint behind a reverse proxy taking care of SSL termination. False cookies.samesite Optional[Literal['Strict', 'Lax', 'None']] SameSite setting to use on the cookies. Possible values are None , Lax and Strict . Defaults to Lax . Be advised that if forced unset, this has security implications as many browsers now default to Lax unless you configure cookies to be set with Secure flag set, explicitly set SameSite setting here and also serve OctoPrint over https. The Lax setting is known to cause with embedding OctoPrint in frames. See also \"Feature: Cookies default to SameSite=Lax\" , \"Feature: Reject insecure SameSite=None cookies\" and issue #3482 . 'Lax'","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.slicing","text":"","title":"slicing"},{"location":"user-guide/configuration/config-yaml/#defaults_16","text":"slicing : enabled : true defaultSlicer : defaultProfiles : {}","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_16","text":"Name Type Description Default enabled bool Whether to enable slicing support or not. True defaultSlicer Optional[str] Default slicer to use. unset defaultProfiles Dict[str, str] Default slicing profiles per slicer, maps slicer identifier to profile identifier. {}","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.system","text":"","title":"system"},{"location":"user-guide/configuration/config-yaml/#defaults_17","text":"system : actions : []","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_17","text":"Name Type Description Default actions[] A list of system actions to show in the UI. actions[].action str The identifier used internally to identify the action. Set to divider to generate a divider in the menu. required actions[].name Optional[str] The name of the action that will be shown on the menu. Must be set if the action is not a divider. unset actions[].command Optional[str] The command to execute when the action is selected. Must be set if the action is not a divider. unset actions[].async None Whether to run the command asynchronously. False actions[].confirm Optional[str] An optional confirmation message to show before executing the command. unset","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.temperature","text":"","title":"temperature"},{"location":"user-guide/configuration/config-yaml/#defaults_18","text":"temperature : profiles : - name : ABS extruder : 210 bed : 100 - name : PLA extruder : 180 bed : 60 cutoff : 30 sendAutomatically : false sendAutomaticallyAfter : 1","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_18","text":"Name Type Description Default profiles[] profiles[].name str Name of the profile. required profiles[].extruder int Hotend temperature to set with the profile. required profiles[].bed int Bed temperature to set with the profile. required cutoff int Cut off time for the temperature data, in minutes. 30 sendAutomatically bool Whether to send new temperature settings made in the UI automatically. False sendAutomaticallyAfter int After what time to send the new temperature settings automatically, in seconds. 1","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.terminalFilters","text":"Use the following settings to define a list of terminal filters to display in the terminal tab for filtering certain lines from the display terminal log.","title":"terminalFilters"},{"location":"user-guide/configuration/config-yaml/#defaults_19","text":"terminal_filters : - name : Suppress temperature messages regex : '(Send: (N\\d+\\s+)?M105)|(Recv:\\s+(ok\\s+([PBN]\\d+\\s+)*)?([BCLPR]|T\\d*):-?\\d+)' - name : Suppress SD status messages regex : '(Send: (N\\d+\\s+)?M27)|(Recv: SD printing byte)|(Recv: Not SD printing)' - name : Suppress position messages regex : (Send:\\s+(N\\d+\\s+)?M114)|(Recv:\\s+(ok\\s+)?X:[+-]?([0-9]*[.])?[0-9]+\\s+Y:[+-]?([0-9]*[.])?[0-9]+\\s+Z:[+-]?([0-9]*[.])?[0-9]+\\s+E\\d*:[+-]?([0-9]*[.])?[0-9]+).* - name : Suppress wait responses regex : 'Recv: wait' - name : Suppress processing responses regex : 'Recv: (echo:\\s*)?busy:\\s*processing'","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_19","text":"Each filter entry in the list is a dictionary with the following keys: Name Type Description Default name str The name of the filter. required regex str The regular expression to match. Use JavaScript regular expressions . required","title":"Data model"},{"location":"user-guide/configuration/config-yaml/#user-guide.configuration.config-yaml.webcam","text":"","title":"webcam"},{"location":"user-guide/configuration/config-yaml/#defaults_20","text":"webcam : webcamEnabled : true timelapseEnabled : true stream : streamRatio : 16:9 streamTimeout : 5 streamWebrtcIceServers : - stun:stun.l.google.com:19302 snapshot : snapshotTimeout : 5 snapshotSslValidation : true ffmpeg : ffmpegThreads : 1 ffmpegVideoCodec : libx264 bitrate : 10000k watermark : true flipH : false flipV : false rotate90 : false ffmpegCommandline : '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline : '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse : type : off fps : 25 postRoll : 0 options : interval : capturePostRoll : retractionZHop : cleanTmpAfterDays : 7 cacheBuster : false","title":"Defaults"},{"location":"user-guide/configuration/config-yaml/#data-model_20","text":"Name Type Description Default webcamEnabled bool Use this option to enable display of a webcam stream in the UI, e.g. via MJPG-Streamer. Webcam support will be disabled if not set. True timelapseEnabled bool Use this option to enable timelapse support via snapshot, e.g. via MJPG-Streamer. Timelapse support will be disabled if not set. True stream Optional[str] unset streamRatio str Valid values: '16:9' , '4:3' . '16:9' streamTimeout int 5 streamWebrtcIceServers List[str] ['stun:stun.l.google.com:19302'] snapshot Optional[str] unset snapshotTimeout int 5 snapshotSslValidation bool True ffmpeg Optional[str] Path to ffmpeg binary to use for creating timelapse recordings. Timelapse support will be disabled if not set. unset ffmpegThreads int Number of how many threads to instruct ffmpeg to use for encoding. 1 ffmpegVideoCodec str Videocodec to be used for encoding. 'libx264' bitrate str The bitrate to use for rendering the timelapse video. This gets directly passed to ffmpeg. '10000k' watermark bool Whether to include a \"created with OctoPrint\" watermark in the generated timelapse recordings. True flipH bool Whether to flip the webcam horizontally. False flipV bool Whether to flip the webcam vertically. False rotate90 bool Whether to rotate the webcam 90\u00b0 counter clockwise. False ffmpegCommandline str '{ffmpeg} -framerate {fps} -i \"{input}\" -vcodec {videocodec} -threads {threads} -b:v {bitrate} -f {containerformat} -y {filters} \"{output}\"' ffmpegThumbnailCommandline str '{ffmpeg} -sseof -1 -i \"{input}\" -update 1 -q:v 0.7 \"{output}\"' timelapse.* The default timelapse settings. timelapse.type str The timelapse type. Valid values: 'off' , 'z-change' , 'timed' . 'off' timelapse.fps int The framerate at which to render the movie. 25 timelapse.postRoll int The number of seconds in the rendered video to add after a finished print. The exact way how the additional images will be recorded depends on timelapse type. zchange timelapses will take one final picture and add it fps * postRoll times. timed timelapses continue to record just like at the beginning, so the recording will continue another fps * postRoll * interval seconds. This behaviour can be overridden by setting the capturePostRoll option to false , in which case the post roll will be created identically to zchange mode. 0 timelapse.options.* Additional options depending on the timelapse type. timelapse.options.interval Optional[int] timed timelapses only: The interval which to leave between images in seconds. unset timelapse.options.capturePostRoll Optional[bool] timed timelapses only: Whether to capture the snapshots for the post roll (true) or just copy the last captured snapshot from the print over and over again (false). unset timelapse.options.retractionZHop Optional[float] zchange timelapses only: z-hop height during retractions to ignore for capturing snapshots. unset cleanTmpAfterDays int After how many days unrendered timelapses will be deleted. 7 cacheBuster bool False","title":"Data model"},{"location":"user-guide/configuration/logging-yaml/","text":"Logging configuration: logging.yaml # The logging configuration file logging.yaml for OctoPrint is expected in its settings folder, which unless defined differently on the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. You can use it to change the log levels of the individual components within OctoPrint, which might be necessary to help in debugging issues you are experiencing, or to change the configuration of the logging handlers themselves, e.g. in order to change size after which to rollover the serial.log . Hint You can also configure individual logging levels for all components via UI by using the Logging options in the Settings. Changing log levels # If you need to change the default logging level within OctoPrint, create the file with a text editor of your choice (it's usually not there). The general format is this: loggers : <component> : level : <loglevel> with <component> being the internal OctoPrint component for which to change the loglevel, and <loglevel> being the new log level to set. An example for increasing the log level of the events and the file management components to DEBUG (the highest amount of logging) would be this logging.yaml : loggers : octoprint.events : level : DEBUG octoprint.filemanager : level : DEBUG A list of important components for which an increase in logging might be interesting follows: octoprint.events : the event sub system octoprint.filemanager : the file management layer octoprint.plugin : the plugin sub system octoprint.plugins.<plugin> : the plugin <plugin> to change the log level of, e.g. octoprint.plugins.discovery to change the log level of the Discovery Plugin or octoprint.plugins.backup to change the log level of the Backup plugin . octoprint.slicing : the slicing sub system This list will be expanded as deemed necessary. Changing logging handlers # You can also change the configuration of the logging handlers themselves, e.g. in order to make the serial.log larger for debugging long running communications or to change the behaviour of the octoprint.log . You can find the default configurations of the file handler used for the octoprint.log , the serialFile handler used for the serial.log and the console handler used for the output to stdout in YAML format below: handlers : # stdout console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout # octoprint.log file : class : logging.handlers.TimedRotatingFileHandler level : DEBUG formatter : simple when : D backupCount : 1 filename : /path/to/octoprints/logs/octoprint.log # serial.log serialFile : class : logging.handlers.RotatingFileHandler level : DEBUG formatter : simple maxBytes : 2097152 # 2 * 1024 * 1024 = 2 MB in bytes filename : /path/to/octoprints/logs/serial.log Todo This is currently not being synced up with the code and needs rework. You can find more information on the used logging handlers in the Python documentation on logging.handlers . Changing logging formatters # The logging formatters can be defined via logging.yaml as well. The simple formatter as referenced above is expressed in YAML as follows: formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" Todo This is currently not being synced up with the code and needs rework. The possible keys for the logging format can be found in the Python documentation on LogRecord attributes .","title":"Logging configuration: logging.yaml"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml","text":"The logging configuration file logging.yaml for OctoPrint is expected in its settings folder, which unless defined differently on the command line is located at ~/.octoprint on Linux, at %APPDATA%/OctoPrint on Windows and at ~/Library/Application Support/OctoPrint on macOS. You can use it to change the log levels of the individual components within OctoPrint, which might be necessary to help in debugging issues you are experiencing, or to change the configuration of the logging handlers themselves, e.g. in order to change size after which to rollover the serial.log . Hint You can also configure individual logging levels for all components via UI by using the Logging options in the Settings.","title":"Logging configuration: logging.yaml"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.levels","text":"If you need to change the default logging level within OctoPrint, create the file with a text editor of your choice (it's usually not there). The general format is this: loggers : <component> : level : <loglevel> with <component> being the internal OctoPrint component for which to change the loglevel, and <loglevel> being the new log level to set. An example for increasing the log level of the events and the file management components to DEBUG (the highest amount of logging) would be this logging.yaml : loggers : octoprint.events : level : DEBUG octoprint.filemanager : level : DEBUG A list of important components for which an increase in logging might be interesting follows: octoprint.events : the event sub system octoprint.filemanager : the file management layer octoprint.plugin : the plugin sub system octoprint.plugins.<plugin> : the plugin <plugin> to change the log level of, e.g. octoprint.plugins.discovery to change the log level of the Discovery Plugin or octoprint.plugins.backup to change the log level of the Backup plugin . octoprint.slicing : the slicing sub system This list will be expanded as deemed necessary.","title":"Changing log levels"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.handlers","text":"You can also change the configuration of the logging handlers themselves, e.g. in order to make the serial.log larger for debugging long running communications or to change the behaviour of the octoprint.log . You can find the default configurations of the file handler used for the octoprint.log , the serialFile handler used for the serial.log and the console handler used for the output to stdout in YAML format below: handlers : # stdout console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout # octoprint.log file : class : logging.handlers.TimedRotatingFileHandler level : DEBUG formatter : simple when : D backupCount : 1 filename : /path/to/octoprints/logs/octoprint.log # serial.log serialFile : class : logging.handlers.RotatingFileHandler level : DEBUG formatter : simple maxBytes : 2097152 # 2 * 1024 * 1024 = 2 MB in bytes filename : /path/to/octoprints/logs/serial.log Todo This is currently not being synced up with the code and needs rework. You can find more information on the used logging handlers in the Python documentation on logging.handlers .","title":"Changing logging handlers"},{"location":"user-guide/configuration/logging-yaml/#user-guide.configuration.logging-yaml.formatters","text":"The logging formatters can be defined via logging.yaml as well. The simple formatter as referenced above is expressed in YAML as follows: formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" Todo This is currently not being synced up with the code and needs rework. The possible keys for the logging format can be found in the Python documentation on LogRecord attributes .","title":"Changing logging formatters"},{"location":"user-guide/configuration/yaml-primer/","text":"A YAML Primer # Most of OctoPrint's configuration is done under the hood through YAML files, which is why it makes sense to shed some light on the basics of this data serialization format. YAML is a text based format which excels at representing the most common of data structures in an easy and very human readable way, which is why it was chosen for OctoPrint's configuration files. A text editor is all you need in order to write YAML configuration files. Basic Rules # First of all some basic things to know about working with YAML files: Never use tabs outside of quoted strings, especially not for indentation. The tab character is illegal within YAML files. Whitespace and indentation matters and plays an important part in structuring the data, so take special care to stay consistent here. YAML's comments start with a # and go until the end of the line. Interesting data types # You will probably only come across the three most basic types of data within OctoPrint's YAML files: scalars (such as strings, integers, ...), lists and associated arrays (aka key-value-pairs, aka maps, aka dictionaries). Scalars # Scalars are the most basic of all data types and are simple string, integer, float or boolean values. For most scalars you don't need any quotes at all, but if you need to define some piece of data which contains characters that could be mistaken with YAML syntax you need to quote it in either double \" or single ' quotes for the YAML file to stay valid. As simple rule of thumb, if your data contains any of these characters :-{}[]!#|>&%@ better quote it. Also quote it if you want a string but it could be mistaken for a valid number (integer or float) or if it consists only of \"Yes\", \"No\", \"yes\", \"no\", \"true\" or \"false\", which would be converted to a boolean without quotes. In double quoted strings if you need to include a literal double quote in your string you can escape it by prefixing it with a backslash \\ (which you can in turn escape by itself). In single quoted strings the single quote character can be escaped by prefixing it with another single quote, basically doubling it. Backslashes in single quoted strings do not need to be escaped. Quoted strings can also span across multiple lines, just indent the following lines. Note that you'll need to add a completely empty line in order for force a line break, the data will not be actually wrapped across multiple lines just because you spread its representation across multiple lines. int # 23 42 float # 23.5 100.0 boolean # true false Yes No yes no string # a string \"some quoted string with a : colon and a { bracket and a quote \\\" and a backslash \\\\ - phew\" 'some single quoted string with a single quote '' and a backslash \\ - yay' \"and a multiline string - just because we can we'll make it span across not two but four YAML lines! Including this paragraph. But in fact it will only be two lines :)\" \"23\" \"42.3\" \"Yes\" \"No\" \"true\" \"false\" yes and no true or false Lists # Lists allow to \"collect\" a number of similar things into one data structure. They are created by prefixing one or more consecutive lines with a - : - item 1 - 23.42 - 57 - true Take special care to have all of your list items at the same indentation level! Dictionaries # Dictionaries (aka associative arrays aka maps) allow organizing the data in key value pairs, with the key and the value being separated through a colon : : key : value anotherkey : another value Examples # Based on the three types explained above, quite complex data structures are possible: general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes In this example we have a dictionary on the top most \"layer\" which has three keys, general , specific and the_end . general in turn is a dictionary with the keys some_setting (a string), a_list (a list with four items, a string, a float, an int and a boolean), some_flag (a boolean) and quoted_string (a -- you guessed it -- string). specific is also a dictionary, with keys setting1 (a string) and setting2 , a dictionary with two keys, one a string and the other again a list. Finally, the_end is just a boolean, since an unquoted yes evaluates as a boolean value as we saw in the section about boolean scalars above . Don't get confused by the list \"dividing\" one part of the dictionary under general from the other -- your mind is just playing a trick on you due to the list's dashes - being on the same levels as the dictionary keys. You could also just add two more spaces to your indentation and write that part like this, which makes the structure a bit clearer (whitespace again made visible to help track indentation): general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes Just make sure you follow a consistent way of indenting your files -- YAML is not as strict as Python when it comes to differing indentation variants within the same file (as long as it's still valid), but consistency will help you as a lot as a human. Ideally you'll use a text editor which highlights white space characters for you (most editors can be configured this way), this will help tremendously when editing whitespace sensitive syntax such as YAML.","title":"A YAML primer"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer","text":"Most of OctoPrint's configuration is done under the hood through YAML files, which is why it makes sense to shed some light on the basics of this data serialization format. YAML is a text based format which excels at representing the most common of data structures in an easy and very human readable way, which is why it was chosen for OctoPrint's configuration files. A text editor is all you need in order to write YAML configuration files.","title":"A YAML Primer"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.basic","text":"First of all some basic things to know about working with YAML files: Never use tabs outside of quoted strings, especially not for indentation. The tab character is illegal within YAML files. Whitespace and indentation matters and plays an important part in structuring the data, so take special care to stay consistent here. YAML's comments start with a # and go until the end of the line.","title":"Basic Rules"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types","text":"You will probably only come across the three most basic types of data within OctoPrint's YAML files: scalars (such as strings, integers, ...), lists and associated arrays (aka key-value-pairs, aka maps, aka dictionaries).","title":"Interesting data types"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar","text":"Scalars are the most basic of all data types and are simple string, integer, float or boolean values. For most scalars you don't need any quotes at all, but if you need to define some piece of data which contains characters that could be mistaken with YAML syntax you need to quote it in either double \" or single ' quotes for the YAML file to stay valid. As simple rule of thumb, if your data contains any of these characters :-{}[]!#|>&%@ better quote it. Also quote it if you want a string but it could be mistaken for a valid number (integer or float) or if it consists only of \"Yes\", \"No\", \"yes\", \"no\", \"true\" or \"false\", which would be converted to a boolean without quotes. In double quoted strings if you need to include a literal double quote in your string you can escape it by prefixing it with a backslash \\ (which you can in turn escape by itself). In single quoted strings the single quote character can be escaped by prefixing it with another single quote, basically doubling it. Backslashes in single quoted strings do not need to be escaped. Quoted strings can also span across multiple lines, just indent the following lines. Note that you'll need to add a completely empty line in order for force a line break, the data will not be actually wrapped across multiple lines just because you spread its representation across multiple lines.","title":"Scalars"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.int","text":"23 42","title":"int"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.float","text":"23.5 100.0","title":"float"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.boolean","text":"true false Yes No yes no","title":"boolean"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.scalar.string","text":"a string \"some quoted string with a : colon and a { bracket and a quote \\\" and a backslash \\\\ - phew\" 'some single quoted string with a single quote '' and a backslash \\ - yay' \"and a multiline string - just because we can we'll make it span across not two but four YAML lines! Including this paragraph. But in fact it will only be two lines :)\" \"23\" \"42.3\" \"Yes\" \"No\" \"true\" \"false\" yes and no true or false","title":"string"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.list","text":"Lists allow to \"collect\" a number of similar things into one data structure. They are created by prefixing one or more consecutive lines with a - : - item 1 - 23.42 - 57 - true Take special care to have all of your list items at the same indentation level!","title":"Lists"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.types.dict","text":"Dictionaries (aka associative arrays aka maps) allow organizing the data in key value pairs, with the key and the value being separated through a colon : : key : value anotherkey : another value","title":"Dictionaries"},{"location":"user-guide/configuration/yaml-primer/#user-guide.configuration.yaml-primer.examples","text":"Based on the three types explained above, quite complex data structures are possible: general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes In this example we have a dictionary on the top most \"layer\" which has three keys, general , specific and the_end . general in turn is a dictionary with the keys some_setting (a string), a_list (a list with four items, a string, a float, an int and a boolean), some_flag (a boolean) and quoted_string (a -- you guessed it -- string). specific is also a dictionary, with keys setting1 (a string) and setting2 , a dictionary with two keys, one a string and the other again a list. Finally, the_end is just a boolean, since an unquoted yes evaluates as a boolean value as we saw in the section about boolean scalars above . Don't get confused by the list \"dividing\" one part of the dictionary under general from the other -- your mind is just playing a trick on you due to the list's dashes - being on the same levels as the dictionary keys. You could also just add two more spaces to your indentation and write that part like this, which makes the structure a bit clearer (whitespace again made visible to help track indentation): general : some_setting : some_value a_list : - item 1 - 23.42 - 57 - true some_flag : true quoted_string : \"This string is quoted because {we have this here} and also > this and : that\" specific : setting1 : value1 setting2 : subsetting21 : value21 subsetting22 : - subsubsetting221 - subsubsetting222 - subsubsetting223 the_end : yes Just make sure you follow a consistent way of indenting your files -- YAML is not as strict as Python when it comes to differing indentation variants within the same file (as long as it's still valid), but consistency will help you as a lot as a human. Ideally you'll use a text editor which highlights white space characters for you (most editors can be configured this way), this will help tremendously when editing whitespace sensitive syntax such as YAML.","title":"Examples"},{"location":"user-guide/features/access-control/","text":"","title":"Access control"},{"location":"user-guide/features/action-commands/","text":"","title":"Action commands"},{"location":"user-guide/features/at-commands/","text":"","title":"At commands"},{"location":"user-guide/features/custom-controls/","text":"","title":"Custom controls"},{"location":"user-guide/features/gcode-scripts/","text":"","title":"GCode scripts"},{"location":"user-guide/features/plugins/","text":"","title":"Plugins"},{"location":"user-guide/features/safe-mode/","text":"Safe mode # New in version 1.3.0. Changed in version 1.3.13. With the advent of support for plugins in OctoPrint, it quickly became apparent that some of the bugs reported on OctoPrint's bug tracker were actually bugs with installed third party plugins or language packs instead of OctoPrint itself. To allow an easier identification of these cases, OctoPrint 1.3.0 introduced safe mode. Starting OctoPrint in safe mode disables all plugins (and starting with 1.3.13 also all language packs) that are not bundled with OctoPrint, allowing to easier identify most cases where a third party plugin or language pack is the culprit of an observed issue. Additionally, OctoPrint allows uninstalling plugins and language packs in this mode, allowing recovery from cases where a third party addition causes the server to not start up or the web interface to not render or function correctly anymore. Whenever reporting an issue with OctoPrint, please always attempt to reproduce it in safe mode as well to ensure it really is an issue in OctoPrint itself and now caused by one of your installed third party additions. How to start OctoPrint in safe mode # There exist three ways to start OctoPrint in safe mode. Via the \"Restart OctoPrint in safe mode\" system menu entry # New in version 1.3.2. You can select \"Restart OctoPrint in safe mode\" from the \"System\" menu, if the \"Restart OctoPrint\" server command has been correctly configured. \"Restart OctoPrint in safe mode\" in the \"System\" menu Via the server.startOnceInSafeMode config flag # You can set the flag server.startOnceInSafeMode in config.yaml to true and restart. This will make OctoPrint start up in safe mode. The flag will clear automatically. To set this flag you have the following options: from command line run octoprint safemode 1 (since OctoPrint 1.3.6) from command line run octoprint config set --bool server.startOnceInSafeMode true 1 edit config.yaml manually with a text editor, locate the server block if it already exists or create it if it doesn't and add startOnceInSafeMode: true to it: server : startOnceInSafeMode : true Please also refer to the YAML primer . Via the --safe command line flag # You can start OctoPrint in safe mode with the command line parameter --safe , e.g. octoprint serve --safe 1 . Don't forget to shutdown OctoPrint first before doing this. Differences of safe mode vs normal operation mode # When OctoPrint is running in safe mode the following changes to its normal operation mode apply: OctoPrint will not enable any of the installed third party plugins. OctoPrint considers all plugins third party plugins that do not ship with OctoPrint's sources, so any plugins installed either via pip or into OctoPrint's plugin folder 2 . OctoPrint will not enable any of the installed third party language packs. OctoPrint considers all language packs third party language packs that do not ship with OctoPrint's sources, so any language plugins installed through the language pack manager within settings and/or stored in the language pack folder 3 . OctoPrint will still allow to uninstall third party plugins through the built-in Plugin Manager. OctoPrint will still allow to disable (bundled) plugins that are still enabled. OctoPrint will not allow to enable third party plugins. OctoPrint will still allow to manage language packs. OctoPrint's web interface will display a notification to remind you that it is running in safe mode. Safe mode notification OctoPi users : For you that's ~/oprint/bin/octoprint wherever it says just octoprint . \u21a9 \u21a9 \u21a9 ~/.octoprint/plugins (Linux), %APPDATA%/OctoPrint/plugins (Windows) or ~/Library/Application Support/OctoPrint/plugins (macOS) \u21a9 ~/.octoprint/translations (Linux), %APPDATA%/OctoPrint/translations (Windows) or ~/Library/Application Support/OctoPrint/translations (macOS) \u21a9","title":"Safe mode"},{"location":"user-guide/features/safe-mode/#user-guide.features.safe-mode","text":"New in version 1.3.0. Changed in version 1.3.13. With the advent of support for plugins in OctoPrint, it quickly became apparent that some of the bugs reported on OctoPrint's bug tracker were actually bugs with installed third party plugins or language packs instead of OctoPrint itself. To allow an easier identification of these cases, OctoPrint 1.3.0 introduced safe mode. Starting OctoPrint in safe mode disables all plugins (and starting with 1.3.13 also all language packs) that are not bundled with OctoPrint, allowing to easier identify most cases where a third party plugin or language pack is the culprit of an observed issue. Additionally, OctoPrint allows uninstalling plugins and language packs in this mode, allowing recovery from cases where a third party addition causes the server to not start up or the web interface to not render or function correctly anymore. Whenever reporting an issue with OctoPrint, please always attempt to reproduce it in safe mode as well to ensure it really is an issue in OctoPrint itself and now caused by one of your installed third party additions.","title":"Safe mode"},{"location":"user-guide/features/safe-mode/#user-guide.features.safe-mode.start","text":"There exist three ways to start OctoPrint in safe mode.","title":"How to start OctoPrint in safe mode"},{"location":"user-guide/features/safe-mode/#via-the-restart-octoprint-in-safe-mode-system-menu-entry","text":"New in version 1.3.2. You can select \"Restart OctoPrint in safe mode\" from the \"System\" menu, if the \"Restart OctoPrint\" server command has been correctly configured. \"Restart OctoPrint in safe mode\" in the \"System\" menu","title":"Via the \"Restart OctoPrint in safe mode\" system menu entry"},{"location":"user-guide/features/safe-mode/#via-the-serverstartonceinsafemode-config-flag","text":"You can set the flag server.startOnceInSafeMode in config.yaml to true and restart. This will make OctoPrint start up in safe mode. The flag will clear automatically. To set this flag you have the following options: from command line run octoprint safemode 1 (since OctoPrint 1.3.6) from command line run octoprint config set --bool server.startOnceInSafeMode true 1 edit config.yaml manually with a text editor, locate the server block if it already exists or create it if it doesn't and add startOnceInSafeMode: true to it: server : startOnceInSafeMode : true Please also refer to the YAML primer .","title":"Via the server.startOnceInSafeMode config flag"},{"location":"user-guide/features/safe-mode/#via-the-safe-command-line-flag","text":"You can start OctoPrint in safe mode with the command line parameter --safe , e.g. octoprint serve --safe 1 . Don't forget to shutdown OctoPrint first before doing this.","title":"Via the --safe command line flag"},{"location":"user-guide/features/safe-mode/#user-guide.features.safe-mode.differences","text":"When OctoPrint is running in safe mode the following changes to its normal operation mode apply: OctoPrint will not enable any of the installed third party plugins. OctoPrint considers all plugins third party plugins that do not ship with OctoPrint's sources, so any plugins installed either via pip or into OctoPrint's plugin folder 2 . OctoPrint will not enable any of the installed third party language packs. OctoPrint considers all language packs third party language packs that do not ship with OctoPrint's sources, so any language plugins installed through the language pack manager within settings and/or stored in the language pack folder 3 . OctoPrint will still allow to uninstall third party plugins through the built-in Plugin Manager. OctoPrint will still allow to disable (bundled) plugins that are still enabled. OctoPrint will not allow to enable third party plugins. OctoPrint will still allow to manage language packs. OctoPrint's web interface will display a notification to remind you that it is running in safe mode. Safe mode notification OctoPi users : For you that's ~/oprint/bin/octoprint wherever it says just octoprint . \u21a9 \u21a9 \u21a9 ~/.octoprint/plugins (Linux), %APPDATA%/OctoPrint/plugins (Windows) or ~/Library/Application Support/OctoPrint/plugins (macOS) \u21a9 ~/.octoprint/translations (Linux), %APPDATA%/OctoPrint/translations (Windows) or ~/Library/Application Support/OctoPrint/translations (macOS) \u21a9","title":"Differences of safe mode vs normal operation mode"}]}